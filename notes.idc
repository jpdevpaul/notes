// Generated by Scripture (https://github.com/predelnik/scripture)
// Warning: script will aggressively change name of the functions and redefine structs if there's name collision. Use with care.

#include <idc.idc>


	static cleanup(name) {
	auto addr = get_name_ea_simple (name);
	if (addr != BADADDR) set_name (addr, "");
	auto id = find_custom_data_type (name);
	if (id != -1) set_local_type (-1, "", 0);
	id = get_struc_id ("{}");
	if (id != -1) del_struc(id);
	id = get_enum ("{}");
	if (id != -1) del_enum(id);
}
	
static main() {
auto id = -1;
auto addr = -1;
auto member_id = -1;
cleanup("uint8_t");set_local_type (-1, "typedef unsigned  __int8 uint8_t", 0);
cleanup("int8_t");set_local_type (-1, "typedef  __int8 int8_t", 0);
cleanup("bool8_t");set_local_type (-1, "typedef  __int8 bool8_t", 0);
cleanup("uint16_t");set_local_type (-1, "typedef unsigned  __int16 uint16_t", 0);
cleanup("int16_t");set_local_type (-1, "typedef  __int16 int16_t", 0);
cleanup("bool16_t");set_local_type (-1, "typedef  __int16 bool16_t", 0);
cleanup("uint32_t");set_local_type (-1, "typedef unsigned  __int32 uint32_t", 0);
cleanup("int32_t");set_local_type (-1, "typedef  __int32 int32_t", 0);
cleanup("bool32_t");set_local_type (-1, "typedef  __int32 bool32_t", 0);
cleanup("affix_item_type");id = add_enum (-1, "affix_item_type", FF_0NUMH);
set_enum_cmt (id, "Bit flag which is used to determine if affix could be applied to certain type of items.\nAs it can be noted each flag just represents one or more values from `item_type` enumeration.", 0);
add_enum_member (id, "AFFIX_ITEM_TYPE_JEWELRY", 1, -1);
add_enum_member (id, "AFFIX_ITEM_TYPE_BOW", 16, -1);
add_enum_member (id, "AFFIX_ITEM_TYPE_STAFF", 256, -1);
add_enum_member (id, "AFFIX_ITEM_TYPE_WEAPON", 4096, -1);
add_enum_member (id, "AFFIX_ITEM_TYPE_SHIELD", 65536, -1);
add_enum_member (id, "AFFIX_ITEM_TYPE_ARMOR", 1048576, -1);
set_enum_bf (id, 1);
cleanup("attribute_id");id = add_enum (-1, "attribute_id", FF_0NUMD);
set_enum_cmt (id, "Attribute IDs.", 0);
add_enum_member (id, "ATTRIBUTE_ID_STR", 0, -1);
add_enum_member (id, "ATTRIBUTE_ID_MAG", 1, -1);
add_enum_member (id, "ATTRIBUTE_ID_DEX", 2, -1);
add_enum_member (id, "ATTRIBUTE_ID_VIT", 3, -1);
cleanup("block_flag");id = add_enum (-1, "block_flag", FF_0NUMH);
set_enum_cmt (id, "MPQ block flags.", 0);
add_enum_member (id, "BLOCK_FLAG_IMPLODE", 256, -1);
set_enum_member_cmt (get_enum_member_by_name ("BLOCK_FLAG_IMPLODE"), " compressed file (PKWARE)", 0);add_enum_member (id, "BLOCK_FLAG_COMPRESS", 512, -1);
set_enum_member_cmt (get_enum_member_by_name ("BLOCK_FLAG_COMPRESS"), " compressed file", 0);add_enum_member (id, "BLOCK_FLAG_ENCRYPTED", 65536, -1);
set_enum_member_cmt (get_enum_member_by_name ("BLOCK_FLAG_ENCRYPTED"), " encrypted file", 0);add_enum_member (id, "BLOCK_FLAG_POSITION_DEPENDENT_KEY", 131072, -1);
set_enum_member_cmt (get_enum_member_by_name ("BLOCK_FLAG_POSITION_DEPENDENT_KEY"), " position dependent decryption key", 0);add_enum_member (id, "BLOCK_FLAG_PATCH_FILE", 1048576, -1);
set_enum_member_cmt (get_enum_member_by_name ("BLOCK_FLAG_PATCH_FILE"), " incremental patch file for an existing file in the base MPQ", 0);add_enum_member (id, "BLOCK_FLAG_SINGLE_UNIT", 16777216, -1);
set_enum_member_cmt (get_enum_member_by_name ("BLOCK_FLAG_SINGLE_UNIT"), " file contained in a single unit, not split in sectors", 0);add_enum_member (id, "BLOCK_FLAG_DELETED", 33554432, -1);
set_enum_member_cmt (get_enum_member_by_name ("BLOCK_FLAG_DELETED"), " deleted file; used by patch archives to delete files in lower-priority archives", 0);add_enum_member (id, "BLOCK_FLAG_SECTOR_CRC", 67108864, -1);
set_enum_member_cmt (get_enum_member_by_name ("BLOCK_FLAG_SECTOR_CRC"), " sector CRC checksums", 0);add_enum_member (id, "BLOCK_FLAG_EXISTS", 2147483648, -1);
set_enum_member_cmt (get_enum_member_by_name ("BLOCK_FLAG_EXISTS"), " file present", 0);set_enum_bf (id, 1);
cleanup("block_index");id = add_enum (-1, "block_index", FF_0NUMD);
set_enum_cmt (id, "Special block indices.", 0);
add_enum_member (id, "BLOCK_INDEX_HASH_ENTRY_EMPTY", -1, -1);
add_enum_member (id, "BLOCK_INDEX_HASH_ENTRY_DELETED", -2, -1);
cleanup("cmd");id = add_enum (-1, "cmd", FF_0NUMD);
set_enum_cmt (id, "Network message commands.", 0);
add_enum_member (id, "CMD_0", 0, -1);
cleanup("cursor_id");id = add_enum (-1, "cursor_id", FF_0NUMD);
set_enum_cmt (id, "Cursor IDs; frame_num+1 of objcurs.cel.", 0);
add_enum_member (id, "CURSOR_ID_NONE", 0, -1);
add_enum_member (id, "CURSOR_ID_HAND", 1, -1);
add_enum_member (id, "CURSOR_ID_IDENTIFY", 2, -1);
add_enum_member (id, "CURSOR_ID_ITEM_REPAIR", 3, -1);
add_enum_member (id, "CURSOR_ID_STAFF_RECHARGE", 4, -1);
add_enum_member (id, "CURSOR_ID_TRAP_DISARM", 5, -1);
add_enum_member (id, "CURSOR_ID_OIL", 6, -1);
add_enum_member (id, "CURSOR_ID_TELEKINESIS", 7, -1);
add_enum_member (id, "CURSOR_ID_RESURRECT", 8, -1);
add_enum_member (id, "CURSOR_ID_TELEPORT", 9, -1);
add_enum_member (id, "CURSOR_ID_HEAL_OTHER", 10, -1);
add_enum_member (id, "CURSOR_ID_HOURGLASS", 11, -1);
add_enum_member (id, "CURSOR_ID_FIRST_ITEM", 12, -1);
cleanup("damage_type");id = add_enum (-1, "damage_type", FF_0NUMD);
set_enum_cmt (id, "Damage types.", 0);
add_enum_member (id, "DAMAGE_TYPE_NONE", 0, -1);
add_enum_member (id, "DAMAGE_TYPE_FIRE", 1, -1);
add_enum_member (id, "DAMAGE_TYPE_LIGHTNING", 2, -1);
add_enum_member (id, "DAMAGE_TYPE_MAGIC", 3, -1);
add_enum_member (id, "DAMAGE_TYPE_ACID", 4, -1);
cleanup("direction");id = add_enum (-1, "direction", FF_0NUMD);
set_enum_cmt (id, "Directions.\n# Map layout\n                 (x=0 y=0)\n                     _\n                    / \\n                   /   \\n              y   /     \   x\n                 /       \\n                /         \\n   (x=0 y=95)  |           |  (x=95 y=0)\n                \         /\n                 \       /\n                  \     /\n                   \   /\n                    \_/\n                (x=95 y=95)\n# Step based on direction\n   * South      (x+1, y+1)\n   * South west (x,   y+1)\n   * West       (x-1, y+1)\n   * North west (x-1, y)\n   * North      (x-1, y-1)\n   * North east (x,   y-1)\n   * East       (x+1, y-1)\n   * South east (x+1, y)", 0);
add_enum_member (id, "DIRECTION_SOUTH", 0, -1);
add_enum_member (id, "DIRECTION_SOUTH_WEST", 1, -1);
add_enum_member (id, "DIRECTION_WEST", 2, -1);
add_enum_member (id, "DIRECTION_NORTH_WEST", 3, -1);
add_enum_member (id, "DIRECTION_NORTH", 4, -1);
add_enum_member (id, "DIRECTION_NORTH_EAST", 5, -1);
add_enum_member (id, "DIRECTION_EAST", 6, -1);
add_enum_member (id, "DIRECTION_SOUTH_EAST", 7, -1);
add_enum_member (id, "DIRECTION_OMNI", 8, -1);
set_enum_member_cmt (get_enum_member_by_name ("DIRECTION_OMNI"), " All directions.", 0);cleanup("dungeon_type");id = add_enum (-1, "dungeon_type", FF_0NUMD);
set_enum_cmt (id, "Dungeon types.", 0);
add_enum_member (id, "DUNGEON_TYPE_TRISTRAM", 0, -1);
set_enum_member_cmt (get_enum_member_by_name ("DUNGEON_TYPE_TRISTRAM"), " dlvl:       0", 0);add_enum_member (id, "DUNGEON_TYPE_CATHEDRAL", 1, -1);
set_enum_member_cmt (get_enum_member_by_name ("DUNGEON_TYPE_CATHEDRAL"), " dlvl:  1 -  4", 0);add_enum_member (id, "DUNGEON_TYPE_CATACOMBS", 2, -1);
set_enum_member_cmt (get_enum_member_by_name ("DUNGEON_TYPE_CATACOMBS"), " dlvl:  5 -  8", 0);add_enum_member (id, "DUNGEON_TYPE_CAVES", 3, -1);
set_enum_member_cmt (get_enum_member_by_name ("DUNGEON_TYPE_CAVES"), " dlvl:  9 - 12", 0);add_enum_member (id, "DUNGEON_TYPE_HELL", 4, -1);
set_enum_member_cmt (get_enum_member_by_name ("DUNGEON_TYPE_HELL"), " dlvl: 13 - 16", 0);add_enum_member (id, "DUNGEON_TYPE_NONE", -1, -1);
cleanup("enterance_open");id = add_enum (-1, "enterance_open", FF_0NUMD);
set_enum_cmt (id, "Enterances to town (warp), used as bitfield.", 0);
add_enum_member (id, "ENTERANCE_OPEN_CATACOMBS", 1, -1);
add_enum_member (id, "ENTERANCE_OPEN_CAVES", 2, -1);
add_enum_member (id, "ENTERANCE_OPEN_HELL", 4, -1);
cleanup("error_id");id = add_enum (-1, "error_id", FF_0NUMD);
set_enum_cmt (id, "Error IDs for on screen error messages.", 0);
add_enum_member (id, "ERROR_ID_NONE", 0, -1);
add_enum_member (id, "ERROR_ID_NO_AUTOMAP_AVAILABLE_IN_TOWN", 1, -1);
add_enum_member (id, "ERROR_ID_NO_MULTIPLAYER_FUNCTIONS_IN_DEMO", 2, -1);
add_enum_member (id, "ERROR_ID_DS_INIT_FAILED", 3, -1);
add_enum_member (id, "ERROR_ID_NOT_AVAILABLE_IN_SHAREWARE_VERSION", 4, -1);
add_enum_member (id, "ERROR_ID_NOT_ENOUGH_SPACE_TO_SAVE", 5, -1);
add_enum_member (id, "ERROR_ID_NO_PAUSE_IN_TOWN", 6, -1);
add_enum_member (id, "ERROR_ID_COPYING_TO_A_HARD_DISK_IS_RECOMMENDED", 7, -1);
add_enum_member (id, "ERROR_ID_MULTIPLAYER_SYNC_PROBLEM", 8, -1);
add_enum_member (id, "ERROR_ID_NO_PAUSE_IN_MULTIPLAYER", 9, -1);
add_enum_member (id, "ERROR_ID_LOADING", 10, -1);
add_enum_member (id, "ERROR_ID_SAVING", 11, -1);
add_enum_member (id, "ERROR_ID_SHRINE_MYSTERIOUS", 12, -1);
add_enum_member (id, "ERROR_ID_SHRINE_HIDDEN", 13, -1);
add_enum_member (id, "ERROR_ID_SHRINE_GLOOMY", 14, -1);
add_enum_member (id, "ERROR_ID_SHRINE_WEIRD", 15, -1);
add_enum_member (id, "ERROR_ID_SHRINE_MAGICAL_1", 16, -1);
add_enum_member (id, "ERROR_ID_SHRINE_STONE", 17, -1);
add_enum_member (id, "ERROR_ID_SHRINE_RELIGIOUS", 18, -1);
add_enum_member (id, "ERROR_ID_SHRINE_ENCHANTED", 19, -1);
add_enum_member (id, "ERROR_ID_SHRINE_THAUMATURGIC", 20, -1);
add_enum_member (id, "ERROR_ID_SHRINE_FASCINATING", 21, -1);
add_enum_member (id, "ERROR_ID_SHRINE_CRYPTIC", 22, -1);
add_enum_member (id, "ERROR_ID_SHRINE_MAGICAL_2", 23, -1);
add_enum_member (id, "ERROR_ID_SHRINE_ELDRITCH", 24, -1);
add_enum_member (id, "ERROR_ID_SHRINE_EERIE", 25, -1);
add_enum_member (id, "ERROR_ID_SHRINE_DIVINE", 26, -1);
add_enum_member (id, "ERROR_ID_SHRINE_HOLY", 27, -1);
add_enum_member (id, "ERROR_ID_SHRINE_SACRED", 28, -1);
add_enum_member (id, "ERROR_ID_SHRINE_SPIRITUAL", 29, -1);
add_enum_member (id, "ERROR_ID_SHRINE_SPOOKY_YOU", 30, -1);
add_enum_member (id, "ERROR_ID_SHRINE_SPOOKY_OTHERS", 31, -1);
add_enum_member (id, "ERROR_ID_SHRINE_ABANDONED", 32, -1);
add_enum_member (id, "ERROR_ID_SHRINE_CREEPY", 33, -1);
add_enum_member (id, "ERROR_ID_SHRINE_QUIET", 34, -1);
add_enum_member (id, "ERROR_ID_SHRINE_SECLUDED", 35, -1);
add_enum_member (id, "ERROR_ID_SHRINE_ORNATE", 36, -1);
add_enum_member (id, "ERROR_ID_SHRINE_GLIMMERING", 37, -1);
add_enum_member (id, "ERROR_ID_SHRINE_TAINTED_YOU", 38, -1);
add_enum_member (id, "ERROR_ID_SHRINE_TAINTED_OTHERS", 39, -1);
add_enum_member (id, "ERROR_ID_CLVL_8_REQUIRED", 40, -1);
add_enum_member (id, "ERROR_ID_CLVL_13_REQUIRED", 41, -1);
add_enum_member (id, "ERROR_ID_CLVL_17_REQUIRED", 42, -1);
add_enum_member (id, "ERROR_ID_ARCANE_KNOWLEDGE_GAINED", 43, -1);
cleanup("event_type");id = add_enum (-1, "event_type", FF_0NUMD);
set_enum_cmt (id, "Event types for multiplayer games.", 0);
add_enum_member (id, "EVENT_TYPE_PLAYER_CREATE_GAME", 1, -1);
add_enum_member (id, "EVENT_TYPE_2", 2, -1);
add_enum_member (id, "EVENT_TYPE_PLAYER_LEAVE_GAME", 3, -1);
add_enum_member (id, "EVENT_TYPE_PLAYER_MESSAGE", 4, -1);
add_enum_member (id, "EVENT_TYPE_5", 5, -1);
add_enum_member (id, "EVENT_TYPE_6", 6, -1);
add_enum_member (id, "EVENT_TYPE_7", 7, -1);
add_enum_member (id, "EVENT_TYPE_8", 8, -1);
add_enum_member (id, "EVENT_TYPE_9", 9, -1);
add_enum_member (id, "EVENT_TYPE_10", 10, -1);
add_enum_member (id, "EVENT_TYPE_11", 11, -1);
add_enum_member (id, "EVENT_TYPE_12", 12, -1);
add_enum_member (id, "EVENT_TYPE_13", 13, -1);
add_enum_member (id, "EVENT_TYPE_14", 14, -1);
add_enum_member (id, "EVENT_TYPE_15", 15, -1);
cleanup("game_info");id = add_enum (-1, "game_info", FF_0NUMD);
set_enum_cmt (id, "Network game information.", 0);
add_enum_member (id, "GAME_INFO_NAME", 1, -1);
add_enum_member (id, "GAME_INFO_PASS", 2, -1);
cleanup("interface_mode");id = add_enum (-1, "interface_mode", FF_0NUMD);
set_enum_cmt (id, "User-defined events for signaling interface mode changes.", 0);
add_enum_member (id, "INTERFACE_MODE_402", 1026, -1);
add_enum_member (id, "INTERFACE_MODE_403", 1027, -1);
add_enum_member (id, "INTERFACE_MODE_404", 1028, -1);
add_enum_member (id, "INTERFACE_MODE_405", 1029, -1);
add_enum_member (id, "INTERFACE_MODE_406", 1030, -1);
add_enum_member (id, "INTERFACE_MODE_407", 1031, -1);
add_enum_member (id, "INTERFACE_MODE_408", 1032, -1);
add_enum_member (id, "INTERFACE_MODE_409", 1033, -1);
add_enum_member (id, "INTERFACE_MODE_40A", 1034, -1);
add_enum_member (id, "INTERFACE_MODE_40B", 1035, -1);
cleanup("item_class");id = add_enum (-1, "item_class", FF_0NUMD);
set_enum_cmt (id, "Broad item categorization.", 0);
add_enum_member (id, "ITEM_CLASS_NONE", 0, -1);
add_enum_member (id, "ITEM_CLASS_WEAPON", 1, -1);
add_enum_member (id, "ITEM_CLASS_ARMOR", 2, -1);
add_enum_member (id, "ITEM_CLASS_JEWELRY_AND_CONSUMABLE", 3, -1);
add_enum_member (id, "ITEM_CLASS_GOLD", 4, -1);
add_enum_member (id, "ITEM_CLASS_QUEST", 5, -1);
cleanup("item_drop_id");id = add_enum (-1, "item_drop_id", FF_0NUMD);
set_enum_cmt (id, "Item drop IDs, used for the graphics of item drop animations.", 0);
add_enum_member (id, "ITEM_DROP_ID_MEDIUM_ARMOR", 0, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_MEDIUM_ARMOR"), " Armor2", 0);add_enum_member (id, "ITEM_DROP_ID_AXE", 1, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_AXE"), " Axe", 0);add_enum_member (id, "ITEM_DROP_ID_BOTTLE_DARK_RED", 2, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_BOTTLE_DARK_RED"), " FBttle", 0);add_enum_member (id, "ITEM_DROP_ID_BOW", 3, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_BOW"), " Bow", 0);add_enum_member (id, "ITEM_DROP_ID_GOLD", 4, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_GOLD"), " GoldFlip", 0);add_enum_member (id, "ITEM_DROP_ID_HELM", 5, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_HELM"), " Helmut", 0);add_enum_member (id, "ITEM_DROP_ID_MACE", 6, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_MACE"), " Mace", 0);add_enum_member (id, "ITEM_DROP_ID_SHIELD", 7, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_SHIELD"), " Shield", 0);add_enum_member (id, "ITEM_DROP_ID_SWORD", 8, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_SWORD"), " SwrdFlip", 0);add_enum_member (id, "ITEM_DROP_ID_MAGIC_ROCK", 9, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_MAGIC_ROCK"), " Rock", 0);add_enum_member (id, "ITEM_DROP_ID_CLEAVER", 10, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_CLEAVER"), " Cleaver", 0);add_enum_member (id, "ITEM_DROP_ID_STAFF", 11, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_STAFF"), " Staff", 0);add_enum_member (id, "ITEM_DROP_ID_RING", 12, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_RING"), " Ring", 0);add_enum_member (id, "ITEM_DROP_ID_CROWN", 13, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_CROWN"), " CrownF", 0);add_enum_member (id, "ITEM_DROP_ID_LIGHT_ARMOR", 14, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_LIGHT_ARMOR"), " LArmor", 0);add_enum_member (id, "ITEM_DROP_ID_WOODEN_SHIELD", 15, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_WOODEN_SHIELD"), " WShield", 0);add_enum_member (id, "ITEM_DROP_ID_SCROLL", 16, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_SCROLL"), " Scroll", 0);add_enum_member (id, "ITEM_DROP_ID_HEAVY_ARMOR", 17, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_HEAVY_ARMOR"), " FPlateAr", 0);add_enum_member (id, "ITEM_DROP_ID_BOOK", 18, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_BOOK"), " FBook", 0);add_enum_member (id, "ITEM_DROP_ID_FOOD", 19, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_FOOD"), " Food", 0);add_enum_member (id, "ITEM_DROP_ID_BOTTLE_BRIGHT_BLUE", 20, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_BOTTLE_BRIGHT_BLUE"), " FBttleBB", 0);add_enum_member (id, "ITEM_DROP_ID_BOTTLE_DARK_YELLOW", 21, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_BOTTLE_DARK_YELLOW"), " FBttleDY", 0);add_enum_member (id, "ITEM_DROP_ID_BOTTLE_ORANGE", 22, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_BOTTLE_ORANGE"), " FBttleOR", 0);add_enum_member (id, "ITEM_DROP_ID_BOTTLE_BRIGHT_RED", 23, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_BOTTLE_BRIGHT_RED"), " FBttleBR", 0);add_enum_member (id, "ITEM_DROP_ID_BOTTLE_BLACK", 24, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_BOTTLE_BLACK"), " FBttleBL", 0);add_enum_member (id, "ITEM_DROP_ID_BOTTLE_BRIGHT_YELLOW", 25, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_BOTTLE_BRIGHT_YELLOW"), " FBttleBY", 0);add_enum_member (id, "ITEM_DROP_ID_BOTTLE_WHITE", 26, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_BOTTLE_WHITE"), " FBttleWH", 0);add_enum_member (id, "ITEM_DROP_ID_BOTTLE_DARK_BLUE", 27, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_BOTTLE_DARK_BLUE"), " FBttleDB", 0);add_enum_member (id, "ITEM_DROP_ID_EAR", 28, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_EAR"), " FEar", 0);add_enum_member (id, "ITEM_DROP_ID_BRAIN", 29, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_BRAIN"), " FBrain", 0);add_enum_member (id, "ITEM_DROP_ID_BLACK_MUSHROOM", 30, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_BLACK_MUSHROOM"), " FMush", 0);add_enum_member (id, "ITEM_DROP_ID_TAVERN_SIGN", 31, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_TAVERN_SIGN"), " Innsign", 0);add_enum_member (id, "ITEM_DROP_ID_BLOOD_STONE", 32, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_BLOOD_STONE"), " Bldstn", 0);add_enum_member (id, "ITEM_DROP_ID_ANVIL_OF_FURY", 33, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_ANVIL_OF_FURY"), " Fanvil", 0);add_enum_member (id, "ITEM_DROP_ID_STAFF_OF_LAZARUS", 34, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_ID_STAFF_OF_LAZARUS"), " FLazStaf", 0);cleanup("item_drop_rate");id = add_enum (-1, "item_drop_rate", FF_0NUMD);
set_enum_cmt (id, "Item drop rates.", 0);
add_enum_member (id, "ITEM_DROP_RATE_NEVER", 0, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_RATE_NEVER"), " never drops.", 0);add_enum_member (id, "ITEM_DROP_RATE_REGULAR", 1, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_RATE_REGULAR"), " regular drop chance.", 0);add_enum_member (id, "ITEM_DROP_RATE_DOUBLE", 2, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_DROP_RATE_DOUBLE"), " twice as likely to drop.", 0);cleanup("item_drop_state");id = add_enum (-1, "item_drop_state", FF_0NUMD);
add_enum_member (id, "ITEM_DROP_STATE_STARTED", 0, -1);
add_enum_member (id, "ITEM_DROP_STATE_COMPLETE", 1, -1);
add_enum_member (id, "ITEM_DROP_STATE_GLIMMERING", 2, -1);
add_enum_member (id, "ITEM_DROP_STATE_UNKNOWN", 3, -1);
cleanup("item_effect_type");id = add_enum (-1, "item_effect_type", FF_0NUMD);
set_enum_cmt (id, "Type of effect caused by suffix, prefix of magic item or one of 5 or less\neffects of unique item.", 0);
add_enum_member (id, "ITEM_EFFECT_TYPE_TO_HIT_PLUS", 0, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_TO_HIT_MINUS", 1, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_PERCENT_ATTACK_DAMAGE_PLUS", 2, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_PERCENT_ATTACK_DAMAGE_MINUS", 3, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_TO_HIT_AND_PERCENT_ATTACK_DAMAGE_PLUS", 4, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_TO_HIT_AND_PERCENT_ATTACK_DAMAGE_MINUS", 5, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_ARMOR_CLASS_PERCENT_PLUS", 6, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_ARMOR_CLASS_PERCENT_MINUS", 7, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_FIRE_RESISTANCE_BONUS", 8, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_LIGHTNING_RESISTANCE_BONUS", 9, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_MAGIC_RESISTANCE_BONUS", 10, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_ALL_RESISTANCES_BONUS", 11, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_SPELL_LEVELS_PLUS", 14, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_EXTRA_CHARGES", 15, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_FIRE_DAMAGE_BONUS", 16, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_LIGHTNING_DAMAGE_BONUS", 17, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_STRENGTH_PLUS", 19, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_STRENGTH_MINUS", 20, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_MAGIC_PLUS", 21, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_MAGIC_MINUS", 22, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_DEXTERITY_PLUS", 23, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_DEXTERITY_MINUS", 24, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_VITALITY_PLUS", 25, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_VITALITY_MINUS", 26, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_ALL_ATTRIBUTES_PLUS", 27, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_ALL_ATTRIBUTES_MINUS", 28, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_DAMAGE_TAKEN_PLUS", 29, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_DAMAGE_TAKEN_MINUS", 30, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_LIFE_PLUS", 31, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_LIFE_MINUS", 32, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_MANA_PLUS", 33, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_MANA_MINUS", 34, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_DURABILITY_PERCENT_PLUS", 35, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_DURABILITY_PERCENT_MINUS", 36, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_INDESTRUCTIBLE", 37, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_LIGHT_RADIUS_PLUS", 38, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_LIGHT_RADIUS_MINUS", 39, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_FIRE_ARROWS", 42, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_LIGHTNING_ARROWS", 43, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_CUSTOM_GRAPHICS", 44, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_THORNS", 45, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_NO_MANA", 46, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_USER_CANT_HEAL", 47, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_ABSORBS_HALF_OF_TRAP_DAMAGE", 52, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_KNOCKBACK", 53, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_HIT_MONSTER_DOESNT_HEAL", 54, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_STEAL_MANA", 55, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_STEAL_LIFE", 56, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_DAMAGES_TARGETS_ARMOR", 57, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_FASTER_ATTACK", 58, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_FASTER_HIT_RECOVERY", 59, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_FAST_BLOCK", 60, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_ATTACK_DAMAGE_PLUS", 61, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_RANDOM_SPEED_ARROWS", 62, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_CUSTOM_ATTACK_DAMAGE", 63, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_EFFECT_TYPE_CUSTOM_ATTACK_DAMAGE"), " used for Butcher's Cleaver", 0);add_enum_member (id, "ITEM_EFFECT_TYPE_CUSTOM_DURABILITY", 64, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_NO_STRENGTH_REQUIREMENT", 65, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_SET_SPELL_ID_AND_CHARGES", 66, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_EFFECT_TYPE_SET_SPELL_ID_AND_CHARGES"), " (most likely erroneously) sets current spell charges to spell_id", 0);add_enum_member (id, "ITEM_EFFECT_TYPE_FASTER_ATTACK_SWING", 67, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_MAKE_WEAPON_ONE_HANDED", 68, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_3X_DAMAGE_VS_DEMONS", 69, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_ALL_RESISTANCES_EQUAL_0", 70, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_CONSTANTLY_LOSE_HIT_POINTS", 72, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_LIFE_STEAL_RANDOM", 73, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_EFFECT_TYPE_LIFE_STEAL_RANDOM"), " in range 0-12.5%, used for The Undead Crown", 0);add_enum_member (id, "ITEM_EFFECT_TYPE_INFRAVISION", 74, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_CUSTOM_ARMOR_CLASS", 75, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_ARMOR_CLASS_ADDED_TO_LIFE", 76, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_10_PERCENT_MANA_ADDED_TO_ARMOR", 77, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_FIRE_RESISTANCE_BASED_ON_CLVL", 78, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_ARMOR_CLASS_MINUS", 79, -1);
add_enum_member (id, "ITEM_EFFECT_TYPE_INVALID", -1, -1);
cleanup("item_equip_type");id = add_enum (-1, "item_equip_type", FF_0NUMD);
set_enum_cmt (id, "Enumeration describing in which slot item could be equipped.", 0);
add_enum_member (id, "ITEM_EQUIP_TYPE_NONE", 0, -1);
add_enum_member (id, "ITEM_EQUIP_TYPE_ONE_HANDED", 1, -1);
add_enum_member (id, "ITEM_EQUIP_TYPE_TWO_HANDED", 2, -1);
add_enum_member (id, "ITEM_EQUIP_TYPE_CHEST", 3, -1);
add_enum_member (id, "ITEM_EQUIP_TYPE_HEAD", 4, -1);
add_enum_member (id, "ITEM_EQUIP_TYPE_RING", 5, -1);
add_enum_member (id, "ITEM_EQUIP_TYPE_AMULET", 6, -1);
add_enum_member (id, "ITEM_EQUIP_TYPE_UNEQUIPABLE", 7, -1);
add_enum_member (id, "ITEM_EQUIP_TYPE_BELT", 8, -1);
add_enum_member (id, "ITEM_EQUIP_TYPE_INVALID", -1, -1);
cleanup("item_graphic_id");id = add_enum (-1, "item_graphic_id", FF_0NUMD);
set_enum_cmt (id, "Item graphic IDs; frame_num-11 of objcurs.cel.", 0);
add_enum_member (id, "ITEM_GRAPHIC_ID_POTION_OF_FULL_MANA", 0, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SCROLL_OF", 1, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_GOLD_SMALL", 4, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_GOLD_MEDIUM", 5, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_GOLD_LARGE", 6, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_RING_OF_TRUTH", 10, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_RING", 12, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SPECTRAL_ELIXIR", 15, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_GOLDEN_ELIXIR", 17, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_EMPYREAN_BAND", 18, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_EAR_SORCEROR", 19, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_EAR_WARRIOR", 20, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_EAR_ROGUE", 21, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_BLOOD_STONE", 25, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_ELIXIR_OF_VITALITY", 31, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_POTION_OF_HEALING", 32, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_POTION_OF_FULL_REJUVENATION", 33, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_ELIXIR_OF_MAGIC", 34, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_POTION_OF_FULL_HEALING", 35, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_ELIXIR_OF_DEXTERITY", 36, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_POTION_OF_REJUVENATION", 37, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_ELIXIR_OF_STRENGTH", 38, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_POTION_OF_MANA", 39, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_BRAIN", 40, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_OPTIC_AMULET", 44, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_AMULET", 45, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_DAGGER", 51, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_BLADE", 56, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_BASTARD_SWORD", 57, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_MACE", 59, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_LONG_SWORD", 60, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_BROAD_SWORD", 61, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_FALCHION", 62, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_MORNING_STAR", 63, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SHORT_SWORD", 64, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_CLAYMORE", 65, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_CLUB", 66, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SABRE", 67, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SPIKED_CLUB", 70, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SCIMITAR", 72, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_FULL_HELM", 75, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_MAGIC_ROCK", 76, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_THE_UNDEAD_CROWN", 78, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_HELM", 82, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_BUCKLER", 83, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_VIEL_OF_STEEL", 85, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_BOOK_GREY", 86, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_BOOK_RED", 87, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_BOOK_BLUE", 88, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_BLACK_MUSHROOM", 89, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SKULL_CAP", 90, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_CAP", 91, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_HARLEQUIN_CREST", 93, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_CROWN", 95, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_MAP_OF_THE_STARS", 96, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_FUNGAL_TOME", 97, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_GREAT_HELM", 98, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_BATTLE_AXE", 101, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_HUNTERS_BOW", 102, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_FIELD_PLATE", 103, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SMALL_SHIELD", 105, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_CLEAVER", 106, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_STUDDED_LEATHER_ARMOR", 107, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SHORT_STAFF", 109, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_TWO_HANDED_SWORD", 110, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_CHAIN_MAIL", 111, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SMALL_AXE", 112, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_KITE_SHIELD", 113, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SCALE_MAIL", 114, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SHORT_BOW", 118, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_LONG_WAR_BOW", 119, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_WAR_HAMMER", 121, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_MAUL", 122, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_LONG_STAFF", 123, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_WAR_STAFF", 124, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_TAVERN_SIGN", 126, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_HARD_LEATHER_ARMOR", 127, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_RAGS", 128, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_QUILTED_ARMOR", 129, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_FLAIL", 131, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_TOWER_SHIELD", 132, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_COMPOSITE_BOW", 133, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_GREAT_SWORD", 134, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_LEATHER_ARMOR", 135, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SPLINT_MAIL", 136, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_ROBE", 137, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_ANVIL_OF_FURY", 140, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_BROAD_AXE", 141, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_LARGE_AXE", 142, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_GREAT_AXE", 143, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_AXE", 144, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_LARGE_SHIELD", 147, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_GOTHIC_SHIELD", 148, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_CLOAK", 149, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_CAPE", 150, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_FULL_PLATE_MAIL", 151, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_GOTHIC_PLATE", 152, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_BREAST_PLATE", 153, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_RING_MAIL", 154, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_STAFF_OF_LAZARUS", 155, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_ARKAINES_VALOR", 157, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SHORT_WAR_BOW", 165, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_COMPOSITE_STAFF", 166, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_SHORT_BATTLE_BOW", 167, -1);
add_enum_member (id, "ITEM_GRAPHIC_ID_GOLD", 168, -1);
cleanup("item_id");id = add_enum (-1, "item_id", FF_0NUMD);
set_enum_cmt (id, "Item IDs specify item_data array indices.", 0);
add_enum_member (id, "ITEM_ID_GOLD", 0, -1);
add_enum_member (id, "ITEM_ID_SHORT_SWORD", 1, -1);
add_enum_member (id, "ITEM_ID_BUCKLER", 2, -1);
add_enum_member (id, "ITEM_ID_CLUB", 3, -1);
add_enum_member (id, "ITEM_ID_SHORT_BOW", 4, -1);
add_enum_member (id, "ITEM_ID_SHORT_STAFF_OF_CHARGED_BOLT", 5, -1);
add_enum_member (id, "ITEM_ID_CLEAVER", 6, -1);
add_enum_member (id, "ITEM_ID_THE_UNDEAD_CROWN", 7, -1);
add_enum_member (id, "ITEM_ID_EMPYREAN_BAND", 8, -1);
add_enum_member (id, "ITEM_ID_MAGIC_ROCK", 9, -1);
add_enum_member (id, "ITEM_ID_OPTIC_AMULET", 10, -1);
add_enum_member (id, "ITEM_ID_RING_OF_TRUTH", 11, -1);
add_enum_member (id, "ITEM_ID_TAVERN_SIGN", 12, -1);
add_enum_member (id, "ITEM_ID_HARLEQUIN_CREST", 13, -1);
add_enum_member (id, "ITEM_ID_VEIL_OF_STEEL", 14, -1);
add_enum_member (id, "ITEM_ID_GOLDEN_ELIXIR", 15, -1);
add_enum_member (id, "ITEM_ID_ANVIL_OF_FURY", 16, -1);
add_enum_member (id, "ITEM_ID_BLACK_MUSHROOM", 17, -1);
add_enum_member (id, "ITEM_ID_BRAIN", 18, -1);
add_enum_member (id, "ITEM_ID_FUNGAL_TOME", 19, -1);
add_enum_member (id, "ITEM_ID_SPECTRAL_ELIXIR", 20, -1);
add_enum_member (id, "ITEM_ID_BLOOD_STONE", 21, -1);
add_enum_member (id, "ITEM_ID_MAP_OF_THE_STARS", 22, -1);
add_enum_member (id, "ITEM_ID_HEART", 23, -1);
add_enum_member (id, "ITEM_ID_POTION_OF_HEALING", 24, -1);
add_enum_member (id, "ITEM_ID_POTION_OF_MANA", 25, -1);
add_enum_member (id, "ITEM_ID_SCROLL_OF_IDENTIFY", 26, -1);
add_enum_member (id, "ITEM_ID_SCROLL_OF_TOWN_PORTAL", 27, -1);
add_enum_member (id, "ITEM_ID_ARKAINES_VALOR", 28, -1);
add_enum_member (id, "ITEM_ID_POTION_OF_FULL_HEALING", 29, -1);
add_enum_member (id, "ITEM_ID_POTION_OF_FULL_MANA", 30, -1);
add_enum_member (id, "ITEM_ID_GRISWOLDS_EDGE", 31, -1);
add_enum_member (id, "ITEM_ID_LIGHTFORGE", 32, -1);
add_enum_member (id, "ITEM_ID_STAFF_OF_LAZARUS", 33, -1);
add_enum_member (id, "ITEM_ID_SCROLL_OF_RESURRECT", 34, -1);
add_enum_member (id, "ITEM_ID_NULL_1", 35, -1);
add_enum_member (id, "ITEM_ID_NULL_2", 36, -1);
add_enum_member (id, "ITEM_ID_NULL_3", 37, -1);
add_enum_member (id, "ITEM_ID_NULL_4", 38, -1);
add_enum_member (id, "ITEM_ID_NULL_5", 39, -1);
add_enum_member (id, "ITEM_ID_NULL_6", 40, -1);
add_enum_member (id, "ITEM_ID_NULL_7", 41, -1);
add_enum_member (id, "ITEM_ID_NULL_8", 42, -1);
add_enum_member (id, "ITEM_ID_NULL_9", 43, -1);
add_enum_member (id, "ITEM_ID_NULL_10", 44, -1);
add_enum_member (id, "ITEM_ID_NULL_11", 45, -1);
add_enum_member (id, "ITEM_ID_NULL_12", 46, -1);
add_enum_member (id, "ITEM_ID_NULL_13", 47, -1);
add_enum_member (id, "ITEM_ID_BASE_CAP", 48, -1);
add_enum_member (id, "ITEM_ID_BASE_SKULL_CAP", 49, -1);
add_enum_member (id, "ITEM_ID_BASE_HELM", 50, -1);
add_enum_member (id, "ITEM_ID_BASE_FULL_HELM", 51, -1);
add_enum_member (id, "ITEM_ID_BASE_CROWN", 52, -1);
add_enum_member (id, "ITEM_ID_BASE_GREAT_HELM", 53, -1);
add_enum_member (id, "ITEM_ID_BASE_CAPE", 54, -1);
add_enum_member (id, "ITEM_ID_BASE_RAGS", 55, -1);
add_enum_member (id, "ITEM_ID_BASE_CLOAK", 56, -1);
add_enum_member (id, "ITEM_ID_BASE_ROBE", 57, -1);
add_enum_member (id, "ITEM_ID_BASE_QUILTED_ARMOR", 58, -1);
add_enum_member (id, "ITEM_ID_BASE_LEATHER_ARMOR", 59, -1);
add_enum_member (id, "ITEM_ID_BASE_HARD_LEATHER_ARMOR", 60, -1);
add_enum_member (id, "ITEM_ID_BASE_STUDDED_LEATHER_ARMOR", 61, -1);
add_enum_member (id, "ITEM_ID_BASE_RING_MAIL", 62, -1);
add_enum_member (id, "ITEM_ID_BASE_CHAIN_MAIL", 63, -1);
add_enum_member (id, "ITEM_ID_BASE_SCALE_MAIL", 64, -1);
add_enum_member (id, "ITEM_ID_BASE_BREAST_PLATE", 65, -1);
add_enum_member (id, "ITEM_ID_BASE_SPLINT_MAIL", 66, -1);
add_enum_member (id, "ITEM_ID_BASE_PLATE_MAIL", 67, -1);
add_enum_member (id, "ITEM_ID_BASE_FIELD_PLATE", 68, -1);
add_enum_member (id, "ITEM_ID_BASE_GOTHIC_PLATE", 69, -1);
add_enum_member (id, "ITEM_ID_BASE_FULL_PLATE_MAIL", 70, -1);
add_enum_member (id, "ITEM_ID_BASE_BUCKLER", 71, -1);
add_enum_member (id, "ITEM_ID_BASE_SMALL_SHIELD", 72, -1);
add_enum_member (id, "ITEM_ID_BASE_LARGE_SHIELD", 73, -1);
add_enum_member (id, "ITEM_ID_BASE_KITE_SHIELD", 74, -1);
add_enum_member (id, "ITEM_ID_BASE_TOWER_SHIELD", 75, -1);
add_enum_member (id, "ITEM_ID_BASE_GOTHIC_SHIELD", 76, -1);
add_enum_member (id, "ITEM_ID_BASE_POTION_OF_HEALING", 77, -1);
add_enum_member (id, "ITEM_ID_BASE_POTION_OF_FULL_HEALING", 78, -1);
add_enum_member (id, "ITEM_ID_BASE_POTION_OF_MANA", 79, -1);
add_enum_member (id, "ITEM_ID_BASE_POTION_OF_FULL_MANA", 80, -1);
add_enum_member (id, "ITEM_ID_BASE_POTION_OF_REJUVENATION", 81, -1);
add_enum_member (id, "ITEM_ID_BASE_POTION_OF_FULL_REJUVENATION", 82, -1);
add_enum_member (id, "ITEM_ID_BASE_ELIXIR_OF_STRENGTH", 83, -1);
add_enum_member (id, "ITEM_ID_BASE_ELIXIR_OF_MAGIC", 84, -1);
add_enum_member (id, "ITEM_ID_BASE_ELIXIR_OF_DEXTERITY", 85, -1);
add_enum_member (id, "ITEM_ID_BASE_ELIXIR_OF_VITALITY", 86, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_HEALING", 87, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_LIGHTNING", 88, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_IDENTIFY", 89, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_RESURRECT", 90, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_FIRE_WALL", 91, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_INFERNO", 92, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_TOWN_PORTAL", 93, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_FLASH", 94, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_INFRAVISION", 95, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_PHASING", 96, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_MANA_SHIELD", 97, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_FLAME_WAVE", 98, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_FIREBALL", 99, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_STONE_CURSE", 100, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_CHAIN_LIGHTNING", 101, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_GUARDIAN", 102, -1);
add_enum_member (id, "ITEM_ID_BASE_NON_ITEM", 103, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_NOVA", 104, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_GOLEM", 105, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_NONE", 106, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_TELEPORT", 107, -1);
add_enum_member (id, "ITEM_ID_BASE_SCROLL_OF_APOCALYPSE", 108, -1);
add_enum_member (id, "ITEM_ID_BASE_BOOK_QLVL_2", 109, -1);
add_enum_member (id, "ITEM_ID_BASE_BOOK_QLVL_8", 110, -1);
add_enum_member (id, "ITEM_ID_BASE_BOOK_QLVL_14", 111, -1);
add_enum_member (id, "ITEM_ID_BASE_BOOK_QLVL_20", 112, -1);
add_enum_member (id, "ITEM_ID_BASE_DAGGER", 113, -1);
add_enum_member (id, "ITEM_ID_BASE_SHORT_SWORD", 114, -1);
add_enum_member (id, "ITEM_ID_BASE_FALCHION", 115, -1);
add_enum_member (id, "ITEM_ID_BASE_SCIMITAR", 116, -1);
add_enum_member (id, "ITEM_ID_BASE_CLAYMORE", 117, -1);
add_enum_member (id, "ITEM_ID_BASE_BLADE", 118, -1);
add_enum_member (id, "ITEM_ID_BASE_SABRE", 119, -1);
add_enum_member (id, "ITEM_ID_BASE_LONG_SWORD", 120, -1);
add_enum_member (id, "ITEM_ID_BASE_BROAD_SWORD", 121, -1);
add_enum_member (id, "ITEM_ID_BASE_BASTARD_SWORD", 122, -1);
add_enum_member (id, "ITEM_ID_BASE_TWO_HANDED_SWORD", 123, -1);
add_enum_member (id, "ITEM_ID_BASE_GREAT_SWORD", 124, -1);
add_enum_member (id, "ITEM_ID_BASE_SMALL_AXE", 125, -1);
add_enum_member (id, "ITEM_ID_BASE_AXE", 126, -1);
add_enum_member (id, "ITEM_ID_BASE_LARGE_AXE", 127, -1);
add_enum_member (id, "ITEM_ID_BASE_BROAD_AXE", 128, -1);
add_enum_member (id, "ITEM_ID_BASE_BATTLE_AXE", 129, -1);
add_enum_member (id, "ITEM_ID_BASE_GREAT_AXE", 130, -1);
add_enum_member (id, "ITEM_ID_BASE_MACE", 131, -1);
add_enum_member (id, "ITEM_ID_BASE_MORNING_STAR", 132, -1);
add_enum_member (id, "ITEM_ID_BASE_WAR_HAMMER", 133, -1);
add_enum_member (id, "ITEM_ID_BASE_SPIKED_CLUB", 134, -1);
add_enum_member (id, "ITEM_ID_BASE_CLUB", 135, -1);
add_enum_member (id, "ITEM_ID_BASE_FLAIL", 136, -1);
add_enum_member (id, "ITEM_ID_BASE_MAUL", 137, -1);
add_enum_member (id, "ITEM_ID_BASE_SHORT_BOW", 138, -1);
add_enum_member (id, "ITEM_ID_BASE_HUNTERS_BOW", 139, -1);
add_enum_member (id, "ITEM_ID_BASE_LONG_BOW", 140, -1);
add_enum_member (id, "ITEM_ID_BASE_COMPOSITE_BOW", 141, -1);
add_enum_member (id, "ITEM_ID_BASE_SHORT_BATTLE_BOW", 142, -1);
add_enum_member (id, "ITEM_ID_BASE_LONG_BATTLE_BOW", 143, -1);
add_enum_member (id, "ITEM_ID_BASE_SHORT_WAR_BOW", 144, -1);
add_enum_member (id, "ITEM_ID_BASE_LONG_WAR_BOW", 145, -1);
add_enum_member (id, "ITEM_ID_BASE_SHORT_STAFF", 146, -1);
add_enum_member (id, "ITEM_ID_BASE_LONG_STAFF", 147, -1);
add_enum_member (id, "ITEM_ID_BASE_COMPOSITE_STAFF", 148, -1);
add_enum_member (id, "ITEM_ID_BASE_QUARTER_STAFF", 149, -1);
add_enum_member (id, "ITEM_ID_BASE_WAR_STAFF", 150, -1);
add_enum_member (id, "ITEM_ID_BASE_RING_QLVL_5", 151, -1);
add_enum_member (id, "ITEM_ID_BASE_RING_QLVL_10", 152, -1);
add_enum_member (id, "ITEM_ID_BASE_RING_QLVL_15", 153, -1);
add_enum_member (id, "ITEM_ID_BASE_AMULET_QLVL_8", 154, -1);
add_enum_member (id, "ITEM_ID_BASE_AMULET_QLVL_16", 155, -1);
add_enum_member (id, "ITEM_ID_NULL_14", 156, -1);
cleanup("item_inv_graphics_id");id = add_enum (-1, "item_inv_graphics_id", FF_0NUMD);
set_enum_cmt (id, "ID characterizing item appearance. Frame number (11 + item_inv_graphics_id)\nfrom data/inv/objcurs.cel is used as item graphics for inventory.", 0);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_POTION_OF_FULL_MANA", 0, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SCROLL_OF", 1, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_GOLD_SMALL", 4, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_GOLD_MEDIUM", 5, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_GOLD_LARGE", 6, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_RING_OF_TRUTH", 10, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_RING", 12, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SPECTRAL_ELIXIR", 15, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_GOLDEN_ELIXIR", 17, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_EMPYREAN_BAND", 18, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_EAR_SORCEROR", 19, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_EAR_WARRIOR", 20, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_EAR_ROGUE", 21, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_BLOOD_STONE", 25, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_ELIXIR_OF_VITALITY", 31, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_POTION_OF_HEALING", 32, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_POTION_OF_FULL_REJUVENATION", 33, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_ELIXIR_OF_MAGIC", 34, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_POTION_OF_FULL_HEALING", 35, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_ELIXIR_OF_DEXTERITY", 36, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_POTION_OF_REJUVENATION", 37, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_ELIXIR_OF_STRENGTH", 38, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_POTION_OF_MANA", 39, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_BRAIN", 40, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_OPTIC_AMULET", 44, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_AMULET", 45, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_DAGGER", 51, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_BLADE", 56, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_BASTARD_SWORD", 57, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_MACE", 59, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_LONG_SWORD", 60, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_BROAD_SWORD", 61, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_FALCHION", 62, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_MORNING_STAR", 63, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SHORT_SWORD", 64, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_CLAYMORE", 65, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_CLUB", 66, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SABRE", 67, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SPIKED_CLUB", 70, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SCIMITAR", 72, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_FULL_HELM", 75, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_MAGIC_ROCK", 76, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_THE_UNDEAD_CROWN", 78, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_HELM", 82, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_BUCKLER", 83, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_VIEL_OF_STEEL", 85, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_BOOK_GREY", 86, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_BOOK_RED", 87, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_BOOK_BLUE", 88, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_BLACK_MUSHROOM", 89, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SKULL_CAP", 90, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_CAP", 91, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_HARLEQUIN_CREST", 93, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_CROWN", 95, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_MAP_OF_THE_STARS", 96, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_FUNGAL_TOME", 97, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_GREAT_HELM", 98, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_BATTLE_AXE", 101, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_HUNTERS_BOW", 102, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_FIELD_PLATE", 103, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SMALL_SHIELD", 105, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_CLEAVER", 106, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_STUDDED_LEATHER_ARMOR", 107, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SHORT_STAFF", 109, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_TWO_HANDED_SWORD", 110, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_CHAIN_MAIL", 111, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SMALL_AXE", 112, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_KITE_SHIELD", 113, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SCALE_MAIL", 114, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SHORT_BOW", 118, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_LONG_WAR_BOW", 119, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_WAR_HAMMER", 121, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_MAUL", 122, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_LONG_STAFF", 123, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_WAR_STAFF", 124, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_TAVERN_SIGN", 126, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_HARD_LEATHER_ARMOR", 127, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_RAGS", 128, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_QUILTED_ARMOR", 129, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_FLAIL", 131, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_TOWER_SHIELD", 132, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_COMPOSITE_BOW", 133, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_GREAT_SWORD", 134, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_LEATHER_ARMOR", 135, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SPLINT_MAIL", 136, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_ROBE", 137, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_ANVIL_OF_FURY", 140, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_BROAD_AXE", 141, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_LARGE_AXE", 142, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_GREAT_AXE", 143, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_AXE", 144, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_LARGE_SHIELD", 147, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_GOTHIC_SHIELD", 148, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_CLOAK", 149, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_CAPE", 150, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_FULL_PLATE_MAIL", 151, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_GOTHIC_PLATE", 152, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_BREAST_PLATE", 153, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_RING_MAIL", 154, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_STAFF_OF_LAZARUS", 155, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_ARKAINES_VALOR", 157, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SHORT_WAR_BOW", 165, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_COMPOSITE_STAFF", 166, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_SHORT_BATTLE_BOW", 167, -1);
add_enum_member (id, "ITEM_INV_GRAPHICS_ID_GOLD", 168, -1);
cleanup("item_misc_id");id = add_enum (-1, "item_misc_id", FF_0NUMD);
set_enum_cmt (id, "Additional item categorization.", 0);
add_enum_member (id, "ITEM_MISC_ID_NONE", 0, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_MISC_ID_NONE"), " all non-unique weapons and armor have this code", 0);add_enum_member (id, "ITEM_MISC_ID_USE_FIRST", 1, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_MISC_ID_USE_FIRST"), " unused", 0);add_enum_member (id, "ITEM_MISC_ID_POTION_OF_FULL_HEALING", 2, -1);
add_enum_member (id, "ITEM_MISC_ID_POTION_OF_HEALING", 3, -1);
add_enum_member (id, "ITEM_MISC_ID_POTION_OF_MANA", 6, -1);
add_enum_member (id, "ITEM_MISC_ID_POTION_OF_FULL_MANA", 7, -1);
add_enum_member (id, "ITEM_MISC_ID_ELIXIR_OF_STRENGTH", 10, -1);
add_enum_member (id, "ITEM_MISC_ID_ELIXIR_OF_MAGIC", 11, -1);
add_enum_member (id, "ITEM_MISC_ID_ELIXIR_OF_DEXTERITY", 12, -1);
add_enum_member (id, "ITEM_MISC_ID_ELIXIR_OF_VITALITY", 13, -1);
add_enum_member (id, "ITEM_MISC_ID_POTION_OF_REJUVENATION", 18, -1);
add_enum_member (id, "ITEM_MISC_ID_POTION_OF_FULL_REJUVENATION", 19, -1);
add_enum_member (id, "ITEM_MISC_ID_USE_LAST", 20, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_MISC_ID_USE_LAST"), " unused", 0);add_enum_member (id, "ITEM_MISC_ID_SCROLL", 21, -1);
add_enum_member (id, "ITEM_MISC_ID_SCROLL_WITH_TARGET", 22, -1);
add_enum_member (id, "ITEM_MISC_ID_STAFF", 23, -1);
add_enum_member (id, "ITEM_MISC_ID_BOOK", 24, -1);
add_enum_member (id, "ITEM_MISC_ID_RING", 25, -1);
add_enum_member (id, "ITEM_MISC_ID_AMULET", 26, -1);
add_enum_member (id, "ITEM_MISC_ID_UNIQUE", 27, -1);
add_enum_member (id, "ITEM_MISC_ID_POTION_OF_HEALING_SOMETHING", 28, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_MISC_ID_POTION_OF_HEALING_SOMETHING"), " unused", 0);add_enum_member (id, "ITEM_MISC_ID_MAP_OF_THE_STARS", 42, -1);
add_enum_member (id, "ITEM_MISC_ID_EAR", 43, -1);
add_enum_member (id, "ITEM_MISC_ID_SPECTRAL_ELIXIR", 44, -1);
add_enum_member (id, "ITEM_MISC_ID_INVALID", -1, -1);
cleanup("item_quality");id = add_enum (-1, "item_quality", FF_0NUMD);
set_enum_cmt (id, "Item quality levels.", 0);
add_enum_member (id, "ITEM_QUALITY_NORMAL", 0, -1);
add_enum_member (id, "ITEM_QUALITY_MAGIC", 1, -1);
add_enum_member (id, "ITEM_QUALITY_UNIQUE", 2, -1);
cleanup("item_special_effect");id = add_enum (-1, "item_special_effect", FF_0NUMH);
set_enum_cmt (id, "Bit flags used to describe unique, usually non-quantifiable effect on a\nplayer caused by items.", 0);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_NONE", 0, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_INFRAVISION", 1, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_LIFE_STEAL_RANDOM", 2, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_SPECIAL_EFFECT_LIFE_STEAL_RANDOM"), " in range 0-12.5%", 0);add_enum_member (id, "ITEM_SPECIAL_EFFECT_RANDOM_SPEED_ARROWS", 4, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_FIRE_ARROWS", 8, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_FIRE_DAMAGE_BONUS", 16, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_LIGHTNING_DAMAGE_BONUS", 32, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_CONSTANTLY_LOSE_HIT_POINTS", 64, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_UNKNOWN_1", 128, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_SPECIAL_EFFECT_UNKNOWN_1"), " unused", 0);add_enum_member (id, "ITEM_SPECIAL_EFFECT_USER_CANT_HEAL", 256, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_UNKNOWN_2", 512, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_SPECIAL_EFFECT_UNKNOWN_2"), " unused", 0);add_enum_member (id, "ITEM_SPECIAL_EFFECT_UNKNOWN_3", 1024, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_SPECIAL_EFFECT_UNKNOWN_3"), " unused", 0);add_enum_member (id, "ITEM_SPECIAL_EFFECT_KNOCKS_TARGET_BACK", 2048, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_HIT_MONSTER_DOESNT_HEAL", 4096, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_MANA_STEAL_3_PERCENT", 8192, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_MANA_STEAL_5_PERCENT", 16384, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_LIFE_STEAL_3_PERCENT", 32768, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_LIFE_STEAL_5_PERCENT", 65536, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_QUICK_ATTACK", 131072, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_SPECIAL_EFFECT_QUICK_ATTACK"), " Suffix: Readiness", 0);add_enum_member (id, "ITEM_SPECIAL_EFFECT_FAST_ATTACK", 262144, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_SPECIAL_EFFECT_FAST_ATTACK"), " Suffix: Swiftness", 0);add_enum_member (id, "ITEM_SPECIAL_EFFECT_FASTER_ATTACK", 524288, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_SPECIAL_EFFECT_FASTER_ATTACK"), " Suffix: Speed", 0);add_enum_member (id, "ITEM_SPECIAL_EFFECT_FASTEST_ATTACK", 1048576, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_SPECIAL_EFFECT_FASTEST_ATTACK"), " Suffix: Haste", 0);add_enum_member (id, "ITEM_SPECIAL_EFFECT_FAST_HIT_RECOVERY", 2097152, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_SPECIAL_EFFECT_FAST_HIT_RECOVERY"), " Suffix: Balance", 0);add_enum_member (id, "ITEM_SPECIAL_EFFECT_FASTER_HIT_RECOVERY", 4194304, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_SPECIAL_EFFECT_FASTER_HIT_RECOVERY"), " Suffix: Stability", 0);add_enum_member (id, "ITEM_SPECIAL_EFFECT_FASTEST_HIT_RECOVERY", 8388608, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_SPECIAL_EFFECT_FASTEST_HIT_RECOVERY"), " Suffix: Harmony", 0);add_enum_member (id, "ITEM_SPECIAL_EFFECT_FAST_BLOCK", 16777216, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_LIGHTNING_ARROWS", 33554432, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_THORNS", 67108864, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_NO_MANA", 134217728, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_SPECIAL_EFFECT_NO_MANA"), " cursed mana", 0);add_enum_member (id, "ITEM_SPECIAL_EFFECT_ABSORBS_HALF_OF_TRAP_DAMAGE", 268435456, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_UNKNOWN_4", 536870912, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_SPECIAL_EFFECT_UNKNOWN_4"), " unused", 0);add_enum_member (id, "ITEM_SPECIAL_EFFECT_3X_DAMAGE_VS_DEMONS", 1073741824, -1);
add_enum_member (id, "ITEM_SPECIAL_EFFECT_ALL_RESISTANCES_EQUAL_0", 2147483648, -1);
set_enum_bf (id, 1);
cleanup("item_type");id = add_enum (-1, "item_type", FF_0NUMD);
set_enum_cmt (id, "Item types.", 0);
add_enum_member (id, "ITEM_TYPE_MISC", 0, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_TYPE_MISC"), " Potions, scrolls, books and quest items.", 0);add_enum_member (id, "ITEM_TYPE_SWORD", 1, -1);
add_enum_member (id, "ITEM_TYPE_AXE", 2, -1);
add_enum_member (id, "ITEM_TYPE_BOW", 3, -1);
add_enum_member (id, "ITEM_TYPE_MACE", 4, -1);
add_enum_member (id, "ITEM_TYPE_SHIELD", 5, -1);
add_enum_member (id, "ITEM_TYPE_LIGHT_ARMOR", 6, -1);
add_enum_member (id, "ITEM_TYPE_HELM", 7, -1);
add_enum_member (id, "ITEM_TYPE_MEDIUM_ARMOR", 8, -1);
add_enum_member (id, "ITEM_TYPE_HEAVY_ARMOR", 9, -1);
add_enum_member (id, "ITEM_TYPE_STAFF", 10, -1);
add_enum_member (id, "ITEM_TYPE_GOLD", 11, -1);
add_enum_member (id, "ITEM_TYPE_RING", 12, -1);
add_enum_member (id, "ITEM_TYPE_AMULET", 13, -1);
add_enum_member (id, "ITEM_TYPE_14", 14, -1);
set_enum_member_cmt (get_enum_member_by_name ("ITEM_TYPE_14"), " NOTE: Unused?", 0);add_enum_member (id, "ITEM_TYPE_NONE", -1, -1);
cleanup("l1_tile_id");id = add_enum (-1, "l1_tile_id", FF_0NUMD);
set_enum_cmt (id, "Tile IDs for dungeon layout 1.\nTODO: Figure out how to fix broken link. Requires graphics files, which may\nnot be put online. Perhaps, add a script to view locally.", 0);
add_enum_member (id, "L1_TILE_ID_NONE", 0, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW", 1, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SE", 2, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_NE_ARCH_NW", 3, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_WALL_SE", 4, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_SW_ARCH_SE", 5, -1);
add_enum_member (id, "L1_TILE_ID_WALL_END_SW", 6, -1);
add_enum_member (id, "L1_TILE_ID_WALL_END_SE", 7, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_END_SW", 8, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_END_SE", 9, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_ARCH_SE", 10, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_SW", 11, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_SE", 12, -1);
add_enum_member (id, "L1_TILE_ID_FLOOR", 13, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_SW_WALL_SE", 14, -1);
add_enum_member (id, "L1_TILE_ID_COLUMN", 15, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_END_NE", 16, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_END_NW", 17, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_WALL_SW", 18, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_WALL_SE", 19, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_WALL_NE_WALL_NW", 20, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_WALL_SW_WALL_SE", 21, -1);
add_enum_member (id, "L1_TILE_ID_DIRT", 22, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_WALL_END_SW", 23, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_WALL_END_SE", 24, -1);
add_enum_member (id, "L1_TILE_ID_DOOR_SW", 25, -1);
add_enum_member (id, "L1_TILE_ID_DOOR_SE", 26, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_BAR_SE", 27, -1);
add_enum_member (id, "L1_TILE_ID_DOOR_SW_DOOR_SE", 28, -1);
add_enum_member (id, "L1_TILE_ID_BAR_SW_BAR_SE", 29, -1);
add_enum_member (id, "L1_TILE_ID_DOOR_END_SW", 30, -1);
add_enum_member (id, "L1_TILE_ID_DOOR_END_SE", 31, -1);
add_enum_member (id, "L1_TILE_ID_BAR_END_SW", 32, -1);
add_enum_member (id, "L1_TILE_ID_BAR_END_SE", 33, -1);
add_enum_member (id, "L1_TILE_ID_DOOR_SW_BAR_SE", 34, -1);
add_enum_member (id, "L1_TILE_ID_BAR_SW", 35, -1);
add_enum_member (id, "L1_TILE_ID_BAR_SE", 36, -1);
add_enum_member (id, "L1_TILE_ID_BAR_SW_WALL_SE", 37, -1);
add_enum_member (id, "L1_TILE_ID_BAR_SW_ARCH_SE", 38, -1);
add_enum_member (id, "L1_TILE_ID_BAR_SW_DOOR_SE", 39, -1);
add_enum_member (id, "L1_TILE_ID_DOOR_SW_ARCH_SE", 40, -1);
add_enum_member (id, "L1_TILE_ID_DOOR_SW_WALL_SE", 41, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_SW_DOOR_SE", 42, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_DOOR_SE", 43, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_SW_BAR_SE", 44, -1);
add_enum_member (id, "L1_TILE_ID_CIRCLE_MARKING_1", 45, -1);
add_enum_member (id, "L1_TILE_ID_CIRCLE_MARKING_2", 46, -1);
add_enum_member (id, "L1_TILE_ID_CIRCLE_MARKING_3", 47, -1);
add_enum_member (id, "L1_TILE_ID_CIRCLE_MARKING_4", 48, -1);
add_enum_member (id, "L1_TILE_ID_CIRCLE_MARKING_5", 49, -1);
add_enum_member (id, "L1_TILE_ID_CIRCLE_MARKING_6", 50, -1);
add_enum_member (id, "L1_TILE_ID_CIRCLE_MARKING_7", 51, -1);
add_enum_member (id, "L1_TILE_ID_CIRCLE_MARKING_8", 52, -1);
add_enum_member (id, "L1_TILE_ID_CIRCLE_MARKING_9", 53, -1);
add_enum_member (id, "L1_TILE_ID_CIRCLE_MARKING_10", 54, -1);
add_enum_member (id, "L1_TILE_ID_CIRCLE_MARKING_11", 55, -1);
add_enum_member (id, "L1_TILE_ID_CIRCLE_MARKING_12", 56, -1);
add_enum_member (id, "L1_TILE_ID_STAIR_A_1", 57, -1);
add_enum_member (id, "L1_TILE_ID_STAIR_A_2", 58, -1);
add_enum_member (id, "L1_TILE_ID_STAIR_A_3", 59, -1);
add_enum_member (id, "L1_TILE_ID_STAIR_A_4", 60, -1);
add_enum_member (id, "L1_TILE_ID_STAIR_A_5", 61, -1);
add_enum_member (id, "L1_TILE_ID_STAIR_A_6", 62, -1);
add_enum_member (id, "L1_TILE_ID_STAIR_B_1", 63, -1);
add_enum_member (id, "L1_TILE_ID_STAIR_B_2", 64, -1);
add_enum_member (id, "L1_TILE_ID_STAIR_B_3", 65, -1);
add_enum_member (id, "L1_TILE_ID_STAIR_B_4", 66, -1);
add_enum_member (id, "L1_TILE_ID_STAIR_B_5", 67, -1);
add_enum_member (id, "L1_TILE_ID_STAIR_B_6", 68, -1);
add_enum_member (id, "L1_TILE_ID_TOMB_1", 69, -1);
add_enum_member (id, "L1_TILE_ID_TOMB_2", 70, -1);
add_enum_member (id, "L1_TILE_ID_TOMB_3", 71, -1);
add_enum_member (id, "L1_TILE_ID_TOMB_4", 72, -1);
add_enum_member (id, "L1_TILE_ID_TOMB_5", 73, -1);
add_enum_member (id, "L1_TILE_ID_TOMB_6", 74, -1);
add_enum_member (id, "L1_TILE_ID_TOMB_7", 75, -1);
add_enum_member (id, "L1_TILE_ID_TOMB_8", 76, -1);
add_enum_member (id, "L1_TILE_ID_TOMB_9", 77, -1);
add_enum_member (id, "L1_TILE_ID_TOMB_10", 78, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_2", 79, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SE_2", 80, -1);
add_enum_member (id, "L1_TILE_ID_WALL_NE_WALL_NW", 81, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_WALL_SE_2", 82, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_3", 83, -1);
add_enum_member (id, "L1_TILE_ID_WALL_END_SW_2", 84, -1);
add_enum_member (id, "L1_TILE_ID_WALL_END_SE_2", 85, -1);
add_enum_member (id, "L1_TILE_ID_WALL_END_NE", 86, -1);
add_enum_member (id, "L1_TILE_ID_WALL_END_NW", 87, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SE_3", 88, -1);
add_enum_member (id, "L1_TILE_ID_TAPESTRY_WALL_SW_1", 89, -1);
add_enum_member (id, "L1_TILE_ID_TAPESTRY_WALL_SW_2", 90, -1);
add_enum_member (id, "L1_TILE_ID_TAPESTRY_WALL_SE_1", 91, -1);
add_enum_member (id, "L1_TILE_ID_TAPESTRY_WALL_SE_2", 92, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_4", 93, -1);
add_enum_member (id, "L1_TILE_ID_TOMB_WALL_SW", 94, -1);
add_enum_member (id, "L1_TILE_ID_TOMB_WALL_SE", 95, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SE_4", 96, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_WALL_SE_1", 97, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_WALL_SE_2", 98, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_WALL_SE_3", 99, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_WALL_SW_1", 100, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_WALL_SW_2", 101, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_ARCH_SW", 102, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_DOOR_SW", 103, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_FLOOR_1", 104, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_FLOOR_2", 105, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_FLOOR_3", 106, -1);
add_enum_member (id, "L1_TILE_ID_CROSS_WALL_SW", 107, -1);
add_enum_member (id, "L1_TILE_ID_CROSS_WALL_SE", 108, -1);
add_enum_member (id, "L1_TILE_ID_NICHE_WALL_SW", 109, -1);
add_enum_member (id, "L1_TILE_ID_NICHE_WALL_SE", 110, -1);
add_enum_member (id, "L1_TILE_ID_STATUE_WALL_SW", 111, -1);
add_enum_member (id, "L1_TILE_ID_STATUE_WALL_SE", 112, -1);
add_enum_member (id, "L1_TILE_ID_TORCH_WALL_SW", 113, -1);
add_enum_member (id, "L1_TILE_ID_TORCH_WALL_SE", 114, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_WALL_SE_1", 115, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_WALL_SE_2", 116, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_WALL_SE_3", 117, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_ARCH_SE", 118, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_ENTERANCE_SE_1", 119, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_ENTERANCE_SE_2", 120, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_ARCH_SW_1", 121, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_WALL_SW_1", 122, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_ARCH_SW_2", 123, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_WALL_SW_2", 124, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_FLOOR_1", 125, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_ENTERANCE_SW_1", 126, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_ENTERANCE_SW_2", 127, -1);
add_enum_member (id, "L1_TILE_ID_CANDLESTICK_1", 128, -1);
add_enum_member (id, "L1_TILE_ID_CANDLESTICK_2", 129, -1);
add_enum_member (id, "L1_TILE_ID_CANDLESTICK_3", 130, -1);
add_enum_member (id, "L1_TILE_ID_SARCOPHAGUS_1", 131, -1);
add_enum_member (id, "L1_TILE_ID_SARCOPHAGUS_2", 132, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_FLOOR_2", 133, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_FLOOR_3", 134, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_FLOOR_4", 135, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_FLOOR_5", 136, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_FLOOR_6", 137, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_FLOOR_7", 138, -1);
add_enum_member (id, "L1_TILE_ID_FLOOR_SHADOW_ARCH_SW_RIGHT", 139, -1);
add_enum_member (id, "L1_TILE_ID_FLOOR_SHADOW_ARCH_SE_LEFT", 140, -1);
add_enum_member (id, "L1_TILE_ID_FLOOR_SHADOW_BAR_SW_RIGHT", 141, -1);
add_enum_member (id, "L1_TILE_ID_FLOOR_SHADOW_SHAFT_RIGHT", 142, -1);
add_enum_member (id, "L1_TILE_ID_FLOOR_SHADOW_ARCH_SE_LEFT_SHAFT_BOTTOM", 143, -1);
add_enum_member (id, "L1_TILE_ID_FLOOR_SHADOW_SHAFT_BOTTOM_1", 144, -1);
add_enum_member (id, "L1_TILE_ID_FLOOR_SHADOW_COLUMN_BOTTOM", 145, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_SHADOW_ARCH_SE_LEFT", 146, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_SW_SHADOW_ARCH_SE_LEFT", 147, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SE_SHADOW_ARCH_SW_RIGHT", 148, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_SE_SHADOW_ARCH_SW_RIGHT", 149, -1);
add_enum_member (id, "L1_TILE_ID_FLOOR_SHADOW_ARCH_SE_LEFT_ARCH_SW_RIGHT", 150, -1);
add_enum_member (id, "L1_TILE_ID_FLOOR_SHADOW_SHAFT_BOTTOM_ARCH_SW_RIGHT", 151, -1);
add_enum_member (id, "L1_TILE_ID_FLOOR_SHADOW_SHAFT_BOTTOM_2", 152, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_SE_SHADOW_BAR_SW_RIGHT", 153, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SE_SHADOW_BAR_SW_RIGHT", 154, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_3_SHADOW_ARCH_SE_LEFT", 155, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SE_3_SHADOW_ARCH_SW_RIGHT", 156, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SE_3_SHADOW_BAR_SW_RIGHT", 157, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_WALL_SE_3", 158, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_SW_WALL_SE_3", 159, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_3_WALL_SE", 160, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_3_ARCH_SE", 161, -1);
add_enum_member (id, "L1_TILE_ID_FLOOR_2", 162, -1);
add_enum_member (id, "L1_TILE_ID_FLOOR_3", 163, -1);
add_enum_member (id, "L1_TILE_ID_DOOR_SW_WALL_SE_3", 164, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_3_DOOR_SE", 165, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_WALL_SW_3", 166, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_WALL_SW_4", 167, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_WALL_SW_WALL_SE", 168, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_WALL_SE_4", 169, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_WALL_SE_5", 170, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_FLOOR_4", 171, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_FLOOR_5", 172, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_FLOOR_6", 173, -1);
add_enum_member (id, "L1_TILE_ID_BLOOD_FLOOR_7", 174, -1);
add_enum_member (id, "L1_TILE_ID_OPEN_DOOR_SW", 175, -1);
add_enum_member (id, "L1_TILE_ID_OPEN_DOOR_SE", 176, -1);
add_enum_member (id, "L1_TILE_ID_OPEN_DOOR_SW_OPEN_DOOR_SE", 177, -1);
add_enum_member (id, "L1_TILE_ID_OPEN_DOOR_END_SW", 178, -1);
add_enum_member (id, "L1_TILE_ID_OPEN_DOOR_END_SE", 179, -1);
add_enum_member (id, "L1_TILE_ID_OPEN_DOOR_SW_BAR_SE", 180, -1);
add_enum_member (id, "L1_TILE_ID_BAR_SW_OPEN_DOOR_SE", 181, -1);
add_enum_member (id, "L1_TILE_ID_OPEN_DOOR_SW_ARCH_SE", 182, -1);
add_enum_member (id, "L1_TILE_ID_OPEN_DOOR_SW_WALL_SE", 183, -1);
add_enum_member (id, "L1_TILE_ID_ARCH_SW_OPEN_DOOR_SE", 184, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_OPEN_DOOR_SE", 185, -1);
add_enum_member (id, "L1_TILE_ID_OPEN_BLOOD_DOOR_SW", 186, -1);
add_enum_member (id, "L1_TILE_ID_OPEN_DOOR_SW_WALL_SE_3", 187, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_3_OPEN_DOOR_SE", 188, -1);
add_enum_member (id, "L1_TILE_ID_OPEN_DOOR_SW_DOOR_SE", 189, -1);
add_enum_member (id, "L1_TILE_ID_DOOR_SW_OPEN_DOOR_SE", 190, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SW_5", 191, -1);
add_enum_member (id, "L1_TILE_ID_WALL_SE_5", 192, -1);
add_enum_member (id, "L1_TILE_ID_ENTERANCE_SW_1", 193, -1);
add_enum_member (id, "L1_TILE_ID_ENTERANCE_SE_1", 194, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_FLOOR_SHADOW", 195, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_FLOOR_SHADOW_ARCH_SW_RIGHT", 196, -1);
add_enum_member (id, "L1_TILE_ID_ENTERANCE_SW_2", 197, -1);
add_enum_member (id, "L1_TILE_ID_ENTERANCE_SE_2", 198, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_WALL_SW_DIRT", 199, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_WALL_SE_DIRT", 200, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_WALL_NE_WALL_NW_DIRT", 201, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_WALL_SW_WALL_SE_DIRT", 202, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_DIRT", 203, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_WALL_END_SW_DIRT", 204, -1);
add_enum_member (id, "L1_TILE_ID_DIRT_WALL_END_SE_DIRT", 205, -1);
add_enum_member (id, "L1_TILE_ID_BROKEN_ENTERANCE_SE_3", 206, -1);
cleanup("l2_tile_id");id = add_enum (-1, "l2_tile_id", FF_0NUMD);
set_enum_cmt (id, "Tile IDs for dungeon layout 2.", 0);
add_enum_member (id, "L2_TILE_ID_NONE", 0, -1);
cleanup("l3_tile_id");id = add_enum (-1, "l3_tile_id", FF_0NUMD);
set_enum_cmt (id, "Tile IDs for dungeon layout 3.", 0);
add_enum_member (id, "L3_TILE_ID_NONE", 0, -1);
cleanup("l4_tile_id");id = add_enum (-1, "l4_tile_id", FF_0NUMD);
set_enum_cmt (id, "Tile IDs for dungeon layout 4.", 0);
add_enum_member (id, "L4_TILE_ID_NONE", 0, -1);
cleanup("magic_type");id = add_enum (-1, "magic_type", FF_0NUMD);
set_enum_cmt (id, "Magic types.", 0);
add_enum_member (id, "MAGIC_TYPE_FIRE", 0, -1);
add_enum_member (id, "MAGIC_TYPE_LIGHTNING", 1, -1);
add_enum_member (id, "MAGIC_TYPE_MAGIC", 2, -1);
cleanup("missile_graphic_id");id = add_enum (-1, "missile_graphic_id", FF_0NUMD);
set_enum_cmt (id, "Missile graphic IDs specify missile_graphic_data array indices.", 0);
add_enum_member (id, "MISSILE_GRAPHIC_ID_ARROW", 0, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_ARROW"), " \"missiles/arrows.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_FIRE_BALL", 1, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_FIRE_BALL"), " \"missiles/fireba%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_GUARDIAN", 2, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_GUARDIAN"), " \"missiles/guard%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_LIGHTNING", 3, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_LIGHTNING"), " \"missiles/lghning.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_FIRE_WALL", 4, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_FIRE_WALL"), " \"missiles/firewal%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_MAGIC_BLOSSOM", 5, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_MAGIC_BLOSSOM"), " \"missiles/magblos.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_PORTAL", 6, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_PORTAL"), " \"missiles/portal%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_BLUE_EXPLOSION_FRONT", 7, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_BLUE_EXPLOSION_FRONT"), " \"missiles/bluexfr.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_BLUE_EXPLOSION_BACK", 8, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_BLUE_EXPLOSION_BACK"), " \"missiles/bluexbk.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_MANA_SHIELD", 9, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_MANA_SHIELD"), " \"missiles/manashld.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_BLOOD", 10, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_BLOOD"), " \"missiles/blood%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_BONE", 11, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_BONE"), " \"missiles/bone%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_METAL_HIT", 12, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_METAL_HIT"), " \"missiles/metlhit%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_FIRE_ARROW", 13, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_FIRE_ARROW"), " \"missiles/farrow%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_DOOM_SERPENT", 14, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_DOOM_SERPENT"), " \"missiles/doom%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_SPACE", 15, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_SPACE"), " \" \"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_BLOOD_BURST", 16, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_BLOOD_BURST"), " \"missiles/blodbur%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_EXPLOSION", 17, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_EXPLOSION"), " \"missiles/newexp.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_SHATTER", 18, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_SHATTER"), " \"missiles/shatter1.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_BIG_EXPLOSION", 19, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_BIG_EXPLOSION"), " \"missiles/bigexp.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_INFERNO", 20, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_INFERNO"), " \"missiles/inferno.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_THIN_LIGHTNING", 21, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_THIN_LIGHTNING"), " \"missiles/thinlght.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_FLARE", 22, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_FLARE"), " \"missiles/flare.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_FLARE_EXPLOSION", 23, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_FLARE_EXPLOSION"), " \"missiles/flareexp.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_MAGIC_BALL", 24, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_MAGIC_BALL"), " \"missiles/magball%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_KRULL", 25, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_KRULL"), " \"missiles/krull.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_MINI_LIGHTNING", 26, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_MINI_LIGHTNING"), " \"missiles/miniltng.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_HOLY_BOLT", 27, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_HOLY_BOLT"), " \"missiles/holy%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_HOLY_EXPLOSION", 28, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_HOLY_EXPLOSION"), " \"missiles/holyexpl.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_LIGHTNING_ARROW", 29, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_LIGHTNING_ARROW"), " \"missiles/larrow%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_FIRE_ARROW_EXPLOSION", 30, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_FIRE_ARROW_EXPLOSION"), " \"missiles/firarwex.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_ACID_BALL", 31, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_ACID_BALL"), " \"missiles/acidbf%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_ACID_SPLASH", 32, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_ACID_SPLASH"), " \"missiles/acidspla.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_ACID_PUDDLE", 33, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_ACID_PUDDLE"), " \"missiles/acidpud%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_ETHEREAL_SHIELD", 34, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_ETHEREAL_SHIELD"), " \"missiles/ethrshld.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_ELEMENTAL", 35, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_ELEMENTAL"), " \"missiles/firerun%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_RESURRECT", 36, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_RESURRECT"), " \"missiles/ressur1.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_SKULL_BALL", 37, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_SKULL_BALL"), " \"missiles/sklball%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_RED_PORTAL", 38, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_RED_PORTAL"), " \"missiles/rportal%i.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_FIRE_PILLAR", 39, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_FIRE_PILLAR"), " \"missiles/fireplar.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_BLUE_FLARE", 40, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_BLUE_FLARE"), " \"missiles/scubmisb.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_BLUE_FLARE_EXPLOSION", 41, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_BLUE_FLARE_EXPLOSION"), " \"missiles/scbsexpb.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_YELLOW_FLARE", 42, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_YELLOW_FLARE"), " \"missiles/scubmisc.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_YELLOW_FLARE_EXPLOSION", 43, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_YELLOW_FLARE_EXPLOSION"), " \"missiles/scbsexpc.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_RED_FLARE", 44, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_RED_FLARE"), " \"missiles/scubmisd.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_RED_FLARE_EXPLOSION", 45, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_RED_FLARE_EXPLOSION"), " \"missiles/scbsexpd.cl2\"", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_NULL", 46, -1);
set_enum_member_cmt (get_enum_member_by_name ("MISSILE_GRAPHIC_ID_NULL"), " NULL", 0);add_enum_member (id, "MISSILE_GRAPHIC_ID_INVALID", 47, -1);
cleanup("monster_ai_id");id = add_enum (-1, "monster_ai_id", FF_0NUMD);
set_enum_cmt (id, "Monster AIs.", 0);
add_enum_member (id, "MONSTER_AI_ID_ZOMBIE", 0, -1);
add_enum_member (id, "MONSTER_AI_ID_OVERLORD", 1, -1);
add_enum_member (id, "MONSTER_AI_ID_SKELETON_SWORD", 2, -1);
add_enum_member (id, "MONSTER_AI_ID_SKELETON_ARCHER", 3, -1);
add_enum_member (id, "MONSTER_AI_ID_SCAVENGER", 4, -1);
add_enum_member (id, "MONSTER_AI_ID_HORNED_DEMON", 5, -1);
add_enum_member (id, "MONSTER_AI_ID_GOAT_MAN", 6, -1);
add_enum_member (id, "MONSTER_AI_ID_GOAT_MAN_ARCHER", 7, -1);
add_enum_member (id, "MONSTER_AI_ID_FALLEN_ONE", 8, -1);
add_enum_member (id, "MONSTER_AI_ID_MAGMA_DEMON", 9, -1);
add_enum_member (id, "MONSTER_AI_ID_SKELETON_KING", 10, -1);
add_enum_member (id, "MONSTER_AI_ID_WINGED_FIEND", 11, -1);
add_enum_member (id, "MONSTER_AI_ID_GARGOYLE", 12, -1);
add_enum_member (id, "MONSTER_AI_ID_THE_BUTCHER", 13, -1);
add_enum_member (id, "MONSTER_AI_ID_SUCCUBUS", 14, -1);
add_enum_member (id, "MONSTER_AI_ID_HIDDEN", 15, -1);
add_enum_member (id, "MONSTER_AI_ID_LIGHTNING_DEMON", 16, -1);
add_enum_member (id, "MONSTER_AI_ID_FIREMAN", 17, -1);
add_enum_member (id, "MONSTER_AI_ID_GHARBAD_THE_WEAK", 18, -1);
add_enum_member (id, "MONSTER_AI_ID_SPITTING_TERROR", 19, -1);
add_enum_member (id, "MONSTER_AI_ID_FAST_SPITTING_TERROR", 20, -1);
add_enum_member (id, "MONSTER_AI_ID_GOLEM", 21, -1);
add_enum_member (id, "MONSTER_AI_ID_ZHAR_THE_MAD", 22, -1);
add_enum_member (id, "MONSTER_AI_ID_SNOTSPILL", 23, -1);
add_enum_member (id, "MONSTER_AI_ID_VIPER", 24, -1);
add_enum_member (id, "MONSTER_AI_ID_MAGE", 25, -1);
add_enum_member (id, "MONSTER_AI_ID_BALROG", 26, -1);
add_enum_member (id, "MONSTER_AI_ID_THE_DARK_LORD", 27, -1);
add_enum_member (id, "MONSTER_AI_ID_ARCH_BISHOP_LAZARUS", 28, -1);
add_enum_member (id, "MONSTER_AI_ID_UNIQUE_SUCCUBUS", 29, -1);
add_enum_member (id, "MONSTER_AI_ID_LACHDANAN", 30, -1);
add_enum_member (id, "MONSTER_AI_ID_WARLORD_OF_BLOOD", 31, -1);
cleanup("monster_id");id = add_enum (-1, "monster_id", FF_0NUMD);
set_enum_cmt (id, "Monster IDs specify monster_data array indices.", 0);
add_enum_member (id, "MONSTER_ID_ZOMBIE", 0, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_ZOMBIE"), " monsters/zombie/", 0);add_enum_member (id, "MONSTER_ID_GHOUL", 1, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_GHOUL"), " monsters/zombie/", 0);add_enum_member (id, "MONSTER_ID_ROTTING_CARCASS", 2, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_ROTTING_CARCASS"), " monsters/zombie/", 0);add_enum_member (id, "MONSTER_ID_BLACK_DEATH", 3, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_BLACK_DEATH"), " monsters/zombie/", 0);add_enum_member (id, "MONSTER_ID_FALLEN_ONE_SPEAR", 4, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_FALLEN_ONE_SPEAR"), " monsters/falspear/", 0);add_enum_member (id, "MONSTER_ID_CARVER_SPEAR", 5, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_CARVER_SPEAR"), " monsters/falspear/", 0);add_enum_member (id, "MONSTER_ID_DEVIL_KIN_SPEAR", 6, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_DEVIL_KIN_SPEAR"), " monsters/falspear/", 0);add_enum_member (id, "MONSTER_ID_DARK_ONE_SPEAR", 7, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_DARK_ONE_SPEAR"), " monsters/falspear/", 0);add_enum_member (id, "MONSTER_ID_SKELETON_AXE", 8, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_SKELETON_AXE"), " monsters/skelaxe/", 0);add_enum_member (id, "MONSTER_ID_CORPSE_AXE", 9, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_CORPSE_AXE"), " monsters/skelaxe/", 0);add_enum_member (id, "MONSTER_ID_BURNING_DEAD_AXE", 10, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_BURNING_DEAD_AXE"), " monsters/skelaxe/", 0);add_enum_member (id, "MONSTER_ID_HORROR_AXE", 11, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_HORROR_AXE"), " monsters/skelaxe/", 0);add_enum_member (id, "MONSTER_ID_FALLEN_ONE_SWORD", 12, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_FALLEN_ONE_SWORD"), " monsters/falsword/", 0);add_enum_member (id, "MONSTER_ID_CARVER_SWORD", 13, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_CARVER_SWORD"), " monsters/falsword/", 0);add_enum_member (id, "MONSTER_ID_DEVIL_KIN_SWORD", 14, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_DEVIL_KIN_SWORD"), " monsters/falsword/", 0);add_enum_member (id, "MONSTER_ID_DARK_ONE_SWORD", 15, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_DARK_ONE_SWORD"), " monsters/falsword/", 0);add_enum_member (id, "MONSTER_ID_SCAVENGER", 16, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_SCAVENGER"), " monsters/scav/", 0);add_enum_member (id, "MONSTER_ID_PLAGUE_EATER", 17, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_PLAGUE_EATER"), " monsters/scav/", 0);add_enum_member (id, "MONSTER_ID_SHADOW_BEAST", 18, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_SHADOW_BEAST"), " monsters/scav/", 0);add_enum_member (id, "MONSTER_ID_BONE_GASHER", 19, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_BONE_GASHER"), " monsters/scav/", 0);add_enum_member (id, "MONSTER_ID_SKELETON_BOW", 20, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_SKELETON_BOW"), " monsters/skelbow/", 0);add_enum_member (id, "MONSTER_ID_CORPSE_BOW", 21, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_CORPSE_BOW"), " monsters/skelbow/", 0);add_enum_member (id, "MONSTER_ID_BURNING_DEAD_BOW", 22, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_BURNING_DEAD_BOW"), " monsters/skelbow/", 0);add_enum_member (id, "MONSTER_ID_HORROR_BOW", 23, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_HORROR_BOW"), " monsters/skelbow/", 0);add_enum_member (id, "MONSTER_ID_SKELETON_CAPTAIN", 24, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_SKELETON_CAPTAIN"), " monsters/skelsd/", 0);add_enum_member (id, "MONSTER_ID_CORPSE_CAPTAIN", 25, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_CORPSE_CAPTAIN"), " monsters/skelsd/", 0);add_enum_member (id, "MONSTER_ID_BURNING_DEAD_CAPTAIN", 26, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_BURNING_DEAD_CAPTAIN"), " monsters/skelsd/", 0);add_enum_member (id, "MONSTER_ID_HORROR_CAPTAIN", 27, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_HORROR_CAPTAIN"), " monsters/skelsd/", 0);add_enum_member (id, "MONSTER_ID_INVISIBLE_LORD", 28, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_INVISIBLE_LORD"), " monsters/tsneak/", 0);add_enum_member (id, "MONSTER_ID_HIDDEN", 29, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_HIDDEN"), " monsters/sneak/", 0);add_enum_member (id, "MONSTER_ID_STALKER", 30, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_STALKER"), " monsters/sneak/", 0);add_enum_member (id, "MONSTER_ID_UNSEEN", 31, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_UNSEEN"), " monsters/sneak/", 0);add_enum_member (id, "MONSTER_ID_ILLUSION_WEAVER", 32, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_ILLUSION_WEAVER"), " monsters/sneak/", 0);add_enum_member (id, "MONSTER_ID_LORD_SAYTER", 33, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_LORD_SAYTER"), " monsters/goatlord/", 0);add_enum_member (id, "MONSTER_ID_FLESH_CLAN_MACE", 34, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_FLESH_CLAN_MACE"), " monsters/goatmace/", 0);add_enum_member (id, "MONSTER_ID_STONE_CLAN_MACE", 35, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_STONE_CLAN_MACE"), " monsters/goatmace/", 0);add_enum_member (id, "MONSTER_ID_FIRE_CLAN_MACE", 36, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_FIRE_CLAN_MACE"), " monsters/goatmace/", 0);add_enum_member (id, "MONSTER_ID_NIGHT_CLAN_MACE", 37, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_NIGHT_CLAN_MACE"), " monsters/goatmace/", 0);add_enum_member (id, "MONSTER_ID_FIEND", 38, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_FIEND"), " monsters/bat/", 0);add_enum_member (id, "MONSTER_ID_BLINK", 39, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_BLINK"), " monsters/bat/", 0);add_enum_member (id, "MONSTER_ID_GLOOM", 40, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_GLOOM"), " monsters/bat/", 0);add_enum_member (id, "MONSTER_ID_FAMILIAR", 41, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_FAMILIAR"), " monsters/bat/", 0);add_enum_member (id, "MONSTER_ID_FLESH_CLAN_BOW", 42, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_FLESH_CLAN_BOW"), " monsters/goatbow/", 0);add_enum_member (id, "MONSTER_ID_STONE_CLAN_BOW", 43, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_STONE_CLAN_BOW"), " monsters/goatbow/", 0);add_enum_member (id, "MONSTER_ID_FIRE_CLAN_BOW", 44, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_FIRE_CLAN_BOW"), " monsters/goatbow/", 0);add_enum_member (id, "MONSTER_ID_NIGHT_CLAN_BOW", 45, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_NIGHT_CLAN_BOW"), " monsters/goatbow/", 0);add_enum_member (id, "MONSTER_ID_ACID_BEAST", 46, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_ACID_BEAST"), " monsters/acid/", 0);add_enum_member (id, "MONSTER_ID_POISON_SPITTER", 47, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_POISON_SPITTER"), " monsters/acid/", 0);add_enum_member (id, "MONSTER_ID_PIT_BEAST", 48, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_PIT_BEAST"), " monsters/acid/", 0);add_enum_member (id, "MONSTER_ID_LAVA_MAW", 49, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_LAVA_MAW"), " monsters/acid/", 0);add_enum_member (id, "MONSTER_ID_SKELETON_KING", 50, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_SKELETON_KING"), " monsters/sking/", 0);add_enum_member (id, "MONSTER_ID_THE_BUTCHER", 51, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_THE_BUTCHER"), " monsters/fatc/", 0);add_enum_member (id, "MONSTER_ID_OVERLORD", 52, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_OVERLORD"), " monsters/fat/", 0);add_enum_member (id, "MONSTER_ID_MUD_MAN", 53, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_MUD_MAN"), " monsters/fat/", 0);add_enum_member (id, "MONSTER_ID_TOAD_DEMON", 54, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_TOAD_DEMON"), " monsters/fat/", 0);add_enum_member (id, "MONSTER_ID_FLAYED_ONE", 55, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_FLAYED_ONE"), " monsters/fat/", 0);add_enum_member (id, "MONSTER_ID_WYRM", 56, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_WYRM"), " monsters/worm/", 0);add_enum_member (id, "MONSTER_ID_CAVE_SLUG", 57, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_CAVE_SLUG"), " monsters/worm/", 0);add_enum_member (id, "MONSTER_ID_DEVIL_WYRM", 58, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_DEVIL_WYRM"), " monsters/worm/", 0);add_enum_member (id, "MONSTER_ID_DEVOURER", 59, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_DEVOURER"), " monsters/worm/", 0);add_enum_member (id, "MONSTER_ID_MAGMA_DEMON", 60, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_MAGMA_DEMON"), " monsters/magma/", 0);add_enum_member (id, "MONSTER_ID_BLOOD_STONE", 61, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_BLOOD_STONE"), " monsters/magma/", 0);add_enum_member (id, "MONSTER_ID_HELL_STONE", 62, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_HELL_STONE"), " monsters/magma/", 0);add_enum_member (id, "MONSTER_ID_LAVA_LORD", 63, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_LAVA_LORD"), " monsters/magma/", 0);add_enum_member (id, "MONSTER_ID_HORNED_DEMON", 64, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_HORNED_DEMON"), " monsters/rhino/", 0);add_enum_member (id, "MONSTER_ID_MUD_RUNNER", 65, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_MUD_RUNNER"), " monsters/rhino/", 0);add_enum_member (id, "MONSTER_ID_FROST_CHARGER", 66, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_FROST_CHARGER"), " monsters/rhino/", 0);add_enum_member (id, "MONSTER_ID_OBSIDIAN_LORD", 67, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_OBSIDIAN_LORD"), " monsters/rhino/", 0);add_enum_member (id, "MONSTER_ID_BONE_DEMON", 68, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_BONE_DEMON"), " monsters/demskel/", 0);add_enum_member (id, "MONSTER_ID_RED_DEATH", 69, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_RED_DEATH"), " monsters/thin/", 0);add_enum_member (id, "MONSTER_ID_LITCH_DEMON", 70, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_LITCH_DEMON"), " monsters/thin/", 0);add_enum_member (id, "MONSTER_ID_UNDEAD_BALROG", 71, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_UNDEAD_BALROG"), " monsters/thin/", 0);add_enum_member (id, "MONSTER_ID_INCINERATOR", 72, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_INCINERATOR"), " monsters/fireman/", 0);add_enum_member (id, "MONSTER_ID_FLAME_LORD", 73, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_FLAME_LORD"), " monsters/fireman/", 0);add_enum_member (id, "MONSTER_ID_DOOM_FIRE", 74, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_DOOM_FIRE"), " monsters/fireman/", 0);add_enum_member (id, "MONSTER_ID_HELL_BURNER", 75, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_HELL_BURNER"), " monsters/fireman/", 0);add_enum_member (id, "MONSTER_ID_RED_STORM", 76, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_RED_STORM"), " monsters/thin/", 0);add_enum_member (id, "MONSTER_ID_STORM_RIDER", 77, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_STORM_RIDER"), " monsters/thin/", 0);add_enum_member (id, "MONSTER_ID_STORM_LORD", 78, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_STORM_LORD"), " monsters/thin/", 0);add_enum_member (id, "MONSTER_ID_MAELSTORM", 79, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_MAELSTORM"), " monsters/thin/", 0);add_enum_member (id, "MONSTER_ID_DEVIL_KIN_BRUTE", 80, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_DEVIL_KIN_BRUTE"), " monsters/bigfall/", 0);add_enum_member (id, "MONSTER_ID_WINGED_DEMON", 81, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_WINGED_DEMON"), " monsters/gargoyle/", 0);add_enum_member (id, "MONSTER_ID_GARGOYLE", 82, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_GARGOYLE"), " monsters/gargoyle/", 0);add_enum_member (id, "MONSTER_ID_BLOOD_CLAW", 83, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_BLOOD_CLAW"), " monsters/gargoyle/", 0);add_enum_member (id, "MONSTER_ID_DEATH_WING", 84, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_DEATH_WING"), " monsters/gargoyle/", 0);add_enum_member (id, "MONSTER_ID_SLAYER", 85, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_SLAYER"), " monsters/mega/", 0);add_enum_member (id, "MONSTER_ID_GUARDIAN", 86, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_GUARDIAN"), " monsters/mega/", 0);add_enum_member (id, "MONSTER_ID_VORTEX_LORD", 87, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_VORTEX_LORD"), " monsters/mega/", 0);add_enum_member (id, "MONSTER_ID_BALROG", 88, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_BALROG"), " monsters/mega/", 0);add_enum_member (id, "MONSTER_ID_CAVE_VIPER", 89, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_CAVE_VIPER"), " monsters/snake/", 0);add_enum_member (id, "MONSTER_ID_FIRE_DRAKE", 90, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_FIRE_DRAKE"), " monsters/snake/", 0);add_enum_member (id, "MONSTER_ID_GOLD_VIPER", 91, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_GOLD_VIPER"), " monsters/snake/", 0);add_enum_member (id, "MONSTER_ID_AZURE_DRAKE", 92, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_AZURE_DRAKE"), " monsters/snake/", 0);add_enum_member (id, "MONSTER_ID_BLACK_KNIGHT", 93, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_BLACK_KNIGHT"), " monsters/black/", 0);add_enum_member (id, "MONSTER_ID_DOOM_GUARD", 94, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_DOOM_GUARD"), " monsters/black/", 0);add_enum_member (id, "MONSTER_ID_STEEL_LORD", 95, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_STEEL_LORD"), " monsters/black/", 0);add_enum_member (id, "MONSTER_ID_BLOOD_KNIGHT", 96, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_BLOOD_KNIGHT"), " monsters/black/", 0);add_enum_member (id, "MONSTER_ID_UNRAVELER", 97, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_UNRAVELER"), " monsters/unrav/", 0);add_enum_member (id, "MONSTER_ID_HOLLOW_ONE", 98, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_HOLLOW_ONE"), " monsters/unrav/", 0);add_enum_member (id, "MONSTER_ID_PAIN_MASTER", 99, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_PAIN_MASTER"), " monsters/unrav/", 0);add_enum_member (id, "MONSTER_ID_REALITY_WEAVER", 100, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_REALITY_WEAVER"), " monsters/unrav/", 0);add_enum_member (id, "MONSTER_ID_SUCCUBUS", 101, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_SUCCUBUS"), " monsters/succ/", 0);add_enum_member (id, "MONSTER_ID_SNOW_WITCH", 102, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_SNOW_WITCH"), " monsters/succ/", 0);add_enum_member (id, "MONSTER_ID_HELL_SPAWN", 103, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_HELL_SPAWN"), " monsters/succ/", 0);add_enum_member (id, "MONSTER_ID_SOUL_BURNER", 104, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_SOUL_BURNER"), " monsters/succ/", 0);add_enum_member (id, "MONSTER_ID_COUNSELOR", 105, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_COUNSELOR"), " monsters/mage/", 0);add_enum_member (id, "MONSTER_ID_MAGISTRATE", 106, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_MAGISTRATE"), " monsters/mage/", 0);add_enum_member (id, "MONSTER_ID_CABALIST", 107, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_CABALIST"), " monsters/mage/", 0);add_enum_member (id, "MONSTER_ID_ADVOCATE", 108, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_ADVOCATE"), " monsters/mage/", 0);add_enum_member (id, "MONSTER_ID_GOLEM", 109, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_GOLEM"), " monsters/golem/", 0);add_enum_member (id, "MONSTER_ID_THE_DARK_LORD", 110, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_THE_DARK_LORD"), " monsters/diablo/", 0);add_enum_member (id, "MONSTER_ID_THE_ARCH_LITCH_MALIGNUS", 111, -1);
set_enum_member_cmt (get_enum_member_by_name ("MONSTER_ID_THE_ARCH_LITCH_MALIGNUS"), " monsters/darkmage/", 0);add_enum_member (id, "MONSTER_ID_NONE", -1, -1);
cleanup("monster_mode");id = add_enum (-1, "monster_mode", FF_0NUMD);
set_enum_cmt (id, "Monster modes.", 0);
add_enum_member (id, "MONSTER_MODE_STANDING", 0, -1);
add_enum_member (id, "MONSTER_MODE_WALKING_1", 1, -1);
add_enum_member (id, "MONSTER_MODE_WALKING_2", 2, -1);
add_enum_member (id, "MONSTER_MODE_WALKING_3", 3, -1);
add_enum_member (id, "MONSTER_MODE_ATTACKING", 4, -1);
add_enum_member (id, "MONSTER_MODE_GETTING_HIT", 5, -1);
add_enum_member (id, "MONSTER_MODE_DYING", 6, -1);
add_enum_member (id, "MONSTER_MODE_ATTACKING_SPECIAL", 7, -1);
add_enum_member (id, "MONSTER_MODE_FADING_IN", 8, -1);
add_enum_member (id, "MONSTER_MODE_FADING_OUT", 9, -1);
add_enum_member (id, "MONSTER_MODE_ATTACKING_RANGED", 10, -1);
add_enum_member (id, "MONSTER_MODE_STANDING_SPECIAL", 11, -1);
add_enum_member (id, "MONSTER_MODE_ATTACKING_SPECIAL_RANGED", 12, -1);
add_enum_member (id, "MONSTER_MODE_DELAYING", 13, -1);
add_enum_member (id, "MONSTER_MODE_CHARGING", 14, -1);
add_enum_member (id, "MONSTER_MODE_STONED", 15, -1);
add_enum_member (id, "MONSTER_MODE_HEALING", 16, -1);
add_enum_member (id, "MONSTER_MODE_TALKING", 17, -1);
cleanup("net_msg_id");id = add_enum (-1, "net_msg_id", FF_0NUMD);
set_enum_cmt (id, "Network message IDs.", 0);
add_enum_member (id, "NET_MSG_ID_I_NEED_HELP_COME_HERE", 0, -1);
add_enum_member (id, "NET_MSG_ID_FOLLOW_ME", 1, -1);
add_enum_member (id, "NET_MSG_ID_HERES_SOMETHING_FOR_YOU", 2, -1);
add_enum_member (id, "NET_MSG_ID_NOW_YOU_DIE", 3, -1);
cleanup("object_graphic_id");id = add_enum (-1, "object_graphic_id", FF_0NUMD);
set_enum_cmt (id, "Object graphics.", 0);
add_enum_member (id, "OBJECT_GRAPHIC_ID_BRAZIER", 0, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_BRAZIER"), " l1braz", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_L1_DOOR", 1, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_L1_DOOR"), " l1doors", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_LEVER", 2, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_LEVER"), " lever", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_SMALL_CHEST", 3, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_SMALL_CHEST"), " chest1", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_CHEST", 4, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_CHEST"), " chest2", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_BANNER", 5, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_BANNER"), " banner", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_SKULL_PILE", 6, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_SKULL_PILE"), " skulpile", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_SKULL_FIRE", 7, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_SKULL_FIRE"), " skulfire", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_SKULL_STICK", 8, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_SKULL_STICK"), " skulstik", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_CRUCIFIED_SKELETON_S", 9, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_CRUCIFIED_SKELETON_S"), " cruxsk1", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_CRUCIFIED_SKELETON_SE", 10, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_CRUCIFIED_SKELETON_SE"), " cruxsk2", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_CRUCIFIED_SKELETON_SW", 11, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_CRUCIFIED_SKELETON_SW"), " cruxsk3", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_STEEL_TOME", 12, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_STEEL_TOME"), " book1", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_MYTHICAL_BOOK", 13, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_MYTHICAL_BOOK"), " book2", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_ROCK_STAND", 14, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_ROCK_STAND"), " rockstan", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_ANGEL", 15, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_ANGEL"), " angel", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_LARGE_CHEST", 16, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_LARGE_CHEST"), " chest3", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_BURNING_CROSS", 17, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_BURNING_CROSS"), " burncros", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_CANDLE", 18, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_CANDLE"), " candle2", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_NUDE", 19, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_NUDE"), " nude2", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_SKULL_LEVER", 20, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_SKULL_LEVER"), " switch4", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_TORTURED_NUDE_MAN", 21, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_TORTURED_NUDE_MAN"), " tnudem", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_TORTURED_NUDE_WOMAN", 22, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_TORTURED_NUDE_WOMAN"), " tnudew", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_TORTURED_SOUL", 23, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_TORTURED_SOUL"), " tsoul", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_L2_DOOR", 24, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_L2_DOOR"), " l2doors", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_WALL_TORCH_SIMPLE_SE", 25, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_WALL_TORCH_SIMPLE_SE"), " wtorch4", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_WALL_TORCH_SIMPLE_SW", 26, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_WALL_TORCH_SIMPLE_SW"), " wtorch3", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_SARCOPHAGUS", 27, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_SARCOPHAGUS"), " sarc", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_FLAME", 28, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_FLAME"), " flame1", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_PRESSURE_PLATE", 29, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_PRESSURE_PLATE"), " prsrplt1", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_TRAPHOLE", 30, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_TRAPHOLE"), " traphole", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_MINI_WATER", 31, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_MINI_WATER"), " miniwatr", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_WALL_TORCH_SE", 32, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_WALL_TORCH_SE"), " wtorch2", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_WALL_TORCH_SW", 33, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_WALL_TORCH_SW"), " wtorch1", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_BOOKCASE", 34, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_BOOKCASE"), " bcase", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_BOOKSHELF", 35, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_BOOKSHELF"), " bshelf", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_WEAPON_RACK", 36, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_WEAPON_RACK"), " weapstnd", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_BARREL", 37, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_BARREL"), " barrel", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_BARREL_EXPLOSION", 38, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_BARREL_EXPLOSION"), " barrelex", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_LEFT_SHRINE", 39, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_LEFT_SHRINE"), " lshrineg", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_RIGHT_SHRINE", 40, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_RIGHT_SHRINE"), " rshrineg", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_BLOOD_FOUNTAIN", 41, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_BLOOD_FOUNTAIN"), " bloodfnt", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_DECAPITATED_BODY", 42, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_DECAPITATED_BODY"), " decap", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_PEDESTAL_OF_BLOOD", 43, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_PEDESTAL_OF_BLOOD"), " pedistl", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_L3_DOOR", 44, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_L3_DOOR"), " l3doors", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_PURIFYING_SPRING", 45, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_PURIFYING_SPRING"), " pfountn", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_ARMOR_STAND", 46, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_ARMOR_STAND"), " armstand", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_GOAT_SHRINE", 47, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_GOAT_SHRINE"), " goatshrn", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_CAULDRON", 48, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_CAULDRON"), " cauldren", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_MURKY_POOL", 49, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_MURKY_POOL"), " mfountn", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_FOUNTAIN_OF_TEARS", 50, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_FOUNTAIN_OF_TEARS"), " tfountn", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_ALTAR_BOY", 51, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_ALTAR_BOY"), " altboy", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_MAGIC_CIRCLE", 52, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_MAGIC_CIRCLE"), " mcirl", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_LABYRINTH_BOOKS", 53, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_LABYRINTH_BOOKS"), " bkslbrnt", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_MUSHROOM_PATCH", 54, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_MUSHROOM_PATCH"), " mushptch", 0);add_enum_member (id, "OBJECT_GRAPHIC_ID_VILE_STAND", 55, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_GRAPHIC_ID_VILE_STAND"), " lzstand", 0);cleanup("object_id");id = add_enum (-1, "object_id", FF_0NUMD);
set_enum_cmt (id, "Object IDs specify object_data array indices.", 0);
add_enum_member (id, "OBJECT_ID_BRAZIER", 0, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BRAZIER"), " l1braz (animated, ticksPerFrame 1)", 0);add_enum_member (id, "OBJECT_ID_L1_DOOR_SW", 1, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_L1_DOOR_SW"), " l1doors (frame 0)", 0);add_enum_member (id, "OBJECT_ID_L1_DOOR_SE", 2, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_L1_DOOR_SE"), " l1doors (frame 1)", 0);add_enum_member (id, "OBJECT_ID_SKULL_FIRE_THEME_3", 3, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_SKULL_FIRE_THEME_3"), " skulfire (animated, ticksPerFrame 2)", 0);add_enum_member (id, "OBJECT_ID_LEVER_POS_A", 4, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_LEVER_POS_A"), " lever (frame 0)", 0);add_enum_member (id, "OBJECT_ID_SMALL_CHEST", 5, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_SMALL_CHEST"), " chest1 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_CHEST", 6, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_CHEST"), " chest2 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_LARGE_CHEST", 7, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_LARGE_CHEST"), " chest3 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_INVALID_1", 8, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_INVALID_1"), " l1braz (invalid frame)", 0);add_enum_member (id, "OBJECT_ID_CANDLE_THEME_1", 9, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_CANDLE_THEME_1"), " candle2 (animated, ticksPerFrame 2)", 0);add_enum_member (id, "OBJECT_ID_INVALID_2", 10, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_INVALID_2"), " l1braz (invalid frame)", 0);add_enum_member (id, "OBJECT_ID_BANNER_SE_THEME_3", 11, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BANNER_SE_THEME_3"), " banner (frame 1)", 0);add_enum_member (id, "OBJECT_ID_BANNER_THEME_3", 12, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BANNER_THEME_3"), " banner (frame 0)", 0);add_enum_member (id, "OBJECT_ID_BANNER_SW_THEME_3", 13, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BANNER_SW_THEME_3"), " banner (frame 2)", 0);add_enum_member (id, "OBJECT_ID_SKULL_PILE", 14, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_SKULL_PILE"), " skulpile (invalid frame)", 0);add_enum_member (id, "OBJECT_ID_INVALID_3", 15, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_INVALID_3"), " l1braz (invalid frame)", 0);add_enum_member (id, "OBJECT_ID_INVALID_4", 16, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_INVALID_4"), " l1braz (invalid frame)", 0);add_enum_member (id, "OBJECT_ID_INVALID_5", 17, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_INVALID_5"), " l1braz (invalid frame)", 0);add_enum_member (id, "OBJECT_ID_INVALID_6", 18, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_INVALID_6"), " l1braz (invalid frame)", 0);add_enum_member (id, "OBJECT_ID_INVALID_7", 19, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_INVALID_7"), " l1braz (invalid frame)", 0);add_enum_member (id, "OBJECT_ID_CRUCIFIED_SKELETON_S", 20, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_CRUCIFIED_SKELETON_S"), " cruxsk1 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_CRUCIFIED_SKELETON_SE", 21, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_CRUCIFIED_SKELETON_SE"), " cruxsk2 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_CRUCIFIED_SKELETON_SW", 22, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_CRUCIFIED_SKELETON_SW"), " cruxsk3 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_ROCK_STAND", 23, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_ROCK_STAND"), " rockstan (frame 0)", 0);add_enum_member (id, "OBJECT_ID_ANGEL", 24, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_ANGEL"), " angel (frame 0)", 0);add_enum_member (id, "OBJECT_ID_ANCIENT_TOME_OR_BOOK_OF_VILENESS", 25, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_ANCIENT_TOME_OR_BOOK_OF_VILENESS"), " book2 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_BURNING_CROSS", 26, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BURNING_CROSS"), " burncros (animated, ticksPerFrame 0)", 0);add_enum_member (id, "OBJECT_ID_NUDE", 27, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_NUDE"), " nude2 (animated, ticksPerFrame 3)", 0);add_enum_member (id, "OBJECT_ID_SKULL_LEVER", 28, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_SKULL_LEVER"), " switch4 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_TORTURED_NUDE_MAN_0", 29, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_TORTURED_NUDE_MAN_0"), " tnudem (frame 0)", 0);add_enum_member (id, "OBJECT_ID_TORTURED_NUDE_MAN_1_THEME_6", 30, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_TORTURED_NUDE_MAN_1_THEME_6"), " tnudem (frame 1)", 0);add_enum_member (id, "OBJECT_ID_TORTURED_NUDE_MAN_2_THEME_6", 31, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_TORTURED_NUDE_MAN_2_THEME_6"), " tnudem (frame 2)", 0);add_enum_member (id, "OBJECT_ID_TORTURED_NUDE_MAN_3_THEME_6", 32, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_TORTURED_NUDE_MAN_3_THEME_6"), " tnudem (frame 3)", 0);add_enum_member (id, "OBJECT_ID_TORTURED_NUDE_WOMAN_0_THEME_6", 33, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_TORTURED_NUDE_WOMAN_0_THEME_6"), " tnudew (frame 0)", 0);add_enum_member (id, "OBJECT_ID_TORTURED_NUDE_WOMAN_1_THEME_6", 34, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_TORTURED_NUDE_WOMAN_1_THEME_6"), " tnudew (frame 1)", 0);add_enum_member (id, "OBJECT_ID_TORTURED_NUDE_WOMAN_2_THEME_6", 35, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_TORTURED_NUDE_WOMAN_2_THEME_6"), " tnudew (frame 2)", 0);add_enum_member (id, "OBJECT_ID_TORTURED_SOUL_0", 36, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_TORTURED_SOUL_0"), " tsoul (frame 0)", 0);add_enum_member (id, "OBJECT_ID_TORTURED_SOUL_1", 37, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_TORTURED_SOUL_1"), " tsoul (frame 1)", 0);add_enum_member (id, "OBJECT_ID_TORTURED_SOUL_2", 38, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_TORTURED_SOUL_2"), " tsoul (frame 2)", 0);add_enum_member (id, "OBJECT_ID_TORTURED_SOUL_3", 39, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_TORTURED_SOUL_3"), " tsoul (frame 3)", 0);add_enum_member (id, "OBJECT_ID_TORTURED_SOUL_4", 40, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_TORTURED_SOUL_4"), " tsoul (frame 4)", 0);add_enum_member (id, "OBJECT_ID_MYTHICAL_BOOK", 41, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_MYTHICAL_BOOK"), " book2 (frame 3)", 0);add_enum_member (id, "OBJECT_ID_L2_DOOR_SW", 42, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_L2_DOOR_SW"), " l2doors (frame 0)", 0);add_enum_member (id, "OBJECT_ID_L2_DOOR_SE", 43, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_L2_DOOR_SE"), " l2doors (frame 1)", 0);add_enum_member (id, "OBJECT_ID_WALL_TORCH_SIMPLE_SE", 44, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_WALL_TORCH_SIMPLE_SE"), " wtorch4 (animated, ticksPerFrame 1)", 0);add_enum_member (id, "OBJECT_ID_WALL_TORCH_SIMPLE_SW", 45, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_WALL_TORCH_SIMPLE_SW"), " wtorch3 (animated, ticksPerFrame 1)", 0);add_enum_member (id, "OBJECT_ID_WALL_TORCH_SW", 46, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_WALL_TORCH_SW"), " wtorch1 (animated, ticksPerFrame 1)", 0);add_enum_member (id, "OBJECT_ID_WALL_TORCH_SE", 47, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_WALL_TORCH_SE"), " wtorch2 (animated, ticksPerFrame 1)", 0);add_enum_member (id, "OBJECT_ID_SARCOPHAGUS", 48, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_SARCOPHAGUS"), " sarc (frame 0)", 0);add_enum_member (id, "OBJECT_ID_FLAME", 49, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_FLAME"), " flame1 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_LEVER_POS_B", 50, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_LEVER_POS_B"), " lever (frame 0)", 0);add_enum_member (id, "OBJECT_ID_MINI_WATER", 51, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_MINI_WATER"), " miniwatr (animated, ticksPerFrame 1)", 0);add_enum_member (id, "OBJECT_ID_BOOK_CLOSED", 52, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BOOK_CLOSED"), " book1 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_TRAPHOLE_SW", 53, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_TRAPHOLE_SW"), " traphole (frame 0)", 0);add_enum_member (id, "OBJECT_ID_TRAPHOLE_SE", 54, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_TRAPHOLE_SE"), " traphole (frame 1)", 0);add_enum_member (id, "OBJECT_ID_BOOKCASE", 55, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BOOKCASE"), " bcase (frame 0)", 0);add_enum_member (id, "OBJECT_ID_WEAPON_RACK", 56, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_WEAPON_RACK"), " weapstnd (frame 0)", 0);add_enum_member (id, "OBJECT_ID_BARREL", 57, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BARREL"), " barrel (frame 0)", 0);add_enum_member (id, "OBJECT_ID_BARREL_EXPLOSION", 58, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BARREL_EXPLOSION"), " barrelex (frame 0)", 0);add_enum_member (id, "OBJECT_ID_LEFT_SHRINE_THEME_1", 59, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_LEFT_SHRINE_THEME_1"), " lshrineg (frame 0)", 0);add_enum_member (id, "OBJECT_ID_RIGHT_SHRINE_THEME_1", 60, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_RIGHT_SHRINE_THEME_1"), " rshrineg (frame 0)", 0);add_enum_member (id, "OBJECT_ID_SKELETON_TOME_THEME_3", 61, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_SKELETON_TOME_THEME_3"), " book2 (frame 3)", 0);add_enum_member (id, "OBJECT_ID_BOOKCASE_SW_THEME_5", 62, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BOOKCASE_SW_THEME_5"), " bcase (frame 2)", 0);add_enum_member (id, "OBJECT_ID_BOOKCASE_SE_THEME_5", 63, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BOOKCASE_SE_THEME_5"), " bcase (frame 3)", 0);add_enum_member (id, "OBJECT_ID_LIBRARY_BOOK_THEME_5", 64, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_LIBRARY_BOOK_THEME_5"), " book2 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_CANDLE_THEME_5", 65, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_CANDLE_THEME_5"), " candle2 (animated, ticksPerFrame 2)", 0);add_enum_member (id, "OBJECT_ID_BLOOD_FOUNTAIN_THEME_7", 66, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BLOOD_FOUNTAIN_THEME_7"), " bloodfnt (animated, ticksPerFrame 2)", 0);add_enum_member (id, "OBJECT_ID_DECAPITATED_BODY_N_THEME_8", 67, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_DECAPITATED_BODY_N_THEME_8"), " decap (frame 0)", 0);add_enum_member (id, "OBJECT_ID_SMALL_CHEST_TRAP", 68, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_SMALL_CHEST_TRAP"), " chest1 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_CHEST_TRAP", 69, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_CHEST_TRAP"), " chest2 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_LARGE_CHEST_TRAP", 70, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_LARGE_CHEST_TRAP"), " chest3 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_BOOK_OF_THE_BLIND", 71, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BOOK_OF_THE_BLIND"), " book1 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_BOOK_OF_BLOOD", 72, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BOOK_OF_BLOOD"), " book1 (frame 3)", 0);add_enum_member (id, "OBJECT_ID_PEDESTAL_OF_BLOOD", 73, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_PEDESTAL_OF_BLOOD"), " pedistl (frame 0)", 0);add_enum_member (id, "OBJECT_ID_L3_DOOR_SE", 74, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_L3_DOOR_SE"), " l3doors (frame 0)", 0);add_enum_member (id, "OBJECT_ID_L3_DOOR_SW", 75, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_L3_DOOR_SW"), " l3doors (frame 1)", 0);add_enum_member (id, "OBJECT_ID_PURIFYING_SPRING_THEME_9", 76, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_PURIFYING_SPRING_THEME_9"), " pfountn (animated, ticksPerFrame 2)", 0);add_enum_member (id, "OBJECT_ID_ARMOR_STAND_THEME_10", 77, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_ARMOR_STAND_THEME_10"), " armstand (frame 0)", 0);add_enum_member (id, "OBJECT_ID_ARMOR_STAND_THEME_10_EMPTY", 78, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_ARMOR_STAND_THEME_10_EMPTY"), " armstand (frame 1)", 0);add_enum_member (id, "OBJECT_ID_GOAT_SHRINE_THEME_11", 79, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_GOAT_SHRINE_THEME_11"), " goatshrn (animated, ticksPerFrame 2)", 0);add_enum_member (id, "OBJECT_ID_CAULDRON", 80, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_CAULDRON"), " cauldren (frame 0)", 0);add_enum_member (id, "OBJECT_ID_MURKY_POOL_THEME_13", 81, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_MURKY_POOL_THEME_13"), " mfountn (animated, ticksPerFrame 2)", 0);add_enum_member (id, "OBJECT_ID_FOUNTAIN_OF_TEARS_THEME_14", 82, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_FOUNTAIN_OF_TEARS_THEME_14"), " tfountn (animated, ticksPerFrame 2)", 0);add_enum_member (id, "OBJECT_ID_ALTAR_BOY", 83, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_ALTAR_BOY"), " altboy (frame 0)", 0);add_enum_member (id, "OBJECT_ID_MAGIC_CIRCLE_PENTAGRAM", 84, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_MAGIC_CIRCLE_PENTAGRAM"), " mcirl (frame 0)", 0);add_enum_member (id, "OBJECT_ID_MAGIC_CIRCLE", 85, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_MAGIC_CIRCLE"), " mcirl (frame 0) [frame 2 in game]", 0);add_enum_member (id, "OBJECT_ID_LABYRINTH_BOOKS", 86, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_LABYRINTH_BOOKS"), " bkslbrnt (frame 0)", 0);add_enum_member (id, "OBJECT_ID_CANDLE", 87, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_CANDLE"), " candle2 (animated, ticksPerFrame 2)", 0);add_enum_member (id, "OBJECT_ID_STEEL_TOME", 88, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_STEEL_TOME"), " book1 (frame 3)", 0);add_enum_member (id, "OBJECT_ID_ARMOR_STAND_WARLORD_OF_BLOOD", 89, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_ARMOR_STAND_WARLORD_OF_BLOOD"), " armstand (frame 0)", 0);add_enum_member (id, "OBJECT_ID_WEAPON_RACK_WARLORD_OF_BLOOD", 90, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_WEAPON_RACK_WARLORD_OF_BLOOD"), " weapstnd (frame 0)", 0);add_enum_member (id, "OBJECT_ID_BURNING_CROSS_THEME_15", 91, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_BURNING_CROSS_THEME_15"), " burncros (animated, ticksPerFrame 0)", 0);add_enum_member (id, "OBJECT_ID_WEAPON_RACK_THEME_16", 92, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_WEAPON_RACK_THEME_16"), " weapstnd (frame 0)", 0);add_enum_member (id, "OBJECT_ID_WEAPON_RACK_THEME_16_EMPTY", 93, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_WEAPON_RACK_THEME_16_EMPTY"), " weapstnd (frame 1)", 0);add_enum_member (id, "OBJECT_ID_MUSHROOM_PATCH", 94, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_MUSHROOM_PATCH"), " mushptch (frame 0)", 0);add_enum_member (id, "OBJECT_ID_VILE_STAND", 95, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_VILE_STAND"), " lzstand (frame 0)", 0);add_enum_member (id, "OBJECT_ID_SLAIN_HERO", 96, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_SLAIN_HERO"), " decap (frame 1)", 0);add_enum_member (id, "OBJECT_ID_LARGE_CHEST_OGDENS_SIGN", 97, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_LARGE_CHEST_OGDENS_SIGN"), " chest3 (frame 0)", 0);add_enum_member (id, "OBJECT_ID_INVALID_8", 98, -1);
set_enum_member_cmt (get_enum_member_by_name ("OBJECT_ID_INVALID_8"), " l1braz (invalid frame)", 0);cleanup("panel_button_id");id = add_enum (-1, "panel_button_id", FF_0NUMD);
set_enum_cmt (id, "Pannel button IDs specify panel_buttons array indices.", 0);
add_enum_member (id, "PANEL_BUTTON_ID_CHARACTER_INFORMATION", 0, -1);
add_enum_member (id, "PANEL_BUTTON_ID_QUESTS_LOG", 1, -1);
add_enum_member (id, "PANEL_BUTTON_ID_AUTOMAP", 2, -1);
add_enum_member (id, "PANEL_BUTTON_ID_MAIN_MENU", 3, -1);
add_enum_member (id, "PANEL_BUTTON_ID_INVENTORY", 4, -1);
add_enum_member (id, "PANEL_BUTTON_ID_SPELL_BOOK", 5, -1);
add_enum_member (id, "PANEL_BUTTON_ID_SEND_MESSAGE", 6, -1);
add_enum_member (id, "PANEL_BUTTON_ID_PLAYER_ATTACK", 7, -1);
cleanup("player_class");id = add_enum (-1, "player_class", FF_0NUMD);
set_enum_cmt (id, "Player classes.", 0);
add_enum_member (id, "PLAYER_CLASS_WARRIOR", 0, -1);
add_enum_member (id, "PLAYER_CLASS_ROGUE", 1, -1);
add_enum_member (id, "PLAYER_CLASS_SORCEROR", 2, -1);
cleanup("player_mode");id = add_enum (-1, "player_mode", FF_0NUMD);
set_enum_cmt (id, "Player modes.", 0);
add_enum_member (id, "PLAYER_MODE_STANDING", 0, -1);
add_enum_member (id, "PLAYER_MODE_WALKING_1", 1, -1);
add_enum_member (id, "PLAYER_MODE_WALKING_2", 2, -1);
add_enum_member (id, "PLAYER_MODE_WALKING_3", 3, -1);
add_enum_member (id, "PLAYER_MODE_ATTACKING_MELEE", 4, -1);
add_enum_member (id, "PLAYER_MODE_ATTACKING_RANGED", 5, -1);
add_enum_member (id, "PLAYER_MODE_BLOCKING", 6, -1);
add_enum_member (id, "PLAYER_MODE_GETTING_HIT", 7, -1);
add_enum_member (id, "PLAYER_MODE_DYING", 8, -1);
add_enum_member (id, "PLAYER_MODE_CASTING_A_SPELL", 9, -1);
add_enum_member (id, "PLAYER_MODE_CHANGING_LEVELS", 10, -1);
add_enum_member (id, "PLAYER_MODE_QUITTING", 11, -1);
cleanup("quest_id");id = add_enum (-1, "quest_id", FF_0NUMD);
set_enum_cmt (id, "Quest IDs specify quest_data array indices.", 0);
add_enum_member (id, "QUEST_ID_THE_MAGIC_ROCK", 0, -1);
add_enum_member (id, "QUEST_ID_BLACK_MUSHROOM", 1, -1);
add_enum_member (id, "QUEST_ID_GHARBAD_THE_WEAK", 2, -1);
add_enum_member (id, "QUEST_ID_ZHAR_THE_MAD", 3, -1);
add_enum_member (id, "QUEST_ID_LACHDANAN", 4, -1);
add_enum_member (id, "QUEST_ID_DIABLO", 5, -1);
add_enum_member (id, "QUEST_ID_THE_BUTCHER", 6, -1);
add_enum_member (id, "QUEST_ID_OGDENS_SIGN", 7, -1);
add_enum_member (id, "QUEST_ID_HALLS_OF_THE_BLIND", 8, -1);
add_enum_member (id, "QUEST_ID_VALOR", 9, -1);
add_enum_member (id, "QUEST_ID_ANVIL_OF_FURY", 10, -1);
add_enum_member (id, "QUEST_ID_WARLORD_OF_BLOOD", 11, -1);
add_enum_member (id, "QUEST_ID_THE_CURSE_OF_KING_LEORIC", 12, -1);
add_enum_member (id, "QUEST_ID_POISONED_WATER_SUPPLY", 13, -1);
add_enum_member (id, "QUEST_ID_THE_CHAMBER_OF_BONE", 14, -1);
add_enum_member (id, "QUEST_ID_ARCHBISHOP_LAZARUS", 15, -1);
add_enum_member (id, "QUEST_ID_INVALID", -1, -1);
cleanup("quest_level");id = add_enum (-1, "quest_level", FF_0NUMD);
set_enum_cmt (id, "Quest levels.", 0);
add_enum_member (id, "QUEST_LEVEL_NONE", 0, -1);
add_enum_member (id, "QUEST_LEVEL_SKELETON_KINGS_LAIR", 1, -1);
add_enum_member (id, "QUEST_LEVEL_BONE_CHAMBER", 2, -1);
add_enum_member (id, "QUEST_LEVEL_MAZE", 3, -1);
add_enum_member (id, "QUEST_LEVEL_POISONED_WATER_SUPPLY", 4, -1);
add_enum_member (id, "QUEST_LEVEL_ARCHBISHOP_LAZARUS_LAIR", 5, -1);
cleanup("quest_level_id");id = add_enum (-1, "quest_level_id", FF_0NUMD);
set_enum_cmt (id, "Quest level IDs.", 0);
add_enum_member (id, "QUEST_LEVEL_ID_KING_LEORICS_TOMB", 0, -1);
add_enum_member (id, "QUEST_LEVEL_ID_THE_CHAMBER_OF_BONE", 1, -1);
add_enum_member (id, "QUEST_LEVEL_ID_MAZE", 2, -1);
add_enum_member (id, "QUEST_LEVEL_ID_A_DARK_PASSAGE", 3, -1);
add_enum_member (id, "QUEST_LEVEL_ID_UNHOLY_ALTAR", 4, -1);
cleanup("quest_state");id = add_enum (-1, "quest_state", FF_0NUMD);
set_enum_cmt (id, "Quest state records the progress of the quest.", 0);
add_enum_member (id, "QUEST_STATE_INACTIVE", 0, -1);
add_enum_member (id, "QUEST_STATE_WAITING", 1, -1);
add_enum_member (id, "QUEST_STATE_ACTIVE", 2, -1);
add_enum_member (id, "QUEST_STATE_COMPLETE", 3, -1);
cleanup("sfx_flag");id = add_enum (-1, "sfx_flag", FF_0NUMH);
set_enum_cmt (id, "Sound effects to load.", 0);
add_enum_member (id, "SFX_FLAG_STREAM", 1, -1);
add_enum_member (id, "SFX_FLAG_MISC", 2, -1);
add_enum_member (id, "SFX_FLAG_UI", 4, -1);
add_enum_member (id, "SFX_FLAG_08", 8, -1);
add_enum_member (id, "SFX_FLAG_ROGUE", 16, -1);
add_enum_member (id, "SFX_FLAG_WARRIOR", 32, -1);
add_enum_member (id, "SFX_FLAG_SORCEROR", 64, -1);
add_enum_member (id, "SFX_FLAG_LOADED", 128, -1);
set_enum_bf (id, 1);
cleanup("sfx_id");id = add_enum (-1, "sfx_id", FF_0NUMD);
set_enum_cmt (id, "Sound effect IDs specify sfx_data array indices.", 0);
add_enum_member (id, "SFX_ID_MISC_WALK1_WAV", 0, -1);
add_enum_member (id, "SFX_ID_MISC_WALK2_WAV", 1, -1);
add_enum_member (id, "SFX_ID_MISC_WALK3_WAV", 2, -1);
add_enum_member (id, "SFX_ID_MISC_WALK4_WAV", 3, -1);
add_enum_member (id, "SFX_ID_MISC_BFIRE_WAV", 4, -1);
add_enum_member (id, "SFX_ID_MISC_FMAG_WAV", 5, -1);
add_enum_member (id, "SFX_ID_MISC_TMAG_WAV", 6, -1);
add_enum_member (id, "SFX_ID_MISC_LGHIT_WAV", 7, -1);
add_enum_member (id, "SFX_ID_MISC_LGHIT1_WAV", 8, -1);
add_enum_member (id, "SFX_ID_MISC_SWING_WAV", 9, -1);
add_enum_member (id, "SFX_ID_MISC_SWING2_WAV", 10, -1);
add_enum_member (id, "SFX_ID_MISC_DEAD_WAV", 11, -1);
add_enum_member (id, "SFX_ID_MISC_QUESTDON_WAV", 12, -1);
add_enum_member (id, "SFX_ID_ITEMS_ARMRFKD_WAV", 13, -1);
add_enum_member (id, "SFX_ID_ITEMS_BARLFIRE_WAV", 14, -1);
add_enum_member (id, "SFX_ID_ITEMS_BARREL_WAV", 15, -1);
add_enum_member (id, "SFX_ID_ITEMS_BHIT_WAV", 16, -1);
add_enum_member (id, "SFX_ID_ITEMS_BHIT1_WAV", 17, -1);
add_enum_member (id, "SFX_ID_ITEMS_CHEST_WAV", 18, -1);
add_enum_member (id, "SFX_ID_ITEMS_DOORCLOS_WAV", 19, -1);
add_enum_member (id, "SFX_ID_ITEMS_DOOROPEN_WAV", 20, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPANVL_WAV", 21, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPAXE_WAV", 22, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPBLST_WAV", 23, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPBODY_WAV", 24, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPBOOK_WAV", 25, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPBOW_WAV", 26, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPCAP_WAV", 27, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPHARM_WAV", 28, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPLARM_WAV", 29, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPMAG_WAV", 30, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPMAG1_WAV", 31, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPMUSH_WAV", 32, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPPOT_WAV", 33, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPRING_WAV", 34, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPROCK_WAV", 35, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPSCRL_WAV", 36, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPSHLD_WAV", 37, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPSIGN_WAV", 38, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPSTAF_WAV", 39, -1);
add_enum_member (id, "SFX_ID_ITEMS_FLIPSWOR_WAV", 40, -1);
add_enum_member (id, "SFX_ID_ITEMS_GOLD_WAV", 41, -1);
add_enum_member (id, "SFX_ID_ITEMS_HLMTFKD_WAV", 42, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVANVL_WAV", 43, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVAXE_WAV", 44, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVBLST_WAV", 45, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVBODY_WAV", 46, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVBOOK_WAV", 47, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVBOW_WAV", 48, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVCAP_WAV", 49, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVGRAB_WAV", 50, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVHARM_WAV", 51, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVLARM_WAV", 52, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVMUSH_WAV", 53, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVPOT_WAV", 54, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVRING_WAV", 55, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVROCK_WAV", 56, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVSCROL_WAV", 57, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVSHIEL_WAV", 58, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVSIGN_WAV", 59, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVSTAF_WAV", 60, -1);
add_enum_member (id, "SFX_ID_ITEMS_INVSWORD_WAV", 61, -1);
add_enum_member (id, "SFX_ID_ITEMS_LEVER_WAV", 62, -1);
add_enum_member (id, "SFX_ID_ITEMS_MAGIC_WAV", 63, -1);
add_enum_member (id, "SFX_ID_ITEMS_MAGIC1_WAV", 64, -1);
add_enum_member (id, "SFX_ID_ITEMS_READBOOK_WAV", 65, -1);
add_enum_member (id, "SFX_ID_ITEMS_SARC_WAV", 66, -1);
add_enum_member (id, "SFX_ID_ITEMS_SHIELFKD_WAV", 67, -1);
add_enum_member (id, "SFX_ID_ITEMS_SWRDFKD_WAV", 68, -1);
add_enum_member (id, "SFX_ID_ITEMS_TITLEMOV_WAV", 69, -1);
add_enum_member (id, "SFX_ID_ITEMS_TITLSLCT_WAV", 70, -1);
add_enum_member (id, "SFX_ID_MISC_BLANK_WAV", 71, -1);
add_enum_member (id, "SFX_ID_ITEMS_TRAP_WAV", 72, -1);
add_enum_member (id, "SFX_ID_MISC_CAST1_WAV", 73, -1);
add_enum_member (id, "SFX_ID_MISC_CAST10_WAV", 74, -1);
add_enum_member (id, "SFX_ID_MISC_CAST12_WAV", 75, -1);
add_enum_member (id, "SFX_ID_MISC_CAST2_WAV", 76, -1);
add_enum_member (id, "SFX_ID_MISC_CAST3_WAV", 77, -1);
add_enum_member (id, "SFX_ID_MISC_CAST4_WAV", 78, -1);
add_enum_member (id, "SFX_ID_MISC_CAST5_WAV", 79, -1);
add_enum_member (id, "SFX_ID_MISC_CAST6_WAV", 80, -1);
add_enum_member (id, "SFX_ID_MISC_CAST7_WAV", 81, -1);
add_enum_member (id, "SFX_ID_MISC_CAST8_WAV", 82, -1);
add_enum_member (id, "SFX_ID_MISC_CAST9_WAV", 83, -1);
add_enum_member (id, "SFX_ID_MISC_HEALING_WAV", 84, -1);
add_enum_member (id, "SFX_ID_MISC_REPAIR_WAV", 85, -1);
add_enum_member (id, "SFX_ID_MISC_ACIDS1_WAV", 86, -1);
add_enum_member (id, "SFX_ID_MISC_ACIDS2_WAV", 87, -1);
add_enum_member (id, "SFX_ID_MISC_APOC_WAV", 88, -1);
add_enum_member (id, "SFX_ID_MISC_ARROWALL_WAV", 89, -1);
add_enum_member (id, "SFX_ID_MISC_BLDBOIL_WAV", 90, -1);
add_enum_member (id, "SFX_ID_MISC_BLODSTAR_WAV", 91, -1);
add_enum_member (id, "SFX_ID_MISC_BLSIMPT_WAV", 92, -1);
add_enum_member (id, "SFX_ID_MISC_BONESP_WAV", 93, -1);
add_enum_member (id, "SFX_ID_MISC_BSIMPCT_WAV", 94, -1);
add_enum_member (id, "SFX_ID_MISC_CALDRON_WAV", 95, -1);
add_enum_member (id, "SFX_ID_MISC_CBOLT_WAV", 96, -1);
add_enum_member (id, "SFX_ID_MISC_CHLTNING_WAV", 97, -1);
add_enum_member (id, "SFX_ID_MISC_DSERP_WAV", 98, -1);
add_enum_member (id, "SFX_ID_MISC_ELECIMP1_WAV", 99, -1);
add_enum_member (id, "SFX_ID_MISC_ELEMENTL_WAV", 100, -1);
add_enum_member (id, "SFX_ID_MISC_ETHEREAL_WAV", 101, -1);
add_enum_member (id, "SFX_ID_MISC_FBALL_WAV", 102, -1);
add_enum_member (id, "SFX_ID_MISC_FBOLT1_WAV", 103, -1);
add_enum_member (id, "SFX_ID_MISC_FBOLT2_WAV", 104, -1);
add_enum_member (id, "SFX_ID_MISC_FIRIMP1_WAV", 105, -1);
add_enum_member (id, "SFX_ID_MISC_FIRIMP2_WAV", 106, -1);
add_enum_member (id, "SFX_ID_MISC_FLAMWAVE_WAV", 107, -1);
add_enum_member (id, "SFX_ID_MISC_FLASH_WAV", 108, -1);
add_enum_member (id, "SFX_ID_MISC_FOUNTAIN_WAV", 109, -1);
add_enum_member (id, "SFX_ID_MISC_GOLUM_WAV", 110, -1);
add_enum_member (id, "SFX_ID_MISC_GOLUMDED_WAV", 111, -1);
add_enum_member (id, "SFX_ID_MISC_GSHRINE_WAV", 112, -1);
add_enum_member (id, "SFX_ID_MISC_GUARD_WAV", 113, -1);
add_enum_member (id, "SFX_ID_MISC_GRDLANCH_WAV", 114, -1);
add_enum_member (id, "SFX_ID_MISC_HOLYBOLT_WAV", 115, -1);
add_enum_member (id, "SFX_ID_MISC_HYPER_WAV", 116, -1);
add_enum_member (id, "SFX_ID_MISC_INFRAVIS_WAV", 117, -1);
add_enum_member (id, "SFX_ID_MISC_INVISIBL_WAV", 118, -1);
add_enum_member (id, "SFX_ID_MISC_INVPOT_WAV", 119, -1);
add_enum_member (id, "SFX_ID_MISC_LNING1_WAV", 120, -1);
add_enum_member (id, "SFX_ID_MISC_LTNING_WAV", 121, -1);
add_enum_member (id, "SFX_ID_MISC_MSHIELD_WAV", 122, -1);
add_enum_member (id, "SFX_ID_MISC_NOVA_WAV", 123, -1);
add_enum_member (id, "SFX_ID_MISC_PORTAL_WAV", 124, -1);
add_enum_member (id, "SFX_ID_MISC_PUDDLE_WAV", 125, -1);
add_enum_member (id, "SFX_ID_MISC_RESUR_WAV", 126, -1);
add_enum_member (id, "SFX_ID_MISC_SCURSE_WAV", 127, -1);
add_enum_member (id, "SFX_ID_MISC_SCURIMP_WAV", 128, -1);
add_enum_member (id, "SFX_ID_MISC_SENTINEL_WAV", 129, -1);
add_enum_member (id, "SFX_ID_MISC_SHATTER_WAV", 130, -1);
add_enum_member (id, "SFX_ID_MISC_SOULFIRE_WAV", 131, -1);
add_enum_member (id, "SFX_ID_MISC_SPOUTLOP_WAV", 132, -1);
add_enum_member (id, "SFX_ID_MISC_SPOUTSTR_WAV", 133, -1);
add_enum_member (id, "SFX_ID_MISC_STORM_WAV", 134, -1);
add_enum_member (id, "SFX_ID_MISC_TRAPDIS_WAV", 135, -1);
add_enum_member (id, "SFX_ID_MISC_TELEPORT_WAV", 136, -1);
add_enum_member (id, "SFX_ID_MISC_VTHEFT_WAV", 137, -1);
add_enum_member (id, "SFX_ID_MISC_WALLLOOP_WAV", 138, -1);
add_enum_member (id, "SFX_ID_MISC_WALLSTRT_WAV", 139, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID01_WAV_I_DONT_LIKE_TO_THINK_ABOUT_HOW_THE_KING_DIED", 140, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID02_WAV_OH_MY", 141, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID03_WAV_I_REMEMBER_LAZARUS_AS_BEING_A_VERY_KIND_AND_GIVING", 142, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID04_WAV_MY_GRANDMOTHER_IS_VERY_WEAK_AND_GARDA_SAYS_THAT_WE", 143, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID05_WAV", 144, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID06_WAV_I_AM_AFRAID_THAT_I_HAVENT_HEARD_ANYTHING_ABOUT_THAT", 145, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID07_WAV", 146, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID08_WAV_WHEN_FARNHAM_SAID_SOMETHING_ABOUT_A_BUTCHER_KILLING_PEOPLE_I", 147, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID09_WAV", 148, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID10_WAV_IF_YOU_HAVE_QUESTIONS_ABOUT_BLINDNESS_YOU_SHOULD_TALK_TO", 149, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID11_WAV_IVE_NEVER_HEARD_OF_A_LACHDANAN_BEFORE", 150, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID12_WAV_GRISWOLDS_FATHER_USED_TO_TELL_SOME_OF_US_WHEN_WE", 151, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID13_WAV_THE_STORY_OF_THE_MAGIC_ARMOR_CALLED_VALOR_IS_SOMETHING", 152, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID14_WAV", 153, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID15_WAV", 154, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID16_WAV_IF_YOU_ARE_TO_BATTLE_SUCH_A_FIERCE_OPPONENT_MAY", 155, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID17_WAV", 156, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID18_WAV_WELL_A_CARAVAN_OF_SOME_VERY_IMPORTANT_PEOPLE_DID_STOP", 157, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID19_WAV_I_THINK_OGDEN_MIGHT_HAVE_SOME_MUSHROOMS_IN_THE_STORAGE", 158, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID20_WAV_THE_BEST_PERSON_TO_ASK_ABOUT_THAT_SORT_OF_THING", 159, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID21_WAV", 160, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID22_WAV", 161, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID23_WAV", 162, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID24_WAV", 163, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID25_WAV", 164, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID26_WAV", 165, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID27_WAV", 166, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID28_WAV", 167, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID29_WAV", 168, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID30_WAV", 169, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID31_WAV_GOOD_DAY", 170, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID32_WAV_MY_GRANDMOTHER_HAD_A_DREAM_THAT_YOU_WOULD_COME_AND", 171, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID33_WAV_THE_WOMAN_AT_THE_EDGE_OF_TOWN_IS_A_WITCH", 172, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID34_WAV_OUR_BLACKSMITH_IS_A_POINT_OF_PRIDE_TO_THE_PEOPLE", 173, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID35_WAV_CAIN_HAS_BEEN_THE_STORYTELLER_OF_TRISTRAM_FOR_AS_LONG", 174, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID36_WAV_FARNHAM_IS_A_DRUNKARD_WHO_FILLS_HIS_BELLY_WITH_ALE", 175, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID37_WAV_PEPIN_SAVED_MY_GRANDMOTHERS_LIFE_AND_I_KNOW_THAT_I", 176, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID38_WAV", 177, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID39_WAV_I_GREW_UP_WITH_WIRTS_MOTHER_CANACE", 178, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BMAID40_WAV_OGDEN_AND_HIS_WIFE_HAVE_TAKEN_ME_AND_MY_GRANDMOTHER", 179, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH01_WAV_I_MADE_MANY_OF_THE_WEAPONS_AND_MOST_OF_THE", 180, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH02_WAV_DEMONS_STOLE_OGDENS_SIGN_YOU_SAY", 181, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH03_WAV_I_WAS_THERE_WHEN_LAZARUS_LED_US_INTO_THE_LABYRINTH", 182, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH04_WAV_PEPIN_HAS_TOLD_YOU_THE_TRUTH", 183, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH05_WAV", 184, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH06_WAV", 185, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH07_WAV_I_KNOW_NOTHING_OF_THIS_PLACE_BUT_YOU_MAY_TRY", 186, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH08_WAV", 187, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH09_WAV", 188, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH10_WAV_I_SAW_WHAT_FARNHAM_CALLS_THE_BUTCHER_AS_IT_SWATHED", 189, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH11_WAV", 190, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH12_WAV_I_AM_AFRAID_THAT_I_HAVE_NEITHER_HEARD_NOR_SEEN", 191, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH13_WAV_IF_IT_IS_ACTUALLY_LACHDANAN_THAT_YOU_HAVE_MET_THEN", 192, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH14_WAV_THE_ARMOR_KNOWN_AS_VALOR_COULD_BE_WHAT_TIPS_THE", 193, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH15_WAV", 194, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH16_WAV", 195, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH17_WAV_DARK_AND_WICKED_LEGENDS_SURROUNDS_THE_ONE_WARLORD_OF_BLOOD", 196, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH18_WAV", 197, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH19_WAV_IF_ADRIA_DOESNT_HAVE_ONE_OF_THESE_YOU_CAN_BET", 198, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH20_WAV_I_HAVE_NEVER_SEEN_A_MAP_OF_THIS_SORT_BEFORE", 199, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH21_WAV_GREETINGS", 200, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH22_WAV_NOTHING_YET_EH", 201, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH23_WAV_I_CAN_HARDLY_BELIEVE_IT", 202, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH24_WAV_STAY_FOR_A_MOMENT", 203, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH25_WAV_I_AM_STILL_WAITING_FOR_YOU_TO_BRING_ME_THAT", 204, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH26_WAV_LET_ME_SEE_THAT", 205, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH27_WAV", 206, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH28_WAV", 207, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH29_WAV", 208, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH30_WAV", 209, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH31_WAV", 210, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH32_WAV", 211, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH33_WAV", 212, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH34_WAV", 213, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH35_WAV", 214, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH36_WAV", 215, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH37_WAV", 216, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH38_WAV", 217, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH39_WAV", 218, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH40_WAV", 219, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH41_WAV", 220, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH42_WAV", 221, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH43_WAV", 222, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH44_WAV_WELL_WHAT_CAN_I_DO_FOR_YA", 223, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH45_WAV_IF_YOURE_LOOKING_FOR_A_GOOD_WEAPON_LET_ME_SHOW", 224, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH46_WAV_THE_AXE", 225, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH47_WAV_LOOK_AT_THAT_EDGE_THAT_BALANCE", 226, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH48_WAV_YOUR_WEAPONS_AND_ARMOR_WILL_SHOW_THE_SIGNS_OF_YOUR", 227, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH49_WAV_WHILE_I_HAVE_TO_PRACTICALLY_SMUGGLE_IN_THE_METALS_AND", 228, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH50_WAV_GILLIAN_IS_A_NICE_LASS", 229, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH51_WAV_SOMETIMES_I_THINK_THAT_CAIN_TALKS_TOO_MUCH_BUT_I", 230, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH52_WAV_I_WAS_WITH_FARNHAM_THAT_NIGHT_THAT_LAZARUS_LED_US", 231, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH53_WAV_A_GOOD_MAN_WHO_PUTS_THE_NEEDS_OF_OTHERS_ABOVE", 232, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH54_WAV", 233, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH55_WAV_THAT_LAD_IS_GOING_TO_GET_HIMSELF_INTO_SERIOUS_TROUBLE", 234, -1);
add_enum_member (id, "SFX_ID_TOWNERS_BSMITH56_WAV_THE_INNKEEPER_HAS_LITTLE_BUSINESS_AND_NO_REAL_WAY_OF", 235, -1);
add_enum_member (id, "SFX_ID_TOWNERS_COW1_WAV", 236, -1);
add_enum_member (id, "SFX_ID_TOWNERS_COW2_WAV", 237, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DEADGUY2_WAV", 238, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK01_WAV_I_DONT_CARE_ABOUT_THAT", 239, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK02_WAV_YOU_KNOW_WHAT_I_THINK", 240, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK03_WAV_THEY_STAB_THEN_BITE_THEN_THEYRE_ALL_AROUND_YOU", 241, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK04_WAV_YOU_DRINK_WATER", 242, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK05_WAV", 243, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK06_WAV", 244, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK07_WAV_OKAY_SO_LISTEN", 245, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK08_WAV", 246, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK09_WAV", 247, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK10_WAV_BIG", 248, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK11_WAV", 249, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK12_WAV_LOOK_HERE", 250, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK13_WAV_LACHDANAN_IS_DEAD", 251, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK14_WAV_GRISWOLD_CANT_SELL_HIS_ANVIL", 252, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK15_WAV_ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", 253, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK16_WAV", 254, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK17_WAV_ALWAYS_YOU_GOTTA_TALK_ABOUT_BLOOD", 255, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK18_WAV", 256, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK19_WAV_I_USED_TO_HAVE_A_NICE_RING", 257, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK20_WAV_OGDEN_MIXES_A_MEAN_BLACK_MUSHROOM_BUT_I_GET_SICK", 258, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK21_WAV_LISTEN_HERE_COME_CLOSE", 259, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK22_WAV", 260, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK23_WAV_I_WANNA_TELL_YA_SUMTHIN_CAUSE_I_KNOW_ALL_ABOUT", 261, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK24_WAV_NO_ONE_EVER_LIS", 262, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK25_WAV_I_KNOW_YOU_GOTS_YOUR_OWN_IDEAS_AND_I_KNOW", 263, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK26_WAV_IF_I_WAS_YOU", 264, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK27_WAV_CANT_A_FELLA_DRINK_IN_PEACE", 265, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK28_WAV_THE_GAL_WHO_BRINGS_THE_DRINKS", 266, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK29_WAV_WHY_DONT_THAT_OLD_CRONE_DO_SOMETHIN_FOR_A_CHANGE", 267, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK30_WAV_CAIN_ISNT_WHAT_HE_SAYS_HE_IS", 268, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK31_WAV_GRISWOLD", 269, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK32_WAV_HEHEHE_I_LIKE_PEPIN", 270, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK33_WAV", 271, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK34_WAV_WIRT_IS_A_KID_WITH_MORE_PROBLEMS_THAN_EVEN_ME", 272, -1);
add_enum_member (id, "SFX_ID_TOWNERS_DRUNK35_WAV_OGDEN_IS_THE_BEST_MAN_IN_TOWN", 273, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER01_WAV_THE_LOSS_OF_HIS_SON_WAS_TOO_MUCH_FOR_KING", 274, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER02_WAV_MY_GOODNESS_DEMONS_RUNNING_ABOUT_THE_VILLAGE_AT_NIGHT_PILLAGING", 275, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER03_WAV_I_WAS_SHOCKED_WHEN_I_HEARD_OF_WHAT_THE_TOWNSPEOPLE", 276, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER04_WAV", 277, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER05_WAV_THIS_SOUNDS_LIKE_A_VERY_DANGEROUS_PLACE", 278, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER06_WAV", 279, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER07_WAV", 280, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER08_WAV_BY_THE_LIGHT_I_KNOW_OF_THIS_VILE_DEMON", 281, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER09_WAV", 282, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER10_WAV_THIS_DOES_SEEM_FAMILIAR_SOMEHOW", 283, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER11_WAV_A_GOLDEN_ELIXIR_YOU_SAY", 284, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER12_WAV_IF_YOU_HAD_BEEN_LOOKING_FOR_INFORMATION_ON_THE_PESTLE", 285, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER13_WAV_HMM", 286, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER14_WAV", 287, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER15_WAV", 288, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER16_WAV_CAIN_WOULD_BE_ABLE_TO_TELL_YOU_MUCH_MORE_ABOUT", 289, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER17_WAV", 290, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER18_WAV_I_DONT_KNOW_WHAT_IT_IS_THAT_THEY_THOUGHT_THEY", 291, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER19_WAV_I_CANT_MAKE_MUCH_OF_THE_WRITING_ON_THIS_MAP", 292, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER20_WAV_IM_GLAD_I_CAUGHT_UP_TO_YOU_IN_TIME", 293, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER21_WAV_PLEASE_YOU_MUST_HURRY", 294, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER22_WAV_WHATS_THAT_YOU_SAY", 295, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER23_WAV", 296, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER24_WAV", 297, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER25_WAV", 298, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER26_WAV_THE_WITCH_TOLD_ME_THAT_YOU_WERE_SEARCHING_FOR_THE", 299, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER27_WAV_EXCELLENT_THIS_IS_JUST_WHAT_I_HAD_IN_MIND", 300, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER28_WAV", 301, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER29_WAV", 302, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER30_WAV", 303, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER31_WAV", 304, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER32_WAV", 305, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER33_WAV", 306, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER34_WAV", 307, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER35_WAV", 308, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER36_WAV", 309, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER37_WAV_WHAT_AILS_YOU_MY_FRIEND", 310, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER38_WAV_I_HAVE_MADE_A_VERY_INTERESTING_DISCOVERY", 311, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER39_WAV_BEFORE_IT_WAS_TAKEN_OVER_BY_WELL_WHATEVER_LURKS_BELOW", 312, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER40_WAV_GRISWOLD_KNOWS_AS_MUCH_ABOUT_THE_ART_OF_WAR_AS", 313, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER41_WAV_CAIN_IS_A_TRUE_FRIEND_AND_A_WISE_SAGE", 314, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER42_WAV_EVEN_MY_SKILLS_HAVE_BEEN_UNABLE_TO_FULLY_HEAL_FARNHAM", 315, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER43_WAV_WHILE_I_USE_SOME_LIMITED_FORMS_OF_MAGIC_TO_CREATE", 316, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER44_WAV", 317, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER45_WAV_POOR_WIRT", 318, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER46_WAV_I_REALLY_DONT_UNDERSTAND_WHY_OGDEN_STAYS_HERE_IN_TRISTRAM", 319, -1);
add_enum_member (id, "SFX_ID_TOWNERS_HEALER47_WAV_OGDENS_BARMAID_IS_A_SWEET_GIRL", 320, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY01_WAV_LOOK_IM_RUNNING_A_BUSINESS_HERE", 321, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY02_WAV_WHAT", 322, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY03_WAV_YES_THE_RIGHTEOUS_LAZARUS_WHO_WAS_SOOO_EFFECTIVE_AGAINST_THOSE", 323, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY04_WAV_FOR_ONCE_IM_WITH_YOU", 324, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY05_WAV", 325, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY06_WAV", 326, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY07_WAV_A_VAST_AND_MYSTERIOUS_TREASURE_YOU_SAY", 327, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY08_WAV", 328, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY09_WAV", 329, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY10_WAV_I_KNOW_MORE_THAN_YOUD_THINK_ABOUT_THAT_GRISLY_FIEND", 330, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY11_WAV_LETS_SEE_AM_I_SELLING_YOU_SOMETHING", 331, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY12_WAV_WAIT_LET_ME_GUESS", 332, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY13_WAV_IF_YOU_WERE_TO_FIND_THIS_ARTIFACT_FOR_GRISWOLD_IT", 333, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY14_WAV_YOU_INTEND_TO_FIND_THE_ARMOR_KNOWN_AS_VALOR", 334, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY15_WAV", 335, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY16_WAV", 336, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY17_WAV_I_HAVENT_EVER_DEALT_WITH_THIS_WARLORD_YOU_SPEAK_OF", 337, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY18_WAV_IF_ANYONE_CAN_MAKE_SOMETHING_OUT_OF_THAT_ROCK_GRISWOLD", 338, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY19_WAV_I_DONT_HAVE_ANY_MUSHROOMS_OF_ANY_SIZE_OR_COLOR", 339, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY20_WAV_IVE_BEEN_LOOKING_FOR_A_MAP_BUT_THAT_CERTAINLY_ISNT", 340, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY21_WAV", 341, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY22_WAV", 342, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY23_WAV", 343, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY24_WAV", 344, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY25_WAV", 345, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY26_WAV", 346, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY27_WAV", 347, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY28_WAV", 348, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY29_WAV", 349, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY30_WAV", 350, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY31_WAV", 351, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY32_WAV_PSSST", 352, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY33_WAV_NOT_EVERYONE_IN_TRISTRAM_HAS_A_USE", 353, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY34_WAV_DONT_TRUST_EVERYTHING_THE_DRUNK_SAYS", 354, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY35_WAV_IN_CASE_YOU_HAVENT_NOTICED_I_DONT_BUY_ANYTHING_FROM", 355, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY36_WAV_I_GUESS_I_OWE_THE_BLACKSMITH_MY_LIFE", 356, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY37_WAV_IF_I_WERE_A_FEW_YEARS_OLDER_I_WOULD_SHOWER", 357, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY38_WAV_CAIN_KNOWS_TOO_MUCH", 358, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY39_WAV_FARNHAM", 359, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY40_WAV_AS_LONG_AS_YOU_DONT_NEED_ANYTHING_REATTACHED_OLD_PEPIN", 360, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY41_WAV", 361, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY42_WAV_ADRIA_TRULY_BOTHERS_ME", 362, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PEGBOY43_WAV_OGDEN_IS_A_FOOL_FOR_STAYING_HERE", 363, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PRIEST00_WAV", 364, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PRIEST01_WAV", 365, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PRIEST02_WAV", 366, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PRIEST03_WAV", 367, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PRIEST04_WAV", 368, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PRIEST05_WAV", 369, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PRIEST06_WAV", 370, -1);
add_enum_member (id, "SFX_ID_TOWNERS_PRIEST07_WAV", 371, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT00_WAV", 372, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT01_WAV_AHH_THE_STORY_OF_OUR_KING_IS_IT", 373, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT02_WAV_I_SEE_THAT_THIS_STRANGE_BEHAVIOR_PUZZLES_YOU_AS_WELL", 374, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT03_WAV", 375, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT04_WAV_HMM_I_DONT_KNOW_WHAT_I_CAN_REALLY_TELL_YOU", 376, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT05_WAV", 377, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT06_WAV", 378, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT07_WAV_A_BOOK_THAT_SPEAKS_OF_A_CHAMBER_OF_HUMAN_BONES", 379, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT08_WAV", 380, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT09_WAV", 381, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT10_WAV_IT_SEEMS_THAT_THE_ARCHBISHOP_LAZARUS_GOADED_MANY_OF_THE", 382, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT11_WAV", 383, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT12_WAV_YOU_RECITE_AN_INTERESTING_RHYME_WRITTEN_IN_A_STYLE_THAT", 384, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT13_WAV_YOU_CLAIM_TO_HAVE_SPOKEN_WITH_LACHDANAN", 385, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT14_WAV_GRISWOLD_SPEAKS_OF_THE_ANVIL_OF_FURY", 386, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT15_WAV_THE_GATEWAY_OF_BLOOD_AND_THE_HALLS_OF_FIRE_ARE", 387, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT16_WAV", 388, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT17_WAV", 389, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT18_WAV_I_KNOW_OF_ONLY_ONE_LEGEND_THAT_SPEAKS_OF_SUCH", 390, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT19_WAV", 391, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT20_WAV_GRISWOLD_SPEAKS_OF_THE_HEAVEN_STONE_THAT_WAS_DESTINED_FOR", 392, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT21_WAV_THE_WITCH_ADRIA_SEEKS_A_BLACK_MUSHROOM", 393, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT22_WAV_SO_THE_LEGEND_OF_THE_MAP_IS_REAL", 394, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT23_WAV_OUR_TIME_IS_RUNNING_SHORT", 395, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT24_WAV_I_AM_SURE_THAT_YOU_TRIED_YOUR_BEST_BUT_I", 396, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT25_WAV_HELLO_MY_FRIEND", 397, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT26_WAV_WHILE_YOU_ARE_VENTURING_DEEPER_INTO_THE_LABYRINTH_YOU_MAY", 398, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT27_WAV_I_KNOW_OF_MANY_MYTHS_AND_LEGENDS_THAT_MAY_CONTAIN", 399, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT28_WAV_GRISWOLD", 400, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT29_WAV_OGDEN_HAS_OWNED_AND_RUN_THE_RISING_SUN_INN_AND", 401, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT30_WAV_POOR_FARNHAM", 402, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT31_WAV_THE_WITCH_ADRIA_IS_AN_ANOMALY_HERE_IN_TRISTRAM", 403, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT32_WAV", 404, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT33_WAV_THE_STORY_OF_WIRT_IS_A_FRIGHTENING_AND_TRAGIC_ONE", 405, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT34_WAV_AH_PEPIN", 406, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT35_WAV_GILLIAN_IS_A_FINE_WOMAN", 407, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT36_WAV_THIS_DOES_NOT_BODE_WELL_FOR_IT_CONFIRMS_MY_DARKEST", 408, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT37_WAV_YOU_MUST_HURRY_AND_RESCUE_ALBRECHT_FROM_THE_HANDS_OF", 409, -1);
add_enum_member (id, "SFX_ID_TOWNERS_STORYT38_WAV_YOUR_STORY_IS_QUITE_GRIM_MY_FRIEND", 410, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN00_WAV_THANK_GOODNESS_YOUVE_RETURNED", 411, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN01_WAV_LAZARUS_WAS_THE_ARCHBISHOP_WHO_LED_MANY_OF_THE_TOWNSPEOPLE", 412, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN02_WAV_I_HAVE_ALWAYS_TRIED_TO_KEEP_A_LARGE_SUPPLY_OF", 413, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN03_WAV", 414, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN04_WAV", 415, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN05_WAV_I_AM_AFRAID_THAT_I_DONT_KNOW_ANYTHING_ABOUT_THAT", 416, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN06_WAV", 417, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN07_WAV", 418, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN08_WAV_YES_FARNHAM_HAS_MUMBLED_SOMETHING_ABOUT_A_HULKING_BRUTE_WHO", 419, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN09_WAV", 420, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN10_WAV_I_NEVER_MUCH_CARED_FOR_POETRY", 421, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN11_WAV_YOU_SPEAK_OF_A_BRAVE_WARRIOR_LONG_DEAD", 422, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN12_WAV_DONT_YOU_THINK_THAT_GRISWOLD_WOULD_BE_A_BETTER_PERSON", 423, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN13_WAV_EVERY_CHILD_HEARS_THE_STORY_OF_THE_WARRIOR_ARKAINE_AND", 424, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN14_WAV", 425, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN15_WAV", 426, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN16_WAV_I_AM_AFRAID_THAT_I_HAVENT_HEARD_ANYTHING_ABOUT_SUCH", 427, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN17_WAV", 428, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN18_WAV_THE_CARAVAN_STOPPED_HERE_TO_TAKE_ON_SOME_SUPPLIES_FOR", 429, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN19_WAV_LET_ME_JUST_SAY_THIS", 430, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN20_WAV_IF_THE_WITCH_CANT_HELP_YOU_AND_SUGGESTS_YOU_SEE", 431, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN21_WAV_THE_VILLAGE_NEEDS_YOUR_HELP_GOOD_MASTER", 432, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN22_WAV_AS_I_TOLD_YOU_GOOD_MASTER_THE_KING_WAS_ENTOMBED", 433, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN23_WAV_THE_CURSE_OF_OUR_KING_HAS_PASSED_BUT_I_FEAR", 434, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN24_WAV_MASTER_I_HAVE_A_STRANGE_EXPERIENCE_TO_RELATE", 435, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN25_WAV_OH_YOU_DIDNT_HAVE_TO_BRING_BACK_MY_SIGN_BUT", 436, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN26_WAV", 437, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN27_WAV", 438, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN28_WAV", 439, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN29_WAV", 440, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN30_WAV", 441, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN31_WAV", 442, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN32_WAV", 443, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN33_WAV", 444, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN34_WAV", 445, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN35_WAV", 446, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN36_WAV_GREETINGS_GOOD_MASTER", 447, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN37_WAV_MANY_ADVENTURERS_HAVE_GRACED_THE_TABLES_OF_MY_TAVERN_AND", 448, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN38_WAV_GRISWOLD_THE_BLACKSMITH_IS_EXTREMELY_KNOWLEDGEABLE_ABOUT_WEAPONS_AND_ARMOR", 449, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN39_WAV_FARNHAM_SPENDS_FAR_TOO_MUCH_TIME_HERE_DROWNING_HIS_SORROWS", 450, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN40_WAV_ADRIA_IS_WISE_BEYOND_HER_YEARS_BUT_I_MUST_ADMIT", 451, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN41_WAV_IF_YOU_WANT_TO_KNOW_MORE_ABOUT_THE_HISTORY_OF", 452, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN42_WAV", 453, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN43_WAV_WIRT_IS_A_RAPSCALLION_AND_A_LITTLE_SCOUNDREL", 454, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN44_WAV_PEPIN_IS_A_GOOD_MAN", 455, -1);
add_enum_member (id, "SFX_ID_TOWNERS_TAVOWN45_WAV_GILLIAN_MY_BARMAID", 456, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH01_WAV_THE_DEAD_WHO_WALK_AMONG_THE_LIVING_FOLLOW_THE_CURSED", 457, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH02_WAV_NO_MORTAL_CAN_TRULY_UNDERSTAND_THE_MIND_OF_THE_DEMON", 458, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH03_WAV_I_DID_NOT_KNOW_THIS_LAZARUS_OF_WHOM_YOU_SPEAK", 459, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH04_WAV_THE_PEOPLE_OF_TRISTRAM_WILL_DIE_IF_YOU_CANNOT_RESTORE", 460, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH05_WAV", 461, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH06_WAV", 462, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH07_WAV_YOU_WILL_BECOME_AN_ETERNAL_SERVANT_OF_THE_DARK_LORDS", 463, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH08_WAV", 464, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH09_WAV", 465, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH10_WAV_THE_BUTCHER_IS_A_SADISTIC_CREATURE_THAT_DELIGHTS_IN_THE", 466, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH11_WAV", 467, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH12_WAV_THIS_IS_A_PLACE_OF_GREAT_ANGUISH_AND_TERROR_AND", 468, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH13_WAV_YOU_MAY_MEET_PEOPLE_WHO_ARE_TRAPPED_WITHIN_THE_LABYRINTH", 469, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH14_WAV_THERE_ARE_MANY_ARTIFACTS_WITHIN_THE_LABYRINTH_THAT_HOLD_POWERS", 470, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH15_WAV_SHOULD_YOU_FIND_THESE_STONES_OF_BLOOD_USE_THEM_CAREFULLY", 471, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH16_WAV", 472, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH17_WAV", 473, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH18_WAV_HIS_PROWESS_WITH_THE_BLADE_IS_AWESOME_AND_HE_HAS", 474, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH19_WAV", 475, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH20_WAV_THE_HEAVEN_STONE_IS_VERY_POWERFUL_AND_WERE_IT_ANY", 476, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH21_WAV_OH_IM_AFRAID_THIS_DOES_NOT_BODE_WELL_AT_ALL", 477, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH22_WAV_WHAT_DO_WE_HAVE_HERE", 478, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH23_WAV_ITS_A_BIG_BLACK_MUSHROOM_THAT_I_NEED", 479, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH24_WAV_YES_THIS_WILL_BE_PERFECT_FOR_A_BREW_THAT_I", 480, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH25_WAV_WHY_HAVE_YOU_BROUGHT_THAT_HERE", 481, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH26_WAV_WHAT", 482, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH27_WAV", 483, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH28_WAV", 484, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH29_WAV", 485, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH30_WAV", 486, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH31_WAV", 487, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH32_WAV", 488, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH33_WAV", 489, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH34_WAV", 490, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH35_WAV", 491, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH36_WAV", 492, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH37_WAV", 493, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH38_WAV_I_SENSE_A_SOUL_IN_SEARCH_OF_ANSWERS", 494, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH39_WAV_WISDOM_IS_EARNED_NOT_GIVEN", 495, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH40_WAV_THE_GREATEST_POWER_IS_OFTEN_THE_SHORTEST_LIVED", 496, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH41_WAV_THOUGH_THE_HEAT_OF_THE_SUN_IS_BEYOND_MEASURE_THE", 497, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH42_WAV_THE_SUM_OF_OUR_KNOWLEDGE_IS_IN_THE_SUM_OF", 498, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH43_WAV_TO_A_MAN_WHO_ONLY_KNOWS_IRON_THERE_IS_NO", 499, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH44_WAV_CORRUPTION_HAS_THE_STRENGTH_OF_DECEIT_BUT_INNOCENCE_HOLDS_THE", 500, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH45_WAV_A_CHEST_OPENED_IN_DARKNESS_HOLDS_NO_GREATER_TREASURE_THAN", 501, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH46_WAV_THE_HIGHER_YOU_PLACE_YOUR_FAITH_IN_ONE_MAN_THE", 502, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH47_WAV_THE_HAND_THE_HEART_AND_THE_MIND_CAN_PERFORM_MIRACLES", 503, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH48_WAV", 504, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH49_WAV_THERE_IS_MUCH_ABOUT_THE_FUTURE_WE_CANNOT_SEE_BUT", 505, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WITCH50_WAV_EARTHEN_WALLS_AND_THATCHED_CANOPY_DO_NOT_A_HOME_CREATE", 506, -1);
add_enum_member (id, "SFX_ID_TOWNERS_WOUND01_WAV_PLEASE_LISTEN_TO_ME", 507, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE01_WAV_BEYOND_THE_HALL_OF_HEROES_LIES_THE_CHAMBER_OF_BONE", 508, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE02_WAV", 509, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE03_WAV", 510, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE04_WAV", 511, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE05_WAV", 512, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE06_WAV", 513, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE07_WAV", 514, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE08_WAV", 515, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE09_WAV", 516, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE10_WAV", 517, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE11_WAV_I_CAN_SEE_WHAT_YOU_SEE_NOT", 518, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE12_WAV_THE_ARMORIES_OF_HELL_ARE_HOME_TO_THE_WARLORD_OF", 519, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE13_WAV", 520, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE14_WAV", 521, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE15_WAV", 522, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE16_WAV", 523, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE17_WAV", 524, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE18_WAV", 525, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE19_WAV", 526, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE20_WAV", 527, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE21_WAV", 528, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE22_WAV", 529, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE23_WAV", 530, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE24_WAV", 531, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE25_WAV", 532, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE26_WAV", 533, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE27_WAV", 534, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE28_WAV", 535, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE29_WAV", 536, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE30_WAV", 537, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE31_WAV", 538, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE32_WAV", 539, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE33_WAV", 540, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE34_WAV", 541, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE35_WAV", 542, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE36_WAV", 543, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE37_WAV", 544, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE38_WAV", 545, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE39_WAV", 546, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE40_WAV", 547, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE41_WAV", 548, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE42_WAV", 549, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE43_WAV", 550, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE44_WAV", 551, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE45_WAV", 552, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE46_WAV", 553, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE47_WAV", 554, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE48_WAV", 555, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE49_WAV", 556, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE50_WAV", 557, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE51_WAV", 558, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE52_WAV", 559, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE53_WAV", 560, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE54_WAV", 561, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE55_WAV", 562, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE56_WAV", 563, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE57_WAV", 564, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE58_WAV", 565, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE59_WAV", 566, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE60_WAV", 567, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE61_WAV", 568, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE62_WAV", 569, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE63_WAV", 570, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE64_WAV", 571, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE65_WAV", 572, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE66_WAV", 573, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE67_WAV", 574, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE68_WAV", 575, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE69_WAV", 576, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE69B_WAV", 577, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE70_WAV", 578, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE71_WAV", 579, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE72_WAV", 580, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE73_WAV", 581, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE74_WAV", 582, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE75_WAV", 583, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE76_WAV", 584, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE77_WAV", 585, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE78_WAV", 586, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE79_WAV", 587, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE80_WAV", 588, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE81_WAV", 589, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE82_WAV", 590, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE83_WAV", 591, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE84_WAV", 592, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE85_WAV", 593, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE86_WAV", 594, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE87_WAV", 595, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE88_WAV", 596, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE89_WAV", 597, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE90_WAV", 598, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE91_WAV", 599, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE92_WAV", 600, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE93_WAV", 601, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE94_WAV", 602, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE95_WAV", 603, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE96_WAV", 604, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE97_WAV", 605, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE98_WAV", 606, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE99_WAV", 607, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE100_WAV", 608, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE101_WAV", 609, -1);
add_enum_member (id, "SFX_ID_SORCEROR_MAGE102_WAV", 610, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE01_WAV_BEYOND_THE_HALL_OF_HEROES_LIES_THE_CHAMBER_OF_BONE", 611, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE02_WAV", 612, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE03_WAV", 613, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE04_WAV", 614, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE05_WAV", 615, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE06_WAV", 616, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE07_WAV", 617, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE08_WAV", 618, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE09_WAV", 619, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE10_WAV", 620, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE11_WAV_I_CAN_SEE_WHAT_YOU_SEE_NOT", 621, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE12_WAV_THE_ARMORIES_OF_HELL_ARE_HOME_TO_THE_WARLORD_OF", 622, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE13_WAV", 623, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE14_WAV", 624, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE15_WAV", 625, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE16_WAV", 626, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE17_WAV", 627, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE18_WAV", 628, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE19_WAV", 629, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE20_WAV", 630, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE21_WAV", 631, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE22_WAV", 632, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE23_WAV", 633, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE24_WAV", 634, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE25_WAV", 635, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE26_WAV", 636, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE27_WAV", 637, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE28_WAV", 638, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE29_WAV", 639, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE30_WAV", 640, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE31_WAV", 641, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE32_WAV", 642, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE33_WAV", 643, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE34_WAV", 644, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE35_WAV", 645, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE36_WAV", 646, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE37_WAV", 647, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE38_WAV", 648, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE39_WAV", 649, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE40_WAV", 650, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE41_WAV", 651, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE42_WAV", 652, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE43_WAV", 653, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE44_WAV", 654, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE45_WAV", 655, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE46_WAV", 656, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE47_WAV", 657, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE48_WAV", 658, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE49_WAV", 659, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE50_WAV", 660, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE51_WAV", 661, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE52_WAV", 662, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE53_WAV", 663, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE54_WAV", 664, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE55_WAV", 665, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE56_WAV", 666, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE57_WAV", 667, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE58_WAV", 668, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE59_WAV", 669, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE60_WAV", 670, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE61_WAV", 671, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE62_WAV", 672, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE63_WAV", 673, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE64_WAV", 674, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE65_WAV", 675, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE66_WAV", 676, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE67_WAV", 677, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE68_WAV", 678, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE69_WAV", 679, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE69B_WAV", 680, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE70_WAV", 681, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE71_WAV", 682, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE72_WAV", 683, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE73_WAV", 684, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE74_WAV", 685, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE75_WAV", 686, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE76_WAV", 687, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE77_WAV", 688, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE78_WAV", 689, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE79_WAV", 690, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE80_WAV", 691, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE81_WAV", 692, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE82_WAV", 693, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE83_WAV", 694, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE84_WAV", 695, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE85_WAV", 696, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE86_WAV", 697, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE87_WAV", 698, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE88_WAV", 699, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE89_WAV", 700, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE90_WAV", 701, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE91_WAV", 702, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE92_WAV", 703, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE93_WAV", 704, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE94_WAV", 705, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE95_WAV", 706, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE96_WAV", 707, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE97_WAV", 708, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE98_WAV", 709, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE99_WAV", 710, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE100_WAV", 711, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE101_WAV", 712, -1);
add_enum_member (id, "SFX_ID_ROGUE_ROGUE102_WAV", 713, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR01_WAV_BEYOND_THE_HALL_OF_HEROES_LIES_THE_CHAMBER_OF_BONE", 714, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR02_WAV", 715, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR03_WAV", 716, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR04_WAV", 717, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR05_WAV", 718, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR06_WAV", 719, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR07_WAV", 720, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR08_WAV", 721, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR09_WAV", 722, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR10_WAV", 723, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR11_WAV_I_CAN_SEE_WHAT_YOU_SEE_NOT", 724, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR12_WAV_THE_ARMORIES_OF_HELL_ARE_HOME_TO_THE_WARLORD_OF", 725, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR13_WAV", 726, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR14_WAV", 727, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO14B_WAV", 728, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO14C_WAV", 729, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR15_WAV", 730, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO15B_WAV", 731, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO15C_WAV", 732, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR16_WAV", 733, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO16B_WAV", 734, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO16C_WAV", 735, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR17_WAV", 736, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR18_WAV", 737, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR19_WAV", 738, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR20_WAV", 739, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR21_WAV", 740, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR22_WAV", 741, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR23_WAV", 742, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR24_WAV", 743, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR25_WAV", 744, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR26_WAV", 745, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR27_WAV", 746, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR28_WAV", 747, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR29_WAV", 748, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR30_WAV", 749, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR31_WAV", 750, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR32_WAV", 751, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR33_WAV", 752, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR34_WAV", 753, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR35_WAV", 754, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR36_WAV", 755, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR37_WAV", 756, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR38_WAV", 757, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR39_WAV", 758, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR40_WAV", 759, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR41_WAV", 760, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR42_WAV", 761, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR43_WAV", 762, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR44_WAV", 763, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR45_WAV", 764, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR46_WAV", 765, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR47_WAV", 766, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR48_WAV", 767, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR49_WAV", 768, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR50_WAV", 769, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR51_WAV", 770, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR52_WAV", 771, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR53_WAV", 772, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR54_WAV", 773, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR55_WAV", 774, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR56_WAV", 775, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR57_WAV", 776, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR58_WAV", 777, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR59_WAV", 778, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR60_WAV", 779, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR61_WAV", 780, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR62_WAV", 781, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR63_WAV", 782, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR64_WAV", 783, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR65_WAV", 784, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR66_WAV", 785, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR67_WAV", 786, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR68_WAV", 787, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR69_WAV", 788, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO69B_WAV", 789, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR70_WAV", 790, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR71_WAV", 791, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR72_WAV", 792, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR73_WAV", 793, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR74_WAV", 794, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR75_WAV", 795, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR76_WAV", 796, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR77_WAV", 797, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR78_WAV", 798, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR79_WAV", 799, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR80_WAV", 800, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR81_WAV", 801, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR82_WAV", 802, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR83_WAV", 803, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR84_WAV", 804, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR85_WAV", 805, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR86_WAV", 806, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR87_WAV", 807, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR88_WAV", 808, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR89_WAV", 809, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR90_WAV", 810, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR91_WAV", 811, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR92_WAV", 812, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR93_WAV", 813, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR94_WAV", 814, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR95_WAV", 815, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO95B_WAV", 816, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO95C_WAV", 817, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO95D_WAV", 818, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO95E_WAV", 819, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO95F_WAV", 820, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO96B_WAV", 821, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO97_WAV", 822, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO98_WAV", 823, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIOR99_WAV", 824, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO100_WAV", 825, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO101_WAV", 826, -1);
add_enum_member (id, "SFX_ID_WARRIOR_WARIO102_WAV", 827, -1);
add_enum_member (id, "SFX_ID_NARRATOR_NAR01_WAV_TAKE_HEED_AND_BEAR_WITNESS_TO_THE_TRUTHS_THAT_LIE", 828, -1);
add_enum_member (id, "SFX_ID_NARRATOR_NAR02_WAV_TAKE_HEED_AND_BEAR_WITNESS_TO_THE_TRUTHS_THAT_LIE", 829, -1);
add_enum_member (id, "SFX_ID_NARRATOR_NAR03_WAV_TAKE_HEED_AND_BEAR_WITNESS_TO_THE_TRUTHS_THAT_LIE", 830, -1);
add_enum_member (id, "SFX_ID_NARRATOR_NAR04_WAV_SO_IT_CAME_TO_BE_THAT_THERE_WAS_A_GREAT", 831, -1);
add_enum_member (id, "SFX_ID_NARRATOR_NAR05_WAV_MANY_DEMONS_TRAVELED_TO_THE_MORTAL_REALM_IN_SEARCH_OF", 832, -1);
add_enum_member (id, "SFX_ID_NARRATOR_NAR06_WAV_SO_IT_CAME_TO_BE_THAT_THE_THREE_PRIME_EVILS", 833, -1);
add_enum_member (id, "SFX_ID_NARRATOR_NAR07_WAV_ALL_PRAISES_TO_DIABLO", 834, -1);
add_enum_member (id, "SFX_ID_NARRATOR_NAR08_WAV_GLORY_AND_APPROBATION_TO_DIABLO", 835, -1);
add_enum_member (id, "SFX_ID_NARRATOR_NAR09_WAV_HAIL_AND_SACRIFICE_TO_DIABLO", 836, -1);
add_enum_member (id, "SFX_ID_MISC_LVL16INT_WAV", 837, -1);
add_enum_member (id, "SFX_ID_MONSTERS_BUTCHER_WAV", 838, -1);
add_enum_member (id, "SFX_ID_MONSTERS_GARBUD01_WAV_PLEEEEASE_NO_HURT", 839, -1);
add_enum_member (id, "SFX_ID_MONSTERS_GARBUD02_WAV_SOMETHING_FOR_YOU_I_AM_MAKING", 840, -1);
add_enum_member (id, "SFX_ID_MONSTERS_GARBUD03_WAV_NOTHING_YET", 841, -1);
add_enum_member (id, "SFX_ID_MONSTERS_GARBUD04_WAV_THIS_TOO_GOOD_FOR_YOU", 842, -1);
add_enum_member (id, "SFX_ID_MONSTERS_IZUAL01_WAV", 843, -1);
add_enum_member (id, "SFX_ID_MONSTERS_LACH01_WAV_PLEASE_DONT_KILL_ME_JUST_HEAR_ME_OUT", 844, -1);
add_enum_member (id, "SFX_ID_MONSTERS_LACH02_WAV_YOU_HAVE_NOT_FOUND_THE_GOLDEN_ELIXIR", 845, -1);
add_enum_member (id, "SFX_ID_MONSTERS_LACH03_WAV_YOU_HAVE_SAVED_MY_SOUL_FROM_DAMNATION_AND_FOR_THAT", 846, -1);
add_enum_member (id, "SFX_ID_MONSTERS_LAZ01_WAV_ABANDON_YOUR_FOOLISH_QUEST", 847, -1);
add_enum_member (id, "SFX_ID_MONSTERS_LAZ02_WAV", 848, -1);
add_enum_member (id, "SFX_ID_MONSTERS_SKING01_WAV_THE_WARMTH_OF_LIFE_HAS_ENTERED_MY_TOMB", 849, -1);
add_enum_member (id, "SFX_ID_MONSTERS_SNOT01_WAV_HEY", 850, -1);
add_enum_member (id, "SFX_ID_MONSTERS_SNOT02_WAV_YOU_KILL_UGLIES_GET_BANNER", 851, -1);
add_enum_member (id, "SFX_ID_MONSTERS_SNOT03_WAV_YOU_GIVE", 852, -1);
add_enum_member (id, "SFX_ID_MONSTERS_WARLRD01_WAV_MY_BLADE_SINGS_FOR_YOUR_BLOOD_MORTAL_AND_BY_MY", 853, -1);
add_enum_member (id, "SFX_ID_MONSTERS_WLOCK01_WAV", 854, -1);
add_enum_member (id, "SFX_ID_MONSTERS_ZHAR01_WAV_WHAT", 855, -1);
add_enum_member (id, "SFX_ID_MONSTERS_ZHAR02_WAV_ARRRRGH", 856, -1);
add_enum_member (id, "SFX_ID_MONSTERS_DIABLOD_WAV", 857, -1);
cleanup("speech_id");id = add_enum (-1, "speech_id", FF_0NUMD);
set_enum_cmt (id, "Speech IDs specify speech_data array indices.", 0);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT01_WAV_AHH_THE_STORY_OF_OUR_KING_IS_IT", 0, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN21_WAV_THE_VILLAGE_NEEDS_YOUR_HELP_GOOD_MASTER", 1, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN22_WAV_AS_I_TOLD_YOU_GOOD_MASTER_THE_KING_WAS_ENTOMBED", 2, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN23_WAV_THE_CURSE_OF_OUR_KING_HAS_PASSED_BUT_I_FEAR", 3, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER01_WAV_THE_LOSS_OF_HIS_SON_WAS_TOO_MUCH_FOR_KING", 4, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID01_WAV_I_DONT_LIKE_TO_THINK_ABOUT_HOW_THE_KING_DIED", 5, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH01_WAV_I_MADE_MANY_OF_THE_WEAPONS_AND_MOST_OF_THE", 6, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK01_WAV_I_DONT_CARE_ABOUT_THAT", 7, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH01_WAV_THE_DEAD_WHO_WALK_AMONG_THE_LIVING_FOLLOW_THE_CURSED", 8, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY01_WAV_LOOK_IM_RUNNING_A_BUSINESS_HERE", 9, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_SKING01_WAV_THE_WARMTH_OF_LIFE_HAS_ENTERED_MY_TOMB", 10, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT02_WAV_I_SEE_THAT_THIS_STRANGE_BEHAVIOR_PUZZLES_YOU_AS_WELL", 11, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN24_WAV_MASTER_I_HAVE_A_STRANGE_EXPERIENCE_TO_RELATE", 12, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN25_WAV_OH_YOU_DIDNT_HAVE_TO_BRING_BACK_MY_SIGN_BUT", 13, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER02_WAV_MY_GOODNESS_DEMONS_RUNNING_ABOUT_THE_VILLAGE_AT_NIGHT_PILLAGING", 14, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID02_WAV_OH_MY", 15, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH02_WAV_DEMONS_STOLE_OGDENS_SIGN_YOU_SAY", 16, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK02_WAV_YOU_KNOW_WHAT_I_THINK", 17, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH02_WAV_NO_MORTAL_CAN_TRULY_UNDERSTAND_THE_MIND_OF_THE_DEMON", 18, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY02_WAV_WHAT", 19, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_SNOT01_WAV_HEY", 20, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_SNOT02_WAV_YOU_KILL_UGLIES_GET_BANNER", 21, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_SNOT03_WAV_YOU_GIVE", 22, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT36_WAV_THIS_DOES_NOT_BODE_WELL_FOR_IT_CONFIRMS_MY_DARKEST", 23, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT37_WAV_YOU_MUST_HURRY_AND_RESCUE_ALBRECHT_FROM_THE_HANDS_OF", 24, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT38_WAV_YOUR_STORY_IS_QUITE_GRIM_MY_FRIEND_1", 25, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN01_WAV_LAZARUS_WAS_THE_ARCHBISHOP_WHO_LED_MANY_OF_THE_TOWNSPEOPLE", 26, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT38_WAV_YOUR_STORY_IS_QUITE_GRIM_MY_FRIEND_2", 27, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT38_WAV_YOUR_STORY_IS_QUITE_GRIM_MY_FRIEND_3", 28, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER03_WAV_I_WAS_SHOCKED_WHEN_I_HEARD_OF_WHAT_THE_TOWNSPEOPLE", 29, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID03_WAV_I_REMEMBER_LAZARUS_AS_BEING_A_VERY_KIND_AND_GIVING", 30, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH03_WAV_I_WAS_THERE_WHEN_LAZARUS_LED_US_INTO_THE_LABYRINTH", 31, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK03_WAV_THEY_STAB_THEN_BITE_THEN_THEYRE_ALL_AROUND_YOU", 32, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH03_WAV_I_DID_NOT_KNOW_THIS_LAZARUS_OF_WHOM_YOU_SPEAK", 33, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY03_WAV_YES_THE_RIGHTEOUS_LAZARUS_WHO_WAS_SOOO_EFFECTIVE_AGAINST_THOSE", 34, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_LAZ01_WAV_ABANDON_YOUR_FOOLISH_QUEST_1", 35, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_LAZ01_WAV_ABANDON_YOUR_FOOLISH_QUEST_2", 36, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT04_WAV_HMM_I_DONT_KNOW_WHAT_I_CAN_REALLY_TELL_YOU", 37, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN02_WAV_I_HAVE_ALWAYS_TRIED_TO_KEEP_A_LARGE_SUPPLY_OF", 38, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER20_WAV_IM_GLAD_I_CAUGHT_UP_TO_YOU_IN_TIME", 39, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER21_WAV_PLEASE_YOU_MUST_HURRY", 40, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER22_WAV_WHATS_THAT_YOU_SAY", 41, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID04_WAV_MY_GRANDMOTHER_IS_VERY_WEAK_AND_GARDA_SAYS_THAT_WE", 42, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH04_WAV_PEPIN_HAS_TOLD_YOU_THE_TRUTH", 43, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK04_WAV_YOU_DRINK_WATER", 44, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH04_WAV_THE_PEOPLE_OF_TRISTRAM_WILL_DIE_IF_YOU_CANNOT_RESTORE", 45, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY04_WAV_FOR_ONCE_IM_WITH_YOU", 46, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT07_WAV_A_BOOK_THAT_SPEAKS_OF_A_CHAMBER_OF_HUMAN_BONES", 47, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN05_WAV_I_AM_AFRAID_THAT_I_DONT_KNOW_ANYTHING_ABOUT_THAT", 48, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER05_WAV_THIS_SOUNDS_LIKE_A_VERY_DANGEROUS_PLACE", 49, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID06_WAV_I_AM_AFRAID_THAT_I_HAVENT_HEARD_ANYTHING_ABOUT_THAT", 50, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH07_WAV_I_KNOW_NOTHING_OF_THIS_PLACE_BUT_YOU_MAY_TRY", 51, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK07_WAV_OKAY_SO_LISTEN", 52, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH07_WAV_YOU_WILL_BECOME_AN_ETERNAL_SERVANT_OF_THE_DARK_LORDS", 53, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY07_WAV_A_VAST_AND_MYSTERIOUS_TREASURE_YOU_SAY", 54, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT10_WAV_IT_SEEMS_THAT_THE_ARCHBISHOP_LAZARUS_GOADED_MANY_OF_THE", 55, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN08_WAV_YES_FARNHAM_HAS_MUMBLED_SOMETHING_ABOUT_A_HULKING_BRUTE_WHO", 56, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER08_WAV_BY_THE_LIGHT_I_KNOW_OF_THIS_VILE_DEMON", 57, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID08_WAV_WHEN_FARNHAM_SAID_SOMETHING_ABOUT_A_BUTCHER_KILLING_PEOPLE_I", 58, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH10_WAV_I_SAW_WHAT_FARNHAM_CALLS_THE_BUTCHER_AS_IT_SWATHED", 59, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK10_WAV_BIG", 60, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH10_WAV_THE_BUTCHER_IS_A_SADISTIC_CREATURE_THAT_DELIGHTS_IN_THE", 61, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY10_WAV_I_KNOW_MORE_THAN_YOUD_THINK_ABOUT_THAT_GRISLY_FIEND", 62, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WOUND01_WAV_PLEASE_LISTEN_TO_ME", 63, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_BUTCHER_WAV", 64, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT12_WAV_YOU_RECITE_AN_INTERESTING_RHYME_WRITTEN_IN_A_STYLE_THAT", 65, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN10_WAV_I_NEVER_MUCH_CARED_FOR_POETRY", 66, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER10_WAV_THIS_DOES_SEEM_FAMILIAR_SOMEHOW", 67, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID10_WAV_IF_YOU_HAVE_QUESTIONS_ABOUT_BLINDNESS_YOU_SHOULD_TALK_TO", 68, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH12_WAV_I_AM_AFRAID_THAT_I_HAVE_NEITHER_HEARD_NOR_SEEN", 69, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK12_WAV_LOOK_HERE", 70, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH12_WAV_THIS_IS_A_PLACE_OF_GREAT_ANGUISH_AND_TERROR_AND", 71, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY11_WAV_LETS_SEE_AM_I_SELLING_YOU_SOMETHING", 72, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT13_WAV_YOU_CLAIM_TO_HAVE_SPOKEN_WITH_LACHDANAN", 73, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN11_WAV_YOU_SPEAK_OF_A_BRAVE_WARRIOR_LONG_DEAD", 74, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER11_WAV_A_GOLDEN_ELIXIR_YOU_SAY", 75, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID11_WAV_IVE_NEVER_HEARD_OF_A_LACHDANAN_BEFORE", 76, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH13_WAV_IF_IT_IS_ACTUALLY_LACHDANAN_THAT_YOU_HAVE_MET_THEN", 77, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK13_WAV_LACHDANAN_IS_DEAD", 78, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH13_WAV_YOU_MAY_MEET_PEOPLE_WHO_ARE_TRAPPED_WITHIN_THE_LABYRINTH", 79, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY12_WAV_WAIT_LET_ME_GUESS", 80, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_LACH01_WAV_PLEASE_DONT_KILL_ME_JUST_HEAR_ME_OUT", 81, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_LACH02_WAV_YOU_HAVE_NOT_FOUND_THE_GOLDEN_ELIXIR", 82, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_LACH03_WAV_YOU_HAVE_SAVED_MY_SOUL_FROM_DAMNATION_AND_FOR_THAT", 83, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT14_WAV_GRISWOLD_SPEAKS_OF_THE_ANVIL_OF_FURY", 84, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN12_WAV_DONT_YOU_THINK_THAT_GRISWOLD_WOULD_BE_A_BETTER_PERSON", 85, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER12_WAV_IF_YOU_HAD_BEEN_LOOKING_FOR_INFORMATION_ON_THE_PESTLE", 86, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID12_WAV_GRISWOLDS_FATHER_USED_TO_TELL_SOME_OF_US_WHEN_WE", 87, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH21_WAV_GREETINGS", 88, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH22_WAV_NOTHING_YET_EH", 89, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH23_WAV_I_CAN_HARDLY_BELIEVE_IT", 90, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK14_WAV_GRISWOLD_CANT_SELL_HIS_ANVIL", 91, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH14_WAV_THERE_ARE_MANY_ARTIFACTS_WITHIN_THE_LABYRINTH_THAT_HOLD_POWERS", 92, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY13_WAV_IF_YOU_WERE_TO_FIND_THIS_ARTIFACT_FOR_GRISWOLD_IT", 93, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT15_WAV_THE_GATEWAY_OF_BLOOD_AND_THE_HALLS_OF_FIRE_ARE", 94, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN13_WAV_EVERY_CHILD_HEARS_THE_STORY_OF_THE_WARRIOR_ARKAINE_AND", 95, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER13_WAV_HMM", 96, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID13_WAV_THE_STORY_OF_THE_MAGIC_ARMOR_CALLED_VALOR_IS_SOMETHING", 97, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH14_WAV_THE_ARMOR_KNOWN_AS_VALOR_COULD_BE_WHAT_TIPS_THE", 98, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK15_WAV_ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", 99, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH15_WAV_SHOULD_YOU_FIND_THESE_STONES_OF_BLOOD_USE_THEM_CAREFULLY", 100, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY14_WAV_YOU_INTEND_TO_FIND_THE_ARMOR_KNOWN_AS_VALOR", 101, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT18_WAV_I_KNOW_OF_ONLY_ONE_LEGEND_THAT_SPEAKS_OF_SUCH", 102, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN16_WAV_I_AM_AFRAID_THAT_I_HAVENT_HEARD_ANYTHING_ABOUT_SUCH", 103, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER16_WAV_CAIN_WOULD_BE_ABLE_TO_TELL_YOU_MUCH_MORE_ABOUT", 104, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID16_WAV_IF_YOU_ARE_TO_BATTLE_SUCH_A_FIERCE_OPPONENT_MAY", 105, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH17_WAV_DARK_AND_WICKED_LEGENDS_SURROUNDS_THE_ONE_WARLORD_OF_BLOOD", 106, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK17_WAV_ALWAYS_YOU_GOTTA_TALK_ABOUT_BLOOD", 107, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH18_WAV_HIS_PROWESS_WITH_THE_BLADE_IS_AWESOME_AND_HE_HAS", 108, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY17_WAV_I_HAVENT_EVER_DEALT_WITH_THIS_WARLORD_YOU_SPEAK_OF", 109, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_WARLRD01_WAV_MY_BLADE_SINGS_FOR_YOUR_BLOOD_MORTAL_AND_BY_MY", 110, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT20_WAV_GRISWOLD_SPEAKS_OF_THE_HEAVEN_STONE_THAT_WAS_DESTINED_FOR", 111, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN18_WAV_THE_CARAVAN_STOPPED_HERE_TO_TAKE_ON_SOME_SUPPLIES_FOR", 112, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER18_WAV_I_DONT_KNOW_WHAT_IT_IS_THAT_THEY_THOUGHT_THEY", 113, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID18_WAV_WELL_A_CARAVAN_OF_SOME_VERY_IMPORTANT_PEOPLE_DID_STOP", 114, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH24_WAV_STAY_FOR_A_MOMENT", 115, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH25_WAV_I_AM_STILL_WAITING_FOR_YOU_TO_BRING_ME_THAT", 116, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH26_WAV_LET_ME_SEE_THAT", 117, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK19_WAV_I_USED_TO_HAVE_A_NICE_RING", 118, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH20_WAV_THE_HEAVEN_STONE_IS_VERY_POWERFUL_AND_WERE_IT_ANY", 119, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY18_WAV_IF_ANYONE_CAN_MAKE_SOMETHING_OUT_OF_THAT_ROCK_GRISWOLD", 120, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT21_WAV_THE_WITCH_ADRIA_SEEKS_A_BLACK_MUSHROOM", 121, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN19_WAV_LET_ME_JUST_SAY_THIS", 122, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER26_WAV_THE_WITCH_TOLD_ME_THAT_YOU_WERE_SEARCHING_FOR_THE", 123, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER27_WAV_EXCELLENT_THIS_IS_JUST_WHAT_I_HAD_IN_MIND", 124, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID19_WAV_I_THINK_OGDEN_MIGHT_HAVE_SOME_MUSHROOMS_IN_THE_STORAGE", 125, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH19_WAV_IF_ADRIA_DOESNT_HAVE_ONE_OF_THESE_YOU_CAN_BET", 126, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK20_WAV_OGDEN_MIXES_A_MEAN_BLACK_MUSHROOM_BUT_I_GET_SICK", 127, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH22_WAV_WHAT_DO_WE_HAVE_HERE", 128, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH23_WAV_ITS_A_BIG_BLACK_MUSHROOM_THAT_I_NEED", 129, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH24_WAV_YES_THIS_WILL_BE_PERFECT_FOR_A_BREW_THAT_I", 130, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH25_WAV_WHY_HAVE_YOU_BROUGHT_THAT_HERE", 131, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH26_WAV_WHAT", 132, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY19_WAV_I_DONT_HAVE_ANY_MUSHROOMS_OF_ANY_SIZE_OR_COLOR", 133, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT22_WAV_SO_THE_LEGEND_OF_THE_MAP_IS_REAL", 134, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT23_WAV_OUR_TIME_IS_RUNNING_SHORT", 135, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT24_WAV_I_AM_SURE_THAT_YOU_TRIED_YOUR_BEST_BUT_I", 136, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN20_WAV_IF_THE_WITCH_CANT_HELP_YOU_AND_SUGGESTS_YOU_SEE", 137, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER19_WAV_I_CANT_MAKE_MUCH_OF_THE_WRITING_ON_THIS_MAP", 138, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID20_WAV_THE_BEST_PERSON_TO_ASK_ABOUT_THAT_SORT_OF_THING", 139, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH20_WAV_I_HAVE_NEVER_SEEN_A_MAP_OF_THIS_SORT_BEFORE", 140, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK21_WAV_LISTEN_HERE_COME_CLOSE", 141, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH21_WAV_OH_IM_AFRAID_THIS_DOES_NOT_BODE_WELL_AT_ALL", 142, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY20_WAV_IVE_BEEN_LOOKING_FOR_A_MAP_BUT_THAT_CERTAINLY_ISNT", 143, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_GARBUD01_WAV_PLEEEEASE_NO_HURT", 144, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_GARBUD02_WAV_SOMETHING_FOR_YOU_I_AM_MAKING", 145, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_GARBUD03_WAV_NOTHING_YET", 146, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_GARBUD04_WAV_THIS_TOO_GOOD_FOR_YOU", 147, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_ZHAR01_WAV_WHAT", 148, -1);
add_enum_member (id, "SPEECH_ID_MONSTERS_ZHAR02_WAV_ARRRRGH", 149, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT25_WAV_HELLO_MY_FRIEND", 150, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT26_WAV_WHILE_YOU_ARE_VENTURING_DEEPER_INTO_THE_LABYRINTH_YOU_MAY", 151, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT27_WAV_I_KNOW_OF_MANY_MYTHS_AND_LEGENDS_THAT_MAY_CONTAIN", 152, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT28_WAV_GRISWOLD", 153, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT29_WAV_OGDEN_HAS_OWNED_AND_RUN_THE_RISING_SUN_INN_AND", 154, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT30_WAV_POOR_FARNHAM", 155, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT31_WAV_THE_WITCH_ADRIA_IS_AN_ANOMALY_HERE_IN_TRISTRAM", 156, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT33_WAV_THE_STORY_OF_WIRT_IS_A_FRIGHTENING_AND_TRAGIC_ONE", 157, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT34_WAV_AH_PEPIN", 158, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_STORYT35_WAV_GILLIAN_IS_A_FINE_WOMAN", 159, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN36_WAV_GREETINGS_GOOD_MASTER", 160, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN37_WAV_MANY_ADVENTURERS_HAVE_GRACED_THE_TABLES_OF_MY_TAVERN_AND", 161, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN38_WAV_GRISWOLD_THE_BLACKSMITH_IS_EXTREMELY_KNOWLEDGEABLE_ABOUT_WEAPONS_AND_ARMOR", 162, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN39_WAV_FARNHAM_SPENDS_FAR_TOO_MUCH_TIME_HERE_DROWNING_HIS_SORROWS", 163, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN40_WAV_ADRIA_IS_WISE_BEYOND_HER_YEARS_BUT_I_MUST_ADMIT", 164, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN41_WAV_IF_YOU_WANT_TO_KNOW_MORE_ABOUT_THE_HISTORY_OF", 165, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN43_WAV_WIRT_IS_A_RAPSCALLION_AND_A_LITTLE_SCOUNDREL", 166, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN44_WAV_PEPIN_IS_A_GOOD_MAN", 167, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN45_WAV_GILLIAN_MY_BARMAID", 168, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER37_WAV_WHAT_AILS_YOU_MY_FRIEND", 169, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER38_WAV_I_HAVE_MADE_A_VERY_INTERESTING_DISCOVERY", 170, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER39_WAV_BEFORE_IT_WAS_TAKEN_OVER_BY_WELL_WHATEVER_LURKS_BELOW", 171, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER40_WAV_GRISWOLD_KNOWS_AS_MUCH_ABOUT_THE_ART_OF_WAR_AS", 172, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER41_WAV_CAIN_IS_A_TRUE_FRIEND_AND_A_WISE_SAGE", 173, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER42_WAV_EVEN_MY_SKILLS_HAVE_BEEN_UNABLE_TO_FULLY_HEAL_FARNHAM", 174, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER43_WAV_WHILE_I_USE_SOME_LIMITED_FORMS_OF_MAGIC_TO_CREATE", 175, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER45_WAV_POOR_WIRT", 176, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER46_WAV_I_REALLY_DONT_UNDERSTAND_WHY_OGDEN_STAYS_HERE_IN_TRISTRAM", 177, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_HEALER47_WAV_OGDENS_BARMAID_IS_A_SWEET_GIRL", 178, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID31_WAV_GOOD_DAY", 179, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID32_WAV_MY_GRANDMOTHER_HAD_A_DREAM_THAT_YOU_WOULD_COME_AND", 180, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID33_WAV_THE_WOMAN_AT_THE_EDGE_OF_TOWN_IS_A_WITCH", 181, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID34_WAV_OUR_BLACKSMITH_IS_A_POINT_OF_PRIDE_TO_THE_PEOPLE", 182, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID35_WAV_CAIN_HAS_BEEN_THE_STORYTELLER_OF_TRISTRAM_FOR_AS_LONG", 183, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID36_WAV_FARNHAM_IS_A_DRUNKARD_WHO_FILLS_HIS_BELLY_WITH_ALE", 184, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID37_WAV_PEPIN_SAVED_MY_GRANDMOTHERS_LIFE_AND_I_KNOW_THAT_I", 185, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID39_WAV_I_GREW_UP_WITH_WIRTS_MOTHER_CANACE", 186, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BMAID40_WAV_OGDEN_AND_HIS_WIFE_HAVE_TAKEN_ME_AND_MY_GRANDMOTHER", 187, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH44_WAV_WELL_WHAT_CAN_I_DO_FOR_YA", 188, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH45_WAV_IF_YOURE_LOOKING_FOR_A_GOOD_WEAPON_LET_ME_SHOW", 189, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH46_WAV_THE_AXE", 190, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH47_WAV_LOOK_AT_THAT_EDGE_THAT_BALANCE", 191, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH48_WAV_YOUR_WEAPONS_AND_ARMOR_WILL_SHOW_THE_SIGNS_OF_YOUR", 192, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH49_WAV_WHILE_I_HAVE_TO_PRACTICALLY_SMUGGLE_IN_THE_METALS_AND", 193, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH50_WAV_GILLIAN_IS_A_NICE_LASS", 194, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH51_WAV_SOMETIMES_I_THINK_THAT_CAIN_TALKS_TOO_MUCH_BUT_I", 195, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH52_WAV_I_WAS_WITH_FARNHAM_THAT_NIGHT_THAT_LAZARUS_LED_US", 196, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH53_WAV_A_GOOD_MAN_WHO_PUTS_THE_NEEDS_OF_OTHERS_ABOVE", 197, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH55_WAV_THAT_LAD_IS_GOING_TO_GET_HIMSELF_INTO_SERIOUS_TROUBLE", 198, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_BSMITH56_WAV_THE_INNKEEPER_HAS_LITTLE_BUSINESS_AND_NO_REAL_WAY_OF", 199, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK27_WAV_CANT_A_FELLA_DRINK_IN_PEACE", 200, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK28_WAV_THE_GAL_WHO_BRINGS_THE_DRINKS", 201, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK29_WAV_WHY_DONT_THAT_OLD_CRONE_DO_SOMETHIN_FOR_A_CHANGE", 202, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK30_WAV_CAIN_ISNT_WHAT_HE_SAYS_HE_IS", 203, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK31_WAV_GRISWOLD", 204, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK32_WAV_HEHEHE_I_LIKE_PEPIN", 205, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK34_WAV_WIRT_IS_A_KID_WITH_MORE_PROBLEMS_THAN_EVEN_ME", 206, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK35_WAV_OGDEN_IS_THE_BEST_MAN_IN_TOWN", 207, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK23_WAV_I_WANNA_TELL_YA_SUMTHIN_CAUSE_I_KNOW_ALL_ABOUT", 208, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK24_WAV_NO_ONE_EVER_LIS", 209, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK25_WAV_I_KNOW_YOU_GOTS_YOUR_OWN_IDEAS_AND_I_KNOW", 210, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_DRUNK26_WAV_IF_I_WAS_YOU", 211, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH38_WAV_I_SENSE_A_SOUL_IN_SEARCH_OF_ANSWERS", 212, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH39_WAV_WISDOM_IS_EARNED_NOT_GIVEN", 213, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH40_WAV_THE_GREATEST_POWER_IS_OFTEN_THE_SHORTEST_LIVED", 214, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH41_WAV_THOUGH_THE_HEAT_OF_THE_SUN_IS_BEYOND_MEASURE_THE", 215, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH42_WAV_THE_SUM_OF_OUR_KNOWLEDGE_IS_IN_THE_SUM_OF", 216, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH43_WAV_TO_A_MAN_WHO_ONLY_KNOWS_IRON_THERE_IS_NO", 217, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH44_WAV_CORRUPTION_HAS_THE_STRENGTH_OF_DECEIT_BUT_INNOCENCE_HOLDS_THE", 218, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH45_WAV_A_CHEST_OPENED_IN_DARKNESS_HOLDS_NO_GREATER_TREASURE_THAN", 219, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH46_WAV_THE_HIGHER_YOU_PLACE_YOUR_FAITH_IN_ONE_MAN_THE", 220, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH47_WAV_THE_HAND_THE_HEART_AND_THE_MIND_CAN_PERFORM_MIRACLES", 221, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH49_WAV_THERE_IS_MUCH_ABOUT_THE_FUTURE_WE_CANNOT_SEE_BUT", 222, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_WITCH50_WAV_EARTHEN_WALLS_AND_THATCHED_CANOPY_DO_NOT_A_HOME_CREATE", 223, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY32_WAV_PSSST", 224, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY33_WAV_NOT_EVERYONE_IN_TRISTRAM_HAS_A_USE", 225, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY34_WAV_DONT_TRUST_EVERYTHING_THE_DRUNK_SAYS", 226, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY35_WAV_IN_CASE_YOU_HAVENT_NOTICED_I_DONT_BUY_ANYTHING_FROM", 227, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY36_WAV_I_GUESS_I_OWE_THE_BLACKSMITH_MY_LIFE", 228, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY37_WAV_IF_I_WERE_A_FEW_YEARS_OLDER_I_WOULD_SHOWER", 229, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY38_WAV_CAIN_KNOWS_TOO_MUCH", 230, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY39_WAV_FARNHAM", 231, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY40_WAV_AS_LONG_AS_YOU_DONT_NEED_ANYTHING_REATTACHED_OLD_PEPIN", 232, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY42_WAV_ADRIA_TRULY_BOTHERS_ME", 233, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_PEGBOY43_WAV_OGDEN_IS_A_FOOL_FOR_STAYING_HERE", 234, -1);
add_enum_member (id, "SPEECH_ID_WARRIOR_WARIOR01_WAV_BEYOND_THE_HALL_OF_HEROES_LIES_THE_CHAMBER_OF_BONE", 235, -1);
add_enum_member (id, "SPEECH_ID_WARRIOR_WARIOR10_WAV", 236, -1);
add_enum_member (id, "SPEECH_ID_WARRIOR_WARIOR11_WAV_I_CAN_SEE_WHAT_YOU_SEE_NOT", 237, -1);
add_enum_member (id, "SPEECH_ID_WARRIOR_WARIOR12_WAV_THE_ARMORIES_OF_HELL_ARE_HOME_TO_THE_WARLORD_OF", 238, -1);
add_enum_member (id, "SPEECH_ID_SORCEROR_MAGE01_WAV_BEYOND_THE_HALL_OF_HEROES_LIES_THE_CHAMBER_OF_BONE", 239, -1);
add_enum_member (id, "SPEECH_ID_SORCEROR_MAGE10_WAV", 240, -1);
add_enum_member (id, "SPEECH_ID_SORCEROR_MAGE11_WAV_I_CAN_SEE_WHAT_YOU_SEE_NOT", 241, -1);
add_enum_member (id, "SPEECH_ID_SORCEROR_MAGE12_WAV_THE_ARMORIES_OF_HELL_ARE_HOME_TO_THE_WARLORD_OF", 242, -1);
add_enum_member (id, "SPEECH_ID_ROGUE_ROGUE01_WAV_BEYOND_THE_HALL_OF_HEROES_LIES_THE_CHAMBER_OF_BONE", 243, -1);
add_enum_member (id, "SPEECH_ID_ROGUE_ROGUE10_WAV", 244, -1);
add_enum_member (id, "SPEECH_ID_ROGUE_ROGUE11_WAV_I_CAN_SEE_WHAT_YOU_SEE_NOT", 245, -1);
add_enum_member (id, "SPEECH_ID_ROGUE_ROGUE12_WAV_THE_ARMORIES_OF_HELL_ARE_HOME_TO_THE_WARLORD_OF", 246, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_COW1_WAV", 247, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_COW2_WAV", 248, -1);
add_enum_member (id, "SPEECH_ID_NARRATOR_NAR01_WAV_TAKE_HEED_AND_BEAR_WITNESS_TO_THE_TRUTHS_THAT_LIE", 249, -1);
add_enum_member (id, "SPEECH_ID_NARRATOR_NAR02_WAV_TAKE_HEED_AND_BEAR_WITNESS_TO_THE_TRUTHS_THAT_LIE", 250, -1);
add_enum_member (id, "SPEECH_ID_NARRATOR_NAR03_WAV_TAKE_HEED_AND_BEAR_WITNESS_TO_THE_TRUTHS_THAT_LIE", 251, -1);
add_enum_member (id, "SPEECH_ID_NARRATOR_NAR04_WAV_SO_IT_CAME_TO_BE_THAT_THERE_WAS_A_GREAT", 252, -1);
add_enum_member (id, "SPEECH_ID_NARRATOR_NAR05_WAV_MANY_DEMONS_TRAVELED_TO_THE_MORTAL_REALM_IN_SEARCH_OF", 253, -1);
add_enum_member (id, "SPEECH_ID_NARRATOR_NAR06_WAV_SO_IT_CAME_TO_BE_THAT_THE_THREE_PRIME_EVILS", 254, -1);
add_enum_member (id, "SPEECH_ID_NARRATOR_NAR07_WAV_ALL_PRAISES_TO_DIABLO", 255, -1);
add_enum_member (id, "SPEECH_ID_NARRATOR_NAR08_WAV_GLORY_AND_APPROBATION_TO_DIABLO", 256, -1);
add_enum_member (id, "SPEECH_ID_NARRATOR_NAR09_WAV_HAIL_AND_SACRIFICE_TO_DIABLO", 257, -1);
add_enum_member (id, "SPEECH_ID_TOWNERS_TAVOWN00_WAV_THANK_GOODNESS_YOUVE_RETURNED", 258, -1);
add_enum_member (id, "SPEECH_ID_INVALID", -1, -1);
cleanup("spell_id");id = add_enum (-1, "spell_id", FF_0NUMD);
set_enum_cmt (id, "Spell IDs specify spell_data array indices.", 0);
add_enum_member (id, "SPELL_ID_NULL", 0, -1);
add_enum_member (id, "SPELL_ID_FIREBOLT", 1, -1);
add_enum_member (id, "SPELL_ID_HEALING", 2, -1);
add_enum_member (id, "SPELL_ID_LIGHTNING", 3, -1);
add_enum_member (id, "SPELL_ID_FLASH", 4, -1);
add_enum_member (id, "SPELL_ID_IDENTIFY", 5, -1);
add_enum_member (id, "SPELL_ID_FIRE_WALL", 6, -1);
add_enum_member (id, "SPELL_ID_TOWN_PORTAL", 7, -1);
add_enum_member (id, "SPELL_ID_STONE_CURSE", 8, -1);
add_enum_member (id, "SPELL_ID_INFRAVISION", 9, -1);
add_enum_member (id, "SPELL_ID_PHASING", 10, -1);
add_enum_member (id, "SPELL_ID_MANA_SHIELD", 11, -1);
add_enum_member (id, "SPELL_ID_FIREBALL", 12, -1);
add_enum_member (id, "SPELL_ID_GUARDIAN", 13, -1);
add_enum_member (id, "SPELL_ID_CHAIN_LIGHTNING", 14, -1);
add_enum_member (id, "SPELL_ID_FLAME_WAVE", 15, -1);
add_enum_member (id, "SPELL_ID_DOOM_SERPENTS", 16, -1);
add_enum_member (id, "SPELL_ID_BLOOD_RITUAL", 17, -1);
add_enum_member (id, "SPELL_ID_NOVA", 18, -1);
add_enum_member (id, "SPELL_ID_INVISIBILITY", 19, -1);
add_enum_member (id, "SPELL_ID_INFERNO", 20, -1);
add_enum_member (id, "SPELL_ID_GOLEM", 21, -1);
add_enum_member (id, "SPELL_ID_BLOOD_BOIL", 22, -1);
add_enum_member (id, "SPELL_ID_TELEPORT", 23, -1);
add_enum_member (id, "SPELL_ID_APOCALYPSE", 24, -1);
add_enum_member (id, "SPELL_ID_ETHEREALIZE", 25, -1);
add_enum_member (id, "SPELL_ID_ITEM_REPAIR", 26, -1);
add_enum_member (id, "SPELL_ID_STAFF_RECHARGE", 27, -1);
add_enum_member (id, "SPELL_ID_TRAP_DISARM", 28, -1);
add_enum_member (id, "SPELL_ID_ELEMENTAL", 29, -1);
add_enum_member (id, "SPELL_ID_CHARGED_BOLT", 30, -1);
add_enum_member (id, "SPELL_ID_HOLY_BOLT", 31, -1);
add_enum_member (id, "SPELL_ID_RESURRECT", 32, -1);
add_enum_member (id, "SPELL_ID_TELEKINESIS", 33, -1);
add_enum_member (id, "SPELL_ID_HEAL_OTHER", 34, -1);
add_enum_member (id, "SPELL_ID_BLOOD_STAR", 35, -1);
add_enum_member (id, "SPELL_ID_BONE_SPIRIT", 36, -1);
add_enum_member (id, "SPELL_ID_INVALID", -1, -1);
cleanup("spell_type");id = add_enum (-1, "spell_type", FF_0NUMD);
set_enum_cmt (id, "Spell types.", 0);
add_enum_member (id, "SPELL_TYPE_SKILL", 0, -1);
add_enum_member (id, "SPELL_TYPE_SPELL", 1, -1);
add_enum_member (id, "SPELL_TYPE_SCROLL", 2, -1);
add_enum_member (id, "SPELL_TYPE_CHARGES", 3, -1);
add_enum_member (id, "SPELL_TYPE_INVALID", 4, -1);
cleanup("step");id = add_enum (-1, "step", FF_0NUMD);
set_enum_cmt (id, "step represents the movement of one step in a path.\n     5\n    2 1\n   8 0 6\n    4 3\n     7", 0);
add_enum_member (id, "STEP_NONE", 0, -1);
add_enum_member (id, "STEP_NORTH_EAST", 1, -1);
add_enum_member (id, "STEP_NORTH_WEST", 2, -1);
add_enum_member (id, "STEP_SOUTH_EAST", 3, -1);
add_enum_member (id, "STEP_SOUTH_WEST", 4, -1);
add_enum_member (id, "STEP_NORTH", 5, -1);
add_enum_member (id, "STEP_EAST", 6, -1);
add_enum_member (id, "STEP_SOUTH", 7, -1);
add_enum_member (id, "STEP_WEST", 8, -1);
cleanup("step_direction");id = add_enum (-1, "step_direction", FF_0NUMD);
set_enum_cmt (id, "Step direction used for path finding.\nnorth\n   -1\n   -1\nwest\n   -1\n   1\neast\n   1\n   -1\nsouth\n   1\n   1\nnorth west\n   -1\n   0\nnorth east\n   0\n   -1\nsouth east\n   1\n   0\nsouth west\n   0\n   1", 0);
add_enum_member (id, "STEP_DIRECTION_NORTH", 0, -1);
add_enum_member (id, "STEP_DIRECTION_WEST", 1, -1);
add_enum_member (id, "STEP_DIRECTION_EAST", 2, -1);
add_enum_member (id, "STEP_DIRECTION_SOUTH", 3, -1);
add_enum_member (id, "STEP_DIRECTION_NORTH_WEST", 4, -1);
add_enum_member (id, "STEP_DIRECTION_NORTH_EAST", 5, -1);
add_enum_member (id, "STEP_DIRECTION_SOUTH_WEST", 6, -1);
add_enum_member (id, "STEP_DIRECTION_SOUTH_EAST", 7, -1);
cleanup("talk_id");id = add_enum (-1, "talk_id", FF_0NUMD);
set_enum_cmt (id, "Talk IDs for conversation dialogues.", 0);
add_enum_member (id, "TALK_ID_NONE", 0, -1);
add_enum_member (id, "TALK_ID_GRISWOLD", 1, -1);
add_enum_member (id, "TALK_ID_GRISWOLD_BUY_BASIC", 2, -1);
add_enum_member (id, "TALK_ID_GRISWOLD_SELL", 3, -1);
add_enum_member (id, "TALK_ID_GRISWOLD_REPAIR", 4, -1);
add_enum_member (id, "TALK_ID_ADRIA", 5, -1);
add_enum_member (id, "TALK_ID_ADRIA_BUY", 6, -1);
add_enum_member (id, "TALK_ID_ADRIA_SELL", 7, -1);
add_enum_member (id, "TALK_ID_ADRIA_RECHARGE", 8, -1);
add_enum_member (id, "TALK_ID_NOT_ENOUGH_GOLD", 9, -1);
add_enum_member (id, "TALK_ID_NOT_ENOUGH_ROOM", 10, -1);
add_enum_member (id, "TALK_ID_CONFIRM", 11, -1);
add_enum_member (id, "TALK_ID_WIRT", 12, -1);
add_enum_member (id, "TALK_ID_WIRT_BUY", 13, -1);
add_enum_member (id, "TALK_ID_PEPIN", 14, -1);
add_enum_member (id, "TALK_ID_CAIN", 15, -1);
add_enum_member (id, "TALK_ID_PEPIN_BUY", 16, -1);
add_enum_member (id, "TALK_ID_CAIN_IDENTIFY", 17, -1);
add_enum_member (id, "TALK_ID_GRISWOLD_BUY_PREMIUM", 18, -1);
add_enum_member (id, "TALK_ID_GOSSIP", 19, -1);
add_enum_member (id, "TALK_ID_CAIN_SHOW_IDENTIFIED_ITEM", 20, -1);
add_enum_member (id, "TALK_ID_ODGEN", 21, -1);
add_enum_member (id, "TALK_ID_FARNHAM", 22, -1);
add_enum_member (id, "TALK_ID_GILLIAN", 23, -1);
cleanup("theme_id");id = add_enum (-1, "theme_id", FF_0NUMD);
set_enum_cmt (id, "Theme IDs.", 0);
add_enum_member (id, "THEME_ID_BARREL", 0, -1);
add_enum_member (id, "THEME_ID_SHRINE", 1, -1);
add_enum_member (id, "THEME_ID_MONSTER_PIT", 2, -1);
add_enum_member (id, "THEME_ID_SKELETON_ROOM", 3, -1);
add_enum_member (id, "THEME_ID_TREASURE", 4, -1);
add_enum_member (id, "THEME_ID_LIBRARY", 5, -1);
add_enum_member (id, "THEME_ID_TORTURE", 6, -1);
add_enum_member (id, "THEME_ID_BLOOD_FOUNTAIN", 7, -1);
add_enum_member (id, "THEME_ID_DECAPITATED", 8, -1);
add_enum_member (id, "THEME_ID_PURIFYING_FOUNTAIN", 9, -1);
add_enum_member (id, "THEME_ID_ARMOR_STAND", 10, -1);
add_enum_member (id, "THEME_ID_GOAT_SHRINE", 11, -1);
add_enum_member (id, "THEME_ID_CAULDRON", 12, -1);
add_enum_member (id, "THEME_ID_MURKY_FOUNTAIN", 13, -1);
add_enum_member (id, "THEME_ID_TEAR_FOUNTAIN", 14, -1);
add_enum_member (id, "THEME_ID_BURNING_CROSS", 15, -1);
add_enum_member (id, "THEME_ID_WEAPON_RACK", 16, -1);
add_enum_member (id, "THEME_ID_NONE", -1, -1);
cleanup("template_id");id = add_enum (-1, "template_id", FF_0NUMD);
set_enum_cmt (id, "Template IDs for error windows.", 0);
add_enum_member (id, "TEMPLATE_ID_DX_INIT_ERROR", 104, -1);
add_enum_member (id, "TEMPLATE_ID_OUT_OF_MEMORY_ERROR", 105, -1);
add_enum_member (id, "TEMPLATE_ID_FILE_NOT_FOUND_ERROR", 106, -1);
add_enum_member (id, "TEMPLATE_ID_DDRAW_DLL_NOT_FOUND_ERROR", 107, -1);
add_enum_member (id, "TEMPLATE_ID_DSOUND_DLL_NOT_FOUND_ERROR", 108, -1);
add_enum_member (id, "TEMPLATE_ID_DISK_SPACE_ERROR", 110, -1);
add_enum_member (id, "TEMPLATE_ID_SWITCH_VIDEO_MODE_ERROR", 111, -1);
add_enum_member (id, "TEMPLATE_ID_INSERT_CD_ERROR", 112, -1);
add_enum_member (id, "TEMPLATE_ID_RESTRICTED_USER_ERROR", 113, -1);
add_enum_member (id, "TEMPLATE_ID_READ_ONLY_DIRECTORY_ERROR", 114, -1);
cleanup("text_color");id = add_enum (-1, "text_color", FF_0NUMD);
set_enum_cmt (id, "Text colours.", 0);
add_enum_member (id, "TEXT_COLOR_GREY", 0, -1);
add_enum_member (id, "TEXT_COLOR_BLUE", 1, -1);
add_enum_member (id, "TEXT_COLOR_RED", 2, -1);
add_enum_member (id, "TEXT_COLOR_GOLD", 3, -1);
cleanup("towner_anim_seq_id");id = add_enum (-1, "towner_anim_seq_id", FF_0NUMD);
set_enum_cmt (id, "Towner animation sequence IDs specify towner_anim_seq array indices.", 0);
add_enum_member (id, "TOWNER_ANIM_SEQ_ID_GRISWOLD", 0, -1);
add_enum_member (id, "TOWNER_ANIM_SEQ_ID_PEPIN", 1, -1);
add_enum_member (id, "TOWNER_ANIM_SEQ_ID_CAIN", 2, -1);
add_enum_member (id, "TOWNER_ANIM_SEQ_ID_OGDEN", 3, -1);
add_enum_member (id, "TOWNER_ANIM_SEQ_ID_FARNHAM", 4, -1);
add_enum_member (id, "TOWNER_ANIM_SEQ_ID_ADRIA", 5, -1);
add_enum_member (id, "TOWNER_ANIM_SEQ_ID_NONE", -1, -1);
cleanup("towner_id");id = add_enum (-1, "towner_id", FF_0NUMD);
set_enum_cmt (id, "Towner IDs for NPCs in Tristram.", 0);
add_enum_member (id, "TOWNER_ID_GRISWOLD", 0, -1);
add_enum_member (id, "TOWNER_ID_PEPIN", 1, -1);
add_enum_member (id, "TOWNER_ID_WOUNDED_TOWNSMAN", 2, -1);
add_enum_member (id, "TOWNER_ID_OGDEN", 3, -1);
add_enum_member (id, "TOWNER_ID_CAIN", 4, -1);
add_enum_member (id, "TOWNER_ID_FARNHAM", 5, -1);
add_enum_member (id, "TOWNER_ID_ADRIA", 6, -1);
add_enum_member (id, "TOWNER_ID_GILLIAN", 7, -1);
add_enum_member (id, "TOWNER_ID_WIRT", 8, -1);
add_enum_member (id, "TOWNER_ID_COW", 9, -1);
cleanup("track_id");id = add_enum (-1, "track_id", FF_0NUMD);
set_enum_cmt (id, "Music track IDs.", 0);
add_enum_member (id, "TRACK_ID_TRISTRAM", 0, -1);
add_enum_member (id, "TRACK_ID_CATHEDRAL", 1, -1);
add_enum_member (id, "TRACK_ID_CATACOMBS", 2, -1);
add_enum_member (id, "TRACK_ID_CAVES", 3, -1);
add_enum_member (id, "TRACK_ID_HELL", 4, -1);
add_enum_member (id, "TRACK_ID_INTRO", 5, -1);
add_enum_member (id, "TRACK_ID_NONE", 6, -1);
cleanup("unique_base_item");id = add_enum (-1, "unique_base_item", FF_0NUMD);
set_enum_cmt (id, "Unique base items specify the underlying base items of unique items.", 0);
add_enum_member (id, "UNIQUE_BASE_ITEM_NONE", 0, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_SHORT_BOW", 1, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_LONG_BOW", 2, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_HUNTERS_BOW", 3, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_COMPOSITE_BOW", 4, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_LONG_WAR_BOW", 5, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_LONG_BATTLE_BOW", 6, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_DAGGER", 7, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_FALCHION", 8, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_CLAYMORE", 9, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_BROAD_SWORD", 10, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_SABRE", 11, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_SCIMITAR", 12, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_LONG_SWORD", 13, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_BASTARD_SWORD", 14, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_TWO_HANDED_SWORD", 15, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_GREAT_SWORD", 16, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_CLEAVER", 17, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_LARGE_AXE", 18, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_BROAD_AXE", 19, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_SMALL_AXE", 20, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_BATTLE_AXE", 21, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_GREAT_AXE", 22, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_MACE", 23, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_MORNING_STAR", 24, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_SPIKED_CLUB", 25, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_MAUL", 26, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_WAR_HAMMER", 27, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_FLAIL", 28, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_LONG_STAFF", 29, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_SHORT_STAFF", 30, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_COMPOSITE_STAFF", 31, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_QUARTER_STAFF", 32, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_WAR_STAFF", 33, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_SKULL_CAP", 34, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_HELM", 35, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_GREAT_HELM", 36, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_CROWN", 37, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_RAGS", 39, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_STUDDED_LEATHER_ARMOR", 40, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_CLOAK", 41, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_ROBE", 42, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_CHAIN_MAIL", 43, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_LEATHER_ARMOR", 44, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_BREAST_PLATE", 45, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_CAPE", 46, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_PLATE_MAIL", 47, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_FULL_PLATE_MAIL", 48, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_BUCKLER", 49, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_SMALL_SHIELD", 50, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_LARGE_SHIELD", 51, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_KITE_SHIELD", 52, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_GOTHIC_SHIELD", 53, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_RING", 54, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_AMULET", 56, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_THE_UNDEAD_CROWN", 57, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_EMPYREAN_BAND", 58, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_OPTIC_AMULET", 59, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_RING_OF_TRUTH", 60, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_HARLEQUIN_CREST", 61, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_MAP_OF_THE_STARS", 62, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_ELIXIR", 63, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_ARKAINES_VALOR", 64, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_VEIL_OF_STEEL", 65, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_GRISWOLDS_EDGE", 66, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_LIGHTFORGE", 67, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_STAFF_OF_LAZARUS", 68, -1);
add_enum_member (id, "UNIQUE_BASE_ITEM_INVALID", -1, -1);
cleanup("unique_item_id");id = add_enum (-1, "unique_item_id", FF_0NUMD);
set_enum_cmt (id, "Unique item IDs specify unique_item_data array indices.", 0);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_BUTCHERS_CLEAVER", 0, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_UNDEAD_CROWN", 1, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_EMPYREAN_BAND", 2, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_OPTIC_AMULET", 3, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_RING_OF_TRUTH", 4, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_HARLEQUIN_CREST", 5, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_VEIL_OF_STEEL", 6, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_ARKAINES_VALOR", 7, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_GRISWOLDS_EDGE", 8, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_LIGHTFORGE", 9, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_RIFT_BOW", 10, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_NEEDLER", 11, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_CELESTIAL_BOW", 12, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_DEADLY_HUNTER", 13, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_BOW_OF_THE_DEAD", 14, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_BLACKOAK_BOW", 15, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_FLAMEDART", 16, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_FLESHSTINGER", 17, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_WINDFORCE", 18, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_EAGLEHORN", 19, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_GONNAGALS_DIRK", 20, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_DEFENDER", 21, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_GRYPHONS_CLAW", 22, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_BLACK_RAZOR", 23, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_GIBBOUS_MOON", 24, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_ICE_SHANK", 25, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_EXECUTIONERS_BLADE", 26, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_BONESAW", 27, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_SHADOWHAWK", 28, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_WIZARDSPIKE", 29, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_LIGHTSABRE", 30, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_FALCONS_TALON", 31, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_INFERNO", 32, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_DOOMBRINGER", 33, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_GRIZZLY", 34, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_GRANDFATHER", 35, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_MANGLER", 36, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_SHARP_BEAK", 37, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_BLOODSLAYER", 38, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_CELESTIAL_AXE", 39, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_WICKED_AXE", 40, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_STONECLEAVER", 41, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_AGUINARAS_HATCHET", 42, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_HELLSLAYER", 43, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_MESSERSCHMIDTS_REAVER", 44, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_CRACKRUST", 45, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_HAMMER_OF_JHOLM", 46, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_CIVERBS_CUDGEL", 47, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_CELESTIAL_STAR", 48, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_BARANARS_STAR", 49, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_GNARLED_ROOT", 50, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_CRANIUM_BASHER", 51, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_SCHAEFERS_HAMMER", 52, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_DREAMFLANGE", 53, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_STAFF_OF_SHADOWS", 54, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_IMMOLATOR", 55, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_STORM_SPIRE", 56, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_GLEAMSONG", 57, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THUNDERCALL", 58, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_PROTECTOR", 59, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_NAJS_PUZZLER", 60, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_MINDCRY", 61, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_ROD_OF_ONAN", 62, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_HELM_OF_SPIRITS", 63, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THINKING_CAP", 64, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_OVERLORDS_HELM", 65, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_FOOLS_CREST", 66, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_GOTTERDAMERUNG", 67, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_ROYAL_CIRCLET", 68, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_TORN_FLESH_OF_SOULS", 69, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_GLADIATORS_BANE", 70, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_RAINBOW_CLOAK", 71, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_LEATHER_OF_AUT", 72, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_WISDOMS_WRAP", 73, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_SPARKING_MAIL", 74, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_SCAVENGER_CARAPACE", 75, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_NIGHTSCAPE", 76, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_NAJS_LIGHT_PLATE", 77, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_DEMONSPIKE_COAT", 78, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_DEFLECTOR", 79, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_SPLIT_SKULL_SHIELD", 80, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_DRAGONS_BREACH", 81, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_BLACKOAK_SHIELD", 82, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_HOLY_DEFENDER", 83, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_STORMSHIELD", 84, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_BRAMBLE", 85, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_RING_OF_REGHA", 86, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_THE_BLEEDER", 87, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_CONSTRICTING_RING", 88, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_RING_OF_ENGAGEMENT", 89, -1);
add_enum_member (id, "UNIQUE_ITEM_ID_NULL", 90, -1);
cleanup("monster_action");id = add_enum (-1, "monster_action", FF_0NUMD);
set_enum_cmt (id, "Monster actions.", 0);
add_enum_member (id, "MONSTER_ACTION_STAND", 0, -1);
add_enum_member (id, "MONSTER_ACTION_WALK", 1, -1);
add_enum_member (id, "MONSTER_ACTION_ATTACK", 2, -1);
add_enum_member (id, "MONSTER_ACTION_HIT", 3, -1);
add_enum_member (id, "MONSTER_ACTION_DEATH", 4, -1);
add_enum_member (id, "MONSTER_ACTION_SPECIAL", 5, -1);
cleanup("");id = add_enum (-1, "", FF_0NUMD);
set_enum_cmt (id, "Unique monster IDs specify unique_monster_data array indices.", 0);
add_enum_member (id, "UNIQUE_MONSTER_ID_GHARBAD_THE_WEAK", 0, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GHARBAD_THE_WEAK"), " MONSTER_ID_FLESH_CLAN_MACE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SKELETON_KING", 1, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SKELETON_KING"), " MONSTER_ID_SKELETON_KING", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_ZHAR_THE_MAD", 2, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_ZHAR_THE_MAD"), " MONSTER_ID_COUNSELOR", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SNOTSPILL", 3, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SNOTSPILL"), " MONSTER_ID_DARK_ONE_SPEAR", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_ARCH_BISHOP_LAZARUS", 4, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_ARCH_BISHOP_LAZARUS"), " MONSTER_ID_ADVOCATE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_RED_VEX", 5, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_RED_VEX"), " MONSTER_ID_HELL_SPAWN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLACKJADE", 6, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLACKJADE"), " MONSTER_ID_HELL_SPAWN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_LACHDANAN", 7, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_LACHDANAN"), " MONSTER_ID_BLOOD_KNIGHT", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WARLORD_OF_BLOOD", 8, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WARLORD_OF_BLOOD"), " MONSTER_ID_STEEL_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_THE_BUTCHER", 9, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_THE_BUTCHER"), " MONSTER_ID_THE_BUTCHER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BONEHEAD_KEENAXE", 10, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BONEHEAD_KEENAXE"), " MONSTER_ID_CORPSE_AXE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLADESKIN_THE_SLASHER", 11, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLADESKIN_THE_SLASHER"), " MONSTER_ID_FALLEN_ONE_SWORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SOULPUS", 12, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SOULPUS"), " MONSTER_ID_ZOMBIE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_PUKERAT_THE_UNCLEAN", 13, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_PUKERAT_THE_UNCLEAN"), " MONSTER_ID_FALLEN_ONE_SPEAR", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BONERIPPER", 14, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BONERIPPER"), " MONSTER_ID_SKELETON_AXE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_ROTFEAST_THE_HUNGRY", 15, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_ROTFEAST_THE_HUNGRY"), " MONSTER_ID_ZOMBIE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GUTSHANK_THE_QUICK", 16, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GUTSHANK_THE_QUICK"), " MONSTER_ID_CARVER_SWORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BROKENHEAD_BANGSHIELD", 17, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BROKENHEAD_BANGSHIELD"), " MONSTER_ID_CORPSE_CAPTAIN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BONGO", 18, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BONGO"), " MONSTER_ID_DEVIL_KIN_SPEAR", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_ROTCARNAGE", 19, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_ROTCARNAGE"), " MONSTER_ID_GHOUL", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SHADOWBITE", 20, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SHADOWBITE"), " MONSTER_ID_SCAVENGER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DEADEYE", 21, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DEADEYE"), " MONSTER_ID_SKELETON_BOW", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_MADEYE_THE_DEAD", 22, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_MADEYE_THE_DEAD"), " MONSTER_ID_BURNING_DEAD_AXE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_EL_CHUPACABRAS", 23, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_EL_CHUPACABRAS"), " MONSTER_ID_PLAGUE_EATER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SKULLFIRE", 24, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SKULLFIRE"), " MONSTER_ID_CORPSE_BOW", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WARPSKULL", 25, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WARPSKULL"), " MONSTER_ID_HIDDEN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GORETONGUE", 26, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GORETONGUE"), " MONSTER_ID_ROTTING_CARCASS", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_PULSECRAWLER", 27, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_PULSECRAWLER"), " MONSTER_ID_SHADOW_BEAST", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_MOONBENDER", 28, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_MOONBENDER"), " MONSTER_ID_BLINK", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WRATHRAVEN", 29, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WRATHRAVEN"), " MONSTER_ID_BLINK", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SPINEEATER", 30, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SPINEEATER"), " MONSTER_ID_BONE_GASHER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLACKASH_THE_BURNING", 31, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLACKASH_THE_BURNING"), " MONSTER_ID_BURNING_DEAD_BOW", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SHADOWCROW", 32, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SHADOWCROW"), " MONSTER_ID_DARK_ONE_SWORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLIGHTSTONE_THE_WEAK", 33, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLIGHTSTONE_THE_WEAK"), " MONSTER_ID_LORD_SAYTER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BILEFROTH_THE_PIT_MASTER", 34, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BILEFROTH_THE_PIT_MASTER"), " MONSTER_ID_OVERLORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLOODSKIN_DARKBOW", 35, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLOODSKIN_DARKBOW"), " MONSTER_ID_FLESH_CLAN_BOW", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_FOULWING", 36, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_FOULWING"), " MONSTER_ID_GLOOM", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SHADOWDRINKER", 37, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SHADOWDRINKER"), " MONSTER_ID_HORROR_CAPTAIN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_HAZESHIFTER", 38, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_HAZESHIFTER"), " MONSTER_ID_UNSEEN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DEATHSPIT", 39, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DEATHSPIT"), " MONSTER_ID_ACID_BEAST", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLOODGUTTER", 40, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLOODGUTTER"), " MONSTER_ID_FIRE_CLAN_MACE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DEATHSHADE_FLESHMAUL", 41, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DEATHSHADE_FLESHMAUL"), " MONSTER_ID_STONE_CLAN_MACE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WARMAGGOT_THE_MAD", 42, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WARMAGGOT_THE_MAD"), " MONSTER_ID_WYRM", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GLASSKULL_THE_JAGGED", 43, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GLASSKULL_THE_JAGGED"), " MONSTER_ID_RED_STORM", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLIGHTFIRE", 44, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLIGHTFIRE"), " MONSTER_ID_FIRE_CLAN_BOW", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_NIGHTWING_THE_COLD", 45, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_NIGHTWING_THE_COLD"), " MONSTER_ID_GARGOYLE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GORESTONE", 46, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GORESTONE"), " MONSTER_ID_NIGHT_CLAN_BOW", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BRONZEFIST_FIRESTONE", 47, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BRONZEFIST_FIRESTONE"), " MONSTER_ID_HELL_STONE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WRATHFIRE_THE_DOOMED", 48, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WRATHFIRE_THE_DOOMED"), " MONSTER_ID_INCINERATOR", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_FIREWOUND_THE_GRIM", 49, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_FIREWOUND_THE_GRIM"), " MONSTER_ID_MAGMA_DEMON", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BARON_SLUDGE", 50, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BARON_SLUDGE"), " MONSTER_ID_MUD_MAN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLIGHTHORN_STEELMACE", 51, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLIGHTHORN_STEELMACE"), " MONSTER_ID_NIGHT_CLAN_MACE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_CHAOSHOWLER", 52, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_CHAOSHOWLER"), " MONSTER_ID_POISON_SPITTER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DOOMGRIN_THE_ROTTING", 53, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DOOMGRIN_THE_ROTTING"), " MONSTER_ID_RED_DEATH", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_MADBURNER", 54, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_MADBURNER"), " MONSTER_ID_FLAME_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BONESAW_THE_LITCH", 55, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BONESAW_THE_LITCH"), " MONSTER_ID_LITCH_DEMON", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BREAKSPINE", 56, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BREAKSPINE"), " MONSTER_ID_MUD_RUNNER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DEVILSKULL_SHARPBONE", 57, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DEVILSKULL_SHARPBONE"), " MONSTER_ID_RED_DEATH", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BROKENSTORM", 58, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BROKENSTORM"), " MONSTER_ID_RED_STORM", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_STORMBANE", 59, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_STORMBANE"), " MONSTER_ID_STORM_RIDER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_OOZEDROOL", 60, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_OOZEDROOL"), " MONSTER_ID_TOAD_DEMON", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GOLDBLIGHT_OF_THE_FLAME", 61, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GOLDBLIGHT_OF_THE_FLAME"), " MONSTER_ID_BLOOD_CLAW", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLACKSTORM", 62, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLACKSTORM"), " MONSTER_ID_OBSIDIAN_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_PLAGUEWRATH", 63, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_PLAGUEWRATH"), " MONSTER_ID_POISON_SPITTER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_THE_FLAYER", 64, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_THE_FLAYER"), " MONSTER_ID_STORM_RIDER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLUEHORN", 65, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLUEHORN"), " MONSTER_ID_FROST_CHARGER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WARPFIRE_HELLSPAWN", 66, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WARPFIRE_HELLSPAWN"), " MONSTER_ID_HELL_BURNER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_FANGSPEIR", 67, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_FANGSPEIR"), " MONSTER_ID_CAVE_VIPER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_FESTERSKULL", 68, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_FESTERSKULL"), " MONSTER_ID_UNDEAD_BALROG", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_LIONSKULL_THE_BENT", 69, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_LIONSKULL_THE_BENT"), " MONSTER_ID_BLACK_KNIGHT", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLACKTONGUE", 70, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLACKTONGUE"), " MONSTER_ID_COUNSELOR", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_VILETOUCH", 71, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_VILETOUCH"), " MONSTER_ID_DEATH_WING", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_VIPERFLAME", 72, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_VIPERFLAME"), " MONSTER_ID_FIRE_DRAKE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_FANGSKIN", 73, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_FANGSKIN"), " MONSTER_ID_GOLD_VIPER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WITCHFIRE_THE_UNHOLY", 74, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WITCHFIRE_THE_UNHOLY"), " MONSTER_ID_SUCCUBUS", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLACKSKULL", 75, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLACKSKULL"), " MONSTER_ID_BALROG", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SOULSLASH", 76, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SOULSLASH"), " MONSTER_ID_UNRAVELER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WINDSPAWN", 77, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WINDSPAWN"), " MONSTER_ID_VORTEX_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_LORD_OF_THE_PIT", 78, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_LORD_OF_THE_PIT"), " MONSTER_ID_AZURE_DRAKE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_RUSTWEAVER", 79, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_RUSTWEAVER"), " MONSTER_ID_DOOM_GUARD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_HOWLINGIRE_THE_SHADE", 80, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_HOWLINGIRE_THE_SHADE"), " MONSTER_ID_HOLLOW_ONE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DOOMCLOUD", 81, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DOOMCLOUD"), " MONSTER_ID_MAELSTORM", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLOODMOON_SOULFIRE", 82, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLOODMOON_SOULFIRE"), " MONSTER_ID_PAIN_MASTER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WITCHMOON", 83, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WITCHMOON"), " MONSTER_ID_SNOW_WITCH", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GOREFEAST", 84, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GOREFEAST"), " MONSTER_ID_VORTEX_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GRAYWAR_THE_SLAYER", 85, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GRAYWAR_THE_SLAYER"), " MONSTER_ID_DOOM_GUARD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DREADJUDGE", 86, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DREADJUDGE"), " MONSTER_ID_MAGISTRATE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_STAREYE_THE_WITCH", 87, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_STAREYE_THE_WITCH"), " MONSTER_ID_HELL_SPAWN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_STEELSKULL_THE_HUNTER", 88, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_STEELSKULL_THE_HUNTER"), " MONSTER_ID_STEEL_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SIR_GORASH", 89, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SIR_GORASH"), " MONSTER_ID_BLOOD_KNIGHT", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_THE_VIZIER", 90, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_THE_VIZIER"), " MONSTER_ID_CABALIST", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_ZAMPHIR", 91, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_ZAMPHIR"), " MONSTER_ID_REALITY_WEAVER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLOODLUST", 92, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLOODLUST"), " MONSTER_ID_HELL_SPAWN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WEBWIDOW", 93, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WEBWIDOW"), " MONSTER_ID_HELL_SPAWN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_FLESHDANCER", 94, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_FLESHDANCER"), " MONSTER_ID_SOUL_BURNER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GRIMSPIKE", 95, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GRIMSPIKE"), " MONSTER_ID_OBSIDIAN_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DOOMLOCK", 96, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DOOMLOCK"), " MONSTER_ID_STORM_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_NULL", 97, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_NULL"), " MONSTER_ID_NONE", 0);cleanup("unique_monster_id");id = add_enum (-1, "unique_monster_id", FF_0NUMD);
set_enum_cmt (id, "Unique monster IDs specify unique_monster_data array indices.", 0);
add_enum_member (id, "UNIQUE_MONSTER_ID_GHARBAD_THE_WEAK", 0, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GHARBAD_THE_WEAK"), " MONSTER_ID_FLESH_CLAN_MACE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SKELETON_KING", 1, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SKELETON_KING"), " MONSTER_ID_SKELETON_KING", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_ZHAR_THE_MAD", 2, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_ZHAR_THE_MAD"), " MONSTER_ID_COUNSELOR", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SNOTSPILL", 3, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SNOTSPILL"), " MONSTER_ID_DARK_ONE_SPEAR", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_ARCH_BISHOP_LAZARUS", 4, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_ARCH_BISHOP_LAZARUS"), " MONSTER_ID_ADVOCATE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_RED_VEX", 5, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_RED_VEX"), " MONSTER_ID_HELL_SPAWN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLACKJADE", 6, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLACKJADE"), " MONSTER_ID_HELL_SPAWN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_LACHDANAN", 7, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_LACHDANAN"), " MONSTER_ID_BLOOD_KNIGHT", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WARLORD_OF_BLOOD", 8, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WARLORD_OF_BLOOD"), " MONSTER_ID_STEEL_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_THE_BUTCHER", 9, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_THE_BUTCHER"), " MONSTER_ID_THE_BUTCHER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BONEHEAD_KEENAXE", 10, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BONEHEAD_KEENAXE"), " MONSTER_ID_CORPSE_AXE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLADESKIN_THE_SLASHER", 11, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLADESKIN_THE_SLASHER"), " MONSTER_ID_FALLEN_ONE_SWORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SOULPUS", 12, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SOULPUS"), " MONSTER_ID_ZOMBIE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_PUKERAT_THE_UNCLEAN", 13, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_PUKERAT_THE_UNCLEAN"), " MONSTER_ID_FALLEN_ONE_SPEAR", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BONERIPPER", 14, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BONERIPPER"), " MONSTER_ID_SKELETON_AXE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_ROTFEAST_THE_HUNGRY", 15, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_ROTFEAST_THE_HUNGRY"), " MONSTER_ID_ZOMBIE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GUTSHANK_THE_QUICK", 16, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GUTSHANK_THE_QUICK"), " MONSTER_ID_CARVER_SWORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BROKENHEAD_BANGSHIELD", 17, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BROKENHEAD_BANGSHIELD"), " MONSTER_ID_CORPSE_CAPTAIN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BONGO", 18, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BONGO"), " MONSTER_ID_DEVIL_KIN_SPEAR", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_ROTCARNAGE", 19, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_ROTCARNAGE"), " MONSTER_ID_GHOUL", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SHADOWBITE", 20, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SHADOWBITE"), " MONSTER_ID_SCAVENGER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DEADEYE", 21, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DEADEYE"), " MONSTER_ID_SKELETON_BOW", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_MADEYE_THE_DEAD", 22, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_MADEYE_THE_DEAD"), " MONSTER_ID_BURNING_DEAD_AXE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_EL_CHUPACABRAS", 23, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_EL_CHUPACABRAS"), " MONSTER_ID_PLAGUE_EATER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SKULLFIRE", 24, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SKULLFIRE"), " MONSTER_ID_CORPSE_BOW", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WARPSKULL", 25, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WARPSKULL"), " MONSTER_ID_HIDDEN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GORETONGUE", 26, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GORETONGUE"), " MONSTER_ID_ROTTING_CARCASS", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_PULSECRAWLER", 27, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_PULSECRAWLER"), " MONSTER_ID_SHADOW_BEAST", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_MOONBENDER", 28, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_MOONBENDER"), " MONSTER_ID_BLINK", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WRATHRAVEN", 29, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WRATHRAVEN"), " MONSTER_ID_BLINK", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SPINEEATER", 30, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SPINEEATER"), " MONSTER_ID_BONE_GASHER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLACKASH_THE_BURNING", 31, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLACKASH_THE_BURNING"), " MONSTER_ID_BURNING_DEAD_BOW", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SHADOWCROW", 32, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SHADOWCROW"), " MONSTER_ID_DARK_ONE_SWORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLIGHTSTONE_THE_WEAK", 33, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLIGHTSTONE_THE_WEAK"), " MONSTER_ID_LORD_SAYTER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BILEFROTH_THE_PIT_MASTER", 34, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BILEFROTH_THE_PIT_MASTER"), " MONSTER_ID_OVERLORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLOODSKIN_DARKBOW", 35, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLOODSKIN_DARKBOW"), " MONSTER_ID_FLESH_CLAN_BOW", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_FOULWING", 36, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_FOULWING"), " MONSTER_ID_GLOOM", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SHADOWDRINKER", 37, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SHADOWDRINKER"), " MONSTER_ID_HORROR_CAPTAIN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_HAZESHIFTER", 38, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_HAZESHIFTER"), " MONSTER_ID_UNSEEN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DEATHSPIT", 39, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DEATHSPIT"), " MONSTER_ID_ACID_BEAST", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLOODGUTTER", 40, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLOODGUTTER"), " MONSTER_ID_FIRE_CLAN_MACE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DEATHSHADE_FLESHMAUL", 41, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DEATHSHADE_FLESHMAUL"), " MONSTER_ID_STONE_CLAN_MACE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WARMAGGOT_THE_MAD", 42, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WARMAGGOT_THE_MAD"), " MONSTER_ID_WYRM", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GLASSKULL_THE_JAGGED", 43, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GLASSKULL_THE_JAGGED"), " MONSTER_ID_RED_STORM", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLIGHTFIRE", 44, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLIGHTFIRE"), " MONSTER_ID_FIRE_CLAN_BOW", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_NIGHTWING_THE_COLD", 45, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_NIGHTWING_THE_COLD"), " MONSTER_ID_GARGOYLE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GORESTONE", 46, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GORESTONE"), " MONSTER_ID_NIGHT_CLAN_BOW", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BRONZEFIST_FIRESTONE", 47, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BRONZEFIST_FIRESTONE"), " MONSTER_ID_HELL_STONE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WRATHFIRE_THE_DOOMED", 48, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WRATHFIRE_THE_DOOMED"), " MONSTER_ID_INCINERATOR", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_FIREWOUND_THE_GRIM", 49, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_FIREWOUND_THE_GRIM"), " MONSTER_ID_MAGMA_DEMON", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BARON_SLUDGE", 50, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BARON_SLUDGE"), " MONSTER_ID_MUD_MAN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLIGHTHORN_STEELMACE", 51, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLIGHTHORN_STEELMACE"), " MONSTER_ID_NIGHT_CLAN_MACE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_CHAOSHOWLER", 52, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_CHAOSHOWLER"), " MONSTER_ID_POISON_SPITTER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DOOMGRIN_THE_ROTTING", 53, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DOOMGRIN_THE_ROTTING"), " MONSTER_ID_RED_DEATH", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_MADBURNER", 54, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_MADBURNER"), " MONSTER_ID_FLAME_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BONESAW_THE_LITCH", 55, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BONESAW_THE_LITCH"), " MONSTER_ID_LITCH_DEMON", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BREAKSPINE", 56, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BREAKSPINE"), " MONSTER_ID_MUD_RUNNER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DEVILSKULL_SHARPBONE", 57, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DEVILSKULL_SHARPBONE"), " MONSTER_ID_RED_DEATH", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BROKENSTORM", 58, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BROKENSTORM"), " MONSTER_ID_RED_STORM", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_STORMBANE", 59, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_STORMBANE"), " MONSTER_ID_STORM_RIDER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_OOZEDROOL", 60, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_OOZEDROOL"), " MONSTER_ID_TOAD_DEMON", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GOLDBLIGHT_OF_THE_FLAME", 61, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GOLDBLIGHT_OF_THE_FLAME"), " MONSTER_ID_BLOOD_CLAW", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLACKSTORM", 62, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLACKSTORM"), " MONSTER_ID_OBSIDIAN_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_PLAGUEWRATH", 63, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_PLAGUEWRATH"), " MONSTER_ID_POISON_SPITTER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_THE_FLAYER", 64, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_THE_FLAYER"), " MONSTER_ID_STORM_RIDER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLUEHORN", 65, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLUEHORN"), " MONSTER_ID_FROST_CHARGER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WARPFIRE_HELLSPAWN", 66, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WARPFIRE_HELLSPAWN"), " MONSTER_ID_HELL_BURNER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_FANGSPEIR", 67, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_FANGSPEIR"), " MONSTER_ID_CAVE_VIPER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_FESTERSKULL", 68, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_FESTERSKULL"), " MONSTER_ID_UNDEAD_BALROG", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_LIONSKULL_THE_BENT", 69, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_LIONSKULL_THE_BENT"), " MONSTER_ID_BLACK_KNIGHT", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLACKTONGUE", 70, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLACKTONGUE"), " MONSTER_ID_COUNSELOR", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_VILETOUCH", 71, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_VILETOUCH"), " MONSTER_ID_DEATH_WING", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_VIPERFLAME", 72, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_VIPERFLAME"), " MONSTER_ID_FIRE_DRAKE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_FANGSKIN", 73, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_FANGSKIN"), " MONSTER_ID_GOLD_VIPER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WITCHFIRE_THE_UNHOLY", 74, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WITCHFIRE_THE_UNHOLY"), " MONSTER_ID_SUCCUBUS", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLACKSKULL", 75, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLACKSKULL"), " MONSTER_ID_BALROG", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SOULSLASH", 76, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SOULSLASH"), " MONSTER_ID_UNRAVELER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WINDSPAWN", 77, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WINDSPAWN"), " MONSTER_ID_VORTEX_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_LORD_OF_THE_PIT", 78, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_LORD_OF_THE_PIT"), " MONSTER_ID_AZURE_DRAKE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_RUSTWEAVER", 79, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_RUSTWEAVER"), " MONSTER_ID_DOOM_GUARD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_HOWLINGIRE_THE_SHADE", 80, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_HOWLINGIRE_THE_SHADE"), " MONSTER_ID_HOLLOW_ONE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DOOMCLOUD", 81, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DOOMCLOUD"), " MONSTER_ID_MAELSTORM", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLOODMOON_SOULFIRE", 82, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLOODMOON_SOULFIRE"), " MONSTER_ID_PAIN_MASTER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WITCHMOON", 83, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WITCHMOON"), " MONSTER_ID_SNOW_WITCH", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GOREFEAST", 84, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GOREFEAST"), " MONSTER_ID_VORTEX_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GRAYWAR_THE_SLAYER", 85, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GRAYWAR_THE_SLAYER"), " MONSTER_ID_DOOM_GUARD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DREADJUDGE", 86, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DREADJUDGE"), " MONSTER_ID_MAGISTRATE", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_STAREYE_THE_WITCH", 87, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_STAREYE_THE_WITCH"), " MONSTER_ID_HELL_SPAWN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_STEELSKULL_THE_HUNTER", 88, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_STEELSKULL_THE_HUNTER"), " MONSTER_ID_STEEL_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_SIR_GORASH", 89, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_SIR_GORASH"), " MONSTER_ID_BLOOD_KNIGHT", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_THE_VIZIER", 90, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_THE_VIZIER"), " MONSTER_ID_CABALIST", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_ZAMPHIR", 91, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_ZAMPHIR"), " MONSTER_ID_REALITY_WEAVER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_BLOODLUST", 92, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_BLOODLUST"), " MONSTER_ID_HELL_SPAWN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_WEBWIDOW", 93, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_WEBWIDOW"), " MONSTER_ID_HELL_SPAWN", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_FLESHDANCER", 94, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_FLESHDANCER"), " MONSTER_ID_SOUL_BURNER", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_GRIMSPIKE", 95, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_GRIMSPIKE"), " MONSTER_ID_OBSIDIAN_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_DOOMLOCK", 96, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_DOOMLOCK"), " MONSTER_ID_STORM_LORD", 0);add_enum_member (id, "UNIQUE_MONSTER_ID_NULL", 97, -1);
set_enum_member_cmt (get_enum_member_by_name ("UNIQUE_MONSTER_ID_NULL"), " MONSTER_ID_NONE", 0);cleanup("SNetCreateGame");set_name(0x4698A0, "SNetCreateGame");
set_func_cmt(0x4698A0, "SNetCreateGame creates a network game with the given multi player seed.", 0);
apply_type (0x4698A0, "bool32_t __stdcall SNetCreateGame(char *local_1, char *local_2, char *local_3, int a4, int *multi_seed, int a6, int a7, char *local_4, char *local_5, int *player_num);", TINFO_DEFINITE);
cleanup("SNetDestroy");set_name(0x4697C8, "SNetDestroy");
set_func_cmt(0x4697C8, "SNetDestroy terminates the network provider.", 0);
apply_type (0x4697C8, "void SNetDestroy();", TINFO_DEFINITE);
cleanup("SNetDropPlayer");set_name(0x46986A, "SNetDropPlayer");
set_func_cmt(0x46986A, "SNetDropPlayer drops the given player from the current game.", 0);
apply_type (0x46986A, "bool32_t __stdcall SNetDropPlayer(int player_num, uint32_t flags);", TINFO_DEFINITE);
cleanup("SNetGetGameInfo");set_name(0x46988E, "SNetGetGameInfo");
set_func_cmt(0x46988E, "SNetGetGameInfo retrieves game information of the given type.", 0);
apply_type (0x46988E, "bool32_t __stdcall SNetGetGameInfo(game_info type, char *dst, int size, int *len);", TINFO_DEFINITE);
cleanup("SNetGetOwnerTurnsWaiting");set_name(0x469864, "SNetGetOwnerTurnsWaiting");
set_func_cmt(0x469864, "SNetGetOwnerTurnsWaiting retrieves the number of anticipated turns.", 0);
apply_type (0x469864, "bool32_t __stdcall SNetGetOwnerTurnsWaiting(int *turns);", TINFO_DEFINITE);
cleanup("SNetGetProviderCaps");set_name(0x4698C4, "SNetGetProviderCaps");
set_func_cmt(0x4698C4, "SNetGetProviderCaps retrieves network provider capacity information.", 0);
apply_type (0x4698C4, "bool32_t __stdcall SNetGetProviderCaps(Caps *caps);", TINFO_DEFINITE);
cleanup("SNetGetTurnsInTransit");set_name(0x4698B8, "SNetGetTurnsInTransit");
set_func_cmt(0x4698B8, "SNetGetTurnsInTransit retrives the number of turns queued for sending over\nthe network.", 0);
apply_type (0x4698B8, "bool32_t __stdcall SNetGetTurnsInTransit(int *turns);", TINFO_DEFINITE);
cleanup("SNetInitializeProvider");set_name(0x4698A6, "SNetInitializeProvider");
set_func_cmt(0x4698A6, "SNetInitializeProvider initializes the network provider.", 0);
apply_type (0x4698A6, "bool32_t __stdcall SNetInitializeProvider(uint32_t id, ClientInfo *client_info, UserInfo *user_info, UiInfo *ui_info, FileInfo *file_info);", TINFO_DEFINITE);
cleanup("SNetLeaveGame");set_name(0x4697CE, "SNetLeaveGame");
set_func_cmt(0x4697CE, "SNetLeaveGame notifies all connected peers that the client has left the game.", 0);
apply_type (0x4697CE, "bool32_t __stdcall SNetLeaveGame(uint32_t flags);", TINFO_DEFINITE);
cleanup("SNetPerformUpgrade");set_name(0x4698AC, "SNetPerformUpgrade");
set_func_cmt(0x4698AC, "SNetPerformUpgrade performs a network upgrade of the game.", 0);
apply_type (0x4698AC, "bool32_t __stdcall SNetPerformUpgrade(int *status);", TINFO_DEFINITE);
cleanup("SNetReceiveMessage");set_name(0x46987C, "SNetReceiveMessage");
set_func_cmt(0x46987C, "SNetReceiveMessage receives a network message from a connected peer.", 0);
apply_type (0x46987C, "bool32_t __stdcall SNetReceiveMessage(int *sender_player_num, Packet **pkt, int *len);", TINFO_DEFINITE);
cleanup("SNetReceiveTurns");set_name(0x4698BE, "SNetReceiveTurns");
set_func_cmt(0x4698BE, "SNetReceiveTurns receives turns and player states from all connected peers.", 0);
apply_type (0x4698BE, "bool32_t __stdcall SNetReceiveTurns(int player_num, int nplayers, void *turn_table, int *turn_table_len, uint32_t *player_state);", TINFO_DEFINITE);
cleanup("SNetRegisterEventHandler");set_name(0x469888, "SNetRegisterEventHandler");
set_func_cmt(0x469888, "SNetRegisterEventHandler registers the event handler for the given event\ntype.", 0);
apply_type (0x469888, "bool32_t __stdcall SNetRegisterEventHandler(event_type event_type, void (__stdcall *event_handler)(Event *event));", TINFO_DEFINITE);
cleanup("SNetSendMessage");set_name(0x469876, "SNetSendMessage");
set_func_cmt(0x469876, "SNetSendMessage sends a network message to the given player.", 0);
apply_type (0x469876, "bool32_t __stdcall SNetSendMessage(int player_num, Packet *pkt, int len);", TINFO_DEFINITE);
cleanup("SNetSendTurn");set_name(0x4698B2, "SNetSendTurn");
set_func_cmt(0x4698B2, "SNetSendTurn sends the given turn to all connected peers.", 0);
apply_type (0x4698B2, "bool32_t __stdcall SNetSendTurn(uint32_t *turn, int len);", TINFO_DEFINITE);
cleanup("SNetSetBasePlayer");set_name(0x469894, "SNetSetBasePlayer");
set_func_cmt(0x469894, "SNetSetBasePlayer sets the base player number of the network provider.", 0);
apply_type (0x469894, "bool32_t __stdcall SNetSetBasePlayer(int base_player_num);", TINFO_DEFINITE);
cleanup("SNetUnregisterEventHandler");set_name(0x469882, "SNetUnregisterEventHandler");
set_func_cmt(0x469882, "SNetUnregisterEventHandler unregisters the event handler of the given event\ntype.", 0);
apply_type (0x469882, "bool32_t __stdcall SNetUnregisterEventHandler(event_type event_type, void (__stdcall *event_handler)(Event *event));", TINFO_DEFINITE);
cleanup("SNetSetServerChatCommand");set_name(0x469870, "SNetSetServerChatCommand");
set_func_cmt(0x469870, "SNetSetServerChatCommand sends a chat command to the server.", 0);
apply_type (0x469870, "int __stdcall SNetSetServerChatCommand(char *command);", TINFO_DEFINITE);
cleanup("SFileCloseArchive");set_name(0x469816, "SFileCloseArchive");
set_func_cmt(0x469816, "SFileCloseArchive closes the given MPQ archive.", 0);
apply_type (0x469816, "bool32_t __stdcall SFileCloseArchive(void *archive);", TINFO_DEFINITE);
cleanup("SFileCloseFile");set_name(0x4697F2, "SFileCloseFile");
set_func_cmt(0x4697F2, "SFileCloseFile closes the given file.", 0);
apply_type (0x4697F2, "bool32_t __stdcall SFileCloseFile(void *file);", TINFO_DEFINITE);
cleanup("SFileDdaBeginEx");set_name(0x4697FE, "SFileDdaBeginEx");
set_func_cmt(0x4697FE, "SFileDdaBeginEx starts playback of the given audio stream.", 0);
apply_type (0x4697FE, "bool32_t __stdcall SFileDdaBeginEx(void * sfx_stream, uint32_t flags, int mask, int offset, int volume, int pan, int a7);", TINFO_DEFINITE);
cleanup("SFileDdaDestroy");set_name(0x4698FA, "SFileDdaDestroy");
set_func_cmt(0x4698FA, "SFileDdaDestroy terminates the sound subsystem.", 0);
apply_type (0x4698FA, "bool32_t SFileDdaDestroy();", TINFO_DEFINITE);
cleanup("SFileDdaEnd");set_name(0x4697F8, "SFileDdaEnd");
set_func_cmt(0x4697F8, "SFileDdaEnd stops playback of the given audio stream.", 0);
apply_type (0x4697F8, "bool32_t __stdcall SFileDdaEnd(void *file);", TINFO_DEFINITE);
cleanup("SFileDdaGetPos");set_name(0x46980A, "SFileDdaGetPos");
set_func_cmt(0x46980A, "SFileDdaGetPos retrieves the current and the end position of the data stream.", 0);
apply_type (0x46980A, "bool32_t __stdcall SFileDdaGetPos(void *stream, int *cur_pos, int *end_pos);", TINFO_DEFINITE);
cleanup("SFileDdaInitialize");set_name(0x4698EE, "SFileDdaInitialize");
set_func_cmt(0x4698EE, "SFileDdaInitialize initializes the sound subsystem.", 0);
apply_type (0x4698EE, "bool32_t __stdcall SFileDdaInitialize(IDirectSound *DS);", TINFO_DEFINITE);
cleanup("SFileDdaSetVolume");set_name(0x469906, "SFileDdaSetVolume");
set_func_cmt(0x469906, "SFileDdaSetVolume sets the playback volume of the given audio stream.", 0);
apply_type (0x469906, "bool32_t __stdcall SFileDdaSetVolume(void *file, int volume, int a3);", TINFO_DEFINITE);
cleanup("SFileGetFileArchive");set_name(0x46990C, "SFileGetFileArchive");
set_func_cmt(0x46990C, "SFileGetFileArchive retrieves a handle to the MPQ archive of the given file.", 0);
apply_type (0x46990C, "bool32_t __stdcall SFileGetFileArchive(int file, int *archive);", TINFO_DEFINITE);
cleanup("SFileGetFileSize");set_name(0x4698E2, "SFileGetFileSize");
set_func_cmt(0x4698E2, "SFileGetFileSize returns the size of the given file.", 0);
apply_type (0x4698E2, "int __stdcall SFileGetFileSize(int *file1, int *file2);", TINFO_DEFINITE);
cleanup("SFileOpenArchive");set_name(0x469822, "SFileOpenArchive");
set_func_cmt(0x469822, "SFileOpenArchive opens the named MPQ archive and retrieves its file\ndescriptor.", 0);
apply_type (0x469822, "bool32_t __stdcall SFileOpenArchive(char *mpq_path, uint32_t flags, int a3, void **archive);", TINFO_DEFINITE);
cleanup("SFileOpenFile");set_name(0x469804, "SFileOpenFile");
set_func_cmt(0x469804, "SFileOpenFile opens the named file and retrieves its file descriptor.", 0);
apply_type (0x469804, "bool32_t __stdcall SFileOpenFile(char *rel_path, void *file);", TINFO_DEFINITE);
cleanup("SFileOpenFileEx");set_name(0x4698E8, "SFileOpenFileEx");
set_func_cmt(0x4698E8, "SFileOpenFileEx opens the named file of the given MPQ archive, and retrieves\nits file descriptor.", 0);
apply_type (0x4698E8, "bool32_t __stdcall SFileOpenFileEx(void *archive, char *rel_path, uint32_t flags, void *file);", TINFO_DEFINITE);
cleanup("SFileReadFile");set_name(0x4698DC, "SFileReadFile");
set_func_cmt(0x4698DC, "SFileReadFile reads the specifies number of bytes from the given file.", 0);
apply_type (0x4698DC, "bool32_t __stdcall SFileReadFile(void *file, uint8_t *buf, int len, int *nread, uint32_t flags);", TINFO_DEFINITE);
cleanup("SFileSetBasePath");set_name(0x469828, "SFileSetBasePath");
set_func_cmt(0x469828, "SFileSetBasePath sets the base directory for relative file operations. In\npractice, it is set to the game directory.", 0);
apply_type (0x469828, "bool32_t __stdcall SFileSetBasePath(char *base_dir);", TINFO_DEFINITE);
cleanup("SFileSetFilePointer");set_name(0x4698D6, "SFileSetFilePointer");
set_func_cmt(0x4698D6, "SFileSetFilePointer seeks to the given offset within file. If whence is set\nto SEEK_SET, SEEK_CUR, or SEEK_END, the offset is relative to the start of\nthe file, the current position indicator, or end-of-file, respectively.", 0);
apply_type (0x4698D6, "int __stdcall SFileSetFilePointer(int file1, int offset, int file2, int whence);", TINFO_DEFINITE);
cleanup("StormDestroy");set_name(0x469810, "StormDestroy");
set_func_cmt(0x469810, "StormDestroy terminates the Storm library.", 0);
apply_type (0x469810, "bool32_t StormDestroy();", TINFO_DEFINITE);
cleanup("SDrawDestroy");set_name(0x4697EC, "SDrawDestroy");
set_func_cmt(0x4697EC, "SDrawDestroy terminates the renderer.", 0);
apply_type (0x4697EC, "void SDrawDestroy();", TINFO_DEFINITE);
cleanup("SDrawGetFrameWindow");set_name(0x46989A, "SDrawGetFrameWindow");
set_func_cmt(0x46989A, "SDrawGetFrameWindow retrieves the active frame window of the renderer.", 0);
apply_type (0x46989A, "HWND __stdcall SDrawGetFrameWindow(HWND *hFrameWnd);", TINFO_DEFINITE);
cleanup("SDrawManualInitialize");set_name(0x4697E6, "SDrawManualInitialize");
set_func_cmt(0x4697E6, "SDrawManualInitialize initializes the renderer.", 0);
apply_type (0x4697E6, "bool32_t __stdcall SDrawManualInitialize(HWND hWnd, IDirectDraw *DD, IDirectDrawSurface *DDS_primary, IDirectDrawSurface *DDS_2, IDirectDrawSurface *DDS_3, IDirectDrawSurface *DDS_back, IDirectDrawPalette *DDP, HPALETTE hPalette);", TINFO_DEFINITE);
cleanup("SDrawMessageBox");set_name(0x4697D4, "SDrawMessageBox");
set_func_cmt(0x4697D4, "SDrawMessageBox draws a message box with the given text and caption.", 0);
apply_type (0x4697D4, "void __stdcall SDrawMessageBox(char *text, char *caption, uint32_t type);", TINFO_DEFINITE);
cleanup("SDrawRealizePalette");set_name(0x46982E, "SDrawRealizePalette");
set_func_cmt(0x46982E, "SDrawRealizePalette updates the system palette.", 0);
apply_type (0x46982E, "void SDrawRealizePalette();", TINFO_DEFINITE);
cleanup("SDrawUpdatePalette");set_name(0x4698CA, "SDrawUpdatePalette");
set_func_cmt(0x4698CA, "SDrawUpdatePalette replaces the palette entries of the system palette.", 0);
apply_type (0x4698CA, "bool32_t __stdcall SDrawUpdatePalette(int first_entry, int nentries, PALETTEENTRY *entries, uint32_t flags);", TINFO_DEFINITE);
cleanup("SMemAlloc");set_name(0x4697BC, "SMemAlloc");
set_func_cmt(0x4697BC, "SMemAlloc allocates a memory region of the given size and returns a pointer\nto the allocated memory.", 0);
apply_type (0x4697BC, "void * __stdcall SMemAlloc(int size, char *log_file_path, int log_line_nr, uint32_t flags);", TINFO_DEFINITE);
cleanup("SMemFree");set_name(0x4697B6, "SMemFree");
set_func_cmt(0x4697B6, "SMemFree frees the allocated memory of the given pointer.", 0);
apply_type (0x4697B6, "bool32_t __stdcall SMemFree(void *ptr, char *log_file_path, int log_line_nr, uint32_t flags);", TINFO_DEFINITE);
cleanup("SRegLoadData");set_name(0x469852, "SRegLoadData");
set_func_cmt(0x469852, "SRegLoadData loads data from the given registry key.", 0);
apply_type (0x469852, "bool32_t __stdcall SRegLoadData(char *sub_key, char *value_name, uint32_t flags, uint8_t *dst, int size, int *nbytes_read);", TINFO_DEFINITE);
cleanup("SRegLoadString");set_name(0x46981C, "SRegLoadString");
set_func_cmt(0x46981C, "SRegLoadString loads a string from the given registry key.", 0);
apply_type (0x46981C, "bool32_t __stdcall SRegLoadString(int sub_key, int value_name, int flags, uint8_t *dst, int size);", TINFO_DEFINITE);
cleanup("SRegLoadValue");set_name(0x4697E0, "SRegLoadValue");
set_func_cmt(0x4697E0, "SRegLoadValue loads an integer value from the given registry key.", 0);
apply_type (0x4697E0, "bool32_t __stdcall SRegLoadValue(char *subkey, char *value_name, uint32_t flags, int *value);", TINFO_DEFINITE);
cleanup("SRegSaveData");set_name(0x469858, "SRegSaveData");
set_func_cmt(0x469858, "SRegSaveData saves data to the given registry key.", 0);
apply_type (0x469858, "bool32_t __stdcall SRegSaveData(char *sub_key, char *value_name, uint32_t flags, uint8_t *src, int size);", TINFO_DEFINITE);
cleanup("SRegSaveString");set_name(0x4698D0, "SRegSaveString");
set_func_cmt(0x4698D0, "SRegSaveString saves a string to the given registry key.", 0);
apply_type (0x4698D0, "bool32_t __stdcall SRegSaveString(char *sub_key, char *value_name, uint32_t flags, char *src);", TINFO_DEFINITE);
cleanup("SRegSaveValue");set_name(0x4697DA, "SRegSaveValue");
set_func_cmt(0x4697DA, "SRegSaveValue saves an integer value to the given registry key.", 0);
apply_type (0x4697DA, "bool32_t __stdcall SRegSaveValue(char *subkey, char *value_name, uint32_t flags, int value);", TINFO_DEFINITE);
cleanup("SVidDestroy");set_name(0x469900, "SVidDestroy");
set_func_cmt(0x469900, "SVidDestroy terminates the video subsystem.", 0);
apply_type (0x469900, "bool32_t SVidDestroy();", TINFO_DEFINITE);
cleanup("SVidInitialize");set_name(0x4698F4, "SVidInitialize");
set_func_cmt(0x4698F4, "SVidInitialize initializes the video subsystem.", 0);
apply_type (0x4698F4, "bool32_t __stdcall SVidInitialize(IDirectSound *DS);", TINFO_DEFINITE);
cleanup("SVidPlayBegin");set_name(0x46984C, "SVidPlayBegin");
set_func_cmt(0x46984C, "SVidPlayBegin starts playback of the given video file.", 0);
apply_type (0x46984C, "bool32_t __stdcall SVidPlayBegin(char *smk_path, int a2, void *a3, void *a4, void *a5, uint32_t flags, void *video_stream);", TINFO_DEFINITE);
cleanup("SVidPlayContinue");set_name(0x469846, "SVidPlayContinue");
set_func_cmt(0x469846, "SVidPlayContinue resumes video playback.", 0);
apply_type (0x469846, "bool32_t SVidPlayContinue();", TINFO_DEFINITE);
cleanup("SVidPlayEnd");set_name(0x469840, "SVidPlayEnd");
set_func_cmt(0x469840, "SVidPlayEnd stops playback of the given video stream.", 0);
apply_type (0x469840, "bool32_t __stdcall SVidPlayEnd(void *video_stream);", TINFO_DEFINITE);
cleanup("SErrGetErrorStr");set_name(0x4697C2, "SErrGetErrorStr");
set_func_cmt(0x4697C2, "SErrGetErrorStr retrives the error string of the given error code.", 0);
apply_type (0x4697C2, "bool32_t __stdcall SErrGetErrorStr(uint32_t error_code, char *dst, int size);", TINFO_DEFINITE);
cleanup("SErrGetLastError");set_name(0x46985E, "SErrGetLastError");
set_func_cmt(0x46985E, "SErrGetLastError returns the last error code.", 0);
apply_type (0x46985E, "uint32_t SErrGetLastError();", TINFO_DEFINITE);
cleanup("SErrSetLastError");set_name(0x46983A, "SErrSetLastError");
set_func_cmt(0x46983A, "SErrSetLastError sets the last error.", 0);
apply_type (0x46983A, "void __stdcall SErrSetLastError(uint32_t error_code);", TINFO_DEFINITE);
cleanup("SStrCopy");set_name(0x469834, "SStrCopy");
set_func_cmt(0x469834, "SStrCopy copies the source string into the destination string.", 0);
apply_type (0x469834, "int __stdcall SStrCopy(char *dst, char *src, int len);", TINFO_DEFINITE);
cleanup("UiInitialize");set_name(0x10005C73, "UiInitialize");
set_func_cmt(0x10005C73, "", 0);
apply_type (0x10005C73, "void UiInitialize();", TINFO_DEFINITE);
cleanup("UiDestroy");set_name(0x10005C96, "UiDestroy");
set_func_cmt(0x10005C96, "", 0);
apply_type (0x10005C96, "void UiDestroy();", TINFO_DEFINITE);
cleanup("UiTitleDialog");set_name(0x100100FA, "UiTitleDialog");
set_func_cmt(0x100100FA, "", 0);
apply_type (0x100100FA, "bool32_t __stdcall UiTitleDialog(int a1);", TINFO_DEFINITE);
cleanup("j_mainmenu_cpp_init");set_name(0x427E0E, "j_mainmenu_cpp_init");
set_func_cmt(0x427E0E, "j_mainmenu_cpp_init initializes the C++ runtime of mainmenu.cpp.", 0);
apply_type (0x427E0E, "void j_mainmenu_cpp_init();", TINFO_DEFINITE);
cleanup("mainmenu_cpp_init");set_name(0x427E13, "mainmenu_cpp_init");
set_func_cmt(0x427E13, "mainmenu_cpp_init initializes the C++ runtime of mainmenu.cpp.", 0);
apply_type (0x427E13, "void mainmenu_cpp_init();", TINFO_DEFINITE);
cleanup("mainmenu_dialog");set_name(0x427F76, "mainmenu_dialog");
set_func_cmt(0x427F76, "mainmenu_dialog displays the dialogue of the main menu.", 0);
apply_type (0x427F76, "void mainmenu_dialog();", TINFO_DEFINITE);
cleanup("j_movie_cpp_init");set_name(0x43AD33, "j_movie_cpp_init");
set_func_cmt(0x43AD33, "j_movie_cpp_init initializes the C++ runtime of movie.cpp.", 0);
apply_type (0x43AD33, "void j_movie_cpp_init();", TINFO_DEFINITE);
cleanup("movie_cpp_init");set_name(0x43AD38, "movie_cpp_init");
set_func_cmt(0x43AD38, "movie_cpp_init initializes the C++ runtime of movie.cpp.", 0);
apply_type (0x43AD38, "void movie_cpp_init();", TINFO_DEFINITE);
cleanup("movie_play");set_name(0x43AD43, "movie_play");
set_func_cmt(0x43AD43, "movie_play plays the given Smacker video file.", 0);
apply_type (0x43AD43, "void __fastcall movie_play(char *smk_path, bool32_t user_can_close);", TINFO_DEFINITE);
cleanup("movie_proc");set_name(0x43AE3E, "movie_proc");
set_func_cmt(0x43AE3E, "movie_proc is the default window event handler when playing videos.", 0);
apply_type (0x43AE3E, "LRESULT __stdcall movie_proc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);", TINFO_DEFINITE);
cleanup("j_player_cpp_init");set_name(0x44A8E6, "j_player_cpp_init");
set_func_cmt(0x44A8E6, "j_player_cpp_init initializes the C++ runtime of player.cpp.", 0);
apply_type (0x44A8E6, "void j_player_cpp_init();", TINFO_DEFINITE);
cleanup("player_cpp_init");set_name(0x44A8EB, "player_cpp_init");
set_func_cmt(0x44A8EB, "player_cpp_init initializes the C++ runtime of player.cpp.", 0);
apply_type (0x44A8EB, "void player_cpp_init();", TINFO_DEFINITE);
cleanup("player_do_spell");set_name(0x44EAC6, "player_do_spell");
set_func_cmt(0x44EAC6, "player_do_spell initiates a spell action for the given player.", 0);
apply_type (0x44EAC6, "int __fastcall player_do_spell(int player_num);", TINFO_DEFINITE);
cleanup("player_process");set_name(0x44FB32, "player_process");
set_func_cmt(0x44FB32, "player_process processes any game state changes of the player, since the last\ngame tick.", 0);
apply_type (0x44FB32, "void player_process();", TINFO_DEFINITE);
cleanup("player_init_dungeon_msgs");set_name(0x450AA0, "player_init_dungeon_msgs");
set_func_cmt(0x450AA0, "player_init_dungeon_msgs initializes the player dungeon messages game state.", 0);
apply_type (0x450AA0, "void __fastcall player_init_dungeon_msgs(int player_num);", TINFO_DEFINITE);
cleanup("j_pack_cpp_init");set_name(0x448755, "j_pack_cpp_init");
set_func_cmt(0x448755, "j_pack_cpp_init initializes the C++ runtime of pack.cpp.", 0);
apply_type (0x448755, "void j_pack_cpp_init();", TINFO_DEFINITE);
cleanup("pack_cpp_init");set_name(0x44875A, "pack_cpp_init");
set_func_cmt(0x44875A, "pack_cpp_init initializes the C++ runtime of pack.cpp.", 0);
apply_type (0x44875A, "void pack_cpp_init();", TINFO_DEFINITE);
cleanup("pack_get_hero_from_player");set_name(0x448765, "pack_get_hero_from_player");
set_func_cmt(0x448765, "pack_get_hero_from_player retrieves hero information from the player struct.", 0);
apply_type (0x448765, "void __fastcall pack_get_hero_from_player(Hero *hero, int player_num, bool32_t copy_has_manashield);", TINFO_DEFINITE);
cleanup("pack_get_hero_item_from_item");set_name(0x448953, "pack_get_hero_item_from_item");
set_func_cmt(0x448953, "pack_get_hero_item_from_item retrieves hero item information from the item struct.", 0);
apply_type (0x448953, "void __fastcall pack_get_hero_item_from_item(HeroItem *hero_item, Item *item);", TINFO_DEFINITE);
cleanup("pack_get_player_from_hero");set_name(0x448AD0, "pack_get_player_from_hero");
set_func_cmt(0x448AD0, "pack_get_player_from_hero retrieves player information from the hero struct.", 0);
apply_type (0x448AD0, "void __fastcall pack_get_player_from_hero(Hero *hero, int player_num, bool32_t set_hp_min_1);", TINFO_DEFINITE);
cleanup("pack_get_item_from_hero_item");set_name(0x448D48, "pack_get_item_from_hero_item");
set_func_cmt(0x448D48, "pack_get_item_from_hero_item retrieves item information from the hero item struct.", 0);
apply_type (0x448D48, "void __fastcall pack_get_item_from_hero_item(HeroItem *hero_item, Item *item);", TINFO_DEFINITE);
cleanup("j_dx_cpp_init_1");set_name(0x415362, "j_dx_cpp_init_1");
set_func_cmt(0x415362, "j_dx_cpp_init_1 initializes the C++ runtime of dx.cpp.", 0);
apply_type (0x415362, "void j_dx_cpp_init_1();", TINFO_DEFINITE);
cleanup("dx_cpp_init_1");set_name(0x415367, "dx_cpp_init_1");
set_func_cmt(0x415367, "dx_cpp_init_1 initializes the C++ runtime of dx.cpp.", 0);
apply_type (0x415367, "void dx_cpp_init_1();", TINFO_DEFINITE);
cleanup("dx_cpp_init_2");set_name(0x415372, "dx_cpp_init_2");
set_func_cmt(0x415372, "dx_cpp_init_2 initializes the C++ runtime of dx.cpp.", 0);
apply_type (0x415372, "void dx_cpp_init_2();", TINFO_DEFINITE);
cleanup("dx_init_mutex");set_name(0x41537C, "dx_init_mutex");
set_func_cmt(0x41537C, "dx_init_mutex initializes the DirectX rendering system mutex.", 0);
apply_type (0x41537C, "void dx_init_mutex();", TINFO_DEFINITE);
cleanup("dx_cleanup_mutex_atexit");set_name(0x415388, "dx_cleanup_mutex_atexit");
set_func_cmt(0x415388, "dx_cleanup_mutex_atexit terminates the DirectX rendering system mutex at\nexit.", 0);
apply_type (0x415388, "void dx_cleanup_mutex_atexit();", TINFO_DEFINITE);
cleanup("dx_cleanup_mutex");set_name(0x415394, "dx_cleanup_mutex");
set_func_cmt(0x415394, "dx_cleanup_mutex terminates the DirectX rendering system mutex.", 0);
apply_type (0x415394, "void dx_cleanup_mutex();", TINFO_DEFINITE);
cleanup("dx_init");set_name(0x4153A0, "dx_init");
set_func_cmt(0x4153A0, "dx_init initializes the DirectX rendering system.", 0);
apply_type (0x4153A0, "void __fastcall dx_init(HWND hWnd);", TINFO_DEFINITE);
cleanup("dx_create_back_buffer");set_name(0x4154B5, "dx_create_back_buffer");
set_func_cmt(0x4154B5, "dx_create_back_buffer creates the DirectDraw back buffer.", 0);
apply_type (0x4154B5, "void dx_create_back_buffer();", TINFO_DEFINITE);
cleanup("dx_create_primary_surface");set_name(0x4155C2, "dx_create_primary_surface");
set_func_cmt(0x4155C2, "dx_create_primary_surface creates the primary DirectDraw surface.", 0);
apply_type (0x4155C2, "void dx_create_primary_surface();", TINFO_DEFINITE);
cleanup("dx_DirectDrawCreate");set_name(0x41561A, "dx_DirectDrawCreate");
set_func_cmt(0x41561A, "dx_DirectDrawCreate creates a DirectDraw object.", 0);
apply_type (0x41561A, "HRESULT __fastcall dx_DirectDrawCreate(GUID *guid, IDirectDraw **DD, void *unknown);", TINFO_DEFINITE);
cleanup("j_dx_lock_mutex");set_name(0x415695, "j_dx_lock_mutex");
set_func_cmt(0x415695, "j_dx_lock_mutex locks the DirectX rendering system mutex.", 0);
apply_type (0x415695, "void j_dx_lock_mutex();", TINFO_DEFINITE);
cleanup("dx_lock_mutex");set_name(0x41569A, "dx_lock_mutex");
set_func_cmt(0x41569A, "dx_lock_mutex locks the DirectX rendering system mutex.", 0);
apply_type (0x41569A, "void dx_lock_mutex();", TINFO_DEFINITE);
cleanup("j_dx_unlock_mutex");set_name(0x415720, "j_dx_unlock_mutex");
set_func_cmt(0x415720, "j_dx_unlock_mutex unlocks the DirectX rendering system mutex.", 0);
apply_type (0x415720, "void j_dx_unlock_mutex();", TINFO_DEFINITE);
cleanup("dx_unlock_mutex");set_name(0x415725, "dx_unlock_mutex");
set_func_cmt(0x415725, "dx_unlock_mutex unlocks the DirectX rendering system mutex.", 0);
apply_type (0x415725, "void dx_unlock_mutex();", TINFO_DEFINITE);
cleanup("dx_cleanup");set_name(0x4157A0, "dx_cleanup");
set_func_cmt(0x4157A0, "dx_cleanup terminates the DirectX rendering system.", 0);
apply_type (0x4157A0, "void dx_cleanup();", TINFO_DEFINITE);
cleanup("dx_reinit");set_name(0x415848, "dx_reinit");
set_func_cmt(0x415848, "dx_reinit reinitializes the DirectX rendering system.", 0);
apply_type (0x415848, "void dx_reinit();", TINFO_DEFINITE);
cleanup("j_dx_reinit");set_name(0x4158A4, "j_dx_reinit");
set_func_cmt(0x4158A4, "j_dx_reinit reinitializes the DirectX rendering system.", 0);
apply_type (0x4158A4, "void j_dx_reinit();", TINFO_DEFINITE);
cleanup("path_find");set_name(0x4493D4, "path_find");
set_func_cmt(0x4493D4, "path_find locates a path from the start to the goal coordinates. It returns\nthe number of steps in the path, and stores the path in the steps parameter.", 0);
apply_type (0x4493D4, "int __fastcall path_find(bool32_t (__fastcall *is_valid_step)(int player_or_monster_num, int x, int y), int player_or_monster_num, int start_x, int start_y, int target_x, int target_y, int8_t *steps);", TINFO_DEFINITE);
cleanup("path_get_h_cost");set_name(0x4494D3, "path_get_h_cost");
set_func_cmt(0x4494D3, "path_get_h_cost returns the heuristic cost from the start to the goal; as\ndetermined by:\n   2 * (min_dist + max_dist)", 0);
apply_type (0x4494D3, "int __fastcall path_get_h_cost(int start_x, int start_y, int target_x, int target_y);", TINFO_DEFINITE);
cleanup("path_get_node1");set_name(0x44979A, "path_get_node1");
set_func_cmt(0x44979A, "path_get_node1 returns the path node for the given coordinate, starting\ntraversal from the first node.", 0);
apply_type (0x44979A, "PathNode *__fastcall path_get_node1(int x, int y);", TINFO_DEFINITE);
cleanup("path_get_node2");set_name(0x4497B3, "path_get_node2");
set_func_cmt(0x4497B3, "path_get_node2 returns the path node for the given coordinate, starting\ntraversal from the second node.", 0);
apply_type (0x4497B3, "PathNode *__fastcall path_get_node2(int x, int y);", TINFO_DEFINITE);
cleanup("path_new_node");set_name(0x4498B6, "path_new_node");
set_func_cmt(0x4498B6, "path_new_node returns a new path node.", 0);
apply_type (0x4498B6, "PathNode *__cdecl path_new_node();", TINFO_DEFINITE);
cleanup("j_engine_cpp_init_1");set_name(0x4161FC, "j_engine_cpp_init_1");
set_func_cmt(0x4161FC, "j_engine_cpp_init_1 initializes the C++ runtime of engine.cpp.", 0);
apply_type (0x4161FC, "void j_engine_cpp_init_1();", TINFO_DEFINITE);
cleanup("engine_cpp_init_1");set_name(0x416201, "engine_cpp_init_1");
set_func_cmt(0x416201, "engine_cpp_init_1 initializes the C++ runtime of engine.cpp.", 0);
apply_type (0x416201, "void engine_cpp_init_1();", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_content_into_buf");set_name(0x41620C, "engine_cel_decode_frame_content_into_buf");
set_func_cmt(0x41620C, "engine_cel_decode_frame_content_into_buf decodes the given CEL frame into the\nspecified destination buffer.", 0);
apply_type (0x41620C, "void __fastcall engine_cel_decode_frame_content_into_buf(uint8_t *dst_buf, uint8_t *frame_content, int frame_content_size, int frame_width);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame");set_name(0x416274, "engine_cel_decode_frame");
set_func_cmt(0x416274, "engine_cel_decode_frame decodes the given CEL frame to the specified screen\ncoordinate.\n   x = screen_x - 64\n   y = screen_y - 160\n   frameNum = frame - 1\nNote, the coordinates specify the bottom left corner (verified in game).\nNote, this function is only used to decode CEL images without frame headers.", 0);
apply_type (0x416274, "void __fastcall engine_cel_decode_frame(int screen_x, int screen_y, uint8_t *cel_buf, int frame, int frame_width);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_into_buf");set_name(0x4162B8, "engine_cel_decode_frame_into_buf");
set_func_cmt(0x4162B8, "engine_cel_decode_frame_into_buf decodes the given CEL frame into the\nspecified buffer.\nNote, this function is only used to decode CEL images without frame headers\n(pentspn2.cel).", 0);
apply_type (0x4162B8, "void __fastcall engine_cel_decode_frame_into_buf(uint8_t *dst_buf, uint8_t *cel_buf, int frame, int frame_width);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_with_header");set_name(0x4162DE, "engine_cel_decode_frame_with_header");
set_func_cmt(0x4162DE, "engine_cel_decode_frame_with_header decodes the given CEL frame to the\nspecified screen coordinate.\n   x = screen_x - 64\n   y = screen_y - 160\n   frameNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers\n(objects, item drops, objcurs.cel, towners).", 0);
apply_type (0x4162DE, "void __fastcall engine_cel_decode_frame_with_header(int screen_x, int screen_y, uint8_t *cel_buf, int frame, int frame_width, int always_0, int direction);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_with_header_into_buf");set_name(0x416359, "engine_cel_decode_frame_with_header_into_buf");
set_func_cmt(0x416359, "engine_cel_decode_frame_with_header_into_buf decodes the given CEL frame into\nthe specified buffer.\nNote, this function is only used to decode CEL images with frame headers\n(square.cel).", 0);
apply_type (0x416359, "void __fastcall engine_cel_decode_frame_with_header_into_buf(uint8_t *dst_buf, uint8_t *cel_buf, int frame, int frame_width, int always_0, int direction);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_content_with_light_into_buf");set_name(0x4163AC, "engine_cel_decode_frame_content_with_light_into_buf");
set_func_cmt(0x4163AC, "engine_cel_decode_frame_content_with_light_into_buf decodes the given CEL\nframe into the specified destination buffer with added lighting.", 0);
apply_type (0x4163AC, "void __fastcall engine_cel_decode_frame_content_with_light_into_buf(uint8_t *dst_buf, uint8_t *frame_content, int frame_content_size, int frame_width);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_content_with_light_and_transparency_into_buf");set_name(0x416488, "engine_cel_decode_frame_content_with_light_and_transparency_into_buf");
set_func_cmt(0x416488, "engine_cel_decode_frame_content_with_light_and_transparency_into_buf decodes\nthe given CEL frame into the specified destination buffer with added lighting\nand transparency.", 0);
apply_type (0x416488, "void __fastcall engine_cel_decode_frame_content_with_light_and_transparency_into_buf(uint8_t *dst_buf, uint8_t *frame_content, int frame_content_size, int frame_width);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_with_light");set_name(0x416565, "engine_cel_decode_frame_with_light");
set_func_cmt(0x416565, "engine_cel_decode_frame_with_light decodes the given CEL frame to the\nspecified screen coordinate, adding lighting if applicable.\n   x = screen_x - 64\n   y = screen_y - 160\n   frameNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images without frame headers\n(bigtgold.cel).", 0);
apply_type (0x416565, "void __fastcall engine_cel_decode_frame_with_light(int screen_x, int screen_y, uint8_t *cel_buf, int frame, int frame_width);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_with_header_and_light");set_name(0x4165BD, "engine_cel_decode_frame_with_header_and_light");
set_func_cmt(0x4165BD, "engine_cel_decode_frame_with_header_and_light decodes the given CEL frame to\nthe specified screen coordinate, adding lighting if applicable.\n   x = screen_x - 64\n   y = screen_y - 160\n   frameNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers\n(item drops, objects).", 0);
apply_type (0x4165BD, "void __fastcall engine_cel_decode_frame_with_header_and_light(int screen_x, int screen_y, uint8_t *cel_buf, int frame, int frame_width, int always_0, int direction);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_with_header_light_and_transparency_into_buf");set_name(0x41664B, "engine_cel_decode_frame_with_header_light_and_transparency_into_buf");
set_func_cmt(0x41664B, "engine_cel_decode_frame_with_header_light_and_transparency_into_buf decodes\nthe given CEL frame into the specified buffer with added lighting and\ntransparency.\nNote, this function is only used to decode CEL images with frame headers\n(objcurs.cel, level special).", 0);
apply_type (0x41664B, "void __fastcall engine_cel_decode_frame_with_header_light_and_transparency_into_buf(uint8_t *dst_buf, uint8_t *cel_buf, int frame, int frame_width, int always_0, int direction);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_with_header_and_light_not_equipable");set_name(0x4166BF, "engine_cel_decode_frame_with_header_and_light_not_equipable");
set_func_cmt(0x4166BF, "engine_cel_decode_frame_with_header_and_light_not_equipable decodes the given\nCEL frame to the specified screen coordinate with added lighting.\n   x = screen_x - 64\n   y = screen_y - 160\n   frameNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers\n(objcurs.cel).", 0);
apply_type (0x4166BF, "void __fastcall engine_cel_decode_frame_with_header_and_light_not_equipable(int screen_x, int screen_y, uint8_t *cel_buf, int frame, int frame_width, int always_0, int direction, int8_t always_1);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_content_into_buf2");set_name(0x4167DB, "engine_cel_decode_frame_content_into_buf2");
set_func_cmt(0x4167DB, "engine_cel_decode_frame_content_into_buf2 decodes the given CEL frame into\nthe specified destination buffer.", 0);
apply_type (0x4167DB, "void __fastcall engine_cel_decode_frame_content_into_buf2(uint8_t *dst_buf, uint8_t *frame_content, int frame_content_size, int frame_width);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_with_header2");set_name(0x41685A, "engine_cel_decode_frame_with_header2");
set_func_cmt(0x41685A, "engine_cel_decode_frame_with_header2 decodes the given CEL frame to the\nspecified screen coordinate.\n   x = screen_x - 64\n   y = screen_y - 160\n   frameNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers\n(objects, objcurs.cel, item drops, towners).\nNote, D1DrawCursorTown (from RE Notes)", 0);
apply_type (0x41685A, "void __fastcall engine_cel_decode_frame_with_header2(int screen_x, int screen_y, uint8_t *cel_buf, int frame, int frame_width, int a6, int direction);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_with_header_into_buf2");set_name(0x4168D5, "engine_cel_decode_frame_with_header_into_buf2");
set_func_cmt(0x4168D5, "engine_cel_decode_frame_with_header_into_buf decodes the given CEL frame into\nthe specified buffer.\nNote, this function is only used to decode CEL images with frame headers\n(square.cel).", 0);
apply_type (0x4168D5, "void __fastcall engine_cel_decode_frame_with_header_into_buf2(uint8_t *dst_buf, uint8_t *cel_buf, int frame, int frame_width, int a5, int direction);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_content_with_light_into_buf2");set_name(0x41692A, "engine_cel_decode_frame_content_with_light_into_buf2");
set_func_cmt(0x41692A, "engine_cel_decode_frame_content_with_light_into_buf2 decodes the given CEL\nframe into the specified destination buffer with added lighting.", 0);
apply_type (0x41692A, "void __fastcall engine_cel_decode_frame_content_with_light_into_buf2(uint8_t *dst_buf, uint8_t *frame_content, int frame_content_size, int frame_width);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_content_with_light_and_transparency_into_buf2");set_name(0x416A21, "engine_cel_decode_frame_content_with_light_and_transparency_into_buf2");
set_func_cmt(0x416A21, "engine_cel_decode_frame_content_with_light_and_transparency_into_buf2 decodes\nthe given CEL frame into the specified destination buffer with added lighting\nand transparency.", 0);
apply_type (0x416A21, "void __fastcall engine_cel_decode_frame_content_with_light_and_transparency_into_buf2(uint8_t *dst_buf, uint8_t *frame_content, int frame_content_size, int frame_width);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_with_header_and_light2");set_name(0x416B19, "engine_cel_decode_frame_with_header_and_light2");
set_func_cmt(0x416B19, "engine_cel_decode_frame_with_header_and_light2 decodes the given CEL frame to\nthe specified screen coordinate, adding lighting if applicable.\n   x = screen_x - 64\n   y = screen_y - 160\n   frameNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers\n(item drops, objects).\nNote, D1DrawObjectBaseDungeon (from RE Notes).", 0);
apply_type (0x416B19, "void __fastcall engine_cel_decode_frame_with_header_and_light2(int screen_x, int screen_y, uint8_t *cel_buf, int frame, int frame_width, int a6, int direction);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_with_header_light_and_transparency_into_buf2");set_name(0x416BA9, "engine_cel_decode_frame_with_header_light_and_transparency_into_buf2");
set_func_cmt(0x416BA9, "engine_cel_decode_frame_with_header_light_and_transparency_into_buf2 decodes\nthe given CEL frame into the specified buffer with added lighting and\ntransparency.\nNote, this function is only used to decode CEL images with frame headers\n(level special).\nNote, D1DrawArchTile (from RE Notes).", 0);
apply_type (0x416BA9, "void __fastcall engine_cel_decode_frame_with_header_light_and_transparency_into_buf2(uint8_t *dst_buf, uint8_t *cel_buf, int frame, int frame_width, int a5, int direction);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_with_header_and_light_not_equipable2");set_name(0x416C1B, "engine_cel_decode_frame_with_header_and_light_not_equipable2");
set_func_cmt(0x416C1B, "engine_cel_decode_frame_with_header_and_light_not_equipable2 decodes the\ngiven CEL frame to the specified screen coordinate with added lighting.\n   x = screen_x - 64\n   y = screen_y - 160\n   frameNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers (objcurs.cel).", 0);
apply_type (0x416C1B, "void __fastcall engine_cel_decode_frame_with_header_and_light_not_equipable2(int screen_x, int screen_y, uint8_t *cel_buf, int frame, int frame_width, int always_0, int direction, int8_t always_1);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_into_rect_of_buf");set_name(0x416D3C, "engine_cel_decode_frame_into_rect_of_buf");
set_func_cmt(0x416D3C, "engine_cel_decode_frame_into_rect_of_buf decodes the given CEL frame into a\nrectangle of the specified buffer.\nNote, this function is only used to decode CEL images without frame headers\n(control panel and orbs).", 0);
apply_type (0x416D3C, "void __fastcall engine_cel_decode_frame_into_rect_of_buf(uint8_t *dst_buf, int always_0, int dst_height, int dst_width, uint8_t *cel_buf, int frame, int frame_width);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_with_colour");set_name(0x416DC6, "engine_cel_decode_frame_with_colour");
set_func_cmt(0x416DC6, "engine_cel_decode_frame_with_header_and_colour decodes the given CEL frame to\nthe specified screen coordinate and with the specified colour.\n   x = screen_x - 64\n   y = screen_y - 160\n   frameNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers\n(objcurs.cel, item drops, objects, towners).", 0);
apply_type (0x416DC6, "void __fastcall engine_cel_decode_frame_with_colour(uint8_t colour, int screen_x, int screen_y, uint8_t *cel_buf, int frame, int frame_width, int a7, int direction);", TINFO_DEFINITE);
cleanup("engine_cel_decode_frame_with_header_and_colour_highlight");set_name(0x416EC0, "engine_cel_decode_frame_with_header_and_colour_highlight");
set_func_cmt(0x416EC0, "engine_cel_decode_frame_with_header_and_colour_hilight decodes the given CEL\nframe to the specified screen coordinate with added colour highlight.\n   x = screen_x - 64\n   y = screen_y - 160\n   frameNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers\n(objcurs.cel, item drops, objects, towners).\nNOTE: D1DrawObjectHilight (from RE Notes).", 0);
apply_type (0x416EC0, "void __fastcall engine_cel_decode_frame_with_header_and_colour_highlight(uint8_t colour, int screen_x, int screen_y, uint8_t *cel_buf, int frame, int frame_width, int a7, int direction);", TINFO_DEFINITE);
cleanup("engine_set_pixel");set_name(0x416FEF, "engine_set_pixel");
set_func_cmt(0x416FEF, "engine_set_pixel sets the given screen coordinate to the specified pixel\nvalue (index into the active palette).\n   x = screen_x - 64\n   y = screen_y - 160", 0);
apply_type (0x416FEF, "void __fastcall engine_set_pixel(int screen_x, int screen_y, uint8_t pixel);", TINFO_DEFINITE);
cleanup("engine_set_seed");set_name(0x417518, "engine_set_seed");
set_func_cmt(0x417518, "engine_set_seed sets the global seed to s.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/bss/engine.cpp#seed", 0);
apply_type (0x417518, "void __fastcall engine_set_seed(int32_t s);", TINFO_DEFINITE);
cleanup("engine_rand");set_name(0x41752C, "engine_rand");
set_func_cmt(0x41752C, "engine_rand returns a non-negative pseudo-random integer in [0, 2^31), using\nthe Borland C/C++ pseudo-random number generator algorithm with a multiplier\nof 0x15A4E35 and an increment of 1.\nReferences:\n   * https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use", 0);
apply_type (0x41752C, "int32_t engine_rand();", TINFO_DEFINITE);
cleanup("engine_rand_cap");set_name(0x41754B, "engine_rand_cap");
set_func_cmt(0x41754B, "engine_rand_cap returns a capped non-negative pseudo-random integer in\n[0, max), using the Borland C/C++ pseudo-random number generator algorithm\nwith a multiplier of 0x15A4E35 and an increment of 1.\nReferences:\n   * https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use", 0);
apply_type (0x41754B, "int32_t __fastcall engine_rand_cap(int unused, int32_t max);", TINFO_DEFINITE);
cleanup("engine_cpp_init_2");set_name(0x41756D, "engine_cpp_init_2");
set_func_cmt(0x41756D, "engine_cpp_init_2 initializes the C++ runtime of engine.cpp.", 0);
apply_type (0x41756D, "void engine_cpp_init_2();", TINFO_DEFINITE);
cleanup("engine_init_mem_mutex");set_name(0x417577, "engine_init_mem_mutex");
set_func_cmt(0x417577, "engine_init_mem_mutex initializes the memory mutex.", 0);
apply_type (0x417577, "void engine_init_mem_mutex();", TINFO_DEFINITE);
cleanup("engine_cleanup_mem_mutex_atexit");set_name(0x417583, "engine_cleanup_mem_mutex_atexit");
set_func_cmt(0x417583, "engine_cleanup_mem_mutex_atexit terminates the memory mutex at exit.", 0);
apply_type (0x417583, "void engine_cleanup_mem_mutex_atexit();", TINFO_DEFINITE);
cleanup("engine_cleanup_mem_mutex");set_name(0x41758F, "engine_cleanup_mem_mutex");
set_func_cmt(0x41758F, "engine_cleanup_mem_mutex terminates the memory mutex.", 0);
apply_type (0x41758F, "void engine_cleanup_mem_mutex();", TINFO_DEFINITE);
cleanup("engine_mem_alloc");set_name(0x41759B, "engine_mem_alloc");
set_func_cmt(0x41759B, "engine_mem_alloc allocates a memory space of the given size.", 0);
apply_type (0x41759B, "void * __fastcall engine_mem_alloc(int size);", TINFO_DEFINITE);
cleanup("engine_mem_free");set_name(0x4175E8, "engine_mem_free");
set_func_cmt(0x4175E8, "engine_mem_free frees the given memory space.", 0);
apply_type (0x4175E8, "void __fastcall engine_mem_free(void *ptr);", TINFO_DEFINITE);
cleanup("engine_mem_load_file");set_name(0x417618, "engine_mem_load_file");
set_func_cmt(0x417618, "engine_mem_load_file returns the contents of the given file.", 0);
apply_type (0x417618, "void * __fastcall engine_mem_load_file(char *file_path, int *size);", TINFO_DEFINITE);
cleanup("engine_mem_load_file_with");set_name(0x417673, "engine_mem_load_file_with");
set_func_cmt(0x417673, "engine_mem_load_file_with loads the given file into the provided memory\nbuffer.", 0);
apply_type (0x417673, "void __fastcall engine_mem_load_file_with(char *path, void *buf);", TINFO_DEFINITE);
cleanup("help_init");set_name(0x41A553, "help_init");
set_func_cmt(0x41A553, "help_init initializes the help dialogue.", 0);
apply_type (0x41A553, "void help_init();", TINFO_DEFINITE);
cleanup("help_draw");set_name(0x41A565, "help_draw");
set_func_cmt(0x41A565, "help_draw renders the help dialogue on screen.", 0);
apply_type (0x41A565, "void help_draw();", TINFO_DEFINITE);
cleanup("help_draw_line");set_name(0x41A6FA, "help_draw_line");
set_func_cmt(0x41A6FA, "help_draw_line draws a line of help text in the given colour.", 0);
apply_type (0x41A6FA, "void __fastcall help_draw_line(int always_0, int help_line_nr, char *text, text_color color);", TINFO_DEFINITE);
cleanup("help_dialogue_show");set_name(0x41A773, "help_dialogue_show");
set_func_cmt(0x41A773, "help_dialogue_show displays the help dialogue.", 0);
apply_type (0x41A773, "void help_dialogue_show();", TINFO_DEFINITE);
cleanup("help_dialogue_scroll_up");set_name(0x41A78F, "help_dialogue_scroll_up");
set_func_cmt(0x41A78F, "help_dialogue_scroll_up scrolls the help text dialogue up one line.", 0);
apply_type (0x41A78F, "void help_dialogue_scroll_up();", TINFO_DEFINITE);
cleanup("help_dialogue_scroll_down");set_name(0x41A79F, "help_dialogue_scroll_down");
set_func_cmt(0x41A79F, "help_dialogue_scroll_down scrolls the help text dialogue down one line.", 0);
apply_type (0x41A79F, "void help_dialogue_scroll_down();", TINFO_DEFINITE);
cleanup("debug_load_graphics");set_name(0x4086F4, "debug_load_graphics");
set_func_cmt(0x4086F4, "debug_load_graphics loads debugging graphics.", 0);
apply_type (0x4086F4, "void debug_load_graphics();", TINFO_DEFINITE);
cleanup("debug_cleanup");set_name(0x40870F, "debug_cleanup");
set_func_cmt(0x40870F, "debug_cleanup releases the resources used for debugging.", 0);
apply_type (0x40870F, "void debug_cleanup();", TINFO_DEFINITE);
cleanup("debug_check_monster_and_player_clear");set_name(0x408721, "debug_check_monster_and_player_clear");
set_func_cmt(0x408721, "debug_check_monster_and_player_clear validates that the NPC and player maps\nhave been cleared.", 0);
apply_type (0x408721, "void debug_check_monster_and_player_clear();", TINFO_DEFINITE);
cleanup("quests_init");set_name(0x45138E, "quests_init");
set_func_cmt(0x45138E, "quests_init initializes the quests game state.", 0);
apply_type (0x45138E, "void quests_init();", TINFO_DEFINITE);
cleanup("quests_set_stairway_text");set_name(0x45178F, "quests_set_stairway_text");
set_func_cmt(0x45178F, "quests_set_stairway_text sets the description text of stairways in the quest\nlevel.", 0);
apply_type (0x45178F, "bool32_t quests_set_stairway_text();", TINFO_DEFINITE);
cleanup("quests_is_active");set_name(0x451831, "quests_is_active");
set_func_cmt(0x451831, "quests_is_active reports whether the given quest is active.\nNOTE: quest_num and quest_id are equivalent, as indicated by this function.", 0);
apply_type (0x451831, "bool32_t __fastcall quests_is_active(quest_id quest_num);", TINFO_DEFINITE);
cleanup("quests_init_the_butcher_area");set_name(0x451BEA, "quests_init_the_butcher_area");
set_func_cmt(0x451BEA, "quests_init_the_butcher_area initializes the quest area of The Butcher.", 0);
apply_type (0x451BEA, "void quests_init_the_butcher_area();", TINFO_DEFINITE);
cleanup("quests_init_the_curse_of_king_leoric_area");set_name(0x451C11, "quests_init_the_curse_of_king_leoric_area");
set_func_cmt(0x451C11, "quests_init_the_curse_of_king_leoric_area initializes the quest area of The\nCurse of King Leoric.", 0);
apply_type (0x451C11, "void __fastcall quests_init_the_curse_of_king_leoric_area(quest_id quest_id, int xx, int yy);", TINFO_DEFINITE);
cleanup("quests_init_warlord_of_blood_area");set_name(0x451C32, "quests_init_warlord_of_blood_area");
set_func_cmt(0x451C32, "quests_init_warlord_of_blood_area initializes the quest area of Warlord of\nBlood.", 0);
apply_type (0x451C32, "void __fastcall quests_init_warlord_of_blood_area(int xx, int yy);", TINFO_DEFINITE);
cleanup("quests_init_the_chamber_of_bone_area");set_name(0x451CC2, "quests_init_the_chamber_of_bone_area");
set_func_cmt(0x451CC2, "quests_init_the_chamber_of_bone_area initializes the quest area of The\nChamber of Bone.", 0);
apply_type (0x451CC2, "void __fastcall quests_init_the_chamber_of_bone_area(quest_id quest_id, int xx, int yy);", TINFO_DEFINITE);
cleanup("quests_init_odgens_sign_area");set_name(0x451D7C, "quests_init_odgens_sign_area");
set_func_cmt(0x451D7C, "quests_init_odgens_sign_area initializes the quest area of Odgen's Sign.", 0);
apply_type (0x451D7C, "void __fastcall quests_init_odgens_sign_area(int xx, int yy);", TINFO_DEFINITE);
cleanup("quests_init_halls_of_the_blind_area");set_name(0x451E08, "quests_init_halls_of_the_blind_area");
set_func_cmt(0x451E08, "quests_init_halls_of_the_blind_area initializes the quest area of Halls of\nthe Blind.", 0);
apply_type (0x451E08, "void __fastcall quests_init_halls_of_the_blind_area(int xx, int yy);", TINFO_DEFINITE);
cleanup("quests_init_valor_area");set_name(0x451E94, "quests_init_valor_area");
set_func_cmt(0x451E94, "quests_init_valor_area initializes the quest area of Valor.", 0);
apply_type (0x451E94, "void __fastcall quests_init_valor_area(int xx, int yy);", TINFO_DEFINITE);
cleanup("quests_init_quest_area");set_name(0x451F20, "quests_init_quest_area");
set_func_cmt(0x451F20, "quests_init_quest_area initializes the given quest area.", 0);
apply_type (0x451F20, "void __fastcall quests_init_quest_area(int xx, int yy);", TINFO_DEFINITE);
cleanup("quests_draw_quest_log");set_name(0x4525CD, "quests_draw_quest_log");
set_func_cmt(0x4525CD, "quests_draw renders the quest log on screen.", 0);
apply_type (0x4525CD, "void quests_draw_quest_log();", TINFO_DEFINITE);
cleanup("town_draw_game");set_name(0x45F65D, "town_draw_game");
set_func_cmt(0x45F65D, "town_draw_game renders the game world in town on screen.", 0);
apply_type (0x45F65D, "void __fastcall town_draw_game(int x, int y);", TINFO_DEFINITE);
cleanup("town_draw_zoomed_game");set_name(0x45F856, "town_draw_zoomed_game");
set_func_cmt(0x45F856, "town_draw_zoomed_game renders a zoomed-in version of the game world in town\non screen.", 0);
apply_type (0x45F856, "void __fastcall town_draw_zoomed_game(int x, int y);", TINFO_DEFINITE);
cleanup("town_draw");set_name(0x45FAAB, "town_draw");
set_func_cmt(0x45FAAB, "town_draw renders the UI and the game world in town on screen.", 0);
apply_type (0x45FAAB, "void __fastcall town_draw(int x, int y);", TINFO_DEFINITE);
cleanup("loadsave_load_int8");set_name(0x426AE2, "loadsave_load_int8");
set_func_cmt(0x426AE2, "loadsave_load_int8 loads the next 8-bit integer from the active save.", 0);
apply_type (0x426AE2, "int8_t loadsave_load_int8();", TINFO_DEFINITE);
cleanup("loadsave_load_int32");set_name(0x426AF0, "loadsave_load_int32");
set_func_cmt(0x426AF0, "loadsave_load_int32 loads the next 32-bit integer from the active save.", 0);
apply_type (0x426AF0, "int32_t loadsave_load_int32();", TINFO_DEFINITE);
cleanup("loadsave_load_int32_2");set_name(0x426B2C, "loadsave_load_int32_2");
set_func_cmt(0x426B2C, "loadsave_load_int32_2 loads the next 32-bit integer from the active save.", 0);
apply_type (0x426B2C, "int32_t loadsave_load_int32_2();", TINFO_DEFINITE);
cleanup("loadsave_load_bool");set_name(0x426B68, "loadsave_load_bool");
set_func_cmt(0x426B68, "loadsave_load_bool loads the next 8-bit boolean from the active save.", 0);
apply_type (0x426B68, "bool32_t loadsave_load_bool();", TINFO_DEFINITE);
cleanup("loadsave_load_player");set_name(0x426B7F, "loadsave_load_player");
set_func_cmt(0x426B7F, "loadsave_load_player loads the next player from the active save.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/structs.h#player", 0);
apply_type (0x426B7F, "void __fastcall loadsave_load_player(int player_num);", TINFO_DEFINITE);
cleanup("loadsave_load_monster");set_name(0x426BA9, "loadsave_load_monster");
set_func_cmt(0x426BA9, "loadsave_load_monster loads the next monster from the active save.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/structs.h#monster", 0);
apply_type (0x426BA9, "void __fastcall loadsave_load_monster(int monster_num);", TINFO_DEFINITE);
cleanup("loadsave_load_missile");set_name(0x426BDE, "loadsave_load_missile");
set_func_cmt(0x426BDE, "loadsave_load_missile loads the next missile from the active save.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/structs.h#missile", 0);
apply_type (0x426BDE, "void __fastcall loadsave_load_missile(int missile_num);", TINFO_DEFINITE);
cleanup("loadsave_load_object");set_name(0x426C08, "loadsave_load_object");
set_func_cmt(0x426C08, "loadsave_load_object loads the next object from the active save.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/structs.h#object", 0);
apply_type (0x426C08, "void __fastcall loadsave_load_object(int object_num);", TINFO_DEFINITE);
cleanup("loadsave_load_item");set_name(0x426C2A, "loadsave_load_item");
set_func_cmt(0x426C2A, "loadsave_load_item loads the next item from the active save.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/structs.h#item", 0);
apply_type (0x426C2A, "void __fastcall loadsave_load_item(int item_num);", TINFO_DEFINITE);
cleanup("loadsave_load_griswold_premium_item");set_name(0x426C5F, "loadsave_load_griswold_premium_item");
set_func_cmt(0x426C5F, "loadsave_load_griswold_premium_item loads the next Griswold premium item\nfrom the active save.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/structs.h#item", 0);
apply_type (0x426C5F, "void __fastcall loadsave_load_griswold_premium_item(int griswold_premium_item_num);", TINFO_DEFINITE);
cleanup("loadsave_load_quest");set_name(0x426C89, "loadsave_load_quest");
set_func_cmt(0x426C89, "loadsave_load_quest loads the next quest, quest start coordinates, quest\ndlvl, quest dungeon type, and quest doom timer from the active save.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/structs.h#quest", 0);
apply_type (0x426C89, "void __fastcall loadsave_load_quest(int quest_num);", TINFO_DEFINITE);
cleanup("j_log_cpp_init_1");set_name(0x4279F2, "j_log_cpp_init_1");
set_func_cmt(0x4279F2, "j_log_cpp_init_1 initializes the C++ runtime of log.cpp.", 0);
apply_type (0x4279F2, "void j_log_cpp_init_1();", TINFO_DEFINITE);
cleanup("log_cpp_init_1");set_name(0x4279F7, "log_cpp_init_1");
set_func_cmt(0x4279F7, "log_cpp_init_1 initializes the C++ runtime of log.cpp.", 0);
apply_type (0x4279F7, "void log_cpp_init_1();", TINFO_DEFINITE);
cleanup("log_cpp_init_2");set_name(0x427A02, "log_cpp_init_2");
set_func_cmt(0x427A02, "log_cpp_init_2 initializes the C++ runtime of log.cpp.", 0);
apply_type (0x427A02, "void log_cpp_init_2();", TINFO_DEFINITE);
cleanup("log_init_mutex");set_name(0x427A0C, "log_init_mutex");
set_func_cmt(0x427A0C, "log_init_mutex initializes the log mutex.", 0);
apply_type (0x427A0C, "void log_init_mutex();", TINFO_DEFINITE);
cleanup("log_cleanup_mutex_atexit");set_name(0x427A18, "log_cleanup_mutex_atexit");
set_func_cmt(0x427A18, "log_cleanup_mutex_atexit terminates the log mutex at exit.", 0);
apply_type (0x427A18, "void log_cleanup_mutex_atexit();", TINFO_DEFINITE);
cleanup("log_cleanup_mutex");set_name(0x427A24, "log_cleanup_mutex");
set_func_cmt(0x427A24, "log_cleanup_mutex terminates the log mutex.", 0);
apply_type (0x427A24, "void log_cleanup_mutex();", TINFO_DEFINITE);
cleanup("log_flush");set_name(0x427A30, "log_flush");
set_func_cmt(0x427A30, "log_flush flushes the log file.", 0);
apply_type (0x427A30, "void __cdecl log_flush(bool32_t force_close);", TINFO_DEFINITE);
cleanup("log_create");set_name(0x427AC2, "log_create");
set_func_cmt(0x427AC2, "log_create creates a new log file.", 0);
apply_type (0x427AC2, "void * log_create();", TINFO_DEFINITE);
cleanup("log_get_version");set_name(0x427C18, "log_get_version");
set_func_cmt(0x427C18, "log_get_version retrieves the file information of the game executable.", 0);
apply_type (0x427C18, "void __fastcall log_get_version(VS_FIXEDFILEINFO *file_info);", TINFO_DEFINITE);
cleanup("log_printf");set_name(0x427CC9, "log_printf");
set_func_cmt(0x427CC9, "log_printf prints a formatted string to the log file.", 0);
apply_type (0x427CC9, "void log_printf(char *format, ...);", TINFO_DEFINITE);
cleanup("log_dump_computer_info");set_name(0x427D75, "log_dump_computer_info");
set_func_cmt(0x427D75, "log_dump_computer_info writes computer information to the log file.", 0);
apply_type (0x427D75, "void log_dump_computer_info();", TINFO_DEFINITE);
cleanup("j_interfac_cpp_init");set_name(0x41B190, "j_interfac_cpp_init");
set_func_cmt(0x41B190, "j_interfac_cpp_init initializes the C++ runtime of interfac.cpp.", 0);
apply_type (0x41B190, "void j_interfac_cpp_init();", TINFO_DEFINITE);
cleanup("interfac_cpp_init");set_name(0x41B195, "interfac_cpp_init");
set_func_cmt(0x41B195, "interfac_cpp_init initializes the C++ runtime of interfac.cpp.", 0);
apply_type (0x41B195, "void interfac_cpp_init();", TINFO_DEFINITE);
cleanup("interfac_poll_events");set_name(0x41B1A0, "interfac_poll_events");
set_func_cmt(0x41B1A0, "interfac_poll_events polls events while the interface cut scene progress bar\nis displayed.", 0);
apply_type (0x41B1A0, "void interfac_poll_events();", TINFO_DEFINITE);
cleanup("interfac_inc_progress");set_name(0x41B1DF, "interfac_inc_progress");
set_func_cmt(0x41B1DF, "interfac_inc_progress increments the loading progress and renders the active\ncut scene on screen.", 0);
apply_type (0x41B1DF, "bool32_t interfac_inc_progress();", TINFO_DEFINITE);
cleanup("interfac_draw_cut_scene");set_name(0x41B218, "interfac_draw_cut_scene");
set_func_cmt(0x41B218, "interfac_draw_cut_scene renders the active cut scene on screen.", 0);
apply_type (0x41B218, "void interfac_draw_cut_scene();", TINFO_DEFINITE);
cleanup("interfac_draw_progress_bar");set_name(0x41B28D, "interfac_draw_progress_bar");
set_func_cmt(0x41B28D, "interfac_draw_progress_bar renders the progress bar on screen.", 0);
apply_type (0x41B28D, "void __fastcall interfac_draw_progress_bar(int screen_x, int screen_y, int progress_id);", TINFO_DEFINITE);
cleanup("interfac_init");set_name(0x41B2B6, "interfac_init");
set_func_cmt(0x41B2B6, "interfac_init initializes the interface between cut scenes while displaying a\nprogress bar.", 0);
apply_type (0x41B2B6, "void __fastcall interfac_init(interface_mode interface_mode);", TINFO_DEFINITE);
cleanup("interfac_cleanup");set_name(0x41B5F5, "interfac_cleanup");
set_func_cmt(0x41B5F5, "interfac_cleanup releases resources related to the cut scene.", 0);
apply_type (0x41B5F5, "void interfac_cleanup();", TINFO_DEFINITE);
cleanup("interfac_init_cut_scene");set_name(0x41B607, "interfac_init_cut_scene");
set_func_cmt(0x41B607, "interfac_init_cut_scene initializes the active cut scene.", 0);
apply_type (0x41B607, "void __fastcall interfac_init_cut_scene(interface_mode interface_mode);", TINFO_DEFINITE);
cleanup("missiles_get_spell_damage");set_name(0x4283C0, "missiles_get_spell_damage");
set_func_cmt(0x4283C0, "missiles_get_spell_damage retrieves the min and max spell damage of the\ngiven spell.", 0);
apply_type (0x4283C0, "void __fastcall missiles_get_spell_damage(spell_id spell_id, int *damage_min, int *damage_max);", TINFO_DEFINITE);
cleanup("missiles_check_block");set_name(0x428921, "missiles_check_block");
set_func_cmt(0x428921, "missiles_check_block reports whether the missile trajectory is blocked by a\ntile.", 0);
apply_type (0x428921, "bool32_t __fastcall missiles_check_block(int src_x, int src_y, int dst_x, int dst_y);", TINFO_DEFINITE);
cleanup("missiles_find_closest");set_name(0x42897A, "missiles_find_closest");
set_func_cmt(0x42897A, "missiles_find_closest returns the NPC number of the closest NPC on the\ntrajectory of the missile, or -1 if no such NPC is located.", 0);
apply_type (0x42897A, "int __fastcall missiles_find_closest(int x, int y, int radius);", TINFO_DEFINITE);
cleanup("DrawSpellCel");set_name((1.09b):   0x4037D4, "DrawSpellCel");
set_func_cmt((1.09b):   0x4037D4, "DrawSpellCel draws the spell CEL frame at the specified screen coordinates.\nParameters:\n   - xp:    screen X-coordinate (x = xp - 64).\n   - yp:    screen Y-coordinate (y = yp - 160).\n   - cel:   CEL buffer.\n   - frame: 1-indexed frame number.\n   - w:     frame width in pixels.", 0);
apply_type ((1.09b):   0x4037D4, "void __fastcall DrawSpellCel(int xp, int yp, void *cel, int frame, int w);", TINFO_DEFINITE);
cleanup("SetSpellTrans");set_name((1.09b):   0x40387E, "SetSpellTrans");
set_func_cmt((1.09b):   0x40387E, "SetSpellTrans sets the spell colour transition based on the given spell\ntype.\nParameters:\n   - t: spell type.", 0);
apply_type ((1.09b):   0x40387E, "void __fastcall SetSpellTrans(char t);", TINFO_DEFINITE);
cleanup("DrawSpell");set_name((1.09b):   0x4039C7, "DrawSpell");
set_func_cmt((1.09b):   0x4039C7, "DrawSpell draws the active spell icon.", 0);
apply_type ((1.09b):   0x4039C7, "void __cdecl DrawSpell();", TINFO_DEFINITE);
cleanup("DrawSpellList");set_name((1.09b):   0x403A8E, "DrawSpellList");
set_func_cmt((1.09b):   0x403A8E, "DrawSpellList draws the list of speedbook spells.", 0);
apply_type ((1.09b):   0x403A8E, "void DrawSpellList();", TINFO_DEFINITE);
cleanup("SetSpell");set_name((1.09b):   0x403F69, "SetSpell");
set_func_cmt((1.09b):   0x403F69, "SetSpell sets the active spell from the speedbook cursor target.", 0);
apply_type ((1.09b):   0x403F69, "void SetSpell();", TINFO_DEFINITE);
cleanup("control_draw_life_orb");set_name((1.09b):   0x40435B, "control_draw_life_orb");
set_func_cmt((1.09b):   0x40435B, "control_draw_life_orb renders the life orb on screen.", 0);
apply_type ((1.09b):   0x40435B, "void control_draw_life_orb();", TINFO_DEFINITE);
cleanup("control_draw_mana_orb");set_name((1.09b):   0x404475, "control_draw_mana_orb");
set_func_cmt((1.09b):   0x404475, "control_draw_mana_orb renders the mana orb on screen.", 0);
apply_type ((1.09b):   0x404475, "void control_draw_mana_orb();", TINFO_DEFINITE);
cleanup("control_load_graphics");set_name((1.09b):   0x404616, "control_load_graphics");
set_func_cmt((1.09b):   0x404616, "control_load_graphics loads control panel graphics.", 0);
apply_type ((1.09b):   0x404616, "void control_load_graphics();", TINFO_DEFINITE);
cleanup("control_draw_panel_buttons");set_name((1.09b):   0x404959, "control_draw_panel_buttons");
set_func_cmt((1.09b):   0x404959, "control_draw_panel_buttons renders the control panel buttons on screen.", 0);
apply_type ((1.09b):   0x404959, "void control_draw_panel_buttons();", TINFO_DEFINITE);
cleanup("control_cleanup");set_name((1.09b):   0x405181, "control_cleanup");
set_func_cmt((1.09b):   0x405181, "control_cleanup releases the resources used by the control panel.", 0);
apply_type ((1.09b):   0x405181, "void control_cleanup();", TINFO_DEFINITE);
cleanup("control_draw_description_box");set_name((1.09b):   0x4052C8, "control_draw_description_box");
set_func_cmt((1.09b):   0x4052C8, "control_draw_description_box renders the description box on screen.", 0);
apply_type ((1.09b):   0x4052C8, "void control_draw_description_box();", TINFO_DEFINITE);
cleanup("control_draw_character_screen");set_name((1.09b):   0x4056D8, "control_draw_character_screen");
set_func_cmt((1.09b):   0x4056D8, "control_draw_character_screen renders the character screen on screen.", 0);
apply_type ((1.09b):   0x4056D8, "void control_draw_character_screen();", TINFO_DEFINITE);
cleanup("control_draw_level_up_button");set_name((1.09b):   0x406234, "control_draw_level_up_button");
set_func_cmt((1.09b):   0x406234, "control_draw_level_up_button renders a level up button on screen.", 0);
apply_type ((1.09b):   0x406234, "void control_draw_level_up_button();", TINFO_DEFINITE);
cleanup("control_draw_durability_icons");set_name((1.09b):   0x406408, "control_draw_durability_icons");
set_func_cmt((1.09b):   0x406408, "control_draw_durability_icons renders durability icons on screen.", 0);
apply_type ((1.09b):   0x406408, "void control_draw_durability_icons();", TINFO_DEFINITE);
cleanup("control_draw_red_hue");set_name((1.09b):   0x406508, "control_draw_red_hue");
set_func_cmt((1.09b):   0x406508, "control_draw_red_hue renders the screen in red hue.", 0);
apply_type ((1.09b):   0x406508, "void control_draw_red_hue();", TINFO_DEFINITE);
cleanup("control_get_spell_type");set_name((1.09b):   0x406592, "control_get_spell_type");
set_func_cmt((1.09b):   0x406592, "control_get_spell_type returns the spell type of the given spell ID, and\nreport whether is may be cast in town.", 0);
apply_type ((1.09b):   0x406592, "spell_type __fastcall control_get_spell_type(spell_id spell_id, bool32_t check_town);", TINFO_DEFINITE);
cleanup("control_draw_spellbook");set_name((1.09b):   0x406667, "control_draw_spellbook");
set_func_cmt((1.09b):   0x406667, "control_draw_spellbook renders the spellbook on screen.", 0);
apply_type ((1.09b):   0x406667, "void control_draw_spellbook();", TINFO_DEFINITE);
cleanup("control_get_gold_quantity");set_name((1.09b):   0x406AF8, "control_get_gold_quantity");
set_func_cmt((1.09b):   0x406AF8, "control_get_gold_quantity returns the gramatically correct quantity for the\ngiven amount of gold (i.e. \"piece\" or \"pieces\").", 0);
apply_type ((1.09b):   0x406AF8, "char *__fastcall control_get_gold_quantity(int gold);", TINFO_DEFINITE);
cleanup("control_draw_gold_drop_box");set_name((1.09b):   0x406B08, "control_draw_gold_drop_box");
set_func_cmt((1.09b):   0x406B08, "control_draw_gold_drop_box renders the gold drop box on screen.", 0);
apply_type ((1.09b):   0x406B08, "void __fastcall control_draw_gold_drop_box(int amount);", TINFO_DEFINITE);
cleanup("control_draw_talk_panel");set_name((1.09b):   0x406E6A, "control_draw_talk_panel");
set_func_cmt((1.09b):   0x406E6A, "control_draw_talk_panel renders the talk panel on screen.", 0);
apply_type ((1.09b):   0x406E6A, "void control_draw_talk_panel();", TINFO_DEFINITE);
cleanup("j_wave_cpp_init");set_name(0x462C6D, "j_wave_cpp_init");
set_func_cmt(0x462C6D, "j_wave_cpp_init initializes the C++ runtime of wave.cpp.", 0);
apply_type (0x462C6D, "void j_wave_cpp_init();", TINFO_DEFINITE);
cleanup("wave_cpp_init");set_name(0x462C72, "wave_cpp_init");
set_func_cmt(0x462C72, "wave_cpp_init initializes the C++ runtime of wave.cpp.", 0);
apply_type (0x462C72, "void wave_cpp_init();", TINFO_DEFINITE);
cleanup("plrmsg_draw");set_name(0x450EAA, "plrmsg_draw");
set_func_cmt(0x450EAA, "plrmsg_draw renders player messages on screen.", 0);
apply_type (0x450EAA, "void plrmsg_draw();", TINFO_DEFINITE);
cleanup("error_add");set_name(0x41804E, "error_add");
set_func_cmt(0x41804E, "error_add adds the given error message.", 0);
apply_type (0x41804E, "void __fastcall error_add(error_id error_id);", TINFO_DEFINITE);
cleanup("error_clear");set_name(0x41808F, "error_clear");
set_func_cmt(0x41808F, "error_clear clears the error messages.", 0);
apply_type (0x41808F, "void error_clear();", TINFO_DEFINITE);
cleanup("error_draw");set_name(0x4180AA, "error_draw");
set_func_cmt(0x4180AA, "error_draw renders the error dialogue on screen.", 0);
apply_type (0x4180AA, "void error_draw();", TINFO_DEFINITE);
cleanup("j_multi_cpp_init");set_name(0x43FAC4, "j_multi_cpp_init");
set_func_cmt(0x43FAC4, "j_multi_cpp_init initializes the C++ runtime of multi.cpp.", 0);
apply_type (0x43FAC4, "void j_multi_cpp_init();", TINFO_DEFINITE);
cleanup("multi_cpp_init");set_name(0x43FAC9, "multi_cpp_init");
set_func_cmt(0x43FAC9, "multi_cpp_init initializes the C++ runtime of multi.cpp.", 0);
apply_type (0x43FAC9, "void multi_cpp_init();", TINFO_DEFINITE);
cleanup("multi_cleanup");set_name(0x44055D, "multi_cleanup");
set_func_cmt(0x44055D, "multi_cleanup terminates the multiplayer system.", 0);
apply_type (0x44055D, "void multi_cleanup();", TINFO_DEFINITE);
cleanup("fault_cpp_init");set_name(0x4182AD, "fault_cpp_init");
set_func_cmt(0x4182AD, "fault_cpp_init initializes the C++ runtime of fault.cpp.", 0);
apply_type (0x4182AD, "void fault_cpp_init();", TINFO_DEFINITE);
cleanup("fault_get_exception_filter");set_name(0x418860, "fault_get_exception_filter");
set_func_cmt(0x418860, "fault_get_exception_filter returns the top level exception filter.", 0);
apply_type (0x418860, "LPTOP_LEVEL_EXCEPTION_FILTER fault_get_exception_filter();", TINFO_DEFINITE);
cleanup("minitext_cleanup");set_name(0x428056, "minitext_cleanup");
set_func_cmt(0x428056, "minitext_cleanup releases the resources of the quest textbox.", 0);
apply_type (0x428056, "void minitext_cleanup();", TINFO_DEFINITE);
cleanup("minitext_init");set_name(0x42807A, "minitext_init");
set_func_cmt(0x42807A, "minitext_init loads the resources of the quest textbox.", 0);
apply_type (0x42807A, "void minitext_init();", TINFO_DEFINITE);
cleanup("minitext_start_speech");set_name(0x4280A4, "minitext_start_speech");
set_func_cmt(0x4280A4, "minitext_start_speech starts the given quest speech.", 0);
apply_type (0x4280A4, "void __fastcall minitext_start_speech(speech_id speech_id);", TINFO_DEFINITE);
cleanup("minitext_draw_textbox");set_name(0x428104, "minitext_draw_textbox");
set_func_cmt(0x428104, "minitext_draw_textbox renders the quest textbox.", 0);
apply_type (0x428104, "void minitext_draw_textbox();", TINFO_DEFINITE);
cleanup("minitext_draw_character");set_name(0x428160, "minitext_draw_character");
set_func_cmt(0x428160, "minitext_draw_character renders the given medium sized text character at the\nspecified screen coordinates.", 0);
apply_type (0x428160, "void __fastcall minitext_draw_character(int screen_x, int screen_y, int8_t *cel_buf, int frame);", TINFO_DEFINITE);
cleanup("minitext_draw");set_name(0x428202, "minitext_draw");
set_func_cmt(0x428202, "minitext_draw renders a medium sized text quest message on screen.", 0);
apply_type (0x428202, "void minitext_draw();", TINFO_DEFINITE);
cleanup("tmsg_get");set_name(0x45E08C, "tmsg_get");
set_func_cmt(0x45E08C, "tmsg_get retreives the contents of a timed message from the queue.", 0);
apply_type (0x45E08C, "int __fastcall tmsg_get(uint8_t *data, int size);", TINFO_DEFINITE);
cleanup("tmsg_add");set_name(0x45E0D7, "tmsg_add");
set_func_cmt(0x45E0D7, "tmsg_add adds a timed message to the queue, which will be processed 500 ms\nlater.", 0);
apply_type (0x45E0D7, "void __fastcall tmsg_add(uint8_t *msg, uint8_t len);", TINFO_DEFINITE);
cleanup("tmsg_cleanup");set_name(0x45E12A, "tmsg_cleanup");
set_func_cmt(0x45E12A, "tmsg_cleanup releases the resources of the timed messages queue.", 0);
apply_type (0x45E12A, "void tmsg_cleanup();", TINFO_DEFINITE);
cleanup("drlg_l4_create_dungeon");set_name(0x4129B0, "drlg_l4_create_dungeon");
set_func_cmt(0x4129B0, "drlg_l4_create_dungeon creates a random hell dungeon based on the given seed\nand level entry.", 0);
apply_type (0x4129B0, "void __fastcall drlg_l4_create_dungeon(uint32_t seed, int entry);", TINFO_DEFINITE);
cleanup("towners_get_num_from_id");set_name(0x46019B, "towners_get_num_from_id");
set_func_cmt(0x46019B, "towners_get_num_from_id returns the towner number (towners array index) of\nthe given towner ID.", 0);
apply_type (0x46019B, "int __fastcall towners_get_num_from_id(towner_id towner_id);", TINFO_DEFINITE);
cleanup("towners_init_graphics");set_name(0x4601C1, "towners_init_graphics");
set_func_cmt(0x4601C1, "towners_init_graphics initializes the NPC graphics for each direction.", 0);
apply_type (0x4601C1, "void __fastcall towners_init_graphics(void *towner_cel, void **cel_from_direction);", TINFO_DEFINITE);
cleanup("towners_init_anim");set_name(0x4601FB, "towners_init_anim");
set_func_cmt(0x4601FB, "towners_init_anim initializes the animation of the given NPC.", 0);
apply_type (0x4601FB, "void __fastcall towners_init_anim(int towner_num, void *active_cel, int nframes, int nticks_per_frame);", TINFO_DEFINITE);
cleanup("towners_place");set_name(0x46022F, "towners_place");
set_func_cmt(0x46022F, "towners_place places the given NPC on the map.", 0);
apply_type (0x46022F, "void __fastcall towners_place(int towner_num, int frame_width, bool32_t selectable, towner_id towner_id, int x, int y, towner_anim_seq_id towner_anim_seq_id, int unused);", TINFO_DEFINITE);
cleanup("towners_init_gossip");set_name(0x4602C4, "towners_init_gossip");
set_func_cmt(0x4602C4, "towners_init_gossip initializes quest gossip of the given NPC.", 0);
apply_type (0x4602C4, "void __fastcall towners_init_gossip(int towner_num);", TINFO_DEFINITE);
cleanup("towners_init_griswold");set_name(0x460311, "towners_init_griswold");
set_func_cmt(0x460311, "towners_init_griswold initializes Griswold the Blacksmith.", 0);
apply_type (0x460311, "void towners_init_griswold();", TINFO_DEFINITE);
cleanup("towners_init_odgen");set_name(0x4603A0, "towners_init_odgen");
set_func_cmt(0x4603A0, "towners_init_odgen initializes Ogden the Tavern owner.", 0);
apply_type (0x4603A0, "void towners_init_odgen();", TINFO_DEFINITE);
cleanup("towners_init_wounded_townsman");set_name(0x460436, "towners_init_wounded_townsman");
set_func_cmt(0x460436, "towners_init_wounded_townsman initializes the Wounded Townsman.", 0);
apply_type (0x460436, "void towners_init_wounded_townsman();", TINFO_DEFINITE);
cleanup("towners_init_adria");set_name(0x4604C6, "towners_init_adria");
set_func_cmt(0x4604C6, "towners_init_adria initializes Adria the Witch.", 0);
apply_type (0x4604C6, "void towners_init_adria();", TINFO_DEFINITE);
cleanup("towners_init_gillian");set_name(0x460555, "towners_init_gillian");
set_func_cmt(0x460555, "towners_init_gillian initializes Gillian the Barmaid.", 0);
apply_type (0x460555, "void towners_init_gillian();", TINFO_DEFINITE);
cleanup("towners_init_wirt");set_name(0x4605E4, "towners_init_wirt");
set_func_cmt(0x4605E4, "towners_init_wirt initializes Wirt the Peg-legged boy.", 0);
apply_type (0x4605E4, "void towners_init_wirt();", TINFO_DEFINITE);
cleanup("towners_init_pepin");set_name(0x46067A, "towners_init_pepin");
set_func_cmt(0x46067A, "towners_init_pepin initializes Pepin the Healer.", 0);
apply_type (0x46067A, "void towners_init_pepin();", TINFO_DEFINITE);
cleanup("towners_init_cain");set_name(0x460709, "towners_init_cain");
set_func_cmt(0x460709, "towners_init_cain initializes Cain the Elder.", 0);
apply_type (0x460709, "void towners_init_cain();", TINFO_DEFINITE);
cleanup("towners_init_farnham");set_name(0x460798, "towners_init_farnham");
set_func_cmt(0x460798, "towners_init_farnham initializes Farnham the Drunk.", 0);
apply_type (0x460798, "void towners_init_farnham();", TINFO_DEFINITE);
cleanup("towners_init_cows");set_name(0x460827, "towners_init_cows");
set_func_cmt(0x460827, "towners_init_cows initializes the Cow NPCs.", 0);
apply_type (0x460827, "void towners_init_cows();", TINFO_DEFINITE);
cleanup("towners_init");set_name(0x460976, "towners_init");
set_func_cmt(0x460976, "towners_init initializes the NPCs of Tristram.", 0);
apply_type (0x460976, "void towners_init();", TINFO_DEFINITE);
cleanup("towners_cleanup");set_name(0x4609C3, "towners_cleanup");
set_func_cmt(0x4609C3, "towners_cleanup releases resources used by NPCs.", 0);
apply_type (0x4609C3, "void towners_cleanup();", TINFO_DEFINITE);
cleanup("towners_stop_interaction");set_name(0x460A05, "towners_stop_interaction");
set_func_cmt(0x460A05, "towners_stop_interaction stops interaction with distant players.", 0);
apply_type (0x460A05, "void __fastcall towners_stop_interaction(int towner_num);", TINFO_DEFINITE);
cleanup("towners_process_logic_griswold");set_name(0x460A78, "towners_process_logic_griswold");
set_func_cmt(0x460A78, "towners_process_logic_griswold processs the logic of Griswold each game tick;\nstops interaction with distant players.", 0);
apply_type (0x460A78, "void towners_process_logic_griswold();", TINFO_DEFINITE);
cleanup("towners_process_logic_ogden");set_name(0x460A86, "towners_process_logic_ogden");
set_func_cmt(0x460A86, "towners_process_logic_ogden processs the logic of Ogden each game tick; stops\ninteraction with distant players.", 0);
apply_type (0x460A86, "void towners_process_logic_ogden();", TINFO_DEFINITE);
cleanup("towners_process_logic_wounded_townsman");set_name(0x460A95, "towners_process_logic_wounded_townsman");
set_func_cmt(0x460A95, "towners_process_logic_wounded_townsman processs the logic of the Wounded\nTownsman each game tick; stops interaction with distant players, and updates\nquest events.", 0);
apply_type (0x460A95, "void towners_process_logic_wounded_townsman();", TINFO_DEFINITE);
cleanup("towners_process_logic_pepin");set_name(0x460B0D, "towners_process_logic_pepin");
set_func_cmt(0x460B0D, "towners_process_logic_pepin processs the logic of Pepin each game tick; stops\ninteraction with distant players.", 0);
apply_type (0x460B0D, "void towners_process_logic_pepin();", TINFO_DEFINITE);
cleanup("towners_process_logic_cain");set_name(0x460B1C, "towners_process_logic_cain");
set_func_cmt(0x460B1C, "towners_process_logic_cain processs the logic of Cain each game tick; stops\ninteraction with distant players.", 0);
apply_type (0x460B1C, "void towners_process_logic_cain();", TINFO_DEFINITE);
cleanup("towners_process_logic_farnham");set_name(0x460B2B, "towners_process_logic_farnham");
set_func_cmt(0x460B2B, "towners_process_logic_farnham processs the logic of Farnham each game tick;\nstops interaction with distant players.", 0);
apply_type (0x460B2B, "void towners_process_logic_farnham();", TINFO_DEFINITE);
cleanup("towners_process_logic_wirt");set_name(0x460B3A, "towners_process_logic_wirt");
set_func_cmt(0x460B3A, "towners_process_logic_wirt processs the logic of Wirt each game tick; stops\ninteraction with distant players.", 0);
apply_type (0x460B3A, "void towners_process_logic_wirt();", TINFO_DEFINITE);
cleanup("towners_process_logic_adria");set_name(0x460B49, "towners_process_logic_adria");
set_func_cmt(0x460B49, "towners_process_logic_adria processs the logic of Adria each game tick; stops\ninteraction with distant players.", 0);
apply_type (0x460B49, "void towners_process_logic_adria();", TINFO_DEFINITE);
cleanup("towners_process_logic_gillian");set_name(0x460B58, "towners_process_logic_gillian");
set_func_cmt(0x460B58, "towners_process_logic_gillian processs the logic of Gillain each game tick;\nstops interaction with distant players.", 0);
apply_type (0x460B58, "void towners_process_logic_gillian();", TINFO_DEFINITE);
cleanup("towners_process_logic_cows");set_name(0x460B67, "towners_process_logic_cows");
set_func_cmt(0x460B67, "towners_process_logic_cow processs the logic of the Cows each game tick;\nstops interaction with distant players.", 0);
apply_type (0x460B67, "void towners_process_logic_cows();", TINFO_DEFINITE);
cleanup("towners_process");set_name(0x460B76, "towners_process");
set_func_cmt(0x460B76, "towners_process processes any game state changes of the NPCs, since the last\ngame tick.", 0);
apply_type (0x460B76, "void towners_process();", TINFO_DEFINITE);
cleanup("towners_find_player_item");set_name(0x460C5C, "towners_find_player_item");
set_func_cmt(0x460C5C, "towners_find_player_item locates the given item ID in the player's inventory.", 0);
apply_type (0x460C5C, "Item *__fastcall towners_find_player_item(int player_num, item_id item_id, int *inv_item_num);", TINFO_DEFINITE);
cleanup("towners_play_greeting");set_name(0x460CAC, "towners_play_greeting");
set_func_cmt(0x460CAC, "towners_greeting plays the greeting of the given NPC.", 0);
apply_type (0x460CAC, "void __fastcall towners_play_greeting(speech_id speech_id);", TINFO_DEFINITE);
cleanup("towners_talk_with_towner");set_name(0x460CC9, "towners_talk_with_towner");
set_func_cmt(0x460CC9, "towners_talk_with_towner initiates a conversation with the given NPC.", 0);
apply_type (0x460CC9, "void __fastcall towners_talk_with_towner(int player_num, int towner_num);", TINFO_DEFINITE);
cleanup("towners_play_cow_sound");set_name(0x4617E8, "towners_play_cow_sound");
set_func_cmt(0x4617E8, "towners_play_cow_sound plays the Moo sound of a cow.", 0);
apply_type (0x4617E8, "void __fastcall towners_play_cow_sound(int player_num);", TINFO_DEFINITE);
cleanup("doom_get_frame_from_time");set_name(0x40ACAD, "doom_get_frame_from_time");
set_func_cmt(0x40ACAD, "doom_get_frame_from_time returns the active frame of the Map of the Stars\nbased on the time since the start of the time-based doom quest. After 30\nminutes, we are doomed.", 0);
apply_type (0x40ACAD, "int doom_get_frame_from_time();", TINFO_DEFINITE);
cleanup("doom_alloc_cel");set_name(0x40ACC6, "doom_alloc_cel");
set_func_cmt(0x40ACC6, "doom_alloc_cel allocates the memory for the doom quest graphics.", 0);
apply_type (0x40ACC6, "void doom_alloc_cel();", TINFO_DEFINITE);
cleanup("doom_cleanup");set_name(0x40ACD6, "doom_cleanup");
set_func_cmt(0x40ACD6, "doom_cleanup releases the resource used for the doom quest.", 0);
apply_type (0x40ACD6, "void doom_cleanup();", TINFO_DEFINITE);
cleanup("doom_load_graphics");set_name(0x40ACE8, "doom_load_graphics");
set_func_cmt(0x40ACE8, "doom_load_graphics loads the doom graphics for Map of the Stars.", 0);
apply_type (0x40ACE8, "void doom_load_graphics();", TINFO_DEFINITE);
cleanup("doom_init");set_name(0x40AD34, "doom_init");
set_func_cmt(0x40AD34, "doom_init initializes the time-based doom quest.", 0);
apply_type (0x40AD34, "void doom_init();", TINFO_DEFINITE);
cleanup("doom_close");set_name(0x40AD5E, "doom_close");
set_func_cmt(0x40AD5E, "doom_close closes the Map of the Stars.", 0);
apply_type (0x40AD5E, "void doom_close();", TINFO_DEFINITE);
cleanup("doom_draw");set_name(0x40AD74, "doom_draw");
set_func_cmt(0x40AD74, "doom_draw renders the Map of the Stars on screen.", 0);
apply_type (0x40AD74, "void doom_draw();", TINFO_DEFINITE);
cleanup("j_diablo_cpp_init");set_name(0x4087B1, "j_diablo_cpp_init");
set_func_cmt(0x4087B1, "j_diablo_cpp_init_1 initializes the C++ runtime of diablo.cpp.", 0);
apply_type (0x4087B1, "void j_diablo_cpp_init();", TINFO_DEFINITE);
cleanup("diablo_cpp_init");set_name(0x4087B6, "diablo_cpp_init");
set_func_cmt(0x4087B6, "diablo_cpp_init_1 initializes the C++ runtime of diablo.cpp.", 0);
apply_type (0x4087B6, "void diablo_cpp_init();", TINFO_DEFINITE);
cleanup("diablo_cleanup_current_level");set_name(0x4087C1, "diablo_cleanup_current_level");
set_func_cmt(0x4087C1, "diablo_cleanup_current_level releases the resources of the current level.", 0);
apply_type (0x4087C1, "void diablo_cleanup_current_level();", TINFO_DEFINITE);
cleanup("diablo_run_game_loop");set_name(0x4088E2, "diablo_run_game_loop");
set_func_cmt(0x4088E2, "diablo_run_game_loop runs the game loop, dispatching events, and processing game state changes.", 0);
apply_type (0x4088E2, "void __fastcall diablo_run_game_loop(interface_mode interface_mode);", TINFO_DEFINITE);
cleanup("diablo_init_game");set_name(0x408A8C, "diablo_init_game");
set_func_cmt(0x408A8C, "diablo_init_game initializes the resources used for the game.", 0);
apply_type (0x408A8C, "void __fastcall diablo_init_game(interface_mode interface_mode);", TINFO_DEFINITE);
cleanup("diablo_cleanup");set_name(0x408ADB, "diablo_cleanup");
set_func_cmt(0x408ADB, "diablo_cleanup releases the resoures used by the game.", 0);
apply_type (0x408ADB, "void diablo_cleanup();", TINFO_DEFINITE);
cleanup("diablo_get_not_running");set_name(0x408B1E, "diablo_get_not_running");
set_func_cmt(0x408B1E, "diablo_get_not_running reports whether the game is not running already.", 0);
apply_type (0x408B1E, "bool32_t diablo_get_not_running();", TINFO_DEFINITE);
cleanup("WinMain");set_name(0x408B4A, "WinMain");
set_func_cmt(0x408B4A, "WinMain is the entry point of the Diablo executable.", 0);
apply_type (0x408B4A, "int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow);", TINFO_DEFINITE);
cleanup("diablo_parse_flags");set_name(0x408CB1, "diablo_parse_flags");
set_func_cmt(0x408CB1, "diablo_parse_flags parses command-line flags from the given command line arguments.", 0);
apply_type (0x408CB1, "void __fastcall diablo_parse_flags(char *args);", TINFO_DEFINITE);
cleanup("diablo_init_screen");set_name(0x408D61, "diablo_init_screen");
set_func_cmt(0x408D61, "diablo_init_screen initializes the screen.", 0);
apply_type (0x408D61, "void diablo_init_screen();", TINFO_DEFINITE);
cleanup("diablo_set_focus");set_name(0x408DB1, "diablo_set_focus");
set_func_cmt(0x408DB1, "diablo_set_focus focuses the game window.", 0);
apply_type (0x408DB1, "HWND __fastcall diablo_set_focus(char *class_name);", TINFO_DEFINITE);
cleanup("diablo_reload_process");set_name(0x408DF4, "diablo_reload_process");
set_func_cmt(0x408DF4, "diablo_reload_process reloads the diablo.exe process in order to obstruct\ndebugging attempts.", 0);
apply_type (0x408DF4, "void __fastcall diablo_reload_process(HMODULE hModule);", TINFO_DEFINITE);
cleanup("diablo_load_level_graphics");set_name(0x40A391, "diablo_load_level_graphics");
set_func_cmt(0x40A391, "diablo_load_level_graphics loads the tile graphics of the active dungeon\ntype.", 0);
apply_type (0x40A391, "void diablo_load_level_graphics();", TINFO_DEFINITE);
cleanup("diablo_create_level");set_name(0x40A4E1, "diablo_create_level");
set_func_cmt(0x40A4E1, "diablo_create_level creates the level, either Tristram or a random dungeon\nbased on the dungeon type and level entry.", 0);
apply_type (0x40A4E1, "void __fastcall diablo_create_level(int entry);", TINFO_DEFINITE);
cleanup("diablo_load_game_level");set_name(0x40A5A4, "diablo_load_game_level");
set_func_cmt(0x40A5A4, "diablo_load_game_level loads the game level.", 0);
apply_type (0x40A5A4, "void __fastcall diablo_load_game_level(bool32_t from_save, int entry);", TINFO_DEFINITE);
cleanup("diablo_game_loop");set_name(0x40AAE3, "diablo_game_loop");
set_func_cmt(0x40AAE3, "diablo_game_loop runs the game loop.", 0);
apply_type (0x40AAE3, "void __fastcall diablo_game_loop(bool32_t startup);", TINFO_DEFINITE);
cleanup("diablo_process_game_logic");set_name(0x40AB33, "diablo_process_game_logic");
set_func_cmt(0x40AB33, "diablo_process_game_logic processes any game state changes, since the last\ngame tick.", 0);
apply_type (0x40AB33, "void diablo_process_game_logic();", TINFO_DEFINITE);
cleanup("diablo_set_timeout_cursor");set_name(0x40ABE7, "diablo_set_timeout_cursor");
set_func_cmt(0x40ABE7, "diablo_set_timeout_cursor sets the cursor to an hourglass on network timeout.", 0);
apply_type (0x40ABE7, "void __fastcall diablo_set_timeout_cursor(bool32_t timeout);", TINFO_DEFINITE);
cleanup("capture_screenshot");set_name(0x40311B, "capture_screenshot");
set_func_cmt(0x40311B, "capture_screenshot captures a screenshot and stores it within the game\ndirectory as \"screenXX.pcx\". While the screenshot is being taken, the game is\npaused temporarily as indicated by the red screen.", 0);
apply_type (0x40311B, "void capture_screenshot();", TINFO_DEFINITE);
cleanup("capture_write_pcx_hdr");set_name(0x403204, "capture_write_pcx_hdr");
set_func_cmt(0x403204, "capture_write_pcx_hdr writes a PCX header with the specified image dimensions\nto the file.", 0);
apply_type (0x403204, "bool32_t __fastcall capture_write_pcx_hdr(HANDLE hFile, int16_t width, int height);", TINFO_DEFINITE);
cleanup("capture_write_pcx_palette");set_name(0x403294, "capture_write_pcx_palette");
set_func_cmt(0x403294, "capture_write_pcx_palette write the given palette to the PCX file.", 0);
apply_type (0x403294, "bool32_t __fastcall capture_write_pcx_palette(HANDLE hFile, PALETTEENTRY *palette);", TINFO_DEFINITE);
cleanup("capture_write_pcx_pixels");set_name(0x4032FD, "capture_write_pcx_pixels");
set_func_cmt(0x4032FD, "capture_write_pcx_pixels writes the given pixels to the PCX file.", 0);
apply_type (0x4032FD, "bool32_t __fastcall capture_write_pcx_pixels(HANDLE hFile, int16_t width, int16_t height, int16_t stride, uint8_t *pixels);", TINFO_DEFINITE);
cleanup("capture_rle_encode");set_name(0x40336A, "capture_rle_encode");
set_func_cmt(0x40336A, "capture_rle_encode RLE encodes the pixels of the source buffer.", 0);
apply_type (0x40336A, "uint8_t * __fastcall capture_rle_encode(uint8_t *src, uint8_t *dst, int width);", TINFO_DEFINITE);
cleanup("capture_create_file");set_name(0x4033A8, "capture_create_file");
set_func_cmt(0x4033A8, "capture_create_file creates a new PCX file with the pattern \"screenXX.PCX\".", 0);
apply_type (0x4033A8, "HANDLE __fastcall capture_create_file(char *dst_path);", TINFO_DEFINITE);
cleanup("capture_set_red_palette");set_name(0x403470, "capture_set_red_palette");
set_func_cmt(0x403470, "capture_set_red_palette sets the palette to red-scale.", 0);
apply_type (0x403470, "void __fastcall capture_set_red_palette(PALETTEENTRY *palette_orig);", TINFO_DEFINITE);
cleanup("j_effects_cpp_init");set_name(0x4158A9, "j_effects_cpp_init");
set_func_cmt(0x4158A9, "j_effects_cpp_init initializes the C++ runtime of effects.cpp.", 0);
apply_type (0x4158A9, "void j_effects_cpp_init();", TINFO_DEFINITE);
cleanup("effects_cpp_init");set_name(0x4158AE, "effects_cpp_init");
set_func_cmt(0x4158AE, "effects_cpp_init initializes the C++ runtime of effects.cpp.", 0);
apply_type (0x4158AE, "void effects_cpp_init();", TINFO_DEFINITE);
cleanup("effects_cleanup_sfx");set_name(0x415DFF, "effects_cleanup_sfx");
set_func_cmt(0x415DFF, "effects_cleanup_sfx terminates and releases sound effects.", 0);
apply_type (0x415DFF, "void effects_cleanup_sfx();", TINFO_DEFINITE);
cleanup("effects_load_sound_files");set_name(0x415E77, "effects_load_sound_files");
set_func_cmt(0x415E77, "effects_load_sound_files loads the specified sound effects.", 0);
apply_type (0x415E77, "void __fastcall effects_load_sound_files(sfx_flag sfx_flag);", TINFO_DEFINITE);
cleanup("effects_load_ui_sound_files");set_name(0x415ED8, "effects_load_ui_sound_files");
set_func_cmt(0x415ED8, "effects_load_ui_sound_files loads the UI sound effects.", 0);
apply_type (0x415ED8, "void effects_load_ui_sound_files();", TINFO_DEFINITE);
cleanup("gendung_init_transparency");set_name(0x41944A, "gendung_init_transparency");
set_func_cmt(0x41944A, "gendung_init_transparency initializes transparency.", 0);
apply_type (0x41944A, "void gendung_init_transparency();", TINFO_DEFINITE);
cleanup("gendung_make_rect_transparent");set_name(0x419477, "gendung_make_rect_transparent");
set_func_cmt(0x419477, "gendung_make_rect_transparent makes the given rectangle transparent.", 0);
apply_type (0x419477, "void __fastcall gendung_make_rect_transparent(int tx_start, int ty_start, int tx_end, int ty_end);", TINFO_DEFINITE);
cleanup("gendung_rect_transparent");set_name(0x4194D0, "gendung_rect_transparent");
set_func_cmt(0x4194D0, "gendung_rect_transparent makes the given rectangle transparent.", 0);
apply_type (0x4194D0, "void __fastcall gendung_rect_transparent(int x_start, int y_start, int x_end, int y_end);", TINFO_DEFINITE);
cleanup("gendung_copy_transparency");set_name(0x419515, "gendung_copy_transparency");
set_func_cmt(0x419515, "gendung_copy_transparency copies transparency from the source to the\ndestination coordinate.", 0);
apply_type (0x419515, "void __fastcall gendung_copy_transparency(int src_x, int src_y, int dst_x, int dst_y);", TINFO_DEFINITE);
cleanup("gendung_init_set_piece");set_name(0x4195A2, "gendung_init_set_piece");
set_func_cmt(0x4195A2, "gendung_init_set_piece initializes the placement variables of the set piece\n(quest dungeon).", 0);
apply_type (0x4195A2, "void gendung_init_set_piece();", TINFO_DEFINITE);
cleanup("gendung_mark_set_piece");set_name(0x4195B9, "gendung_mark_set_piece");
set_func_cmt(0x4195B9, "gendung_mark_set_piece marks the area of the set piece (quest dungeon).", 0);
apply_type (0x4195B9, "void gendung_mark_set_piece();", TINFO_DEFINITE);
cleanup("gendung_place_theme_rooms");set_name(0x419C10, "gendung_place_theme_rooms");
set_func_cmt(0x419C10, "gendung_place_theme_rooms places thematic rooms.", 0);
apply_type (0x419C10, "void __fastcall gendung_place_theme_rooms(int min_size, int max_size, int floor, int frequency, int rnd_size);", TINFO_DEFINITE);
cleanup("gendung_init_levels");set_name(0x419E71, "gendung_init_levels");
set_func_cmt(0x419E71, "gendung_init_levels initializes the dungeon levels game state.", 0);
apply_type (0x419E71, "void gendung_init_levels();", TINFO_DEFINITE);
cleanup("sha1_reset");set_name(0x456A16, "sha1_reset");
set_func_cmt(0x456A16, "sha1_reset resets the global SHA-1 contexts.", 0);
apply_type (0x456A16, "void sha1_reset();", TINFO_DEFINITE);
cleanup("sha1_final");set_name(0x456A2B, "sha1_final");
set_func_cmt(0x456A2B, "sha1_final copies the message digest of the given SHA-1 context to dst.", 0);
apply_type (0x456A2B, "void __fastcall sha1_final(int ctx_id, uint8_t (*dst)[20]);", TINFO_DEFINITE);
cleanup("sha1");set_name(0x456A4D, "sha1");
set_func_cmt(0x456A4D, "sha1 adds the 64-byte block of data to the running hash of the given SHA-1\ncontext and stores the final message digest in dst.", 0);
apply_type (0x456A4D, "void __fastcall sha1(int ctx_id, const uint8_t *data, uint8_t (*dst)[20]);", TINFO_DEFINITE);
cleanup("sha1_update");set_name(0x456A73, "sha1_update");
set_func_cmt(0x456A73, "sha1_update adds the data to the running hash of the given SHA-1 context.", 0);
apply_type (0x456A73, "void __fastcall sha1_update(SHA1Context *ctx, const uint8_t *data, int len);", TINFO_DEFINITE);
cleanup("sha1_transform");set_name(0x456AC4, "sha1_transform");
set_func_cmt(0x456AC4, "sha1_transform performs a SHA-1 transformation on the 64-byte block of the\ngiven SHA-1 context.", 0);
apply_type (0x456AC4, "void __fastcall sha1_transform(SHA1Context *ctx);", TINFO_DEFINITE);
cleanup("sha1_init");set_name(0x456C82, "sha1_init");
set_func_cmt(0x456C82, "sha1_init initializes the given SHA-1 context.", 0);
apply_type (0x456C82, "void __fastcall sha1_init(int ctx_id);", TINFO_DEFINITE);
cleanup("dead_init");set_name(0x4084A6, "dead_init");
set_func_cmt(0x4084A6, "dead_init initializes tracking of dead creatures.", 0);
apply_type (0x4084A6, "void dead_init();", TINFO_DEFINITE);
cleanup("dead_set");set_name(0x40865C, "dead_set");
set_func_cmt(0x40865C, "dead_set tracks the dead creature at the given coordinate.", 0);
apply_type (0x40865C, "void __fastcall dead_set(int x, int y, int8_t dead_num, direction direction);", TINFO_DEFINITE);
cleanup("dead_add_lighting_to_dead_champions");set_name(0x40867D, "dead_add_lighting_to_dead_champions");
set_func_cmt(0x40867D, "dead_add_lighting_to_dead_champions adds light sources to dead champion\ncreatures.", 0);
apply_type (0x40867D, "void dead_add_lighting_to_dead_champions();", TINFO_DEFINITE);
cleanup("j_msg_cpp_init");set_name(0x43BBA4, "j_msg_cpp_init");
set_func_cmt(0x43BBA4, "j_msg_cpp_init initializes the C++ runtime of msg.cpp.", 0);
apply_type (0x43BBA4, "void j_msg_cpp_init();", TINFO_DEFINITE);
cleanup("msg_cpp_init");set_name(0x43BBA9, "msg_cpp_init");
set_func_cmt(0x43BBA9, "msg_cpp_init initializes the C++ runtime of msg.cpp.", 0);
apply_type (0x43BBA9, "void msg_cpp_init();", TINFO_DEFINITE);
cleanup("msg_is_portal_inactive");set_name(0x43C24F, "msg_is_portal_inactive");
set_func_cmt(0x43C24F, "msg_is_portal_inactive reports whether the given portal is active.", 0);
apply_type (0x43C24F, "bool32_t __fastcall msg_is_portal_inactive(int portal_num);", TINFO_DEFINITE);
cleanup("msg_send_cmd");set_name(0x43C873, "msg_send_cmd");
set_func_cmt(0x43C873, "msg_send_cmd sends a command message without body to connected peers.", 0);
apply_type (0x43C873, "void __fastcall msg_send_cmd(bool32_t high_priority, cmd cmd);", TINFO_DEFINITE);
cleanup("msg_send_cmd_spawn_golem");set_name(0x43C891, "msg_send_cmd_spawn_golem");
set_func_cmt(0x43C891, "msg_send_cmd_spawn_golem sends a spawn golem command message.", 0);
apply_type (0x43C891, "void __fastcall msg_send_cmd_spawn_golem(int8_t x, int8_t y, int8_t direction, int8_t target_num, int hp_cur, int8_t dlvl);", TINFO_DEFINITE);
cleanup("msg_send_cmd_coord");set_name(0x43C8C7, "msg_send_cmd_coord");
set_func_cmt(0x43C8C7, "msg_send_cmd_coord sends a command message with X,Y coordinates to connected peers.", 0);
apply_type (0x43C8C7, "void __fastcall msg_send_cmd_coord(bool32_t high_priority, cmd cmd, int8_t x, int8_t y);", TINFO_DEFINITE);
cleanup("msg_send_cmd_coord_param1");set_name(0x43C8F3, "msg_send_cmd_coord_param1");
set_func_cmt(0x43C8F3, "msg_send_cmd_coord_param1 sends a command message with X,Y coordinates and\none parameter to connected peers.", 0);
apply_type (0x43C8F3, "void __fastcall msg_send_cmd_coord_param1(bool32_t high_priority, cmd cmd, int8_t x, int8_t y, int16_t param1);", TINFO_DEFINITE);
cleanup("msg_send_cmd_coord_param2");set_name(0x43C928, "msg_send_cmd_coord_param2");
set_func_cmt(0x43C928, "msg_send_cmd_coord_param2 sends a command message with  X,Y coordinates and\ntwo parameters to connected peers.", 0);
apply_type (0x43C928, "void __fastcall msg_send_cmd_coord_param2(bool32_t high_priority, cmd cmd, int8_t x, int8_t y, int16_t param1, int16_t param2);", TINFO_DEFINITE);
cleanup("msg_send_cmd_coord_param3");set_name(0x43C965, "msg_send_cmd_coord_param3");
set_func_cmt(0x43C965, "msg_send_cmd_coord_param3 sends a command message with X,Y coordinates and\nthree parameters to connected peers.", 0);
apply_type (0x43C965, "void __fastcall msg_send_cmd_coord_param3(bool32_t high_priority, cmd cmd, int8_t x, int8_t y, int16_t param1, int16_t param2, int16_t param3);", TINFO_DEFINITE);
cleanup("msg_send_cmd_param1");set_name(0x43C9AB, "msg_send_cmd_param1");
set_func_cmt(0x43C9AB, "msg_send_cmd_param1 sends a command message with one parameter to connected\npeers.", 0);
apply_type (0x43C9AB, "void __fastcall msg_send_cmd_param1(bool32_t high_priority, cmd cmd, int16_t param1);", TINFO_DEFINITE);
cleanup("msg_send_cmd_param2");set_name(0x43C9D3, "msg_send_cmd_param2");
set_func_cmt(0x43C9D3, "msg_send_cmd_param2 sends a command message with two parameters to connected\npeers.", 0);
apply_type (0x43C9D3, "void __fastcall msg_send_cmd_param2(bool32_t high_priority, cmd cmd, int16_t param1, int16_t param2);", TINFO_DEFINITE);
cleanup("msg_send_cmd_param3");set_name(0x43CA04, "msg_send_cmd_param3");
set_func_cmt(0x43CA04, "msg_send_cmd_param3 sends a command message with three parameters to\nconnected peers.", 0);
apply_type (0x43CA04, "void __fastcall msg_send_cmd_param3(bool32_t high_priority, cmd cmd, int16_t param1, int16_t param2, int16_t param3);", TINFO_DEFINITE);
cleanup("msg_send_cmd_sync_quest");set_name(0x43CA3D, "msg_send_cmd_sync_quest");
set_func_cmt(0x43CA3D, "msg_send_cmd_sync_quest sends a sync quest command message to connected\npeers.", 0);
apply_type (0x43CA3D, "void __fastcall msg_send_cmd_sync_quest(bool32_t high_priority, quest_id quest_id);", TINFO_DEFINITE);
cleanup("msg_send_cmd_get_item");set_name(0x43CA84, "msg_send_cmd_get_item");
set_func_cmt(0x43CA84, "msg_send_cmd_get_item sends a get item command message to connected peers.", 0);
apply_type (0x43CA84, "void __fastcall msg_send_cmd_get_item(bool32_t high_priority, cmd cmd, int8_t player_num_master, int8_t player_num, int8_t item_num);", TINFO_DEFINITE);
cleanup("msg_send_cmd_get_item2");set_name(0x43CC09, "msg_send_cmd_get_item2");
set_func_cmt(0x43CC09, "msg_send_cmd_get_item2 sends a GetItem command message to connected peers.", 0);
apply_type (0x43CC09, "void __fastcall msg_send_cmd_get_item2(bool32_t record_tc, cmd cmd, int8_t master_player_num, int8_t player_num, CmdGetItem *src_msg);", TINFO_DEFINITE);
cleanup("msg_on_cmd_walk_to_coordinate");set_name(0x43D7FC, "msg_on_cmd_walk_to_coordinate");
set_func_cmt(0x43D7FC, "msg_on_cmd_walk_to_coordinate handles a WalkToCoordinate command.", 0);
apply_type (0x43D7FC, "int __fastcall msg_on_cmd_walk_to_coordinate(CmdCoord *msg, int player_num);", TINFO_DEFINITE);
cleanup("msg_on_add_str");set_name(0x43D84A, "msg_on_add_str");
set_func_cmt(0x43D84A, "msg_on_add_str handles an AddStr command.", 0);
apply_type (0x43D84A, "int __fastcall msg_on_add_str(CmdParam1 *msg, int player_num);", TINFO_DEFINITE);
cleanup("msg_on_add_mag");set_name(0x43D87B, "msg_on_add_mag");
set_func_cmt(0x43D87B, "msg_on_add_mag handles an AddMag command.", 0);
apply_type (0x43D87B, "int __fastcall msg_on_add_mag(CmdParam1 *msg, int player_num);", TINFO_DEFINITE);
cleanup("msg_on_add_dex");set_name(0x43D8AC, "msg_on_add_dex");
set_func_cmt(0x43D8AC, "msg_on_add_dex handles an AddDex command.", 0);
apply_type (0x43D8AC, "int __fastcall msg_on_add_dex(CmdParam1 *msg, int player_num);", TINFO_DEFINITE);
cleanup("msg_on_add_vit");set_name(0x43D8DD, "msg_on_add_vit");
set_func_cmt(0x43D8DD, "msg_on_add_vit handles an AddVit command.", 0);
apply_type (0x43D8DD, "int __fastcall msg_on_add_vit(CmdParam1 *msg, int player_num);", TINFO_DEFINITE);
cleanup("msg_on_cmd_cast_spell");set_name(0x43D90E, "msg_on_cmd_cast_spell");
set_func_cmt(0x43D90E, "msg_on_cmd_cast_spell handles a CastSpell command.", 0);
apply_type (0x43D90E, "int __fastcall msg_on_cmd_cast_spell(CmdParam1 *msg, int player_num);", TINFO_DEFINITE);
cleanup("msg_errorf");set_name(0x43D97D, "msg_errorf");
set_func_cmt(0x43D97D, "msg_errorf displays a formatted error message.", 0);
apply_type (0x43D97D, "void msg_errorf(char *format, ...);", TINFO_DEFINITE);
cleanup("msg_on_cmd_lift_item_at_coordinate");set_name(0x43D9C4, "msg_on_cmd_lift_item_at_coordinate");
set_func_cmt(0x43D9C4, "msg_on_cmd_lift_item_at_coordinate handles a LiftItemAtCoordinate command.", 0);
apply_type (0x43D9C4, "int __fastcall msg_on_cmd_lift_item_at_coordinate(CmdCoordParam1 *msg, int player_num);", TINFO_DEFINITE);
cleanup("msg_on_cmd_lift_item");set_name(0x43DA16, "msg_on_cmd_lift_item");
set_func_cmt(0x43DA16, "msg_on_cmd_lift_item handles a LiftItem command.", 0);
apply_type (0x43DA16, "int __fastcall msg_on_cmd_lift_item(CmdGetItem *msg, int player_num);", TINFO_DEFINITE);
cleanup("msg_on_cmd_loot_item_at_coordinate");set_name(0x43DD40, "msg_on_cmd_loot_item_at_coordinate");
set_func_cmt(0x43DD40, "msg_on_cmd_loot_item_at_coordinate handles a LootItemAtCoordinate command.", 0);
apply_type (0x43DD40, "int __fastcall msg_on_cmd_loot_item_at_coordinate(CmdCoordParam1 *msg, int player_num);", TINFO_DEFINITE);
cleanup("msg_parse_cmd_impact_mana_shield");set_name(0x43F830, "msg_parse_cmd_impact_mana_shield");
set_func_cmt(0x43F830, "msg_parse_cmd_impact_mana_shield parses a impact mana shield command.", 0);
apply_type (0x43F830, "int __fastcall msg_parse_cmd_impact_mana_shield(uint8_t *msg, int player_num);", TINFO_DEFINITE);
cleanup("j_pfile_cpp_init");set_name(0x4498EC, "j_pfile_cpp_init");
set_func_cmt(0x4498EC, "j_pfile_cpp_init initializes the C++ runtime of pfile.cpp.", 0);
apply_type (0x4498EC, "void j_pfile_cpp_init();", TINFO_DEFINITE);
cleanup("pfile_cpp_init");set_name(0x4498F1, "pfile_cpp_init");
set_func_cmt(0x4498F1, "pfile_cpp_init initializes the C++ runtime of pfile.cpp.", 0);
apply_type (0x4498F1, "void pfile_cpp_init();", TINFO_DEFINITE);
cleanup("pfile_init_save_directory");set_name(0x4498FC, "pfile_init_save_directory");
set_func_cmt(0x4498FC, "pfile_check_save_directory verifies that the save directory has enough free\nspace.", 0);
apply_type (0x4498FC, "void pfile_init_save_directory();", TINFO_DEFINITE);
cleanup("pfile_check_available_space");set_name(0x44995B, "pfile_check_available_space");
set_func_cmt(0x44995B, "pfile_check_free_space validates that the hard drive of the given directory\nhas at least 10 MB free space available.", 0);
apply_type (0x44995B, "void __fastcall pfile_check_available_space(char *dir);", TINFO_DEFINITE);
cleanup("pfile_write_hero");set_name(0x4499C3, "pfile_write_hero");
set_func_cmt(0x4499C3, "pfile_write_hero stores the hero to a save file.", 0);
apply_type (0x4499C3, "void pfile_write_hero();", TINFO_DEFINITE);
cleanup("pfile_get_save_num_from_name");set_name(0x449A33, "pfile_get_save_num_from_name");
set_func_cmt(0x449A33, "pfile_get_save_num_from_name returns the save number for the given character\nname.", 0);
apply_type (0x449A33, "int __fastcall pfile_get_save_num_from_name(char *name);", TINFO_DEFINITE);
cleanup("pfile_encode_hero");set_name(0x449A5B, "pfile_encode_hero");
set_func_cmt(0x449A5B, "pfile_encode_hero encodes the hero and stores it to the 'hero' file.", 0);
apply_type (0x449A5B, "void __fastcall pfile_encode_hero(Hero *hero);", TINFO_DEFINITE);
cleanup("pfile_open_archive");set_name(0x449ADF, "pfile_open_archive");
set_func_cmt(0x449ADF, "pfile_open_archive opens the specified save archive.", 0);
apply_type (0x449ADF, "bool32_t __fastcall pfile_open_archive(bool32_t a1, int save_num);", TINFO_DEFINITE);
cleanup("pfile_get_save_path");set_name(0x449B30, "pfile_get_save_path");
set_func_cmt(0x449B30, "pfile_get_save_path retrieves the save path for the given save number.", 0);
apply_type (0x449B30, "void __fastcall pfile_get_save_path(char *save_path, int size, int save_num);", TINFO_DEFINITE);
cleanup("pfile_flush");set_name(0x449BB2, "pfile_flush");
set_func_cmt(0x449BB2, "pfile_flush flushes changes to the save archive.", 0);
apply_type (0x449BB2, "void __fastcall pfile_flush(bool32_t is_single_player, int save_num);", TINFO_DEFINITE);
cleanup("pfile_create_player_description");set_name(0x449BE4, "pfile_create_player_description");
set_func_cmt(0x449BE4, "pfile_create_player_description creates a player description based on the\nsave file associated with the player name.", 0);
apply_type (0x449BE4, "bool32_t __fastcall pfile_create_player_description(char *dst, int len);", TINFO_DEFINITE);
cleanup("pfile_create_save_file");set_name(0x449C5A, "pfile_create_save_file");
set_func_cmt(0x449C5A, "pfile_create_save_file creates a save file for the given player name.", 0);
apply_type (0x449C5A, "int __fastcall pfile_create_save_file(char *name_1, char *name_2);", TINFO_DEFINITE);
cleanup("pfile_flush_W");set_name(0x449D22, "pfile_flush_W");
set_func_cmt(0x449D22, "pfile_flush_W flushes changes to the active save archive.", 0);
apply_type (0x449D22, "void pfile_flush_W();", TINFO_DEFINITE);
cleanup("pfile_ui_set_hero_infos");set_name(0x449DE3, "pfile_ui_set_hero_infos");
set_func_cmt(0x449DE3, "pfile_ui_set_hero_infos retrieves hero information from the save files.\nNote, the hidden and system file attributes are removed from each save file.", 0);
apply_type (0x449DE3, "bool32_t __stdcall pfile_ui_set_hero_infos(void (__cdecl *ui_add_hero_info)(HeroInfo *));", TINFO_DEFINITE);
cleanup("pfile_get_archive_path");set_name(0x449FAA, "pfile_get_archive_path");
set_func_cmt(0x449FAA, "pfile_get_archive_path returns the path to the save archive of the given save\nnumber.", 0);
apply_type (0x449FAA, "char *__fastcall pfile_get_archive_path(char *dst, int dst_size, int save_num);", TINFO_DEFINITE);
cleanup("pfile_read_hero");set_name(0x44A036, "pfile_read_hero");
set_func_cmt(0x44A036, "pfile_read_hero reads the 'hero' save file of the given save archive.", 0);
apply_type (0x44A036, "bool32_t __fastcall pfile_read_hero(void *archive, Hero *hero);", TINFO_DEFINITE);
cleanup("pfile_open_save_archive");set_name(0x44A158, "pfile_open_save_archive");
set_func_cmt(0x44A158, "pfile_open_save_archive opens the save archive with the specified save number.", 0);
apply_type (0x44A158, "void *__fastcall pfile_open_save_archive(int *unused, int save_num);", TINFO_DEFINITE);
cleanup("pfile_SFileCloseArchive");set_name(0x44A192, "pfile_SFileCloseArchive");
set_func_cmt(0x44A192, "pfile_SFileCloseArchive closes the save archive.", 0);
apply_type (0x44A192, "void __fastcall pfile_SFileCloseArchive(void *archive);", TINFO_DEFINITE);
cleanup("pfile_archive_contains_game");set_name(0x44A199, "pfile_archive_contains_game");
set_func_cmt(0x44A199, "pfile_archive_contains_game reports whether the save archive contains the 'game' save file.", 0);
apply_type (0x44A199, "bool32_t __fastcall pfile_archive_contains_game(void *archive);", TINFO_DEFINITE);
cleanup("pfile_ui_set_class_stats");set_name(0x44A1CC, "pfile_ui_set_class_stats");
set_func_cmt(0x44A1CC, "pfile_ui_set_class_stats retrieves the starting stats for the given player\nclass.", 0);
apply_type (0x44A1CC, "bool32_t __stdcall pfile_ui_set_class_stats(int player_class_nr, Stats_i16 *class_stats);", TINFO_DEFINITE);
cleanup("pfile_get_player_class");set_name(0x44A210, "pfile_get_player_class");
set_func_cmt(0x44A210, "pfile_get_player_class returns the player class of the player.", 0);
apply_type (0x44A210, "player_class __fastcall pfile_get_player_class(int player_class_nr);", TINFO_DEFINITE);
cleanup("pfile_ui_create_save");set_name(0x44A220, "pfile_ui_create_save");
set_func_cmt(0x44A220, "pfile_ui_create_save creates a save file based on the given hero information.", 0);
apply_type (0x44A220, "bool32_t __stdcall pfile_ui_create_save(HeroInfo *hero_info);", TINFO_DEFINITE);
cleanup("pfile_get_file_name");set_name(0x44A2FF, "pfile_get_file_name");
set_func_cmt(0x44A2FF, "pfile_get_file_name retrieves the name of the permanent save file of the specified level.", 0);
apply_type (0x44A2FF, "bool32_t __stdcall pfile_get_file_name(int lvl, char *dst);", TINFO_DEFINITE);
cleanup("pfile_ui_delete_save");set_name(0x44A356, "pfile_ui_delete_save");
set_func_cmt(0x44A356, "pfile_ui_delete_save deletes the save file of the given character.", 0);
apply_type (0x44A356, "bool32_t __stdcall pfile_ui_delete_save(HeroInfo *hero_info);", TINFO_DEFINITE);
cleanup("pfile_read_player_from_save");set_name(0x44A3A0, "pfile_read_player_from_save");
set_func_cmt(0x44A3A0, "pfile_read_player_from_save reads player information from the save file of\nthe specified character name.", 0);
apply_type (0x44A3A0, "void pfile_read_player_from_save();", TINFO_DEFINITE);
cleanup("pfile_get_temp_level_name");set_name(0x44A419, "pfile_get_temp_level_name");
set_func_cmt(0x44A419, "pfile_get_temp_level_name retrieves the name of the temporary level save\nfile.", 0);
apply_type (0x44A419, "void __fastcall pfile_get_temp_level_name(char *dst);", TINFO_DEFINITE);
cleanup("pfile_get_perm_level_name");set_name(0x44A463, "pfile_get_perm_level_name");
set_func_cmt(0x44A463, "pfile_get_perm_level_name retrieves the name of the permanent level save\nfile.", 0);
apply_type (0x44A463, "void __fastcall pfile_get_perm_level_name(char *dst);", TINFO_DEFINITE);
cleanup("pfile_get_game_name");set_name(0x44A4E9, "pfile_get_game_name");
set_func_cmt(0x44A4E9, "pfile_get_game_name retrieves the name of the game state save file.", 0);
apply_type (0x44A4E9, "void __fastcall pfile_get_game_name(char *dst);", TINFO_DEFINITE);
cleanup("pfile_remove_temp_files");set_name(0x44A512, "pfile_remove_temp_files");
set_func_cmt(0x44A512, "pfile_remove_temp_files removes temporary save files.", 0);
apply_type (0x44A512, "void pfile_remove_temp_files();", TINFO_DEFINITE);
cleanup("pfile_get_temp_name");set_name(0x44A563, "pfile_get_temp_name");
set_func_cmt(0x44A563, "pfile_get_temp_name retrieves the name of the temporary save file of the\nspecified level.", 0);
apply_type (0x44A563, "bool32_t __stdcall pfile_get_temp_name(int a1, char *dst);", TINFO_DEFINITE);
cleanup("pfile_rename_temp_to_perm");set_name(0x44A598, "pfile_rename_temp_to_perm");
set_func_cmt(0x44A598, "pfile_rename_temp_to_perm renames temporary save files to permanent save\nfiles.", 0);
apply_type (0x44A598, "void pfile_rename_temp_to_perm();", TINFO_DEFINITE);
cleanup("pfile_get_perm_name");set_name(0x44A644, "pfile_get_perm_name");
set_func_cmt(0x44A644, "pfile_get_perm_name retrieves the name of the permanent save file of the\nspecified level.", 0);
apply_type (0x44A644, "bool32_t __stdcall pfile_get_perm_name(int lvl, char *dst);", TINFO_DEFINITE);
cleanup("pfile_write_save_file");set_name(0x44A679, "pfile_write_save_file");
set_func_cmt(0x44A679, "pfile_write_save_file stores the save file at the specific location.", 0);
apply_type (0x44A679, "void __fastcall pfile_write_save_file(char *path, void *save_ptr, int size, int size_64);", TINFO_DEFINITE);
cleanup("pfile_strcpy");set_name(0x44A727, "pfile_strcpy");
set_func_cmt(0x44A727, "pfile_strcpy copies the source string to the destination buffer.", 0);
apply_type (0x44A727, "void __fastcall pfile_strcpy(char *dst, char *src);", TINFO_DEFINITE);
cleanup("pfile_read");set_name(0x44A731, "pfile_read");
set_func_cmt(0x44A731, "pfile_read reads the contents of the specified save file.", 0);
apply_type (0x44A731, "uint8_t * __fastcall pfile_read(char *path, int *len);", TINFO_DEFINITE);
cleanup("pfile_update");set_name(0x44A8B3, "pfile_update");
set_func_cmt(0x44A8B3, "pfile_update stores a periodic update to the save file each minute.", 0);
apply_type (0x44A8B3, "void __fastcall pfile_update(bool32_t force_save);", TINFO_DEFINITE);
cleanup("drlg_l2_fix_lockout");set_name(0x40D379, "drlg_l2_fix_lockout");
set_func_cmt(0x40D379, "drlg_l2_fix_lockout fixes any unreachable areas.", 0);
apply_type (0x40D379, "void drlg_l2_fix_lockout();", TINFO_DEFINITE);
cleanup("drlg_l2_fix_doors");set_name(0x40D4CC, "drlg_l2_fix_doors");
set_func_cmt(0x40D4CC, "drlg_l2_fix_doors fixes door tile IDs after dungeon generation.", 0);
apply_type (0x40D4CC, "void drlg_l2_fix_doors();", TINFO_DEFINITE);
cleanup("drlg_l2_init_piece_id_map");set_name(0x40D6C1, "drlg_l2_init_piece_id_map");
set_func_cmt(0x40D6C1, "drlg_l2_init_piece_id_map initializes the dungeon piece ID map.", 0);
apply_type (0x40D6C1, "void drlg_l2_init_piece_id_map();", TINFO_DEFINITE);
cleanup("drlg_l2_create_dungeon");set_name(0x40D888, "drlg_l2_create_dungeon");
set_func_cmt(0x40D888, "drlg_l2_create_dungeon creates a random catacombs dungeon based on the given\nseed and level entry.", 0);
apply_type (0x40D888, "void __fastcall drlg_l2_create_dungeon(uint32_t seed, int entry);", TINFO_DEFINITE);
cleanup("drlg_l2_load_single_player_quest_dun");set_name(0x40D94F, "drlg_l2_load_single_player_quest_dun");
set_func_cmt(0x40D94F, "drlg_l2_load_single_player_quest_dun loads tile IDs from the dungeon file of\nthe active single player quest level.", 0);
apply_type (0x40D94F, "void drlg_l2_load_single_player_quest_dun();", TINFO_DEFINITE);
cleanup("drlg_l2_free_single_player_quest_dun");set_name(0x40D9A4, "drlg_l2_free_single_player_quest_dun");
set_func_cmt(0x40D9A4, "drlg_l2_free_single_player_quest_dun frees the dungeon file of the active\nquest level.", 0);
apply_type (0x40D9A4, "void drlg_l2_free_single_player_quest_dun();", TINFO_DEFINITE);
cleanup("drlg_l2_generate_dungeon");set_name(0x40D9B6, "drlg_l2_generate_dungeon");
set_func_cmt(0x40D9B6, "drlg_l2_generate_dungeon generates a cathedral dungeon based on the given\nlevel entry.", 0);
apply_type (0x40D9B6, "void __fastcall drlg_l2_generate_dungeon(int entry);", TINFO_DEFINITE);
cleanup("drlg_l2_place_miniset");set_name(0x40E074, "drlg_l2_place_miniset");
set_func_cmt(0x40E074, "drlg_l2_place_miniset places the given miniset of tile IDs.", 0);
apply_type (0x40E074, "bool32_t __fastcall drlg_l2_place_miniset(uint8_t *miniset, int tmin, int tmax, int cx, int cy, bool32_t set_view, int ldir);", TINFO_DEFINITE);
cleanup("drlg_l2_place_rand_miniset");set_name(0x40E2D1, "drlg_l2_place_rand_miniset");
set_func_cmt(0x40E2D1, "drlg_l2_place_rand_miniset places the given miniset of tile IDs with a\ncertain probability.", 0);
apply_type (0x40E2D1, "void __fastcall drlg_l2_place_rand_miniset(uint8_t *miniset, int probability);", TINFO_DEFINITE);
cleanup("drlg_l2_decorate");set_name(0x40E49C, "drlg_l2_decorate");
set_func_cmt(0x40E49C, "drlg_l2_decorate decorates the dungeon.", 0);
apply_type (0x40E49C, "void drlg_l2_decorate();", TINFO_DEFINITE);
cleanup("drlg_l2_init_shadows");set_name(0x40E59C, "drlg_l2_init_shadows");
set_func_cmt(0x40E59C, "drlg_l2_init_shadows initializes arch and bar shadows.", 0);
apply_type (0x40E59C, "void drlg_l2_init_shadows();", TINFO_DEFINITE);
cleanup("drlg_l2_init_quest_dun");set_name(0x40E66B, "drlg_l2_init_quest_dun");
set_func_cmt(0x40E66B, "drlg_l2_init_quest_dun initializes tile IDs based on the loaded quest dungeon\nfile.", 0);
apply_type (0x40E66B, "void __fastcall drlg_l2_init_quest_dun(int tx, int ty);", TINFO_DEFINITE);
cleanup("drlg_l2_fix_tiles");set_name(0x40E6F0, "drlg_l2_fix_tiles");
set_func_cmt(0x40E6F0, "drlg_l2_fix_tiles fixes tile IDs of wall edges.", 0);
apply_type (0x40E6F0, "void drlg_l2_fix_tiles();", TINFO_DEFINITE);
cleanup("drlg_l2_gen_dungeon");set_name(0x40E74F, "drlg_l2_gen_dungeon");
set_func_cmt(0x40E74F, "drlg_l2_gen_dungeon tries to generate a cathedral dungeon.", 0);
apply_type (0x40E74F, "bool32_t drlg_l2_gen_dungeon();", TINFO_DEFINITE);
cleanup("drlg_l2_floor_transparency");set_name(0x40FB6C, "drlg_l2_floor_transparency");
set_func_cmt(0x40FB6C, "drlg_l2_floor_transparency adds transparency to concealing walls.", 0);
apply_type (0x40FB6C, "void drlg_l2_floor_transparency();", TINFO_DEFINITE);
cleanup("drlg_l2_fix_transparency");set_name(0x40FDCB, "drlg_l2_fix_transparency");
set_func_cmt(0x40FDCB, "drlg_l2_fix_transparency fixes transparency close to dirt tile IDs after\ndungeon generation.", 0);
apply_type (0x40FDCB, "void drlg_l2_fix_transparency();", TINFO_DEFINITE);
cleanup("drlg_l2_fix_dirt");set_name(0x40FE53, "drlg_l2_fix_dirt");
set_func_cmt(0x40FE53, "drlg_l2_fix_dirt fixes dirt tile IDs after dungeon generation.", 0);
apply_type (0x40FE53, "void drlg_l2_fix_dirt();", TINFO_DEFINITE);
cleanup("drlg_l2_init_arches");set_name(0x40FEBF, "drlg_l2_init_arches");
set_func_cmt(0x40FEBF, "drlg_l2_init_arches initializes arches.", 0);
apply_type (0x40FEBF, "void drlg_l2_init_arches();", TINFO_DEFINITE);
cleanup("setmaps_get_object_num");set_name(0x456625, "setmaps_get_object_num");
set_func_cmt(0x456625, "setmaps_get_object_num returns the active object numer at the given\ncoordinate.", 0);
apply_type (0x456625, "int __fastcall setmaps_get_object_num(int x, int y);", TINFO_DEFINITE);
cleanup("setmaps_add_objects_on_skeleton_kings_lair");set_name(0x45666B, "setmaps_add_objects_on_skeleton_kings_lair");
set_func_cmt(0x45666B, "setmaps_add_objects_on_skeleton_kings_lair adds objects to Skeleton King's\nLair.", 0);
apply_type (0x45666B, "void setmaps_add_objects_on_skeleton_kings_lair();", TINFO_DEFINITE);
cleanup("setmaps_add_objects_bone_chamber");set_name(0x45671A, "setmaps_add_objects_bone_chamber");
set_func_cmt(0x45671A, "setmaps_add_objects_bone_chamber adds objects to the Bone Chamber.", 0);
apply_type (0x45671A, "void setmaps_add_objects_bone_chamber();", TINFO_DEFINITE);
cleanup("setmaps_add_objects_archbishop_lazarus_lair");set_name(0x456755, "setmaps_add_objects_archbishop_lazarus_lair");
set_func_cmt(0x456755, "setmaps_add_objects_archbishop_lazarus_lair adds objects to Archbishop\nLazarus' Lair.", 0);
apply_type (0x456755, "void setmaps_add_objects_archbishop_lazarus_lair();", TINFO_DEFINITE);
cleanup("setmaps_load_transparency");set_name(0x4567AD, "setmaps_load_transparency");
set_func_cmt(0x4567AD, "setmaps_load_transparency loads transparency of the map from the given DUN\nfile.", 0);
apply_type (0x4567AD, "void __fastcall setmaps_load_transparency(char *dun_path);", TINFO_DEFINITE);
cleanup("setmaps_load_quest_level");set_name(0x456819, "setmaps_load_quest_level");
set_func_cmt(0x456819, "setmaps_load_quest_level loads the map of the active quest level.", 0);
apply_type (0x456819, "void setmaps_load_quest_level();", TINFO_DEFINITE);
cleanup("j_palette_cpp_init");set_name(0x448DF5, "j_palette_cpp_init");
set_func_cmt(0x448DF5, "j_palette_cpp_init initializes the C++ runtime of palette.cpp.", 0);
apply_type (0x448DF5, "void j_palette_cpp_init();", TINFO_DEFINITE);
cleanup("palette_cpp_init");set_name(0x448DFA, "palette_cpp_init");
set_func_cmt(0x448DFA, "palette_cpp_init initializes the C++ runtime of palette.cpp.", 0);
apply_type (0x448DFA, "void palette_cpp_init();", TINFO_DEFINITE);
cleanup("palette_save_gamme");set_name(0x448E05, "palette_save_gamme");
set_func_cmt(0x448E05, "palette_save_gamme stores the gamma correction and colour cycling settings.", 0);
apply_type (0x448E05, "void palette_save_gamme();", TINFO_DEFINITE);
cleanup("palette_init");set_name(0x448E33, "palette_init");
set_func_cmt(0x448E33, "palette_init initializes the palette.", 0);
apply_type (0x448E33, "void palette_init();", TINFO_DEFINITE);
cleanup("palette_load_gamma");set_name(0x448EAB, "palette_load_gamma");
set_func_cmt(0x448EAB, "palette_load_gamme loads the gamma correction and colour cycling settings.", 0);
apply_type (0x448EAB, "void palette_load_gamma();", TINFO_DEFINITE);
cleanup("palette_load_system_palette");set_name(0x448F20, "palette_load_system_palette");
set_func_cmt(0x448F20, "palette_load_system_palette loads the system palette.", 0);
apply_type (0x448F20, "void palette_load_system_palette();", TINFO_DEFINITE);
cleanup("palette_load");set_name(0x448FC9, "palette_load");
set_func_cmt(0x448FC9, "palette_load loads the given palette file.", 0);
apply_type (0x448FC9, "void __fastcall palette_load(char *pal_path);", TINFO_DEFINITE);
cleanup("palette_load_rand_level_palette");set_name(0x449025, "palette_load_rand_level_palette");
set_func_cmt(0x449025, "palette_load_rand_level_palette loads a random palette for the given dungeon\ntype.", 0);
apply_type (0x449025, "void __fastcall palette_load_rand_level_palette(dungeon_type dtype);", TINFO_DEFINITE);
cleanup("palette_realize");set_name(0x44906C, "palette_realize");
set_func_cmt(0x44906C, "palette_realize updates the system palette.", 0);
apply_type (0x44906C, "void palette_realize();", TINFO_DEFINITE);
cleanup("palette_inc_gamma");set_name(0x449097, "palette_inc_gamma");
set_func_cmt(0x449097, "palette_inc_gamma increases the gamma correction.", 0);
apply_type (0x449097, "void palette_inc_gamma();", TINFO_DEFINITE);
cleanup("palette_update");set_name(0x4490D0, "palette_update");
set_func_cmt(0x4490D0, "palette_update updates the system palette.", 0);
apply_type (0x4490D0, "void palette_update();", TINFO_DEFINITE);
cleanup("palette_apply_gamma_correction");set_name(0x449107, "palette_apply_gamma_correction");
set_func_cmt(0x449107, "palette_apply_gamma_correction copies the first n entries of the source\npalette to the destination palette with applied gamma correction.", 0);
apply_type (0x449107, "void __fastcall palette_apply_gamma_correction(PALETTEENTRY *dst, PALETTEENTRY *src, int n);", TINFO_DEFINITE);
cleanup("palette_dec_gamma");set_name(0x4491D0, "palette_dec_gamma");
set_func_cmt(0x4491D0, "palette_dec_gamma decreases the gamma correction.", 0);
apply_type (0x4491D0, "void palette_dec_gamma();", TINFO_DEFINITE);
cleanup("palette_update_gamma");set_name(0x449209, "palette_update_gamma");
set_func_cmt(0x449209, "palette_update_gamma updates the gamma of the palette. A zero value returns\nthe current gamma.", 0);
apply_type (0x449209, "int __fastcall palette_update_gamma(int gamma);", TINFO_DEFINITE);
cleanup("palette_set_black_palette");set_name(0x44923E, "palette_set_black_palette");
set_func_cmt(0x44923E, "palette_set_black_palette sets the active palette to black.", 0);
apply_type (0x44923E, "void palette_set_black_palette();", TINFO_DEFINITE);
cleanup("palette_set_brightness");set_name(0x449245, "palette_set_brightness");
set_func_cmt(0x449245, "palette_set_brightness sets the brightness of the active palette.", 0);
apply_type (0x449245, "void __fastcall palette_set_brightness(int brightness);", TINFO_DEFINITE);
cleanup("palette_brightness_fade_in");set_name(0x4492B0, "palette_brightness_fade_in");
set_func_cmt(0x4492B0, "palette_brightness_fade_in increases the brightness of the active palette by\nthe specified increment size to create a fade in effect.", 0);
apply_type (0x4492B0, "void __fastcall palette_brightness_fade_in(int inc);", TINFO_DEFINITE);
cleanup("palette_brightness_fade_out");set_name(0x449306, "palette_brightness_fade_out");
set_func_cmt(0x449306, "palette_brightness_fade_out decreases the brightness of the active palette by\nthe specified decrement size to create a fade out effect.", 0);
apply_type (0x449306, "void __fastcall palette_brightness_fade_out(int dec);", TINFO_DEFINITE);
cleanup("palette_update_caves");set_name(0x449336, "palette_update_caves");
set_func_cmt(0x449336, "palette_update_caves updates the palettes of Caves.", 0);
apply_type (0x449336, "void palette_update_caves();", TINFO_DEFINITE);
cleanup("palette_update_quest_palette");set_name(0x449398, "palette_update_quest_palette");
set_func_cmt(0x449398, "palette_update_quest_palette updates palette entries related to the quest\nlevel.", 0);
apply_type (0x449398, "void __fastcall palette_update_quest_palette(int n);", TINFO_DEFINITE);
cleanup("palette_get_colour_cycling");set_name(0x4493C6, "palette_get_colour_cycling");
set_func_cmt(0x4493C6, "palette_get_colour_cycling reports whether colour cycling is enabled.", 0);
apply_type (0x4493C6, "bool32_t palette_get_colour_cycling();", TINFO_DEFINITE);
cleanup("palette_set_color_cycling");set_name(0x4493CC, "palette_set_color_cycling");
set_func_cmt(0x4493CC, "palette_set_colour_cycling sets the colour cycling to enabled or disabled.", 0);
apply_type (0x4493CC, "void __fastcall palette_set_color_cycling(bool32_t enabled);", TINFO_DEFINITE);
cleanup("encrypt_decrypt_block");set_name(0x415F43, "encrypt_decrypt_block");
set_func_cmt(0x415F43, "encrypt_decrypt_block decrypts the given block.", 0);
apply_type (0x415F43, "void __fastcall encrypt_decrypt_block(void *block, int size, uint32_t key);", TINFO_DEFINITE);
cleanup("encrypt_encrypt_block");set_name(0x415F8F, "encrypt_encrypt_block");
set_func_cmt(0x415F8F, "encrypt_encrypt_block encrypts the given block.", 0);
apply_type (0x415F8F, "void __fastcall encrypt_encrypt_block(void *block, int size, uint32_t key);", TINFO_DEFINITE);
cleanup("encrypt_hash");set_name(0x415FDF, "encrypt_hash");
set_func_cmt(0x415FDF, "encrypt_hash returns the hash of the given string.", 0);
apply_type (0x415FDF, "uint32_t __fastcall encrypt_hash(char *s, int type);", TINFO_DEFINITE);
cleanup("encrypt_init_lookup_table");set_name(0x41602E, "encrypt_init_lookup_table");
set_func_cmt(0x41602E, "encrypt_init_lookup_table initializes the lookup table used for hashing with\npseudo-random numbers based on an LCG with a=125, c=3 and m=0x2AAAAB.\nReferences:\n   * https://en.wikipedia.org/wiki/Linear_congruential_generator", 0);
apply_type (0x41602E, "void encrypt_init_lookup_table();", TINFO_DEFINITE);
cleanup("encrypt_compress");set_name(0x41609D, "encrypt_compress");
set_func_cmt(0x41609D, "encrypt_compress compresses the given buffer using the PKWARE Data\nCompression Library.", 0);
apply_type (0x41609D, "int __fastcall encrypt_compress(void *buf, int size);", TINFO_DEFINITE);
cleanup("encrypt_pkware_read");set_name(0x416133, "encrypt_pkware_read");
set_func_cmt(0x416133, "encrypt_pkware_read reads data from the parameter and writes it to the\nbuffer.", 0);
apply_type (0x416133, "int __cdecl encrypt_pkware_read(void *buf, int *size, void *param);", TINFO_DEFINITE);
cleanup("encrypt_pkware_write");set_name(0x416167, "encrypt_pkware_write");
set_func_cmt(0x416167, "encrypt_pkware_write reads data from the buffer and writes it to the given\nparameter.", 0);
apply_type (0x416167, "int __cdecl encrypt_pkware_write(void *buf, int *size, void *param);", TINFO_DEFINITE);
cleanup("encrypt_decompress");set_name(0x41618E, "encrypt_decompress");
set_func_cmt(0x41618E, "encrypt_compress decompresses the given buffer using the PKWARE Data\nCompression Library.", 0);
apply_type (0x41618E, "void __fastcall encrypt_decompress(void *param, int a2, int size);", TINFO_DEFINITE);
cleanup("themes_fit_object_5x5");set_name(0x45C993, "themes_fit_object_5x5");
set_func_cmt(0x45C993, "themes_fit_object_5x5 checks if there is a 5x5 area to fit the theme object.", 0);
apply_type (0x45C993, "bool32_t __fastcall themes_fit_object_5x5(int theme_num);", TINFO_DEFINITE);
cleanup("themes_fit_object_3x3");set_name(0x45CB88, "themes_fit_object_3x3");
set_func_cmt(0x45CB88, "themes_fit_object_3x3 checks if there is a 3x3 area to fit the theme object.", 0);
apply_type (0x45CB88, "bool32_t __fastcall themes_fit_object_3x3(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_barrel");set_name(0x45D1C2, "themes_init_barrel");
set_func_cmt(0x45D1C2, "themes_init_barrel initializes the barrel theme.", 0);
apply_type (0x45D1C2, "void __fastcall themes_init_barrel(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_shrine");set_name(0x45D29A, "themes_init_shrine");
set_func_cmt(0x45D29A, "themes_init_shrine initializes the shrine theme.", 0);
apply_type (0x45D29A, "void __fastcall themes_init_shrine(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_monster_pit");set_name(0x45D34D, "themes_init_monster_pit");
set_func_cmt(0x45D34D, "themes_init_monster_pit initializes the monster pit theme.", 0);
apply_type (0x45D34D, "void __fastcall themes_init_monster_pit(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_skeleton_room");set_name(0x45D3E6, "themes_init_skeleton_room");
set_func_cmt(0x45D3E6, "themes_init_skeleton_room initializes the skeleton room theme.", 0);
apply_type (0x45D3E6, "void __fastcall themes_init_skeleton_room(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_treasure");set_name(0x45D5BC, "themes_init_treasure");
set_func_cmt(0x45D5BC, "themes_init_treasure initializes the treasure theme.", 0);
apply_type (0x45D5BC, "void __fastcall themes_init_treasure(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_library");set_name(0x45D707, "themes_init_library");
set_func_cmt(0x45D707, "themes_init_library initializes the library theme.", 0);
apply_type (0x45D707, "void __fastcall themes_init_library(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_torture");set_name(0x45D88A, "themes_init_torture");
set_func_cmt(0x45D88A, "themes_init_torture initializes the torture theme.", 0);
apply_type (0x45D88A, "void __fastcall themes_init_torture(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_blood_fountain");set_name(0x45D95D, "themes_init_blood_fountain");
set_func_cmt(0x45D95D, "themes_init_blood_fountain initializes the blood fountain theme.", 0);
apply_type (0x45D95D, "void __fastcall themes_init_blood_fountain(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_decapitated");set_name(0x45D9A3, "themes_init_decapitated");
set_func_cmt(0x45D9A3, "themes_init_decapitated initializes the decapitated theme.", 0);
apply_type (0x45D9A3, "void __fastcall themes_init_decapitated(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_purifying_fountain");set_name(0x45DA76, "themes_init_purifying_fountain");
set_func_cmt(0x45DA76, "themes_init_purifying_fountain initializes the purifying fountain theme.", 0);
apply_type (0x45DA76, "void __fastcall themes_init_purifying_fountain(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_armor_stand");set_name(0x45DABC, "themes_init_armor_stand");
set_func_cmt(0x45DABC, "themes_init_armor_stand initializes the armor stand theme.", 0);
apply_type (0x45DABC, "void __fastcall themes_init_armor_stand(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_goat_shrine");set_name(0x45DBAD, "themes_init_goat_shrine");
set_func_cmt(0x45DBAD, "themes_init_goat_shrine initializes the goat shrine theme.", 0);
apply_type (0x45DBAD, "void __fastcall themes_init_goat_shrine(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_cauldron");set_name(0x45DC7B, "themes_init_cauldron");
set_func_cmt(0x45DC7B, "themes_init_cauldron initializes the cauldron theme.", 0);
apply_type (0x45DC7B, "void __fastcall themes_init_cauldron(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_murky_fountain");set_name(0x45DCC1, "themes_init_murky_fountain");
set_func_cmt(0x45DCC1, "themes_init_murky_fountain initializes the murky fountain theme.", 0);
apply_type (0x45DCC1, "void __fastcall themes_init_murky_fountain(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_tear_fountain");set_name(0x45DD07, "themes_init_tear_fountain");
set_func_cmt(0x45DD07, "themes_init_tear_fountain initializes the tear fountain theme.", 0);
apply_type (0x45DD07, "void __fastcall themes_init_tear_fountain(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_burning_cross");set_name(0x45DD4D, "themes_init_burning_cross");
set_func_cmt(0x45DD4D, "themes_init_burning_cross initializes the burning cross theme.", 0);
apply_type (0x45DD4D, "void __fastcall themes_init_burning_cross(int theme_num);", TINFO_DEFINITE);
cleanup("themes_init_weapon_rack");set_name(0x45DE20, "themes_init_weapon_rack");
set_func_cmt(0x45DE20, "themes_init_weapon_rack initializes the weapon rack theme.", 0);
apply_type (0x45DE20, "void __fastcall themes_init_weapon_rack(int theme_num);", TINFO_DEFINITE);
cleanup("themes_update_transparency");set_name(0x45DF11, "themes_update_transparency");
set_func_cmt(0x45DF11, "themes_update_transparency updates the transparency map, setting each\ntransparent value to 1.", 0);
apply_type (0x45DF11, "void themes_update_transparency();", TINFO_DEFINITE);
cleanup("themes_create_theme_rooms");set_name(0x45DF31, "themes_create_theme_rooms");
set_func_cmt(0x45DF31, "themes_create_theme_rooms adds thematic elements to rooms.", 0);
apply_type (0x45DF31, "void themes_create_theme_rooms();", TINFO_DEFINITE);
cleanup("j_monster_cpp_init");set_name(0x430FDF, "j_monster_cpp_init");
set_func_cmt(0x430FDF, "j_monster_cpp_init initializes the C++ runtime of monster.cpp.", 0);
apply_type (0x430FDF, "void j_monster_cpp_init();", TINFO_DEFINITE);
cleanup("monster_cpp_init");set_name(0x430FE4, "monster_cpp_init");
set_func_cmt(0x430FE4, "monster_cpp_init initializes the C++ runtime of monster.cpp.", 0);
apply_type (0x430FE4, "void monster_cpp_init();", TINFO_DEFINITE);
cleanup("inv_cleanup");set_name(0x41B814, "inv_cleanup");
set_func_cmt(0x41B814, "inv_cleanup releases the resources used by the inventory.", 0);
apply_type (0x41B814, "void inv_cleanup();", TINFO_DEFINITE);
cleanup("inv_load_graphics");set_name(0x41B826, "inv_load_graphics");
set_func_cmt(0x41B826, "inv_load_graphics loads the inventory graphics of the active player class.", 0);
apply_type (0x41B826, "void inv_load_graphics();", TINFO_DEFINITE);
cleanup("inv_draw_inventory");set_name(0x41B8C4, "inv_draw_inventory");
set_func_cmt(0x41B8C4, "inv_draw_inventory renders the inventory on screen.", 0);
apply_type (0x41B8C4, "void inv_draw_inventory();", TINFO_DEFINITE);
cleanup("inv_draw_belt");set_name(0x41C060, "inv_draw_belt");
set_func_cmt(0x41C060, "inv_draw_belt renders the belt on screen.", 0);
apply_type (0x41C060, "void inv_draw_belt();", TINFO_DEFINITE);
cleanup("spell_get_mana_cost");set_name(0x45744E, "spell_get_mana_cost");
set_func_cmt(0x45744E, "spell_get_mana_cost returns the mana cost of the given spell.", 0);
apply_type (0x45744E, "int __fastcall spell_get_mana_cost(int player_num, spell_id spell_id);", TINFO_DEFINITE);
cleanup("spell_use_mana");set_name(0x45753A, "spell_use_mana");
set_func_cmt(0x45753A, "spell_use_mana spends the mana required to cast the given spell.", 0);
apply_type (0x45753A, "void __fastcall spell_use_mana(int player_num, spell_id spell_id);", TINFO_DEFINITE);
cleanup("spell_can_cast");set_name(0x457584, "spell_can_cast");
set_func_cmt(0x457584, "spell_can_cast reports whether the player may cast the specified spell.", 0);
apply_type (0x457584, "bool32_t __fastcall spell_can_cast(int player_num, int spell_id, int spell_type, bool32_t mana_only);", TINFO_DEFINITE);
cleanup("spell_cast");set_name(0x4575D5, "spell_cast");
set_func_cmt(0x4575D5, "spell_cast casts the given spell.", 0);
apply_type (0x4575D5, "void __fastcall spell_cast(int player_num, spell_id spell_id, int x, int y, int target_x, int target_y, int target_num, int spell_lvl);", TINFO_DEFINITE);
cleanup("spell_cast_resurrect");set_name(0x4576B1, "spell_cast_resurrect");
set_func_cmt(0x4576B1, "spell_cast_resurrect casts resurrect on the target player.", 0);
apply_type (0x4576B1, "void __fastcall spell_cast_resurrect(int player_num, int target_player_num);", TINFO_DEFINITE);
cleanup("spell_resurrect");set_name(0x4577CB, "spell_resurrect");
set_func_cmt(0x4577CB, "spell_resurrect resurrects the given player.", 0);
apply_type (0x4577CB, "void __fastcall spell_resurrect(int player_num);", TINFO_DEFINITE);
cleanup("spell_cast_heal_other");set_name(0x4578EE, "spell_cast_heal_other");
set_func_cmt(0x4578EE, "spell_cast_heal_other casts heal other on the target player.", 0);
apply_type (0x4578EE, "void __fastcall spell_cast_heal_other(int player_num, int target_player_num);", TINFO_DEFINITE);
cleanup("j_dthread_cpp_init_1");set_name(0x415098, "j_dthread_cpp_init_1");
set_func_cmt(0x415098, "j_dthread_cpp_init_1 initializes the C++ runtime of dthread.cpp.", 0);
apply_type (0x415098, "void j_dthread_cpp_init_1();", TINFO_DEFINITE);
cleanup("dthread_cpp_init_1");set_name(0x41509D, "dthread_cpp_init_1");
set_func_cmt(0x41509D, "dthread_cpp_init_1 initializes the C++ runtime of dthread.cpp.", 0);
apply_type (0x41509D, "void dthread_cpp_init_1();", TINFO_DEFINITE);
cleanup("dthread_cpp_init_2");set_name(0x4150A8, "dthread_cpp_init_2");
set_func_cmt(0x4150A8, "dthread_cpp_init_2 initializes the C++ runtime of dthread.cpp.", 0);
apply_type (0x4150A8, "void dthread_cpp_init_2();", TINFO_DEFINITE);
cleanup("dthread_init_mutex");set_name(0x4150B2, "dthread_init_mutex");
set_func_cmt(0x4150B2, "dthread_init_mutex initializes the delta thread mutex.", 0);
apply_type (0x4150B2, "void dthread_init_mutex();", TINFO_DEFINITE);
cleanup("dthread_cleanup_mutex_atexit");set_name(0x4150BE, "dthread_cleanup_mutex_atexit");
set_func_cmt(0x4150BE, "dthread_cleanup_mutex_atexit terminates the delta thread mutex at exit.", 0);
apply_type (0x4150BE, "void dthread_cleanup_mutex_atexit();", TINFO_DEFINITE);
cleanup("dthread_cleanup_mutex");set_name(0x4150CA, "dthread_cleanup_mutex");
set_func_cmt(0x4150CA, "dthread_cleanup_mutex terminates the delta thread mutex.", 0);
apply_type (0x4150CA, "void dthread_cleanup_mutex();", TINFO_DEFINITE);
cleanup("dthread_remove_player");set_name(0x4150D6, "dthread_remove_player");
set_func_cmt(0x4150D6, "dthread_remove_player removes the given player from the list of connected\npeers.", 0);
apply_type (0x4150D6, "void __fastcall dthread_remove_player(int player_num);", TINFO_DEFINITE);
cleanup("dthread_send_delta");set_name(0x415109, "dthread_send_delta");
set_func_cmt(0x415109, "dthread_send_delta sends the given delta packet to connected peers.", 0);
apply_type (0x415109, "void __fastcall dthread_send_delta(int player_num, cmd cmd, void *src, int len);", TINFO_DEFINITE);
cleanup("dthread_start");set_name(0x415186, "dthread_start");
set_func_cmt(0x415186, "dthread_start starts the delta thread.", 0);
apply_type (0x415186, "void dthread_start();", TINFO_DEFINITE);
cleanup("dthread_handler");set_name(0x4151F3, "dthread_handler");
set_func_cmt(0x4151F3, "dthread_handler is the delta thread which synchronizes delta messages with\nconnected peers.", 0);
apply_type (0x4151F3, "int __stdcall dthread_handler(void *a1);", TINFO_DEFINITE);
cleanup("dthread_cleanup");set_name(0x4152C0, "dthread_cleanup");
set_func_cmt(0x4152C0, "dthread_cleanup terminates the delta thread.", 0);
apply_type (0x4152C0, "void dthread_cleanup();", TINFO_DEFINITE);
cleanup("appfat_get_error_string");set_name(0x40102A, "appfat_get_error_string");
set_func_cmt(0x40102A, "appfat_get_error_string returns a formatted error message based on the given\nerror code.", 0);
apply_type (0x40102A, "char * __fastcall appfat_get_error_string(uint32_t error_code);", TINFO_DEFINITE);
cleanup("appfat_get_DD_error_string");set_name(0x4010CE, "appfat_get_DD_error_string");
set_func_cmt(0x4010CE, "appfat_get_DD_error_string stores a formatted error message in error_buf\nbased on the given DirectDraw error code.", 0);
apply_type (0x4010CE, "void __fastcall appfat_get_DD_error_string(uint32_t error_code, char *error_buf, int error_buf_len);", TINFO_DEFINITE);
cleanup("appfat_get_DS_error_string");set_name(0x401831, "appfat_get_DS_error_string");
set_func_cmt(0x401831, "appfat_get_DS_error_string stores a formatted error message in error_buf\nbased on the given DirectSound error code.", 0);
apply_type (0x401831, "void __fastcall appfat_get_DS_error_string(uint32_t error_code, char *error_buf, int error_buf_len);", TINFO_DEFINITE);
cleanup("appfat_get_last_error");set_name(0x40193A, "appfat_get_last_error");
set_func_cmt(0x40193A, "appfat_get_last_error returns a formatted error message of the last error.", 0);
apply_type (0x40193A, "char * appfat_get_last_error();", TINFO_DEFINITE);
cleanup("appfat_terminate_message_box");set_name(0x401947, "appfat_terminate_message_box");
set_func_cmt(0x401947, "appfat_terminate_message_box terminates the game and displays an error\nmessage box.", 0);
apply_type (0x401947, "void appfat_terminate_message_box(char *format, ...);", TINFO_DEFINITE);
cleanup("appfat_message_box");set_name(0x401975, "appfat_message_box");
set_func_cmt(0x401975, "appfat_message_box displays an error message box based on the given format\nstring and variable argument list.", 0);
apply_type (0x401975, "void __fastcall appfat_message_box(char *format, va_list va);", TINFO_DEFINITE);
cleanup("appfat_cleanup");set_name(0x4019C7, "appfat_cleanup");
set_func_cmt(0x4019C7, "appfat_cleanup cleans up after a fatal application error.", 0);
apply_type (0x4019C7, "void appfat_cleanup();", TINFO_DEFINITE);
cleanup("appfat_draw_message_box");set_name(0x401A30, "appfat_draw_message_box");
set_func_cmt(0x401A30, "appfat_draw_message_box renders an in-game message box with the given text\non screen.", 0);
apply_type (0x401A30, "void appfat_draw_message_box(char *format, ...);", TINFO_DEFINITE);
cleanup("appfat_DD_assert");set_name(0x401A65, "appfat_DD_assert");
set_func_cmt(0x401A65, "appfat_DD_assert terminates the game with a DirectDraw assertion message box.", 0);
apply_type (0x401A65, "void __fastcall appfat_DD_assert(uint32_t error_code, int log_line_nr, char *log_file_path);", TINFO_DEFINITE);
cleanup("appfat_DS_assert");set_name(0x401A88, "appfat_DS_assert");
set_func_cmt(0x401A88, "appfat_DS_assert terminates the game with a DirectSound assertion message\nbox.", 0);
apply_type (0x401A88, "void __fastcall appfat_DS_assert(uint32_t error_code, int log_line_nr, char *log_file_path);", TINFO_DEFINITE);
cleanup("appfat_centre_dialog_box");set_name(0x401AAB, "appfat_centre_dialog_box");
set_func_cmt(0x401AAB, "appfat_centre_dialog_box centres the given dialog box.", 0);
apply_type (0x401AAB, "void __fastcall appfat_centre_dialog_box(HWND hDlg);", TINFO_DEFINITE);
cleanup("appfat_terminate_dialog_box");set_name(0x401B3D, "appfat_terminate_dialog_box");
set_func_cmt(0x401B3D, "appfat_terminate_dialog_box terminates the game and displays an error dialog\nbox based on the given template id.", 0);
apply_type (0x401B3D, "void __fastcall appfat_terminate_dialog_box(int template_id, uint32_t error_code, char *log_file_path, int log_line_nr);", TINFO_DEFINITE);
cleanup("appfat_dialog_func");set_name(0x401BCA, "appfat_dialog_func");
set_func_cmt(0x401BCA, "appfat_dialog_func is a callback function which processes messages sent to\nthe given dialog box.", 0);
apply_type (0x401BCA, "bool32_t __stdcall appfat_dialog_func(HWND hDlg, UINT uMsg, WPARAM wParam, char *text);", TINFO_DEFINITE);
cleanup("appfat_set_dialog_text");set_name(0x401C0F, "appfat_set_dialog_text");
set_func_cmt(0x401C0F, "appfat_set_dialog_text sets the text of the given dialog.", 0);
apply_type (0x401C0F, "void __fastcall appfat_set_dialog_text(HWND hDlg, char *text);", TINFO_DEFINITE);
cleanup("appfat_dialog_box");set_name(0x401C2E, "appfat_dialog_box");
set_func_cmt(0x401C2E, "appfat_dialog_box displays an error dialog box based on the given template id\nand error code.", 0);
apply_type (0x401C2E, "void __fastcall appfat_dialog_box(template_id template_id, uint32_t error_code, char *log_file_path, int log_line_nr);", TINFO_DEFINITE);
cleanup("appfat_terminate_file_error_dialog");set_name(0x401C9C, "appfat_terminate_file_error_dialog");
set_func_cmt(0x401C9C, "appfat_terminate_file_error_dialog terminates the game with a file not found\nerror dialog.", 0);
apply_type (0x401C9C, "void __fastcall appfat_terminate_file_error_dialog(char *error);", TINFO_DEFINITE);
cleanup("appfat_terminate_disk_space_error_dialog");set_name(0x401CE1, "appfat_terminate_disk_space_error_dialog");
set_func_cmt(0x401CE1, "appfat_terminate_disk_space_error_dialog terminates the game with an out of\ndisk space error dialog.", 0);
apply_type (0x401CE1, "void __fastcall appfat_terminate_disk_space_error_dialog(char *error);", TINFO_DEFINITE);
cleanup("appfat_terminate_insert_cd_error_dialog");set_name(0x401D1D, "appfat_terminate_insert_cd_error_dialog");
set_func_cmt(0x401D1D, "appfat_terminate_insert_cd_error_dialog terminates the game with an insert CD\nerror dialog.", 0);
apply_type (0x401D1D, "bool32_t appfat_terminate_insert_cd_error_dialog();", TINFO_DEFINITE);
cleanup("appfat_terminate_directory_error_dialog");set_name(0x401D68, "appfat_terminate_directory_error_dialog");
set_func_cmt(0x401D68, "appfat_terminate_directory_error_dialog terminates the game with a read-only\ndirectory error dialog.", 0);
apply_type (0x401D68, "void __fastcall appfat_terminate_directory_error_dialog(char *error);", TINFO_DEFINITE);
cleanup("DRLG_Init_Globals");set_name((1.09b):   0x40ADD6, "DRLG_Init_Globals");
set_func_cmt((1.09b):   0x40ADD6, "DRLG_Init_Globals resets the dungeon flag, player, NPC, dead, object, item,\nmissile and arch maps.", 0);
apply_type ((1.09b):   0x40ADD6, "void DRLG_Init_Globals();", TINFO_DEFINITE);
cleanup("LoadL1Dungeon");set_name((1.09b):   0x40AE79, "LoadL1Dungeon");
set_func_cmt((1.09b):   0x40AE79, "LoadL1Dungeon loads tile IDs, monsters and objects from the given DUN file at\nthe specified view coordinate.\nParameters:\n   - sFileName: path to DUN file.\n   - vx:        view X-coordinate (112x112 grid).\n   - vy:        view Y-coordinate (112x112 grid).", 0);
apply_type ((1.09b):   0x40AE79, "void __fastcall LoadL1Dungeon(char *sFileName, int vx, int vy);", TINFO_DEFINITE);
cleanup("DRLG_L1Floor");set_name((1.09b):   0x40AF65, "DRLG_L1Floor");
set_func_cmt((1.09b):   0x40AF65, "DRLG_L1Floor randomizes floor tiles.", 0);
apply_type ((1.09b):   0x40AF65, "void DRLG_L1Floor();", TINFO_DEFINITE);
cleanup("DRLG_L1Pass3");set_name((1.09b):   0x40AFB3, "DRLG_L1Pass3");
set_func_cmt((1.09b):   0x40AFB3, "DRLG_L1Pass3 initializes the dungeon piece ID map.", 0);
apply_type ((1.09b):   0x40AFB3, "void DRLG_L1Pass3();", TINFO_DEFINITE);
cleanup("DRLG_InitL1Vals");set_name((1.09b):   0x40B0A5, "DRLG_InitL1Vals");
set_func_cmt((1.09b):   0x40B0A5, "DRLG_InitL1Vals initializes arches.", 0);
apply_type ((1.09b):   0x40B0A5, "void DRLG_InitL1Vals();", TINFO_DEFINITE);
cleanup("LoadPreL1Dungeon");set_name((1.09b):   0x40B160, "LoadPreL1Dungeon");
set_func_cmt((1.09b):   0x40B160, "LoadPreL1Dungeon loads tile IDs from the given DUN file at the specified view\ncoordinate.\nParameters:\n   - sFileName: path to DUN file.\n   - vx:        view X-coordinate (112x112 grid).\n   - vy:        view Y-coordinate (112x112 grid).", 0);
apply_type ((1.09b):   0x40B160, "void __fastcall LoadPreL1Dungeon(char *sFileName, int vx, int vy);", TINFO_DEFINITE);
cleanup("CreateL5Dungeon");set_name((1.09b):   0x40B229, "CreateL5Dungeon");
set_func_cmt((1.09b):   0x40B229, "CreateL5Dungeon creates a random cathedral dungeon based on the given seed\nand level entry.\nParameters:\n   - rseed: random seed for dungeon.\n   - entry: level entry.", 0);
apply_type ((1.09b):   0x40B229, "void __fastcall CreateL5Dungeon(uint32_t rseed, int entry);", TINFO_DEFINITE);
cleanup("DRLG_LoadL1SP");set_name((1.09b):   0x40B276, "DRLG_LoadL1SP");
set_func_cmt((1.09b):   0x40B276, "DRLG_LoadL1SP loads tile IDs from the dungeon file of the active quest level.", 0);
apply_type ((1.09b):   0x40B276, "void DRLG_LoadL1SP();", TINFO_DEFINITE);
cleanup("DRLG_FreeL1SP");set_name((1.09b):   0x40B2F4, "DRLG_FreeL1SP");
set_func_cmt((1.09b):   0x40B2F4, "DRLG_FreeL1SP frees the dungeon file of the active quest level.", 0);
apply_type ((1.09b):   0x40B2F4, "void DRLG_FreeL1SP();", TINFO_DEFINITE);
cleanup("DRLG_L5");set_name((1.09b):   0x40B306, "DRLG_L5");
set_func_cmt((1.09b):   0x40B306, "DRLG_L5 generates a cathedral dungeon based on the given level entry.\nParameters:\n   - entry: level entry.", 0);
apply_type ((1.09b):   0x40B306, "void __fastcall DRLG_L5(int entry);", TINFO_DEFINITE);
cleanup("DRLG_PlaceDoor");set_name((1.09b):   0x40B56F, "DRLG_PlaceDoor");
set_func_cmt((1.09b):   0x40B56F, "DRLG_PlaceDoor places a door at the given coordinate.\nParameters:\n   - x: X-coordinate (40x40 grid).\n   - y: Y-coordinate (40x40 grid).", 0);
apply_type ((1.09b):   0x40B56F, "void __fastcall DRLG_PlaceDoor(int x, int y);", TINFO_DEFINITE);
cleanup("DRLG_L1Shadows");set_name((1.09b):   0x40B699, "DRLG_L1Shadows");
set_func_cmt((1.09b):   0x40B699, "DRLG_L1Shadows initializes arch and bar shadows.", 0);
apply_type ((1.09b):   0x40B699, "void DRLG_L1Shadows();", TINFO_DEFINITE);
cleanup("DRLG_PlaceMiniSet");set_name((1.09b):   0x40B881, "DRLG_PlaceMiniSet");
set_func_cmt((1.09b):   0x40B881, "DRLG_PlaceMiniSet places the given miniset of tile IDs.\nParameters:\n   - miniset: mini-DUN buffer contents.\n   - tmin:    minimum number of times to place miniset.\n   - tmax:    maximum number of times to place miniset.\n   - cx:      center X-coordinate (40x40 grid).\n   - cy:      center Y-coordinate (40x40 grid).\n   - setview: update player view coordinates.\n   - noquad:  quadrant positioning related to center.\n   - ldir:    direction.\nReturn:\n   - quadrant placement.\n        0: top    (x < cx && y < cy)\n        1: right  (x > cx && y < cy)\n        2: left   (x < cx && y > cy)\n        3: bottom (x > cx && y > cy)", 0);
apply_type ((1.09b):   0x40B881, "int __fastcall DRLG_PlaceMiniSet(uint8_t *miniset, int tmin, int tmax, int cx, int cy, bool32_t setview, int noquad, int ldir);", TINFO_DEFINITE);
cleanup("InitL5Dungeon");set_name((1.09b):   0x40BAF6, "InitL5Dungeon");
set_func_cmt((1.09b):   0x40BAF6, "InitL5Dungeon resets the tile ID and the dungeon flag maps.", 0);
apply_type ((1.09b):   0x40BAF6, "void InitL5Dungeon();", TINFO_DEFINITE);
cleanup("L5ClearFlags");set_name((1.09b):   0x40BB18, "L5ClearFlags");
set_func_cmt((1.09b):   0x40BB18, "L5ClearFlags clears the dungeon generation flags 0x40.", 0);
apply_type ((1.09b):   0x40BB18, "void L5ClearFlags();", TINFO_DEFINITE);
cleanup("L5firstRoom");set_name((1.09b):   0x40BB33, "L5firstRoom");
set_func_cmt((1.09b):   0x40BB33, "L5firstRoom generates the first room of the dungeon.", 0);
apply_type ((1.09b):   0x40BB33, "void L5firstRoom();", TINFO_DEFINITE);
cleanup("L5drawRoom");set_name((1.09b):   0x40BD66, "L5drawRoom");
set_func_cmt((1.09b):   0x40BD66, "L5drawRoom adds walls for a room at the given area.\nParameters:\n   - x: X-coordinate (40x40 grid).\n   - y: Y-coordinate (40x40 grid).\n   - w: width in number of tiles.\n   - h: height in number of tiles.", 0);
apply_type ((1.09b):   0x40BD66, "void __fastcall L5drawRoom(int x, int y, int w, int h);", TINFO_DEFINITE);
cleanup("L5roomGen");set_name((1.09b):   0x40BD9D, "L5roomGen");
set_func_cmt((1.09b):   0x40BD9D, "L5roomGen generates a room of the given dimensions at the specified\ncoordinates.\nParameters:\n   - x:   X-coordinate (40x40 grid).\n   - y:   Y-coordinate (40x40 grid).\n   - w:   width in number of tiles.\n   - h:   height in number of tiles.\n   - dir: horizontal direction. // TODO: verify that dir is used for horizontal direction.", 0);
apply_type ((1.09b):   0x40BD9D, "void __fastcall L5roomGen(int x, int y, int w, int h, bool32_t dir);", TINFO_DEFINITE);
cleanup("L5checkRoom");set_name((1.09b):   0x40BFA4, "L5checkRoom");
set_func_cmt((1.09b):   0x40BFA4, "L5checkRoom reports whether the given area is empty.\nParameters:\n   - x:      X-coordinate (40x40 grid).\n   - y:      Y-coordinate (40x40 grid).\n   - width:  width in number of tiles.\n   - height: height in number of tiles.\nReturn:\n   - ok: area is empty.", 0);
apply_type ((1.09b):   0x40BFA4, "bool32_t __fastcall L5checkRoom(int x, int y, int width, int height);", TINFO_DEFINITE);
cleanup("L5GetArea");set_name((1.09b):   0x40C008, "L5GetArea");
set_func_cmt((1.09b):   0x40C008, "L5GetArea returns the number of walls on the map.\nReturn:\n   - n: number of walls on map.", 0);
apply_type ((1.09b):   0x40C008, "int L5GetArea();", TINFO_DEFINITE);
cleanup("L5makeDungeon");set_name((1.09b):   0x40C02A, "L5makeDungeon");
set_func_cmt((1.09b):   0x40C02A, "L5makeDungeon initializes a tile ID map of twice the size, repeating each\ntile in blocks of 4.", 0);
apply_type ((1.09b):   0x40C02A, "void L5makeDungeon();", TINFO_DEFINITE);
cleanup("L5makeDmt");set_name((1.09b):   0x40C06E, "L5makeDmt");
set_func_cmt((1.09b):   0x40C06E, "L5makeDmt replaces tile ID patterns based on a lookup table.", 0);
apply_type ((1.09b):   0x40C06E, "void L5makeDmt();", TINFO_DEFINITE);
cleanup("L5AddWall");set_name((1.09b):   0x40C0E0, "L5AddWall");
set_func_cmt((1.09b):   0x40C0E0, "L5AddWall adds wall, arch or bar tile IDs.", 0);
apply_type ((1.09b):   0x40C0E0, "void L5AddWall();", TINFO_DEFINITE);
cleanup("L5HWallOk");set_name((1.09b):   0x40C23C, "L5HWallOk");
set_func_cmt((1.09b):   0x40C23C, "L5HWallOk returns the number of horizontal wall tiles that fit at the given\ncoordinate.\nParameters:\n   - i: X-coordinate (40x40 grid).\n   - j: Y-coordinate (40x40 grid).\nReturn:\n   - n: number of horizontal wall tiles that fit at the given coordinate.", 0);
apply_type ((1.09b):   0x40C23C, "int __fastcall L5HWallOk(int i, int j);", TINFO_DEFINITE);
cleanup("L5VWallOk");set_name((1.09b):   0x40C2DC, "L5VWallOk");
set_func_cmt((1.09b):   0x40C2DC, "L5VWallOk returns the number of vertical wall tiles that fit at the given\ncoordinate.\nParameters:\n   - i: X-coordinate (40x40 grid).\n   - j: Y-coordinate (40x40 grid).\nReturn:\n   - n: number of vertical wall tiles that fit at the given coordinate.", 0);
apply_type ((1.09b):   0x40C2DC, "int __fastcall L5VWallOk(int i, int j);", TINFO_DEFINITE);
cleanup("L5HorizWall");set_name((1.09b):   0x40C35B, "L5HorizWall");
set_func_cmt((1.09b):   0x40C35B, "L5HorizWall adds a horizontal wall based on the given tile ID.\nParameters:\n   - i:  X-coordinate (40x40 grid).\n   - j:  Y-coordinate (40x40 grid).\n   - p:  Cathedral tile ID.\n   - dx: width in number of tiles.", 0);
apply_type ((1.09b):   0x40C35B, "void __fastcall L5HorizWall(int i, int j, enum l1_tile_id p, int dx);", TINFO_DEFINITE);
cleanup("L5VertWall");set_name((1.09b):   0x40C449, "L5VertWall");
set_func_cmt((1.09b):   0x40C449, "L5VertWall adds a vertical wall based on the given tile ID.\nParameters:\n   - i:  X-coordinate (40x40 grid).\n   - j:  Y-coordinate (40x40 grid).\n   - p:  Cathedral tile ID.\n   - dy: height in number of tiles.", 0);
apply_type ((1.09b):   0x40C449, "void __fastcall L5VertWall(int i, int j, enum l1_tile_id p, int dy);", TINFO_DEFINITE);
cleanup("L5tileFix");set_name((1.09b):   0x40C551, "L5tileFix");
set_func_cmt((1.09b):   0x40C551, "L5tileFix fixes tile IDs of wall edges.", 0);
apply_type ((1.09b):   0x40C551, "void L5tileFix();", TINFO_DEFINITE);
cleanup("DRLG_L5Subs");set_name((1.09b):   0x40C8C0, "DRLG_L5Subs");
set_func_cmt((1.09b):   0x40C8C0, "DRLG_L5Subs decorates the dungeon with tapestry tile IDs.", 0);
apply_type ((1.09b):   0x40C8C0, "void DRLG_L5Subs();", TINFO_DEFINITE);
cleanup("L5FillChambers");set_name((1.09b):   0x40C99D, "L5FillChambers");
set_func_cmt((1.09b):   0x40C99D, "L5FillChambers generates chambers.", 0);
apply_type ((1.09b):   0x40C99D, "void L5FillChambers();", TINFO_DEFINITE);
cleanup("DRLG_L5GChamber");set_name((1.09b):   0x40CD86, "DRLG_L5GChamber");
set_func_cmt((1.09b):   0x40CD86, "DRLG_L5GChamber generates a chamber at the given coordiates with columns on\nthe specified sides.\nParameters:\n   - sx:         X-coordinate (40x40 grid).\n   - sy:         Y-coordinate (40x40 grid).\n   - topflag:    place column at top.\n   - bottomflag: place column at bottom.\n   - leftflag:   place column at left.\n   - rightflag:  place column at right.", 0);
apply_type ((1.09b):   0x40CD86, "void __fastcall DRLG_L5GChamber(int sx, int sy, bool32_t topflag, bool32_t bottomflag, bool32_t leftflag, bool32_t rightflag);", TINFO_DEFINITE);
cleanup("DRLG_L5GHall");set_name((1.09b):   0x40CEC7, "DRLG_L5GHall");
set_func_cmt((1.09b):   0x40CEC7, "DRLG_L5GHall generates a hall of columns and arches.\nParameters:\n   - x1: start X-coordinate (40x40 grid).\n   - y1: start Y-coordinate (40x40 grid).\n   - x2: end X-coordinate (40x40 grid).\n   - y2: end Y-coordinate (40x40 grid).", 0);
apply_type ((1.09b):   0x40CEC7, "void __fastcall DRLG_L5GHall(int x1, int y1, int x2, int y2);", TINFO_DEFINITE);
cleanup("DRLG_L5SetRoom");set_name((1.09b):   0x40CF17, "DRLG_L5SetRoom");
set_func_cmt((1.09b):   0x40CF17, "DRLG_L5SetRoom initializes tile IDs based on the loaded quest dungeon file.\nParameters:\n   - rx1: X-coordinate (40x40 grid).\n   - ry1: Y-coordinate (40x40 grid).", 0);
apply_type ((1.09b):   0x40CF17, "void __fastcall DRLG_L5SetRoom(int rx1, int ry1);", TINFO_DEFINITE);
cleanup("DRLG_L5FloodTVal");set_name((1.09b):   0x40CF9C, "DRLG_L5FloodTVal");
set_func_cmt((1.09b):   0x40CF9C, "DRLG_L5FloodTVal adds transparency to concealing walls.", 0);
apply_type ((1.09b):   0x40CF9C, "void DRLG_L5FloodTVal();", TINFO_DEFINITE);
cleanup("DRLG_L5FTVR");set_name((1.09b):   0x40D00B, "DRLG_L5FTVR");
set_func_cmt((1.09b):   0x40D00B, "DRLG_L5FTVR recursively adds transparency to concealing walls.\nParameters:\n   - i: X-coordinate (40x40 grid).\n   - j: Y-coordinate (40x40 grid).\n   - x: X-coordinate (112x112 grid).\n   - y: Y-coordinate (112x112 grid).\n   - d: direction.", 0);
apply_type ((1.09b):   0x40D00B, "void __fastcall DRLG_L5FTVR(int i, int j, int x, int y, int d);", TINFO_DEFINITE);
cleanup("DRLG_L5TransFix");set_name((1.09b):   0x40D1FB, "DRLG_L5TransFix");
set_func_cmt((1.09b):   0x40D1FB, "DRLG_L5TransFix fixes transparency close to dirt tile IDs after dungeon\ngeneration.", 0);
apply_type ((1.09b):   0x40D1FB, "void DRLG_L5TransFix();", TINFO_DEFINITE);
cleanup("DRLG_L5DirtFix");set_name((1.09b):   0x40D283, "DRLG_L5DirtFix");
set_func_cmt((1.09b):   0x40D283, "DRLG_L5DirtFix fixes dirt tile IDs after dungeon generation.", 0);
apply_type ((1.09b):   0x40D283, "void DRLG_L5DirtFix();", TINFO_DEFINITE);
cleanup("DRLG_L5CornerFix");set_name((1.09b):   0x40D2EF, "DRLG_L5CornerFix");
set_func_cmt((1.09b):   0x40D2EF, "DRLG_L5CornerFix fixes corner and arch tile IDs after dungeon generation.", 0);
apply_type ((1.09b):   0x40D2EF, "void DRLG_L5CornerFix();", TINFO_DEFINITE);
cleanup("gmenu_draw_pause");set_name(0x419E8B, "gmenu_draw_pause");
set_func_cmt(0x419E8B, "gmenu_draw_pause renders the pause menu on screen.", 0);
apply_type (0x419E8B, "void gmenu_draw_pause();", TINFO_DEFINITE);
cleanup("gmenu_draw");set_name(0x41A0B6, "gmenu_draw");
set_func_cmt(0x41A0B6, "gmenu_draw renders the game menu on screen.", 0);
apply_type (0x41A0B6, "void gmenu_draw();", TINFO_DEFINITE);
cleanup("gmenu_enable");set_name(0x41A4B8, "gmenu_enable");
set_func_cmt(0x41A4B8, "gmenu_enable enables or disables the game menu item.", 0);
apply_type (0x41A4B8, "void __fastcall gmenu_enable(MenuItem *menu_item, bool32_t enable);", TINFO_DEFINITE);
cleanup("gmenu_slider_get");set_name(0x41A508, "gmenu_slider_get");
set_func_cmt(0x41A508, "gmenu_slider_get returns the slider value of the given game menu item,\ncontained within the given interval.", 0);
apply_type (0x41A508, "int __fastcall gmenu_slider_get(MenuItem *menu_item, int min, int max);", TINFO_DEFINITE);
cleanup("objects_add_l1_objects");set_name(0x441A00, "objects_add_l1_objects");
set_func_cmt(0x441A00, "objects_add_l1_objects adds Cathedral objects.", 0);
apply_type (0x441A00, "void __fastcall objects_add_l1_objects(int x_start, int y_start, int x_end, int y_end);", TINFO_DEFINITE);
cleanup("objects_add_l2_objects");set_name(0x441A98, "objects_add_l2_objects");
set_func_cmt(0x441A98, "objects_add_l2_objects adds Catacombs objects.", 0);
apply_type (0x441A98, "void __fastcall objects_add_l2_objects(int x_start, int y_start, int x_end, int y_end);", TINFO_DEFINITE);
cleanup("objects_add_l3_objects");set_name(0x441B16, "objects_add_l3_objects");
set_func_cmt(0x441B16, "objects_add_l3_objects adds Hell objects.", 0);
apply_type (0x441B16, "void __fastcall objects_add_l3_objects(int x_start, int y_start, int x_end, int y_end);", TINFO_DEFINITE);
cleanup("objects_add_l2_torches");set_name(0x441BA0, "objects_add_l2_torches");
set_func_cmt(0x441BA0, "objects_add_l2_torches adds torches to Catacombs maps.", 0);
apply_type (0x441BA0, "void objects_add_l2_torches();", TINFO_DEFINITE);
cleanup("objects_add_traps");set_name(0x441CB3, "objects_add_traps");
set_func_cmt(0x441CB3, "objects_add_traps adds traps to objects.", 0);
apply_type (0x441CB3, "void objects_add_traps();", TINFO_DEFINITE);
cleanup("objects_add_object");set_name(0x4431FF, "objects_add_object");
set_func_cmt(0x4431FF, "objects_add_object adds a new object to the specifies coordinates.", 0);
apply_type (0x4431FF, "void __fastcall objects_add_object(object_id object_id, int x, int y);", TINFO_DEFINITE);
cleanup("objects_interact_shrine");set_name(0x445E4B, "objects_interact_shrine");
set_func_cmt(0x445E4B, "objects_interact_shrine interacts with the given shrine.", 0);
apply_type (0x445E4B, "void __fastcall objects_interact_shrine(int player_num, int object_num, sfx_id sfx_id);", TINFO_DEFINITE);
cleanup("stores_init");set_name(0x457A01, "stores_init");
set_func_cmt(0x457A01, "stores_init initializes the resources used by store owners.", 0);
apply_type (0x457A01, "void stores_init();", TINFO_DEFINITE);
cleanup("stores_renew_items");set_name(0x457A87, "stores_renew_items");
set_func_cmt(0x457A87, "stores_renew_items renews the items sold in stores.", 0);
apply_type (0x457A87, "void stores_renew_items();", TINFO_DEFINITE);
cleanup("stores_cleanup");set_name(0x457B42, "stores_cleanup");
set_func_cmt(0x457B42, "stores_cleanup releases the resources used by store owners.", 0);
apply_type (0x457B42, "void stores_cleanup();", TINFO_DEFINITE);
cleanup("stores_talk_griswold");set_name(0x4582B3, "stores_talk_griswold");
set_func_cmt(0x4582B3, "stores_talk_griswold initiates a dialogue with Griswold.", 0);
apply_type (0x4582B3, "void stores_talk_griswold();", TINFO_DEFINITE);
cleanup("stores_talk_griswold_buy_basic");set_name(0x4586B3, "stores_talk_griswold_buy_basic");
set_func_cmt(0x4586B3, "stores_talk_griswold_buy_basic initiates a buy basic item dialogue with\nGriswold.", 0);
apply_type (0x4586B3, "void stores_talk_griswold_buy_basic();", TINFO_DEFINITE);
cleanup("stores_talk_griswold_buy_premium");set_name(0x458851, "stores_talk_griswold_buy_premium");
set_func_cmt(0x458851, "stores_talk_griswold_buy_premium initiates a buy premium item dialogue with\nGriswold.", 0);
apply_type (0x458851, "bool32_t stores_talk_griswold_buy_premium();", TINFO_DEFINITE);
cleanup("stores_griswold_wants");set_name(0x458931, "stores_griswold_wants");
set_func_cmt(0x458931, "stores_griswold_wants reports whether Griswold wants to buy the given\ninventory item.", 0);
apply_type (0x458931, "bool32_t __fastcall stores_griswold_wants(int inv_num);", TINFO_DEFINITE);
cleanup("stores_talk_griswold_sell");set_name(0x458A59, "stores_talk_griswold_sell");
set_func_cmt(0x458A59, "stores_talk_griswold_sell initiates a sell player item dialogue with\nGriswold.", 0);
apply_type (0x458A59, "void stores_talk_griswold_sell();", TINFO_DEFINITE);
cleanup("stores_is_damaged");set_name(0x458C0B, "stores_is_damaged");
set_func_cmt(0x458C0B, "stores_is_damaged reports whether the given inventory item is damaged (i.e.\nit may be repaired).", 0);
apply_type (0x458C0B, "bool32_t __fastcall stores_is_damaged(int inv_num);", TINFO_DEFINITE);
cleanup("stores_talk_griswold_repair");set_name(0x458C4E, "stores_talk_griswold_repair");
set_func_cmt(0x458C4E, "stores_talk_griswold_repair initiates a repair player item dialogue with\nGriswold.", 0);
apply_type (0x458C4E, "void stores_talk_griswold_repair();", TINFO_DEFINITE);
cleanup("stores_talk_adria");set_name(0x458F3D, "stores_talk_adria");
set_func_cmt(0x458F3D, "stores_talk_adria initiates a dialogue with Adria.", 0);
apply_type (0x458F3D, "void stores_talk_adria();", TINFO_DEFINITE);
cleanup("stores_talk_adria_buy");set_name(0x45909F, "stores_talk_adria_buy");
set_func_cmt(0x45909F, "stores_talk_adria_buy initiates a buy item dialogue with Adria.", 0);
apply_type (0x45909F, "void stores_talk_adria_buy();", TINFO_DEFINITE);
cleanup("stores_adria_wants");set_name(0x459169, "stores_adria_wants");
set_func_cmt(0x459169, "stores_adria_wants reports whether Adria wants to buy the given item; which\nis either an inventory or a belt item, as described below.\n   switch {\n   case inv_or_belt_num >= 0:\n      inv_num = inv_or_belt_num\n   case inv_or_belt_num < 0:\n      belt_num = -inv_or_belt_num - 1\n   }", 0);
apply_type (0x459169, "bool32_t __fastcall stores_adria_wants(int inv_or_belt_num);", TINFO_DEFINITE);
cleanup("stores_talk_adria_sell");set_name(0x4591C4, "stores_talk_adria_sell");
set_func_cmt(0x4591C4, "stores_talk_adria_sell initiates a sell player item dialogue with Adria.", 0);
apply_type (0x4591C4, "void stores_talk_adria_sell();", TINFO_DEFINITE);
cleanup("stores_has_used_charges");set_name(0x459431, "stores_has_used_charges");
set_func_cmt(0x459431, "stores_has_used_charges reports whether the given inventory item is a staff\nwith consumed charges (i.e. it may be recharged).", 0);
apply_type (0x459431, "bool32_t __fastcall stores_has_used_charges(int inv_num);", TINFO_DEFINITE);
cleanup("stores_talk_adria_recharge");set_name(0x4594E6, "stores_talk_adria_recharge");
set_func_cmt(0x4594E6, "stores_talk_adria_recharge initiates a recharge staff dialogue with Adria.", 0);
apply_type (0x4594E6, "void stores_talk_adria_recharge();", TINFO_DEFINITE);
cleanup("stores_talk_not_enough_gold");set_name(0x459693, "stores_talk_not_enough_gold");
set_func_cmt(0x459693, "stores_talk_not_enough_gold informs the player that they have not enough\ngold to satisfy the deal.", 0);
apply_type (0x459693, "void stores_talk_not_enough_gold();", TINFO_DEFINITE);
cleanup("stores_talk_not_enough_room");set_name(0x4596CD, "stores_talk_not_enough_room");
set_func_cmt(0x4596CD, "stores_talk_not_enough_room informs the player that they have not enough\nroom in inventory to complete the trade.", 0);
apply_type (0x4596CD, "void stores_talk_not_enough_room();", TINFO_DEFINITE);
cleanup("stores_talk_confirm");set_name(0x459700, "stores_talk_confirm");
set_func_cmt(0x459700, "stores_talk_confirm asks the player to confirm the deal.", 0);
apply_type (0x459700, "void stores_talk_confirm();", TINFO_DEFINITE);
cleanup("stores_talk_wirt");set_name(0x459873, "stores_talk_wirt");
set_func_cmt(0x459873, "stores_talk_wirt initiates a dialogue with Wirt.", 0);
apply_type (0x459873, "void stores_talk_wirt();", TINFO_DEFINITE);
cleanup("stores_talk_wirt_buy");set_name(0x459930, "stores_talk_wirt_buy");
set_func_cmt(0x459930, "stores_talk_wirt_buy initiates a buy item dialogue with Wirt.", 0);
apply_type (0x459930, "void stores_talk_wirt_buy();", TINFO_DEFINITE);
cleanup("stores_talk_pepin");set_name(0x4599FD, "stores_talk_pepin");
set_func_cmt(0x4599FD, "stores_talk_pepin initiates a dialogue with Pepin.", 0);
apply_type (0x4599FD, "void stores_talk_pepin();", TINFO_DEFINITE);
cleanup("stores_talk_pepin_buy");set_name(0x459B55, "stores_talk_pepin_buy");
set_func_cmt(0x459B55, "stores_talk_pepin_buy initiates a buy item dialogue with Pepin.", 0);
apply_type (0x459B55, "void stores_talk_pepin_buy();", TINFO_DEFINITE);
cleanup("stores_talk_cain");set_name(0x459C15, "stores_talk_cain");
set_func_cmt(0x459C15, "stores_talk_cain initiates a dialogue with Cain.", 0);
apply_type (0x459C15, "void stores_talk_cain();", TINFO_DEFINITE);
cleanup("stores_is_unidentified");set_name(0x459C8E, "stores_is_unidentified");
set_func_cmt(0x459C8E, "stores_is_unidentified reports whether the given item is magical and\nunidentified (i.e. it may be identified).", 0);
apply_type (0x459C8E, "bool32_t __fastcall stores_is_unidentified(Item *item);", TINFO_DEFINITE);
cleanup("stores_talk_cain_identify");set_name(0x459CE6, "stores_talk_cain_identify");
set_func_cmt(0x459CE6, "stores_talk_cain_identify initiates an identify item dialogue with Cain.", 0);
apply_type (0x459CE6, "void stores_talk_cain_identify();", TINFO_DEFINITE);
cleanup("stores_talk_show_identified_item");set_name(0x459F95, "stores_talk_show_identified_item");
set_func_cmt(0x459F95, "stores_talk_show_identified_item shows the identified item to the player.", 0);
apply_type (0x459F95, "void stores_talk_show_identified_item();", TINFO_DEFINITE);
cleanup("stores_talk_gossip");set_name(0x45A046, "stores_talk_gossip");
set_func_cmt(0x45A046, "stores_talk_gossip initiates a gossip dialogue with the active NPC.", 0);
apply_type (0x45A046, "void stores_talk_gossip();", TINFO_DEFINITE);
cleanup("stores_talk_odgen");set_name(0x45A168, "stores_talk_odgen");
set_func_cmt(0x45A168, "stores_talk_odgen initiates a dialogue with Odgen.", 0);
apply_type (0x45A168, "void stores_talk_odgen();", TINFO_DEFINITE);
cleanup("stores_talk_gillian");set_name(0x45A1EC, "stores_talk_gillian");
set_func_cmt(0x45A1EC, "stores_talk_gillian initiates a dialogue with Gillian.", 0);
apply_type (0x45A1EC, "void stores_talk_gillian();", TINFO_DEFINITE);
cleanup("stores_talk_farnham");set_name(0x45A25E, "stores_talk_farnham");
set_func_cmt(0x45A25E, "stores_talk_farnham initiates a dialogue with Farnham.", 0);
apply_type (0x45A25E, "void stores_talk_farnham();", TINFO_DEFINITE);
cleanup("stores_talk");set_name(0x45A2D0, "stores_talk");
set_func_cmt(0x45A2D0, "stores_talk initiates a conversation with the store owner.", 0);
apply_type (0x45A2D0, "void __fastcall stores_talk(talk_id talk_id);", TINFO_DEFINITE);
cleanup("stores_draw");set_name(0x45A48F, "stores_draw");
set_func_cmt(0x45A48F, "stores_draw renders a store owner dialogue on screen.", 0);
apply_type (0x45A48F, "void stores_draw();", TINFO_DEFINITE);
cleanup("stores_escape");set_name(0x45A584, "stores_escape");
set_func_cmt(0x45A584, "stores_escape backs out one level from the current dialogue through an escape\nkey press.", 0);
apply_type (0x45A584, "void stores_escape();", TINFO_DEFINITE);
cleanup("stores_interact_griswold");set_name(0x45A89B, "stores_interact_griswold");
set_func_cmt(0x45A89B, "stores_interact_griswold interacts with Griswold through an enter key press.", 0);
apply_type (0x45A89B, "void stores_interact_griswold();", TINFO_DEFINITE);
cleanup("stores_griswold_buy_basic");set_name(0x45AB69, "stores_griswold_buy_basic");
set_func_cmt(0x45AB69, "stores_griswold_buy_basic buys the selected basic item from Griswold.", 0);
apply_type (0x45AB69, "void stores_griswold_buy_basic();", TINFO_DEFINITE);
cleanup("stores_interact_griswold_buy_basic");set_name(0x45AC14, "stores_interact_griswold_buy_basic");
set_func_cmt(0x45AC14, "stores_interact_griswold_buy_basic buys the selected basic item from\nGriswold.", 0);
apply_type (0x45AC14, "void stores_interact_griswold_buy_basic();", TINFO_DEFINITE);
cleanup("stores_griswold_buy_premium");set_name(0x45ACE9, "stores_griswold_buy_premium");
set_func_cmt(0x45ACE9, "stores_griswold_buy_premium buys the selected premium item from Griswold.", 0);
apply_type (0x45ACE9, "void stores_griswold_buy_premium();", TINFO_DEFINITE);
cleanup("stores_interact_griswold_buy_premium");set_name(0x45AD7E, "stores_interact_griswold_buy_premium");
set_func_cmt(0x45AD7E, "stores_interact_griswold_buy_premium buys the selected premium item from\nGriswold.", 0);
apply_type (0x45AD7E, "void stores_interact_griswold_buy_premium();", TINFO_DEFINITE);
cleanup("stores_sell");set_name(0x45B010, "stores_sell");
set_func_cmt(0x45B010, "stores_sell sells the selected item to the store owner.", 0);
apply_type (0x45B010, "void stores_sell();", TINFO_DEFINITE);
cleanup("stores_interact_griswold_sell");set_name(0x45B160, "stores_interact_griswold_sell");
set_func_cmt(0x45B160, "stores_interact_griswold_sell sells the selected item to Griswold.", 0);
apply_type (0x45B160, "void stores_interact_griswold_sell();", TINFO_DEFINITE);
cleanup("stores_griswold_repair");set_name(0x45B1DF, "stores_griswold_repair");
set_func_cmt(0x45B1DF, "stores_griswold_repair repairs the selected item at Griswold.", 0);
apply_type (0x45B1DF, "void stores_griswold_repair();", TINFO_DEFINITE);
cleanup("stores_interact_griswold_repair");set_name(0x45B2B6, "stores_interact_griswold_repair");
set_func_cmt(0x45B2B6, "stores_interact_griswold_repair repairs the selected item at Griswold.", 0);
apply_type (0x45B2B6, "void stores_interact_griswold_repair();", TINFO_DEFINITE);
cleanup("stores_interact_adria");set_name(0x45B337, "stores_interact_adria");
set_func_cmt(0x45B337, "stores_interact_adria interacts with Adria through an enter key press.", 0);
apply_type (0x45B337, "void stores_interact_adria();", TINFO_DEFINITE);
cleanup("stores_adria_buy");set_name(0x45B39F, "stores_adria_buy");
set_func_cmt(0x45B39F, "stores_adria_buy buys the selected item from Adria.", 0);
apply_type (0x45B39F, "void stores_adria_buy();", TINFO_DEFINITE);
cleanup("stores_interact_adria_buy");set_name(0x45B457, "stores_interact_adria_buy");
set_func_cmt(0x45B457, "stores_interact_adria_buy buys the selected item from Adria.", 0);
apply_type (0x45B457, "void stores_interact_adria_buy();", TINFO_DEFINITE);
cleanup("stores_interact_adria_sell");set_name(0x45B52C, "stores_interact_adria_sell");
set_func_cmt(0x45B52C, "stores_interact_adria_sell sells the selected item to Adria.", 0);
apply_type (0x45B52C, "void stores_interact_adria_sell();", TINFO_DEFINITE);
cleanup("stores_adria_recharge");set_name(0x45B5AB, "stores_adria_recharge");
set_func_cmt(0x45B5AB, "stores_adria_recharge recharges the selected item at Adria.", 0);
apply_type (0x45B5AB, "void stores_adria_recharge();", TINFO_DEFINITE);
cleanup("stores_interact_adria_recharge");set_name(0x45B634, "stores_interact_adria_recharge");
set_func_cmt(0x45B634, "stores_interact_adria_recharge recharges the selected item at Adria.", 0);
apply_type (0x45B634, "void stores_interact_adria_recharge();", TINFO_DEFINITE);
cleanup("stores_interact_wirt");set_name(0x45B6B5, "stores_interact_wirt");
set_func_cmt(0x45B6B5, "stores_interact_wirt interacts with Wirt through an enter key press.", 0);
apply_type (0x45B6B5, "void stores_interact_wirt();", TINFO_DEFINITE);
cleanup("stores_wirt_buy");set_name(0x45B757, "stores_wirt_buy");
set_func_cmt(0x45B757, "stores_wirt_buy buys the selected item from Wirt.", 0);
apply_type (0x45B757, "void stores_wirt_buy();", TINFO_DEFINITE);
cleanup("stores_pepin_buy");set_name(0x45B791, "stores_pepin_buy");
set_func_cmt(0x45B791, "stores_pepin_buy buys the selected item from Pepin.", 0);
apply_type (0x45B791, "void stores_pepin_buy();", TINFO_DEFINITE);
cleanup("stores_interact_wirt_buy");set_name(0x45B895, "stores_interact_wirt_buy");
set_func_cmt(0x45B895, "stores_interact_wirt_buy buys the selected item from Wirt.", 0);
apply_type (0x45B895, "void stores_interact_wirt_buy();", TINFO_DEFINITE);
cleanup("stores_cain_identify");set_name(0x45B968, "stores_cain_identify");
set_func_cmt(0x45B968, "stores_cain_identify identifies the selected item at Cain.", 0);
apply_type (0x45B968, "void stores_cain_identify();", TINFO_DEFINITE);
cleanup("stores_interact_confirm");set_name(0x45BA57, "stores_interact_confirm");
set_func_cmt(0x45BA57, "stores_interact_confirm confirms the selected action.", 0);
apply_type (0x45BA57, "void stores_interact_confirm();", TINFO_DEFINITE);
cleanup("stores_interact_pepin");set_name(0x45BAF7, "stores_interact_pepin");
set_func_cmt(0x45BAF7, "stores_interact_pepin interacts with Pepin through an enter key press.", 0);
apply_type (0x45BAF7, "void stores_interact_pepin();", TINFO_DEFINITE);
cleanup("stores_interact_pepin_buy");set_name(0x45BB9F, "stores_interact_pepin_buy");
set_func_cmt(0x45BB9F, "stores_interact_pepin_buy buys the selected item from Pepin.", 0);
apply_type (0x45BB9F, "void stores_interact_pepin_buy();", TINFO_DEFINITE);
cleanup("stores_interact_cain");set_name(0x45BC74, "stores_interact_cain");
set_func_cmt(0x45BC74, "stores_interact_cain interacts with Cain through an enter key press.", 0);
apply_type (0x45BC74, "void stores_interact_cain();", TINFO_DEFINITE);
cleanup("stores_interact_cain_identify");set_name(0x45BCCA, "stores_interact_cain_identify");
set_func_cmt(0x45BCCA, "stores_interact_cain_identify identifies the selected item at Cain.", 0);
apply_type (0x45BCCA, "void stores_interact_cain_identify();", TINFO_DEFINITE);
cleanup("stores_interact_gossip");set_name(0x45BD4B, "stores_interact_gossip");
set_func_cmt(0x45BD4B, "stores_interact_gossip listens to the stories and gossip that a store owner\nhas to say about a given quest.", 0);
apply_type (0x45BD4B, "void stores_interact_gossip();", TINFO_DEFINITE);
cleanup("stores_interact_odgen");set_name(0x45BE4A, "stores_interact_odgen");
set_func_cmt(0x45BE4A, "stores_interact_odgen interacts with Odgen through an enter key press.", 0);
apply_type (0x45BE4A, "void stores_interact_odgen();", TINFO_DEFINITE);
cleanup("stores_interact_gillian");set_name(0x45BE98, "stores_interact_gillian");
set_func_cmt(0x45BE98, "stores_interact_gillian interacts with Gillian through an enter key press.", 0);
apply_type (0x45BE98, "void stores_interact_gillian();", TINFO_DEFINITE);
cleanup("stores_interact_farnham");set_name(0x45BEE6, "stores_interact_farnham");
set_func_cmt(0x45BEE6, "stores_interact_farmham interacts with Farnham through an enter key press.", 0);
apply_type (0x45BEE6, "void stores_interact_farnham();", TINFO_DEFINITE);
cleanup("stores_interact");set_name(0x45BF34, "stores_interact");
set_func_cmt(0x45BF34, "stores_interact interacts with the store through an enter key press.", 0);
apply_type (0x45BF34, "void stores_interact();", TINFO_DEFINITE);
cleanup("portal_init");set_name(0x450FFE, "portal_init");
set_func_cmt(0x450FFE, "portal_init initializes the portals game state.", 0);
apply_type (0x450FFE, "void portal_init();", TINFO_DEFINITE);
cleanup("automap_init");set_name(0x401DA4, "automap_init");
set_func_cmt(0x401DA4, "automap_init initializes the automap.", 0);
apply_type (0x401DA4, "void automap_init();", TINFO_DEFINITE);
cleanup("automap_init_types");set_name(0x401DE8, "automap_init_types");
set_func_cmt(0x401DE8, "automap_init_types loads the mapping between tile IDs and automap types.", 0);
apply_type (0x401DE8, "void automap_init_types();", TINFO_DEFINITE);
cleanup("automap_show");set_name(0x401EF4, "automap_show");
set_func_cmt(0x401EF4, "automap_show displays the automap.", 0);
apply_type (0x401EF4, "void automap_show();", TINFO_DEFINITE);
cleanup("automap_scroll_up");set_name(0x401F0D, "automap_scroll_up");
set_func_cmt(0x401F0D, "automap_scroll_up scrolls the automap upwards.", 0);
apply_type (0x401F0D, "void automap_scroll_up();", TINFO_DEFINITE);
cleanup("automap_scroll_down");set_name(0x401F1A, "automap_scroll_down");
set_func_cmt(0x401F1A, "automap_scroll_down scrolls the automap downwards.", 0);
apply_type (0x401F1A, "void automap_scroll_down();", TINFO_DEFINITE);
cleanup("automap_scroll_left");set_name(0x401F27, "automap_scroll_left");
set_func_cmt(0x401F27, "automap_scroll_left scrolls the automap to the left.", 0);
apply_type (0x401F27, "void automap_scroll_left();", TINFO_DEFINITE);
cleanup("automap_scroll_right");set_name(0x401F34, "automap_scroll_right");
set_func_cmt(0x401F34, "automap_scroll_right scrolls the automap to the right.", 0);
apply_type (0x401F34, "void automap_scroll_right();", TINFO_DEFINITE);
cleanup("automap_zoom_in");set_name(0x401F41, "automap_zoom_in");
set_func_cmt(0x401F41, "automap_zoom_in increases the zoom level of the automap.", 0);
apply_type (0x401F41, "void automap_zoom_in();", TINFO_DEFINITE);
cleanup("automap_zoom_out");set_name(0x401F80, "automap_zoom_out");
set_func_cmt(0x401F80, "automap_zoom_out decreases the zoom level of the automap.", 0);
apply_type (0x401F80, "void automap_zoom_out();", TINFO_DEFINITE);
cleanup("automap_draw");set_name(0x401FBD, "automap_draw");
set_func_cmt(0x401FBD, "automap_draw renders the automap on screen.", 0);
apply_type (0x401FBD, "void automap_draw();", TINFO_DEFINITE);
cleanup("automap_draw_type");set_name(0x402233, "automap_draw_type");
set_func_cmt(0x402233, "automap_draw_type renders the given automap type at the specified screen\ncoordinates.\n   x = screen_x - 64\n   y = screen_y - 160", 0);
apply_type (0x402233, "void __fastcall automap_draw_type(int screen_x, int screen_y, uint16_t automap_type);", TINFO_DEFINITE);
cleanup("automap_draw_player_arrow");set_name(0x4029A8, "automap_draw_player_arrow");
set_func_cmt(0x4029A8, "automap_draw_player_arrow renders an arrow on the automap, centered on and facing the direction of the player.", 0);
apply_type (0x4029A8, "void automap_draw_player_arrow();", TINFO_DEFINITE);
cleanup("automap_get_type");set_name(0x402D83, "automap_get_type");
set_func_cmt(0x402D83, "automap_get_type returns the automap type at the given coordinate.", 0);
apply_type (0x402D83, "uint16_t __fastcall automap_get_type(int tx, int ty, bool32_t view);", TINFO_DEFINITE);
cleanup("automap_draw_game_info");set_name(0x402E4A, "automap_draw_game_info");
set_func_cmt(0x402E4A, "automap_draw_game_info renders game info, such as the name of the current\nlevel, and in multi player, the name of the game and the game password.", 0);
apply_type (0x402E4A, "void automap_draw_game_info();", TINFO_DEFINITE);
cleanup("automap_set_view");set_name(0x402F27, "automap_set_view");
set_func_cmt(0x402F27, "automap_set_view marks the given coordinate as within view on the automap.", 0);
apply_type (0x402F27, "void __fastcall automap_set_view(int x, int y);", TINFO_DEFINITE);
cleanup("automap_reset_zoom");set_name(0x4030DD, "automap_reset_zoom");
set_func_cmt(0x4030DD, "automap_reset_zoom resets the zoom level of the automap.", 0);
apply_type (0x4030DD, "void automap_reset_zoom();", TINFO_DEFINITE);
cleanup("codec_decode");set_name(0x4034D9, "codec_decode");
set_func_cmt(0x4034D9, "codec_decode decodes the given memory buffer in-place, and returns the number\nof bytes decoded.", 0);
apply_type (0x4034D9, "int __fastcall codec_decode(void *src_dst, int size, char *password);", TINFO_DEFINITE);
cleanup("j_sha1_reset");set_name(0x4035D6, "j_sha1_reset");
set_func_cmt(0x4035D6, "j_sha1_reset resets the global SHA-1 contexts.", 0);
apply_type (0x4035D6, "void j_sha1_reset();", TINFO_DEFINITE);
cleanup("codec_init_key");set_name(0x4035DB, "codec_init_key");
set_func_cmt(0x4035DB, "codec_init_key initializes the codec key.", 0);
apply_type (0x4035DB, "void __fastcall codec_init_key(int unused, char *password);", TINFO_DEFINITE);
cleanup("codec_get_encoded_len");set_name(0x4036AC, "codec_get_encoded_len");
set_func_cmt(0x4036AC, "codec_get_encoded_len returns the length in bytes of the codec encoding of an\ninput buffer of length n.", 0);
apply_type (0x4036AC, "int __fastcall codec_get_encoded_len(int n);", TINFO_DEFINITE);
cleanup("codec_encode");set_name(0x4036BE, "codec_encode");
set_func_cmt(0x4036BE, "codec_encode encodes the given memory buffer in-place.", 0);
apply_type (0x4036BE, "void __fastcall codec_encode(void *src_dst, int size, int size_64, char *password);", TINFO_DEFINITE);
cleanup("j_mpqapi_cpp_init");set_name(0x43AE90, "j_mpqapi_cpp_init");
set_func_cmt(0x43AE90, "j_mpqapi_cpp_init initializes the C++ runtime of mpqapi.cpp.", 0);
apply_type (0x43AE90, "void j_mpqapi_cpp_init();", TINFO_DEFINITE);
cleanup("mpqapi_cpp_init");set_name(0x43AE95, "mpqapi_cpp_init");
set_func_cmt(0x43AE95, "mpqapi_cpp_init initializes the C++ runtime of mpqapi.cpp.", 0);
apply_type (0x43AE95, "void mpqapi_cpp_init();", TINFO_DEFINITE);
cleanup("mpqapi_set_hidden");set_name(0x43AEA0, "mpqapi_set_hidden");
set_func_cmt(0x43AEA0, "mpqapi_set_hidden sets the visibility of the given save file.", 0);
apply_type (0x43AEA0, "bool32_t __fastcall mpqapi_set_hidden(char *save_path, bool32_t hidden);", TINFO_DEFINITE);
cleanup("mpqapi_store_creation_time");set_name(0x43AEDC, "mpqapi_store_creation_time");
set_func_cmt(0x43AEDC, "mpqapi_store_creation_time stores the creation time of the save file to\nregistry.", 0);
apply_type (0x43AEDC, "void __fastcall mpqapi_store_creation_time(char *save_path, int save_num);", TINFO_DEFINITE);
cleanup("mpqapi_reg_load_modification_time");set_name(0x43AF4F, "mpqapi_reg_load_modification_time");
set_func_cmt(0x43AF4F, "mpqapi_reg_load_modification_time loads the save file creation times from\nregistry.", 0);
apply_type (0x43AF4F, "bool32_t __fastcall mpqapi_reg_load_modification_time(uint8_t *dst, int size);", TINFO_DEFINITE);
cleanup("mpqapi_xor_buf");set_name(0x43AFA5, "mpqapi_xor_buf");
set_func_cmt(0x43AFA5, "mpqapi_xor_buf encodes or decodes the modification time buffer using XOR.", 0);
apply_type (0x43AFA5, "void __fastcall mpqapi_xor_buf(uint8_t *buf);", TINFO_DEFINITE);
cleanup("mpqapi_reg_store_modification_time");set_name(0x43AFC4, "mpqapi_reg_store_modification_time");
set_func_cmt(0x43AFC4, "mpqapi_reg_store_modification_time stores the save file creation times to\nregistry.", 0);
apply_type (0x43AFC4, "bool32_t __fastcall mpqapi_reg_store_modification_time(uint8_t *src, int len);", TINFO_DEFINITE);
cleanup("j_mpqapi_remove_hash_entry");set_name(0x43AFFD, "j_mpqapi_remove_hash_entry");
set_func_cmt(0x43AFFD, "j_mpqapi_remove_hash_entry removes the hash entry of the give file path.", 0);
apply_type (0x43AFFD, "void __fastcall j_mpqapi_remove_hash_entry(char *path);", TINFO_DEFINITE);
cleanup("mpqapi_remove_hash_entry");set_name(0x43B002, "mpqapi_remove_hash_entry");
set_func_cmt(0x43B002, "mpqapi_remove_hash_entry removes the hash entry of the give file path.", 0);
apply_type (0x43B002, "void __fastcall mpqapi_remove_hash_entry(char *path);", TINFO_DEFINITE);
cleanup("mpqapi_free_block");set_name(0x43B054, "mpqapi_free_block");
set_func_cmt(0x43B054, "mpqapi_free_block frees the block at the specified block offset.", 0);
apply_type (0x43B054, "void __fastcall mpqapi_free_block(int block_offset, int block_size);", TINFO_DEFINITE);
cleanup("mpqapi_new_block");set_name(0x43B0E4, "mpqapi_new_block");
set_func_cmt(0x43B0E4, "mpqapi_new_block returns a new block entry and retrieves its block index.", 0);
apply_type (0x43B0E4, "BlockEntry * __fastcall mpqapi_new_block(int *block_index);", TINFO_DEFINITE);
cleanup("mpqapi_get_hash_index_of_path");set_name(0x43B123, "mpqapi_get_hash_index_of_path");
set_func_cmt(0x43B123, "mpqapi_get_hash_index_of_path returns the hash table index of the given path.", 0);
apply_type (0x43B123, "int __fastcall mpqapi_get_hash_index_of_path(char *path);", TINFO_DEFINITE);
cleanup("mpqapi_get_hash_index");set_name(0x43B153, "mpqapi_get_hash_index");
set_func_cmt(0x43B153, "mpqapi_get_hash_index returns the hash table index of the specified path\nhashes.", 0);
apply_type (0x43B153, "int __fastcall mpqapi_get_hash_index(int16_t index, int hash_a, int hash_b, int locale);", TINFO_DEFINITE);
cleanup("mpqapi_remove_hash_entries");set_name(0x43B1BD, "mpqapi_remove_hash_entries");
set_func_cmt(0x43B1BD, "mpqapi_remove_hash_entries removes the hash entires associated with the file\npaths returned by the get_file_name function.", 0);
apply_type (0x43B1BD, "void __fastcall mpqapi_remove_hash_entries(bool32_t (__stdcall *get_file_name)(int lvl, char *file_name));", TINFO_DEFINITE);
cleanup("mpqapi_write_file");set_name(0x43B1F8, "mpqapi_write_file");
set_func_cmt(0x43B1F8, "mpqapi_write_file creates a file of the given name with the specified file\ncontents in the archive.", 0);
apply_type (0x43B1F8, "bool32_t __fastcall mpqapi_write_file(char *file_name, uint8_t *buf, int len);", TINFO_DEFINITE);
cleanup("mpqapi_add_file");set_name(0x43B23D, "mpqapi_add_file");
set_func_cmt(0x43B23D, "mpqapi_add_file creates a block for the given file path.", 0);
apply_type (0x43B23D, "BlockEntry *__fastcall mpqapi_add_file(char *path, BlockEntry *block, int block_index);", TINFO_DEFINITE);
cleanup("mpqapi_write_file_contents");set_name(0x43B317, "mpqapi_write_file_contents");
set_func_cmt(0x43B317, "mpqapi_write_file_contents writes the file contents to a block.", 0);
apply_type (0x43B317, "bool32_t __fastcall mpqapi_write_file_contents(char *path, uint8_t *buf, int len, BlockEntry *block);", TINFO_DEFINITE);
cleanup("mpqapi_find_free_block");set_name(0x43B51C, "mpqapi_find_free_block");
set_func_cmt(0x43B51C, "mpqapi_find_free_block returns the block offset of the first free block of\nthe given size.", 0);
apply_type (0x43B51C, "uint32_t __fastcall mpqapi_find_free_block(int size, uint32_t *block_size);", TINFO_DEFINITE);
cleanup("mpqapi_rename");set_name(0x43B570, "mpqapi_rename");
set_func_cmt(0x43B570, "mpqapi_rename renames the given file to the specified name in the archive.", 0);
apply_type (0x43B570, "void __fastcall mpqapi_rename(char *old_name, char *new_name);", TINFO_DEFINITE);
cleanup("mpqapi_has_file");set_name(0x43B5AF, "mpqapi_has_file");
set_func_cmt(0x43B5AF, "mpqapi_has_file reports whether the MPQ archive contains a file with the\ngiven file path.", 0);
apply_type (0x43B5AF, "bool32_t __thiscall mpqapi_has_file(char *path);", TINFO_DEFINITE);
cleanup("mpqapi_open_archive");set_name(0x43B5BF, "mpqapi_open_archive");
set_func_cmt(0x43B5BF, "mpqapi_open_archive opens the given MPQ archive.", 0);
apply_type (0x43B5BF, "bool32_t __fastcall mpqapi_open_archive(char *save_path, bool32_t hidden, int save_num);", TINFO_DEFINITE);
cleanup("mpqapi_parse_archive_header");set_name(0x43B791, "mpqapi_parse_archive_header");
set_func_cmt(0x43B791, "mpqapi_parse_archive_header parses the MPQ archive header.", 0);
apply_type (0x43B791, "bool32_t __fastcall mpqapi_parse_archive_header(MPQHeader *header, uint32_t *mpq_offset);", TINFO_DEFINITE);
cleanup("mpqapi_close_archive");set_name(0x43B882, "mpqapi_close_archive");
set_func_cmt(0x43B882, "mpqapi_close_archive closes the given save archive.", 0);
apply_type (0x43B882, "void __fastcall mpqapi_close_archive(char *save_path, bool32_t free_tables, int save_num);", TINFO_DEFINITE);
cleanup("mpqapi_store_modified_time");set_name(0x43B8FD, "mpqapi_store_modified_time");
set_func_cmt(0x43B8FD, "mpqapi_store_modification_time stores the creation time of the given save\nfile to registry.", 0);
apply_type (0x43B8FD, "void __fastcall mpqapi_store_modified_time(char *save_path, int save_num);", TINFO_DEFINITE);
cleanup("mpqapi_flush_and_close");set_name(0x43B970, "mpqapi_flush_and_close");
set_func_cmt(0x43B970, "mpqapi_flush_and_close flushes changes and closes the save archive.", 0);
apply_type (0x43B970, "void __fastcall mpqapi_flush_and_close(char *save_path, bool32_t is_single_player, int save_num);", TINFO_DEFINITE);
cleanup("mpqapi_write_archive_header");set_name(0x43B9CA, "mpqapi_write_archive_header");
set_func_cmt(0x43B9CA, "mpqapi_write_archive_header writes the MPQ header to the active archive.", 0);
apply_type (0x43B9CA, "bool32_t mpqapi_write_archive_header();", TINFO_DEFINITE);
cleanup("mpqapi_write_block_table");set_name(0x43BA60, "mpqapi_write_block_table");
set_func_cmt(0x43BA60, "mpqapi_write_block_table writes the block table to the MPQ archive.", 0);
apply_type (0x43BA60, "bool32_t mpqapi_write_block_table();", TINFO_DEFINITE);
cleanup("mpqapi_write_hash_table");set_name(0x43BAEB, "mpqapi_write_hash_table");
set_func_cmt(0x43BAEB, "mpqapi_write_hash_table writes the hash table to the MPQ archive.", 0);
apply_type (0x43BAEB, "bool32_t mpqapi_write_hash_table();", TINFO_DEFINITE);
cleanup("mpqapi_can_seek");set_name(0x43BB79, "mpqapi_can_seek");
set_func_cmt(0x43BB79, "mpqapi_can_seek reports whether the active archive is seekable.", 0);
apply_type (0x43BB79, "bool32_t mpqapi_can_seek();", TINFO_DEFINITE);
cleanup("j_init_cpp_init");set_name(0x41A7B3, "j_init_cpp_init");
set_func_cmt(0x41A7B3, "j_init_cpp_init initializes the C++ runtime of init.cpp.", 0);
apply_type (0x41A7B3, "void j_init_cpp_init();", TINFO_DEFINITE);
cleanup("init_cpp_init");set_name(0x41A7B8, "init_cpp_init");
set_func_cmt(0x41A7B8, "init_cpp_init initializes the C++ runtime of init.cpp.", 0);
apply_type (0x41A7B8, "void init_cpp_init();", TINFO_DEFINITE);
cleanup("init_cleanup");set_name(0x41A7C3, "init_cleanup");
set_func_cmt(0x41A7C3, "init_cleanup terminates initialized resources.", 0);
apply_type (0x41A7C3, "void __fastcall init_cleanup(bool32_t show_cursor);", TINFO_DEFINITE);
cleanup("init_run_office_from_start_menu");set_name(0x41A84C, "init_run_office_from_start_menu");
set_func_cmt(0x41A84C, "init_run_office_from_start_menu runs Microsoft Office from the Start Menu if\na process with the \"MOM Parent\" class has been identified and killed.", 0);
apply_type (0x41A84C, "void init_run_office_from_start_menu();", TINFO_DEFINITE);
cleanup("init_run_office");set_name(0x41A8B9, "init_run_office");
set_func_cmt(0x41A8B9, "init_run_office runs Microsoft Office if there exists a shortcut to it from\nwithin the given directory.", 0);
apply_type (0x41A8B9, "void __fastcall init_run_office(char *dir);", TINFO_DEFINITE);
cleanup("init_disable_screensaver");set_name(0x41AA2C, "init_disable_screensaver");
set_func_cmt(0x41AA2C, "init_disable_screensaver either disables or restores the previous state of\nthe screensaver, depending on the given boolean value.", 0);
apply_type (0x41AA2C, "void __fastcall init_disable_screensaver(bool32_t disable);", TINFO_DEFINITE);
cleanup("init_main_window");set_name(0x41AAC5, "init_main_window");
set_func_cmt(0x41AAC5, "init_main_window initializes the main window.", 0);
apply_type (0x41AAC5, "void __fastcall init_main_window(int nCmdShow);", TINFO_DEFINITE);
cleanup("init_kill_mom_parent");set_name(0x41AC00, "init_kill_mom_parent");
set_func_cmt(0x41AC00, "init_kill_mom_parent kills the \"MOM Parent\" process if present.", 0);
apply_type (0x41AC00, "void init_kill_mom_parent();", TINFO_DEFINITE);
cleanup("init_find_mom_parent");set_name(0x41AC21, "init_find_mom_parent");
set_func_cmt(0x41AC21, "init_find_mom_parent attempts to locate the \"MOM Parent\" process and return\nits window handle.", 0);
apply_type (0x41AC21, "HWND init_find_mom_parent();", TINFO_DEFINITE);
cleanup("init_await_mom_parent_exit");set_name(0x41AC71, "init_await_mom_parent_exit");
set_func_cmt(0x41AC71, "init_await_mom_parent_exit waits up to 4 seconds for the \"MOM Parent\" process\nto exit.", 0);
apply_type (0x41AC71, "void init_await_mom_parent_exit();", TINFO_DEFINITE);
cleanup("init_strip_trailing_slash");set_name(0x41AF22, "init_strip_trailing_slash");
set_func_cmt(0x41AF22, "init_trim_trailing_slash removes up to one trailing slash characters from\npath.", 0);
apply_type (0x41AF22, "char * __fastcall init_strip_trailing_slash(char *path);", TINFO_DEFINITE);
cleanup("init_get_file_info");set_name(0x41AFCE, "init_get_file_info");
set_func_cmt(0x41AFCE, "init_get_file_info retrieves the game path and version number from the\nexecutable.", 0);
apply_type (0x41AFCE, "void init_get_file_info();", TINFO_DEFINITE);
cleanup("j_msgcmd_cpp_init_1");set_name(0x43F849, "j_msgcmd_cpp_init_1");
set_func_cmt(0x43F849, "j_msgcmd_cpp_init_1 initializes the C++ runtime of msgcmd.cpp.", 0);
apply_type (0x43F849, "void j_msgcmd_cpp_init_1();", TINFO_DEFINITE);
cleanup("msgcmd_cpp_init_1");set_name(0x43F84E, "msgcmd_cpp_init_1");
set_func_cmt(0x43F84E, "msgcmd_cpp_init_1 initializes the C++ runtime of msgcmd.cpp.", 0);
apply_type (0x43F84E, "void msgcmd_cpp_init_1();", TINFO_DEFINITE);
cleanup("msgcmd_cpp_init_2");set_name(0x43F859, "msgcmd_cpp_init_2");
set_func_cmt(0x43F859, "msgcmd_cpp_init_2 initializes the C++ runtime of msgcmd.cpp.", 0);
apply_type (0x43F859, "void msgcmd_cpp_init_2();", TINFO_DEFINITE);
cleanup("trigs_init_archbishop_lazarus_lair");set_name(0x4619A7, "trigs_init_archbishop_lazarus_lair");
set_func_cmt(0x4619A7, "trigs_init_archbishop_lazarus_lair initializers triggers on Archbishop\nLazarus' Lair.", 0);
apply_type (0x4619A7, "void trigs_init_archbishop_lazarus_lair();", TINFO_DEFINITE);
cleanup("trigs_init_warps_town");set_name(0x4619B6, "trigs_init_warps_town");
set_func_cmt(0x4619B6, "trigs_init_warps_town initializes opened entrances from Tristram to the\nvarious dungeon types of the Cathedral.", 0);
apply_type (0x4619B6, "void trigs_init_warps_town();", TINFO_DEFINITE);
cleanup("trigs_init_warps_cathedral");set_name(0x461B45, "trigs_init_warps_cathedral");
set_func_cmt(0x461B45, "trigs_init_warps_cathedral initializes entrances from the Cathedral to\nTristram.", 0);
apply_type (0x461B45, "void trigs_init_warps_cathedral();", TINFO_DEFINITE);
cleanup("trigs_init_warps_catacombs");set_name(0x461BEE, "trigs_init_warps_catacombs");
set_func_cmt(0x461BEE, "trigs_init_warps_catacombs initializes entrances from the Catacombs to\nTristram.", 0);
apply_type (0x461BEE, "void trigs_init_warps_catacombs();", TINFO_DEFINITE);
cleanup("trigs_init_warps_caves");set_name(0x461CF6, "trigs_init_warps_caves");
set_func_cmt(0x461CF6, "trigs_init_warps_caves initializes entrances from the Caves to Tristram.", 0);
apply_type (0x461CF6, "void trigs_init_warps_caves();", TINFO_DEFINITE);
cleanup("trigs_init_warps_hell");set_name(0x461DC6, "trigs_init_warps_hell");
set_func_cmt(0x461DC6, "trigs_init_warps_hell initializes entrances from Hell to Tristram.", 0);
apply_type (0x461DC6, "void trigs_init_warps_hell();", TINFO_DEFINITE);
cleanup("trigs_init_skeleton_kings_lair");set_name(0x461F0A, "trigs_init_skeleton_kings_lair");
set_func_cmt(0x461F0A, "trigs_init_skeleton_kings_lair initializers triggers on Skeleton King's Lair.", 0);
apply_type (0x461F0A, "void trigs_init_skeleton_kings_lair();", TINFO_DEFINITE);
cleanup("trigs_init_bone_chamber");set_name(0x461F3A, "trigs_init_bone_chamber");
set_func_cmt(0x461F3A, "trigs_init_bone_chamber initializers triggers on the Bone Chamber.", 0);
apply_type (0x461F3A, "void trigs_init_bone_chamber();", TINFO_DEFINITE);
cleanup("trigs_init_poisoned_water_supply");set_name(0x461F6A, "trigs_init_poisoned_water_supply");
set_func_cmt(0x461F6A, "trigs_init_poisoned_water_supply initializers triggers on the Poisoned Water\nSupply.", 0);
apply_type (0x461F6A, "void trigs_init_poisoned_water_supply();", TINFO_DEFINITE);
cleanup("trigs_init_warps_archbishop_lazarus_lair");set_name(0x461F9A, "trigs_init_warps_archbishop_lazarus_lair");
set_func_cmt(0x461F9A, "trigs_init_warps_archbishop_lazarus_lair initializers triggers on the\nArchbishop Lazarus' Lair.", 0);
apply_type (0x461F9A, "void trigs_init_warps_archbishop_lazarus_lair();", TINFO_DEFINITE);
cleanup("trigs_set_stairway_text_town");set_name(0x461FCA, "trigs_set_stairway_text_town");
set_func_cmt(0x461FCA, "trigs_set_stairway_text_town sets the description text of stairways in\nTristram.", 0);
apply_type (0x461FCA, "bool32_t trigs_set_stairway_text_town();", TINFO_DEFINITE);
cleanup("trigs_set_stairway_text_cathedral");set_name(0x462130, "trigs_set_stairway_text_cathedral");
set_func_cmt(0x462130, "trigs_set_stairway_text_cathedral sets the description text of stairways in\nthe Cathedral.", 0);
apply_type (0x462130, "bool32_t trigs_set_stairway_text_cathedral();", TINFO_DEFINITE);
cleanup("trigs_set_stairway_text_catacombs");set_name(0x46224C, "trigs_set_stairway_text_catacombs");
set_func_cmt(0x46224C, "trigs_set_stairway_text_catacombs sets the description text of stairways in\nthe Catacombs.", 0);
apply_type (0x46224C, "bool32_t trigs_set_stairway_text_catacombs();", TINFO_DEFINITE);
cleanup("trigs_set_stairway_text_caves");set_name(0x46244F, "trigs_set_stairway_text_caves");
set_func_cmt(0x46244F, "trigs_set_stairway_text_caves sets the description text of stairways in the\nCaves.", 0);
apply_type (0x46244F, "bool32_t trigs_set_stairway_text_caves();", TINFO_DEFINITE);
cleanup("trigs_set_stairway_text_hell");set_name(0x46262D, "trigs_set_stairway_text_hell");
set_func_cmt(0x46262D, "trigs_set_stairway_text_hell sets the description text of stairways in the\nHell.", 0);
apply_type (0x46262D, "bool32_t trigs_set_stairway_text_hell();", TINFO_DEFINITE);
cleanup("trigs_init_stairways_collision");set_name(0x462876, "trigs_init_stairways_collision");
set_func_cmt(0x462876, "trigs_init_stairways_collision initializes the collision properties of\nstairways.", 0);
apply_type (0x462876, "void trigs_init_stairways_collision();", TINFO_DEFINITE);
cleanup("trigs_set_stairway_text_skeleton_kings_lair");set_name(0x4628B7, "trigs_set_stairway_text_skeleton_kings_lair");
set_func_cmt(0x4628B7, "trigs_set_stairway_text_skeleton_kings_lair sets the description text of\nstairways in Skeleton King's Lair.", 0);
apply_type (0x4628B7, "bool32_t trigs_set_stairway_text_skeleton_kings_lair();", TINFO_DEFINITE);
cleanup("trigs_set_stairway_text_bone_chamber");set_name(0x46291F, "trigs_set_stairway_text_bone_chamber");
set_func_cmt(0x46291F, "trigs_set_stairway_text_bone_chamber sets the description text of stairways\nin the Bone Chamber.", 0);
apply_type (0x46291F, "bool32_t trigs_set_stairway_text_bone_chamber();", TINFO_DEFINITE);
cleanup("trigs_set_stairway_text_poisoned_water_supply");set_name(0x462987, "trigs_set_stairway_text_poisoned_water_supply");
set_func_cmt(0x462987, "trigs_set_stairway_text_poisoned_water_supply sets the description text of\nstairways in the Poisoned Water Supply.", 0);
apply_type (0x462987, "bool32_t trigs_set_stairway_text_poisoned_water_supply();", TINFO_DEFINITE);
cleanup("trigs_print_stairway_text_on_hover");set_name(0x4629EF, "trigs_print_stairway_text_on_hover");
set_func_cmt(0x4629EF, "trigs_print_stairway_text_on_hover prints a description of stairways on\nmouse hover.", 0);
apply_type (0x4629EF, "void trigs_print_stairway_text_on_hover();", TINFO_DEFINITE);
cleanup("trigs_process");set_name(0x462A9D, "trigs_process");
set_func_cmt(0x462A9D, "trigs_process processes any game state changes of the triggers, since the\nlast game tick.", 0);
apply_type (0x462A9D, "void trigs_process();", TINFO_DEFINITE);
cleanup("j_nthread_cpp_init_1");set_name(0x440DAE, "j_nthread_cpp_init_1");
set_func_cmt(0x440DAE, "j_nthread_cpp_init_1 initializes the C++ runtime of nthread.cpp.", 0);
apply_type (0x440DAE, "void j_nthread_cpp_init_1();", TINFO_DEFINITE);
cleanup("nthread_cpp_init_1");set_name(0x440DB3, "nthread_cpp_init_1");
set_func_cmt(0x440DB3, "nthread_cpp_init_1 initializes the C++ runtime of nthread.cpp.", 0);
apply_type (0x440DB3, "void nthread_cpp_init_1();", TINFO_DEFINITE);
cleanup("nthread_cpp_init_2");set_name(0x440DBE, "nthread_cpp_init_2");
set_func_cmt(0x440DBE, "nthread_cpp_init_2 initializes the C++ runtime of nthread.cpp.", 0);
apply_type (0x440DBE, "void nthread_cpp_init_2();", TINFO_DEFINITE);
cleanup("nthread_init_mutex");set_name(0x440DC8, "nthread_init_mutex");
set_func_cmt(0x440DC8, "nthread_init_mutex initializes the networking thread mutex.", 0);
apply_type (0x440DC8, "void nthread_init_mutex();", TINFO_DEFINITE);
cleanup("nthread_cleanup_mutex_atexit");set_name(0x440DD4, "nthread_cleanup_mutex_atexit");
set_func_cmt(0x440DD4, "nthread_cleanup_mutex_atexit terminates the networking thread mutex at exit.", 0);
apply_type (0x440DD4, "void nthread_cleanup_mutex_atexit();", TINFO_DEFINITE);
cleanup("nthread_cleanup_mutex");set_name(0x440DE0, "nthread_cleanup_mutex");
set_func_cmt(0x440DE0, "nthread_cleanup_mutex terminates the networking thread mutex.", 0);
apply_type (0x440DE0, "void nthread_cleanup_mutex();", TINFO_DEFINITE);
cleanup("nthread_terminate_game");set_name(0x440DEC, "nthread_terminate_game");
set_func_cmt(0x440DEC, "nthread_terminate_game terminates the current game.", 0);
apply_type (0x440DEC, "void __fastcall nthread_terminate_game(char *func_name);", TINFO_DEFINITE);
cleanup("nthread_send_and_recv_turn");set_name(0x440E28, "nthread_send_and_recv_turn");
set_func_cmt(0x440E28, "nthread_send_and_recv_turn synchronizes turns with connected peers.", 0);
apply_type (0x440E28, "int __fastcall nthread_send_and_recv_turn(int cur_turn, int turn_delta);", TINFO_DEFINITE);
cleanup("nthread_recv_turns");set_name(0x440EAA, "nthread_recv_turns");
set_func_cmt(0x440EAA, "nthread_recv_turns recieves turns from connected peers.", 0);
apply_type (0x440EAA, "void __fastcall nthread_recv_turns(bool32_t *recieved);", TINFO_DEFINITE);
cleanup("nthread_set_turn_upper_bit");set_name(0x440F56, "nthread_set_turn_upper_bit");
set_func_cmt(0x440F56, "nthread_set_turn_upper_bit sets the upper bit of the turn.", 0);
apply_type (0x440F56, "void nthread_set_turn_upper_bit();", TINFO_DEFINITE);
cleanup("nthread_start");set_name(0x440F61, "nthread_start");
set_func_cmt(0x440F61, "nthread_start starts the networking thread.", 0);
apply_type (0x440F61, "void __fastcall nthread_start(bool32_t set_turn_upper_bit);", TINFO_DEFINITE);
cleanup("nthread_handler");set_name(0x4410CF, "nthread_handler");
set_func_cmt(0x4410CF, "nthread_handler is the networking thread which synchronizes turns of connected peers.", 0);
apply_type (0x4410CF, "int __stdcall nthread_handler(void *a1);", TINFO_DEFINITE);
cleanup("nthread_cleanup");set_name(0x441145, "nthread_cleanup");
set_func_cmt(0x441145, "nthread_cleanup terminates the networking thread.", 0);
apply_type (0x441145, "void nthread_cleanup();", TINFO_DEFINITE);
cleanup("nthread_ignore_mutex");set_name(0x4411C4, "nthread_ignore_mutex");
set_func_cmt(0x4411C4, "nthread_ignore_mutex specifies whether to ignore the networking thread mutex.", 0);
apply_type (0x4411C4, "void __fastcall nthread_ignore_mutex(bool32_t ignore_mutex);", TINFO_DEFINITE);
cleanup("nthread_has_500ms_passed");set_name(0x4411EF, "nthread_has_500ms_passed");
set_func_cmt(0x4411EF, "nthread_has_500ms_passed reports whether 500ms has passed for retrieving turns.", 0);
apply_type (0x4411EF, "bool32_t nthread_has_500ms_passed();", TINFO_DEFINITE);
cleanup("j_sound_cpp_init");set_name(0x456CBB, "j_sound_cpp_init");
set_func_cmt(0x456CBB, "j_sound_cpp_init initializes the C++ runtime of sound.cpp.", 0);
apply_type (0x456CBB, "void j_sound_cpp_init();", TINFO_DEFINITE);
cleanup("sound_cpp_init");set_name(0x456CC0, "sound_cpp_init");
set_func_cmt(0x456CC0, "sound_cpp_init initializes the C++ runtime of sound.cpp.", 0);
apply_type (0x456CC0, "void sound_cpp_init();", TINFO_DEFINITE);
cleanup("sound_update");set_name(0x456CCB, "sound_update");
set_func_cmt(0x456CCB, "sound_update stops finished sounds from playing on all audio channels.", 0);
apply_type (0x456CCB, "void __fastcall sound_update(bool32_t stop_all);", TINFO_DEFINITE);
cleanup("sound_file_stop");set_name(0x456D22, "sound_file_stop");
set_func_cmt(0x456D22, "sound_file_stop stops the given sound file from playing.", 0);
apply_type (0x456D22, "void __fastcall sound_file_stop(SoundFile *sound_file);", TINFO_DEFINITE);
cleanup("sound_file_is_playing");set_name(0x456D34, "sound_file_is_playing");
set_func_cmt(0x456D34, "sound_file_is_playing reports whether the given sound file is playing.", 0);
apply_type (0x456D34, "bool32_t __fastcall sound_file_is_playing(SoundFile *sound_file);", TINFO_DEFINITE);
cleanup("sound_file_play");set_name(0x456D60, "sound_file_play");
set_func_cmt(0x456D60, "sound_file_play plays the given sound file.", 0);
apply_type (0x456D60, "void __fastcall sound_file_play(SoundFile *sound_file, int volume_delta, int pan);", TINFO_DEFINITE);
cleanup("sound_dup_channel");set_name(0x456E39, "sound_dup_channel");
set_func_cmt(0x456E39, "sound_dup_channel returns a duplicate of the given audio channel.", 0);
apply_type (0x456E39, "IDirectSoundBuffer * __fastcall sound_dup_channel(IDirectSoundBuffer *DSB);", TINFO_DEFINITE);
cleanup("sound_file_reload");set_name(0x456E74, "sound_file_reload");
set_func_cmt(0x456E74, "sound_file_reload reloads the given sound file.", 0);
apply_type (0x456E74, "bool32_t __fastcall sound_file_reload(SoundFile *sound_file, IDirectSoundBuffer *DSB);", TINFO_DEFINITE);
cleanup("sound_file_load");set_name(0x456F07, "sound_file_load");
set_func_cmt(0x456F07, "sound_file_load loads the given sound file.", 0);
apply_type (0x456F07, "SoundFile *__fastcall sound_file_load(char *path);", TINFO_DEFINITE);
cleanup("sound_CreateSoundBuffer");set_name(0x457003, "sound_CreateSoundBuffer");
set_func_cmt(0x457003, "sound_CreateSoundBuffer creates a sound buffer for the given sound file.", 0);
apply_type (0x457003, "void __fastcall sound_CreateSoundBuffer(SoundFile *sound_file);", TINFO_DEFINITE);
cleanup("sound_file_cleanup");set_name(0x457060, "sound_file_cleanup");
set_func_cmt(0x457060, "sound_file_cleanup stops the given sound file and releases its resources.", 0);
apply_type (0x457060, "void __fastcall sound_file_cleanup(SoundFile *sound_file);", TINFO_DEFINITE);
cleanup("sound_init");set_name(0x45708B, "sound_init");
set_func_cmt(0x45708B, "sound_init initializes the sound system.", 0);
apply_type (0x45708B, "void __fastcall sound_init(HWND hWnd);", TINFO_DEFINITE);
cleanup("sound_load_volume");set_name(0x45712B, "sound_load_volume");
set_func_cmt(0x45712B, "sound_load_volume loads the sound volume.", 0);
apply_type (0x45712B, "void __fastcall sound_load_volume(char *value_name, int *value);", TINFO_DEFINITE);
cleanup("sound_create_primary_buffer");set_name(0x45717C, "sound_create_primary_buffer");
set_func_cmt(0x45717C, "sound_create_primary_buffer creates a sound buffer for the given music track.", 0);
apply_type (0x45717C, "void __fastcall sound_create_primary_buffer(int music_track);", TINFO_DEFINITE);
cleanup("sound_DirectSoundCreate");set_name(0x45727E, "sound_DirectSoundCreate");
set_func_cmt(0x45727E, "sound_DirectSoundCreate initializes the DirectSound interface.", 0);
apply_type (0x45727E, "int __fastcall sound_DirectSoundCreate(GUID *guid, IDirectSound **DS, int always_null);", TINFO_DEFINITE);
cleanup("sound_cleanup");set_name(0x4572FF, "sound_cleanup");
set_func_cmt(0x4572FF, "sound_cleanup terminates the sound system.", 0);
apply_type (0x4572FF, "void sound_cleanup();", TINFO_DEFINITE);
cleanup("sound_store_volume");set_name(0x457358, "sound_store_volume");
set_func_cmt(0x457358, "sound_store_volume stores the sound volume.", 0);
apply_type (0x457358, "void __fastcall sound_store_volume(char *key, int value);", TINFO_DEFINITE);
cleanup("sound_stop_music");set_name(0x457367, "sound_stop_music");
set_func_cmt(0x457367, "sound_stop_music stops the background music playback.", 0);
apply_type (0x457367, "void sound_stop_music();", TINFO_DEFINITE);
cleanup("sound_start_music");set_name(0x457393, "sound_start_music");
set_func_cmt(0x457393, "sound_start_music starts the background music playback.", 0);
apply_type (0x457393, "void __fastcall sound_start_music(int music_track_id);", TINFO_DEFINITE);
cleanup("sound_disable_music");set_name(0x4573FE, "sound_disable_music");
set_func_cmt(0x4573FE, "sound_disable_music disables or enables the music.", 0);
apply_type (0x4573FE, "void __fastcall sound_disable_music(bool32_t disable);", TINFO_DEFINITE);
cleanup("sound_get_or_set_music_volume");set_name(0x457418, "sound_get_or_set_music_volume");
set_func_cmt(0x457418, "sound_get_or_set_music_volume gets or sets the music volume.", 0);
apply_type (0x457418, "int __fastcall sound_get_or_set_music_volume(int volume);", TINFO_DEFINITE);
cleanup("sound_get_or_set_sound_volume");set_name(0x45743B, "sound_get_or_set_sound_volume");
set_func_cmt(0x45743B, "sound_get_or_set_sound_volume gets or sets the sound volume.", 0);
apply_type (0x45743B, "int __fastcall sound_get_or_set_sound_volume(int volume);", TINFO_DEFINITE);
cleanup("j_track_cpp_init");set_name(0x4618A5, "j_track_cpp_init");
set_func_cmt(0x4618A5, "j_track_cpp_init initializes the C++ runtime of track.cpp.", 0);
apply_type (0x4618A5, "void j_track_cpp_init();", TINFO_DEFINITE);
cleanup("track_cpp_init");set_name(0x4618AA, "track_cpp_init");
set_func_cmt(0x4618AA, "track_cpp_init initializes the C++ runtime of track.cpp.", 0);
apply_type (0x4618AA, "void track_cpp_init();", TINFO_DEFINITE);
cleanup("track_process");set_name(0x4618B5, "track_process");
set_func_cmt(0x4618B5, "track_process processes mouse input to perform walk actions when the left\nmouse button is held down.", 0);
apply_type (0x4618B5, "void track_process();", TINFO_DEFINITE);
cleanup("track_set_walk_tracking");set_name(0x461953, "track_set_walk_tracking");
set_func_cmt(0x461953, "track_set_walk_tracking sets the tracking of continued walk actions (when\nthe left mouse button is held down).", 0);
apply_type (0x461953, "void __fastcall track_set_walk_tracking(bool32_t active);", TINFO_DEFINITE);
cleanup("track_is_walk_tracking_active");set_name(0x46199F, "track_is_walk_tracking_active");
set_func_cmt(0x46199F, "track_is_walk_tracking_active reports whether walk tracking is active (i.e.\nthe mouse button is held down to walk).", 0);
apply_type (0x46199F, "bool32_t track_is_walk_tracking_active();", TINFO_DEFINITE);
cleanup("restrict_is_os_supported");set_name(0x452831, "restrict_is_os_supported");
set_func_cmt(0x452831, "restrict_is_os_supported reports whether the OS is Windows 2000 or newer.", 0);
apply_type (0x452831, "bool32_t restrict_is_os_supported();", TINFO_DEFINITE);
cleanup("restrict_check_win_dir_write_access");set_name(0x452885, "restrict_check_win_dir_write_access");
set_func_cmt(0x452885, "restrict_check_win_dir_write_access checks whether the process has write\naccess to the windows directory. A return value of false states that the\nprocess has write access.", 0);
apply_type (0x452885, "bool32_t restrict_check_win_dir_write_access();", TINFO_DEFINITE);
cleanup("restrict_check_game_dir_write_access");set_name(0x4528F7, "restrict_check_game_dir_write_access");
set_func_cmt(0x4528F7, "restrict_check_game_dir_write_access checks whether the process has write\naccess to the game directory. A return value of false states that the\nprocess has write access.", 0);
apply_type (0x4528F7, "bool32_t restrict_check_game_dir_write_access();", TINFO_DEFINITE);
cleanup("j_scrollrt_cpp_init");set_name(0x452975, "j_scrollrt_cpp_init");
set_func_cmt(0x452975, "j_scrollrt_cpp_init initializes the C++ runtime of scrollrt.cpp.", 0);
apply_type (0x452975, "void j_scrollrt_cpp_init();", TINFO_DEFINITE);
cleanup("scrollrt_cpp_init");set_name(0x45297A, "scrollrt_cpp_init");
set_func_cmt(0x45297A, "scrollrt_cpp_init initializes the C++ runtime of scrollrt.cpp.", 0);
apply_type (0x45297A, "void scrollrt_cpp_init();", TINFO_DEFINITE);
cleanup("scrollrt_draw");set_name(0x453160, "scrollrt_draw");
set_func_cmt(0x453160, "scrollrt_draw renders the UI and the game world in dungeons on screen.", 0);
apply_type (0x453160, "void __fastcall scrollrt_draw(int x, int y);", TINFO_DEFINITE);
cleanup("scrollrt_draw_game");set_name(0x453272, "scrollrt_draw_game");
set_func_cmt(0x453272, "scrollrt_draw_game renders the game world in dungeons on screen.", 0);
apply_type (0x453272, "void __fastcall scrollrt_draw_game(int x, int y);", TINFO_DEFINITE);
cleanup("scrollrt_draw_zoomed_game");set_name(0x455BD4, "scrollrt_draw_zoomed_game");
set_func_cmt(0x455BD4, "scrollrt_draw_zoomed_game renders a zoomed-in version of the game world in\ndungeons on screen.", 0);
apply_type (0x455BD4, "void __fastcall scrollrt_draw_zoomed_game(int x, int y);", TINFO_DEFINITE);
cleanup("drlg_l3_create_dungeon");set_name(0x4103A1, "drlg_l3_create_dungeon");
set_func_cmt(0x4103A1, "drlg_l3_create_dungeon creates a random caves dungeon based on the given seed\nand level entry.", 0);
apply_type (0x4103A1, "void __fastcall drlg_l3_create_dungeon(uint32_t seed, int entry);", TINFO_DEFINITE);
cleanup("drlg_l3_place_miniset");set_name(0x411A74, "drlg_l3_place_miniset");
set_func_cmt(0x411A74, "drlg_l3_place_miniset places the given miniset of tile IDs.", 0);
apply_type (0x411A74, "bool32_t __fastcall drlg_l3_place_miniset(char *miniset, int tmin, int tmax, int cx, int cy, bool32_t set_view, int ldir);", TINFO_DEFINITE);
cleanup("items_load_drop_graphics");set_name(0x41F096, "items_load_drop_graphics");
set_func_cmt(0x41F096, "items_load_drop_graphics loads item drop graphics and initializes the\ntracking of dropped unique items.", 0);
apply_type (0x41F096, "void items_load_drop_graphics();", TINFO_DEFINITE);
cleanup("items_can_place");set_name(0x41F0E8, "items_can_place");
set_func_cmt(0x41F0E8, "items_can_place reports whether it is possible to place an item at the given\ncoordinate.", 0);
apply_type (0x41F0E8, "bool32_t __fastcall items_can_place(int x, int y);", TINFO_DEFINITE);
cleanup("items_add_init_items");set_name(0x41F13A, "items_add_init_items");
set_func_cmt(0x41F13A, "items_add_init_items adds the starting items on the ground of the map.", 0);
apply_type (0x41F13A, "void items_add_init_items();", TINFO_DEFINITE);
cleanup("items_init");set_name(0x41F24E, "items_init");
set_func_cmt(0x41F24E, "items_init initializes the items on the ground of the map.", 0);
apply_type (0x41F24E, "void items_init();", TINFO_DEFINITE);
cleanup("items_calc_player_item_values");set_name(0x41F320, "items_calc_player_item_values");
set_func_cmt(0x41F320, "items_calc_player_item_values calculates the player bonus from items.", 0);
apply_type (0x41F320, "void __fastcall items_calc_player_item_values(int player_num, bool32_t load_gfx);", TINFO_DEFINITE);
cleanup("items_create_from_item_id");set_name(0x41FD98, "items_create_from_item_id");
set_func_cmt(0x41FD98, "items_create_from_item_id creates a new item based on the given item ID.", 0);
apply_type (0x41FD98, "void __fastcall items_create_from_item_id(Item *item, item_id item_id);", TINFO_DEFINITE);
cleanup("items_init_item_seed");set_name(0x41FE98, "items_init_item_seed");
set_func_cmt(0x41FE98, "items_init_item_seed generates a unique seed for the item.", 0);
apply_type (0x41FE98, "void __fastcall items_init_item_seed(Item *item);", TINFO_DEFINITE);
cleanup("items_gen_seed");set_name(0x41FEA4, "items_gen_seed");
set_func_cmt(0x41FEA4, "items_gen_seed generates a seed for the given item, distinct from the seed\nvalues of all other active items.", 0);
apply_type (0x41FEA4, "void __fastcall items_gen_seed(int player_num, int32_t *item_seed);", TINFO_DEFINITE);
cleanup("items_create_player_starting_items");set_name(0x41FF4E, "items_create_player_starting_items");
set_func_cmt(0x41FF4E, "items_create_player_starting_items creates the starting items for the given\nplayer.", 0);
apply_type (0x41FF4E, "void __fastcall items_create_player_starting_items(int player_num);", TINFO_DEFINITE);
cleanup("items_get_rand_loot_id_from_monster");set_name(0x421A4B, "items_get_rand_loot_id_from_monster");
set_func_cmt(0x421A4B, "items_get_rand_loot_id_from_monster returns the loot ID of a random item\ndrop from the monster.\nThe loot ID is positive for regular items and negative for unique items, as\nfurther described by the following pseudo-code.\n   switch {\n   case loot_id > 0:\n      // regular item drop.\n      item_id = loot_id - 1\n   case loot_id < 0:\n      // unique item drop.\n      unique_item_id = -loot_id - 1\n   case loot_id == 0:\n      // no item drop.\n   }\nThe drops are calculated as follows.\n   * Winged Fiends (i.e. Fiend, Blink, Gloom and Familiar) never drop items.\n   * The Butcher always drops The Butcher's Cleaver.\n   * Skeleton King always drops The Undead Crown.\n   1) rnd(100) > 40: no drop\n   2) rnd(100) > 25: drop gold\n   3) Drop a random item with qlvl <= mlvl\n      - The drop rate of an item determines if it has non-existant, regular\n        or double chance of dropping.\n      - In single player, items with the Resurrect or the Heal Other spell\n        never drop.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/enums.h#item_id\n   * https://github.com/sanctuary/notes/blob/master/enums.h#unique_item_id", 0);
apply_type (0x421A4B, "int __fastcall items_get_rand_loot_id_from_monster(int monster_num);", TINFO_DEFINITE);
cleanup("items_draw_unique_item_box");set_name(0x4236A6, "items_draw_unique_item_box");
set_func_cmt(0x4236A6, "items_draw_unique_item_box renders the unique item box on screen.", 0);
apply_type (0x4236A6, "void items_draw_unique_item_box();", TINFO_DEFINITE);
cleanup("items_is_equipable");set_name(0x4241D7, "items_is_equipable");
set_func_cmt(0x4241D7, "items_is_equipable reports whether the given item is equipable.", 0);
apply_type (0x4241D7, "bool32_t __fastcall items_is_equipable(Item *item);", TINFO_DEFINITE);
cleanup("items_create_base_gold");set_name(0x424D57, "items_create_base_gold");
set_func_cmt(0x424D57, "items_create_base_gold creates the base gold item.", 0);
apply_type (0x424D57, "void items_create_base_gold();", TINFO_DEFINITE);
cleanup("items_update_stores_equipable");set_name(0x42501F, "items_update_stores_equipable");
set_func_cmt(0x42501F, "items_update_stores_equipable updates the equipability of store owner items.", 0);
apply_type (0x42501F, "void items_update_stores_equipable();", TINFO_DEFINITE);
cleanup("menu_music_track_id");set_name(0x494898, "menu_music_track_id");
set_cmt(0x494898, "menu_music_track_id specifies the active music track id for the main menu.", 0);
apply_type (0x494898, "extern track_id menu_music_track_id;", TINFO_DEFINITE);
cleanup("str_49489C");set_name(0x49489C, "str_49489C");
set_cmt(0x49489C, "\"Can't load multiplayer dialog\"", 0);
apply_type (0x49489C, "extern char str_49489C[30];", TINFO_DEFINITE);
cleanup("str_4948BC");set_name(0x4948BC, "str_4948BC");
set_cmt(0x4948BC, "\"Unable to display SelHeroSing\"", 0);
apply_type (0x4948BC, "extern char str_4948BC[30];", TINFO_DEFINITE);
cleanup("str_4948DC");set_name(0x4948DC, "str_4948DC");
set_cmt(0x4948DC, "\"Unable to display mainmenu\"", 0);
apply_type (0x4948DC, "extern char str_4948DC[27];", TINFO_DEFINITE);
cleanup("x_delta_from_start_location_tristram");set_name(0x4A0EF8, "x_delta_from_start_location_tristram");
set_cmt(0x4A0EF8, "x_delta_from_start_location_tristram specifies the X-coordinate delta from\nthe player start location in Tristram.", 0);
apply_type (0x4A0EF8, "extern int x_delta_from_start_location_tristram[9];", TINFO_DEFINITE);
cleanup("y_delta_from_start_location_tristram");set_name(0x4A0F1C, "y_delta_from_start_location_tristram");
set_cmt(0x4A0F1C, "y_delta_from_start_location_tristram specifies the Y-coordinate delta from\nthe player start location in Tristram.", 0);
apply_type (0x4A0F1C, "extern int y_delta_from_start_location_tristram[9];", TINFO_DEFINITE);
cleanup("x_delta_from_player");set_name(0x4A0F40, "x_delta_from_player");
set_cmt(0x4A0F40, "x_delta_from_player specifies the X-coordinate delta from a player, used for\ninstanced when casting resurrect.", 0);
apply_type (0x4A0F40, "extern int x_delta_from_player[9];", TINFO_DEFINITE);
cleanup("y_delta_from_player");set_name(0x4A0F64, "y_delta_from_player");
set_cmt(0x4A0F64, "y_delta_from_player specifies the Y-coordinate delta from a player, used for\ninstanced when casting resurrect.", 0);
apply_type (0x4A0F64, "extern int y_delta_from_player[9];", TINFO_DEFINITE);
cleanup("action_frame_from_player_class");set_name(0x4A0F88, "action_frame_from_player_class");
set_cmt(0x4A0F88, "action_frame_from_player_class specifies the frame of each animation for\nwhich an action is triggered, for each player class.", 0);
apply_type (0x4A0F88, "extern ActionFrame action_frame_from_player_class[3];", TINFO_DEFINITE);
cleanup("start_str_from_player_class");set_name(0x4A0FDC, "start_str_from_player_class");
set_cmt(0x4A0FDC, "start_str_from_player_class maps from player_class to starting stat in\nstrength.", 0);
apply_type (0x4A0FDC, "extern int start_str_from_player_class[3];", TINFO_DEFINITE);
cleanup("start_mag_from_player_class");set_name(0x4A0FE8, "start_mag_from_player_class");
set_cmt(0x4A0FE8, "start_mag_from_player_class maps from player_class to starting stat in magic.", 0);
apply_type (0x4A0FE8, "extern int start_mag_from_player_class[3];", TINFO_DEFINITE);
cleanup("start_dex_from_player_class");set_name(0x4A0FF4, "start_dex_from_player_class");
set_cmt(0x4A0FF4, "start_dex_from_player_class maps from player_class to starting stat in\ndexterity.", 0);
apply_type (0x4A0FF4, "extern int start_dex_from_player_class[3];", TINFO_DEFINITE);
cleanup("start_vit_from_player_class");set_name(0x4A1000, "start_vit_from_player_class");
set_cmt(0x4A1000, "start_vit_from_player_class maps from player_class to starting stat in\nvitality.", 0);
apply_type (0x4A1000, "extern int start_vit_from_player_class[3];", TINFO_DEFINITE);
cleanup("start_chance_to_block_bonus_from_player_class");set_name(0x4A100C, "start_chance_to_block_bonus_from_player_class");
set_cmt(0x4A100C, "start_chance_to_block_bonus_from_player_class specifies the chance to block\nbonus of each player class.", 0);
apply_type (0x4A100C, "extern int start_chance_to_block_bonus_from_player_class[3];", TINFO_DEFINITE);
cleanup("player_class_names2");set_name(0x4A1018, "player_class_names2");
set_cmt(0x4A1018, "player_class_names2 specifies the name of each player class.", 0);
apply_type (0x4A1018, "extern char *player_class_names2[3];", TINFO_DEFINITE);
cleanup("max_stat_from_player_class");set_name(0x4A1024, "max_stat_from_player_class");
set_cmt(0x4A1024, "max_stat_from_player_class maps from player_class to maximum stats.", 0);
apply_type (0x4A1024, "extern Stats max_stat_from_player_class[3];", TINFO_DEFINITE);
cleanup("exp_limit");set_name(0x4A1054, "exp_limit");
set_cmt(0x4A1054, "exp_limit specifies the experience point limit of each level.", 0);
apply_type (0x4A1054, "extern int exp_limit[51];", TINFO_DEFINITE);
cleanup("player_class_names");set_name(0x4A1120, "player_class_names");
set_cmt(0x4A1120, "player_class_names specifies the name of each player class.", 0);
apply_type (0x4A1120, "extern char *player_class_names[3];", TINFO_DEFINITE);
cleanup("str_4A1138");set_name(0x4A1138, "str_4A1138");
set_cmt(0x4A1138, "`PlrGFX\%s\%s\%s%s.CL2`", 0);
apply_type (0x4A1138, "extern char str_4A1138[22];", TINFO_DEFINITE);
cleanup("str_4A1150");set_name(0x4A1150, "str_4A1150");
set_cmt(0x4A1150, "\"FM\"", 0);
apply_type (0x4A1150, "extern char str_4A1150[3];", TINFO_DEFINITE);
cleanup("str_4A1154");set_name(0x4A1154, "str_4A1154");
set_cmt(0x4A1154, "\"QM\"", 0);
apply_type (0x4A1154, "extern char str_4A1154[3];", TINFO_DEFINITE);
cleanup("str_4A1158");set_name(0x4A1158, "str_4A1158");
set_cmt(0x4A1158, "\"DT\"", 0);
apply_type (0x4A1158, "extern char str_4A1158[3];", TINFO_DEFINITE);
cleanup("str_4A115C");set_name(0x4A115C, "str_4A115C");
set_cmt(0x4A115C, "\"BL\"", 0);
apply_type (0x4A115C, "extern char str_4A115C[3];", TINFO_DEFINITE);
cleanup("str_4A1160");set_name(0x4A1160, "str_4A1160");
set_cmt(0x4A1160, "\"PLR:2\"", 0);
apply_type (0x4A1160, "extern char str_4A1160[6];", TINFO_DEFINITE);
cleanup("str_4A1168");set_name(0x4A1168, "str_4A1168");
set_cmt(0x4A1168, "\"LM\"", 0);
apply_type (0x4A1168, "extern char str_4A1168[3];", TINFO_DEFINITE);
cleanup("str_4A116C");set_name(0x4A116C, "str_4A116C");
set_cmt(0x4A116C, "\"ST\"", 0);
apply_type (0x4A116C, "extern char str_4A116C[3];", TINFO_DEFINITE);
cleanup("str_4A1170");set_name(0x4A1170, "str_4A1170");
set_cmt(0x4A1170, "\"AS\"", 0);
apply_type (0x4A1170, "extern char str_4A1170[3];", TINFO_DEFINITE);
cleanup("str_4A1174");set_name(0x4A1174, "str_4A1174");
set_cmt(0x4A1174, "\"WL\"", 0);
apply_type (0x4A1174, "extern char str_4A1174[3];", TINFO_DEFINITE);
cleanup("str_4A1178");set_name(0x4A1178, "str_4A1178");
set_cmt(0x4A1178, "\"AW\"", 0);
apply_type (0x4A1178, "extern char str_4A1178[3];", TINFO_DEFINITE);
cleanup("str_4A117C");set_name(0x4A117C, "str_4A117C");
set_cmt(0x4A117C, "\"AT\"", 0);
apply_type (0x4A117C, "extern char str_4A117C[3];", TINFO_DEFINITE);
cleanup("str_4A1180");set_name(0x4A1180, "str_4A1180");
set_cmt(0x4A1180, "\"HT\"", 0);
apply_type (0x4A1180, "extern char str_4A1180[3];", TINFO_DEFINITE);
cleanup("str_4A1184");set_name(0x4A1184, "str_4A1184");
set_cmt(0x4A1184, "\"%c%c%c\"", 0);
apply_type (0x4A1184, "extern char str_4A1184[7];", TINFO_DEFINITE);
cleanup("str_4A118C");set_name(0x4A118C, "str_4A118C");
set_cmt(0x4A118C, "\"LoadPlrGFX: illegal player %d\"", 0);
apply_type (0x4A118C, "extern char str_4A118C[30];", TINFO_DEFINITE);
cleanup("str_4A11AC");set_name(0x4A11AC, "str_4A11AC");
set_cmt(0x4A11AC, "\"InitPlayerGFX: illegal player %d\"", 0);
apply_type (0x4A11AC, "extern char str_4A11AC[33];", TINFO_DEFINITE);
cleanup("str_4A11D0");set_name(0x4A11D0, "str_4A11D0");
set_cmt(0x4A11D0, "\"InitPlrGFXMem: illegal player %d\"", 0);
apply_type (0x4A11D0, "extern char str_4A11D0[33];", TINFO_DEFINITE);
cleanup("str_4A11F4");set_name(0x4A11F4, "str_4A11F4");
set_cmt(0x4A11F4, "\"FreePlayerGFX: illegal player %d\"", 0);
apply_type (0x4A11F4, "extern char str_4A11F4[33];", TINFO_DEFINITE);
cleanup("str_4A1218");set_name(0x4A1218, "str_4A1218");
set_cmt(0x4A1218, "\"NewPlrAnim: illegal player %d\"", 0);
apply_type (0x4A1218, "extern char str_4A1218[30];", TINFO_DEFINITE);
cleanup("str_4A1238");set_name(0x4A1238, "str_4A1238");
set_cmt(0x4A1238, "\"ClearPlrPVars: illegal player %d\"", 0);
apply_type (0x4A1238, "extern char str_4A1238[33];", TINFO_DEFINITE);
cleanup("str_4A125C");set_name(0x4A125C, "str_4A125C");
set_cmt(0x4A125C, "\"SetPlrAnims: illegal player %d\"", 0);
apply_type (0x4A125C, "extern char str_4A125C[31];", TINFO_DEFINITE);
cleanup("str_4A127C");set_name(0x4A127C, "str_4A127C");
set_cmt(0x4A127C, "\"CreatePlayer: illegal player %d\"", 0);
apply_type (0x4A127C, "extern char str_4A127C[32];", TINFO_DEFINITE);
cleanup("str_4A129C");set_name(0x4A129C, "str_4A129C");
set_cmt(0x4A129C, "\"NextPlrLevel: illegal player %d\"", 0);
apply_type (0x4A129C, "extern char str_4A129C[32];", TINFO_DEFINITE);
cleanup("str_4A12BC");set_name(0x4A12BC, "str_4A12BC");
set_cmt(0x4A12BC, "\"AddPlrExperience: illegal player %d\"", 0);
apply_type (0x4A12BC, "extern char str_4A12BC[36];", TINFO_DEFINITE);
cleanup("str_4A12E0");set_name(0x4A12E0, "str_4A12E0");
set_cmt(0x4A12E0, "\"InitPlayer: illegal player %d\"", 0);
apply_type (0x4A12E0, "extern char str_4A12E0[30];", TINFO_DEFINITE);
cleanup("str_4A1300");set_name(0x4A1300, "str_4A1300");
set_cmt(0x4A1300, "\"PlrDirOK: illegal player %d\"", 0);
apply_type (0x4A1300, "extern char str_4A1300[28];", TINFO_DEFINITE);
cleanup("str_4A131C");set_name(0x4A131C, "str_4A131C");
set_cmt(0x4A131C, "\"SetPlayerOld: illegal player %d\"", 0);
apply_type (0x4A131C, "extern char str_4A131C[32];", TINFO_DEFINITE);
cleanup("str_4A133C");set_name(0x4A133C, "str_4A133C");
set_cmt(0x4A133C, "\"FixPlayerLocation: illegal player %d\"", 0);
apply_type (0x4A133C, "extern char str_4A133C[37];", TINFO_DEFINITE);
cleanup("str_4A1364");set_name(0x4A1364, "str_4A1364");
set_cmt(0x4A1364, "\"StartStand: illegal player %d\"", 0);
apply_type (0x4A1364, "extern char str_4A1364[30];", TINFO_DEFINITE);
cleanup("str_4A1384");set_name(0x4A1384, "str_4A1384");
set_cmt(0x4A1384, "\"StartWalkStand: illegal player %d\"", 0);
apply_type (0x4A1384, "extern char str_4A1384[34];", TINFO_DEFINITE);
cleanup("str_4A13A8");set_name(0x4A13A8, "str_4A13A8");
set_cmt(0x4A13A8, "\"PM_ChangeLightOff: illegal player %d\"", 0);
apply_type (0x4A13A8, "extern char str_4A13A8[37];", TINFO_DEFINITE);
cleanup("str_4A13D0");set_name(0x4A13D0, "str_4A13D0");
set_cmt(0x4A13D0, "\"PM_ChangeOffset: illegal player %d\"", 0);
apply_type (0x4A13D0, "extern char str_4A13D0[35];", TINFO_DEFINITE);
cleanup("str_4A13F4");set_name(0x4A13F4, "str_4A13F4");
set_cmt(0x4A13F4, "\"StartWalk: illegal player %d\"", 0);
apply_type (0x4A13F4, "extern char str_4A13F4[29];", TINFO_DEFINITE);
cleanup("str_4A1414");set_name(0x4A1414, "str_4A1414");
set_cmt(0x4A1414, "\"StartWalk2: illegal player %d\"", 0);
apply_type (0x4A1414, "extern char str_4A1414[30];", TINFO_DEFINITE);
cleanup("str_4A1434");set_name(0x4A1434, "str_4A1434");
set_cmt(0x4A1434, "\"StartWalk3: illegal player %d\"", 0);
apply_type (0x4A1434, "extern char str_4A1434[30];", TINFO_DEFINITE);
cleanup("str_4A1454");set_name(0x4A1454, "str_4A1454");
set_cmt(0x4A1454, "\"StartAttack: illegal player %d\"", 0);
apply_type (0x4A1454, "extern char str_4A1454[31];", TINFO_DEFINITE);
cleanup("str_4A1474");set_name(0x4A1474, "str_4A1474");
set_cmt(0x4A1474, "\"StartRangeAttack: illegal player %d\"", 0);
apply_type (0x4A1474, "extern char str_4A1474[36];", TINFO_DEFINITE);
cleanup("str_4A1498");set_name(0x4A1498, "str_4A1498");
set_cmt(0x4A1498, "\"StartPlrBlock: illegal player %d\"", 0);
apply_type (0x4A1498, "extern char str_4A1498[33];", TINFO_DEFINITE);
cleanup("str_4A14BC");set_name(0x4A14BC, "str_4A14BC");
set_cmt(0x4A14BC, "\"StartSpell: illegal player %d\"", 0);
apply_type (0x4A14BC, "extern char str_4A14BC[30];", TINFO_DEFINITE);
cleanup("str_4A14DC");set_name(0x4A14DC, "str_4A14DC");
set_cmt(0x4A14DC, "\"FixPlrWalkTags: illegal player %d\"", 0);
apply_type (0x4A14DC, "extern char str_4A14DC[34];", TINFO_DEFINITE);
cleanup("str_4A1500");set_name(0x4A1500, "str_4A1500");
set_cmt(0x4A1500, "\"StartPlrHit: illegal player %d\"", 0);
apply_type (0x4A1500, "extern char str_4A1500[31];", TINFO_DEFINITE);
cleanup("str_4A1520");set_name(0x4A1520, "str_4A1520");
set_cmt(0x4A1520, "\"StartPlayerKill: illegal player %d\"", 0);
apply_type (0x4A1520, "extern char str_4A1520[35];", TINFO_DEFINITE);
cleanup("str_4A1544");set_name(0x4A1544, "str_4A1544");
set_cmt(0x4A1544, "\"PlrDeadItem: illegal player %d\"", 0);
apply_type (0x4A1544, "extern char str_4A1544[31];", TINFO_DEFINITE);
cleanup("str_4A1564");set_name(0x4A1564, "str_4A1564");
set_cmt(0x4A1564, "\"DropHalfPlayersGold: illegal player %d\"", 0);
apply_type (0x4A1564, "extern char str_4A1564[39];", TINFO_DEFINITE);
cleanup("str_4A158C");set_name(0x4A158C, "str_4A158C");
set_cmt(0x4A158C, "\"StartNewLvl\"", 0);
apply_type (0x4A158C, "extern char str_4A158C[12];", TINFO_DEFINITE);
cleanup("str_4A1598");set_name(0x4A1598, "str_4A1598");
set_cmt(0x4A1598, "\"StartNewLvl: illegal player %d\"", 0);
apply_type (0x4A1598, "extern char str_4A1598[31];", TINFO_DEFINITE);
cleanup("str_4A15B8");set_name(0x4A15B8, "str_4A15B8");
set_cmt(0x4A15B8, "\"RestartTownLvl: illegal player %d\"", 0);
apply_type (0x4A15B8, "extern char str_4A15B8[34];", TINFO_DEFINITE);
cleanup("str_4A15DC");set_name(0x4A15DC, "str_4A15DC");
set_cmt(0x4A15DC, "\"PM_DoWalk: illegal player %d\"", 0);
apply_type (0x4A15DC, "extern char str_4A15DC[29];", TINFO_DEFINITE);
cleanup("str_4A15FC");set_name(0x4A15FC, "str_4A15FC");
set_cmt(0x4A15FC, "\"PM_DoWalk2: illegal player %d\"", 0);
apply_type (0x4A15FC, "extern char str_4A15FC[30];", TINFO_DEFINITE);
cleanup("str_4A161C");set_name(0x4A161C, "str_4A161C");
set_cmt(0x4A161C, "\"PM_DoWalk3: illegal player %d\"", 0);
apply_type (0x4A161C, "extern char str_4A161C[30];", TINFO_DEFINITE);
cleanup("str_4A163C");set_name(0x4A163C, "str_4A163C");
set_cmt(0x4A163C, "\"WeaponDur: illegal player %d\"", 0);
apply_type (0x4A163C, "extern char str_4A163C[29];", TINFO_DEFINITE);
cleanup("str_4A165C");set_name(0x4A165C, "str_4A165C");
set_cmt(0x4A165C, "\"PlrHitMonst: illegal player %d\"", 0);
apply_type (0x4A165C, "extern char str_4A165C[31];", TINFO_DEFINITE);
cleanup("str_4A167C");set_name(0x4A167C, "str_4A167C");
set_cmt(0x4A167C, "\"PlrHitMonst: illegal monster %d\"", 0);
apply_type (0x4A167C, "extern char str_4A167C[32];", TINFO_DEFINITE);
cleanup("str_4A169C");set_name(0x4A169C, "str_4A169C");
set_cmt(0x4A169C, "\"PlrHitPlr: illegal attacking player %d\"", 0);
apply_type (0x4A169C, "extern char str_4A169C[39];", TINFO_DEFINITE);
cleanup("str_4A16C4");set_name(0x4A16C4, "str_4A16C4");
set_cmt(0x4A16C4, "\"PlrHitPlr: illegal target player %d\"", 0);
apply_type (0x4A16C4, "extern char str_4A16C4[36];", TINFO_DEFINITE);
cleanup("str_4A16E8");set_name(0x4A16E8, "str_4A16E8");
set_cmt(0x4A16E8, "\"PM_DoAttack: illegal player %d\"", 0);
apply_type (0x4A16E8, "extern char str_4A16E8[31];", TINFO_DEFINITE);
cleanup("str_4A1708");set_name(0x4A1708, "str_4A1708");
set_cmt(0x4A1708, "\"PM_DoRangeAttack: illegal player %d\"", 0);
apply_type (0x4A1708, "extern char str_4A1708[36];", TINFO_DEFINITE);
cleanup("str_4A172C");set_name(0x4A172C, "str_4A172C");
set_cmt(0x4A172C, "\"ShieldDur: illegal player %d\"", 0);
apply_type (0x4A172C, "extern char str_4A172C[29];", TINFO_DEFINITE);
cleanup("str_4A174C");set_name(0x4A174C, "str_4A174C");
set_cmt(0x4A174C, "\"PM_DoBlock: illegal player %d\"", 0);
apply_type (0x4A174C, "extern char str_4A174C[30];", TINFO_DEFINITE);
cleanup("str_4A176C");set_name(0x4A176C, "str_4A176C");
set_cmt(0x4A176C, "\"PM_DoSpell: illegal player %d\"", 0);
apply_type (0x4A176C, "extern char str_4A176C[30];", TINFO_DEFINITE);
cleanup("str_4A178C");set_name(0x4A178C, "str_4A178C");
set_cmt(0x4A178C, "\"PM_DoGotHit: illegal player %d\"", 0);
apply_type (0x4A178C, "extern char str_4A178C[31];", TINFO_DEFINITE);
cleanup("str_4A17AC");set_name(0x4A17AC, "str_4A17AC");
set_cmt(0x4A17AC, "\"ArmorDur: illegal player %d\"", 0);
apply_type (0x4A17AC, "extern char str_4A17AC[28];", TINFO_DEFINITE);
cleanup("str_4A17C8");set_name(0x4A17C8, "str_4A17C8");
set_cmt(0x4A17C8, "\"PM_DoDeath: illegal player %d\"", 0);
apply_type (0x4A17C8, "extern char str_4A17C8[30];", TINFO_DEFINITE);
cleanup("str_4A17E8");set_name(0x4A17E8, "str_4A17E8");
set_cmt(0x4A17E8, "\"CheckNewPath: illegal player %d\"", 0);
apply_type (0x4A17E8, "extern char str_4A17E8[32];", TINFO_DEFINITE);
cleanup("str_4A1808");set_name(0x4A1808, "str_4A1808");
set_cmt(0x4A1808, "\"PlrDeathModeOK: illegal player %d\"", 0);
apply_type (0x4A1808, "extern char str_4A1808[34];", TINFO_DEFINITE);
cleanup("str_4A182C");set_name(0x4A182C, "str_4A182C");
set_cmt(0x4A182C, "\"ValidatePlayer: illegal player %d\"", 0);
apply_type (0x4A182C, "extern char str_4A182C[34];", TINFO_DEFINITE);
cleanup("str_4A1850");set_name(0x4A1850, "str_4A1850");
set_cmt(0x4A1850, "\"ProcessPlayers: illegal player %d\"", 0);
apply_type (0x4A1850, "extern char str_4A1850[34];", TINFO_DEFINITE);
cleanup("str_4A1874");set_name(0x4A1874, "str_4A1874");
set_cmt(0x4A1874, "\"ClrPlrPath: illegal player %d\"", 0);
apply_type (0x4A1874, "extern char str_4A1874[30];", TINFO_DEFINITE);
cleanup("str_4A1894");set_name(0x4A1894, "str_4A1894");
set_cmt(0x4A1894, "\"MakePlrPath: illegal player %d\"", 0);
apply_type (0x4A1894, "extern char str_4A1894[31];", TINFO_DEFINITE);
cleanup("str_4A18B4");set_name(0x4A18B4, "str_4A18B4");
set_cmt(0x4A18B4, "\"CheckPlrSpell: illegal player %d\"", 0);
apply_type (0x4A18B4, "extern char str_4A18B4[33];", TINFO_DEFINITE);
cleanup("str_4A18D8");set_name(0x4A18D8, "str_4A18D8");
set_cmt(0x4A18D8, "\"SyncPlrAnim\"", 0);
apply_type (0x4A18D8, "extern char str_4A18D8[12];", TINFO_DEFINITE);
cleanup("str_4A18E4");set_name(0x4A18E4, "str_4A18E4");
set_cmt(0x4A18E4, "\"SyncPlrAnim: illegal player %d\"", 0);
apply_type (0x4A18E4, "extern char str_4A18E4[31];", TINFO_DEFINITE);
cleanup("str_4A1904");set_name(0x4A1904, "str_4A1904");
set_cmt(0x4A1904, "\"SyncInitPlr: illegal player %d\"", 0);
apply_type (0x4A1904, "extern char str_4A1904[31];", TINFO_DEFINITE);
cleanup("str_4A1924");set_name(0x4A1924, "str_4A1924");
set_cmt(0x4A1924, "\"CheckStats: illegal player %d\"", 0);
apply_type (0x4A1924, "extern char str_4A1924[30];", TINFO_DEFINITE);
cleanup("str_4A1944");set_name(0x4A1944, "str_4A1944");
set_cmt(0x4A1944, "\"ModifyPlrStr: illegal player %d\"", 0);
apply_type (0x4A1944, "extern char str_4A1944[32];", TINFO_DEFINITE);
cleanup("str_4A1964");set_name(0x4A1964, "str_4A1964");
set_cmt(0x4A1964, "\"ModifyPlrMag: illegal player %d\"", 0);
apply_type (0x4A1964, "extern char str_4A1964[32];", TINFO_DEFINITE);
cleanup("str_4A1984");set_name(0x4A1984, "str_4A1984");
set_cmt(0x4A1984, "\"ModifyPlrDex: illegal player %d\"", 0);
apply_type (0x4A1984, "extern char str_4A1984[32];", TINFO_DEFINITE);
cleanup("str_4A19A4");set_name(0x4A19A4, "str_4A19A4");
set_cmt(0x4A19A4, "\"ModifyPlrVit: illegal player %d\"", 0);
apply_type (0x4A19A4, "extern char str_4A19A4[32];", TINFO_DEFINITE);
cleanup("str_4A19C4");set_name(0x4A19C4, "str_4A19C4");
set_cmt(0x4A19C4, "\"SetPlayerHitPoints: illegal player %d\"", 0);
apply_type (0x4A19C4, "extern char str_4A19C4[38];", TINFO_DEFINITE);
cleanup("str_4A19EC");set_name(0x4A19EC, "str_4A19EC");
set_cmt(0x4A19EC, "\"SetPlrStr: illegal player %d\"", 0);
apply_type (0x4A19EC, "extern char str_4A19EC[29];", TINFO_DEFINITE);
cleanup("str_4A1A0C");set_name(0x4A1A0C, "str_4A1A0C");
set_cmt(0x4A1A0C, "\"SetPlrMag: illegal player %d\"", 0);
apply_type (0x4A1A0C, "extern char str_4A1A0C[29];", TINFO_DEFINITE);
cleanup("str_4A1A2C");set_name(0x4A1A2C, "str_4A1A2C");
set_cmt(0x4A1A2C, "\"SetPlrDex: illegal player %d\"", 0);
apply_type (0x4A1A2C, "extern char str_4A1A2C[29];", TINFO_DEFINITE);
cleanup("str_4A1A4C");set_name(0x4A1A4C, "str_4A1A4C");
set_cmt(0x4A1A4C, "\"SetPlrVit: illegal player %d\"", 0);
apply_type (0x4A1A4C, "extern char str_4A1A4C[29];", TINFO_DEFINITE);
cleanup("str_4A1A6C");set_name(0x4A1A6C, "str_4A1A6C");
set_cmt(0x4A1A6C, "\"InitDungMsgs: illegal player %d\"", 0);
apply_type (0x4A1A6C, "extern char str_4A1A6C[32];", TINFO_DEFINITE);
cleanup("str_4A1A8C");set_name(0x4A1A8C, "str_4A1A8C");
set_cmt(0x4A1A8C, "\"PlayDungMsgs: illegal player %d\"", 0);
apply_type (0x4A1A8C, "extern char str_4A1A8C[32];", TINFO_DEFINITE);
cleanup("tile_draw_masks");set_name(0x4B327D, "tile_draw_masks");
set_cmt(0x4B327D, "tile_draw_masks specifies the draw masks used to render transparency of\ntiles.", 0);
apply_type (0x4B327D, "extern uint32_t tile_draw_masks[96];", TINFO_DEFINITE);
cleanup("str_4862F4");set_name(0x4862F4, "str_4862F4");
set_cmt(0x4862F4, "`C:\Src\Diablo\Source\dx.cpp`", 0);
apply_type (0x4862F4, "extern char str_4862F4[28];", TINFO_DEFINITE);
cleanup("str_486310");set_name(0x486310, "str_486310");
set_cmt(0x486310, "\"DirectDrawCreate\"", 0);
apply_type (0x486310, "extern char str_486310[17];", TINFO_DEFINITE);
cleanup("str_486324");set_name(0x486324, "str_486324");
set_cmt(0x486324, "\"ddraw.dll\"", 0);
apply_type (0x486324, "extern char str_486324[10];", TINFO_DEFINITE);
cleanup("str_486330");set_name(0x486330, "str_486330");
set_cmt(0x486330, "\"lock_buf_priv\"", 0);
apply_type (0x486330, "extern char str_486330[14];", TINFO_DEFINITE);
cleanup("str_486340");set_name(0x486340, "str_486340");
set_cmt(0x486340, "\"draw consistency error\"", 0);
apply_type (0x486340, "extern char str_486340[23];", TINFO_DEFINITE);
cleanup("str_486358");set_name(0x486358, "str_486358");
set_cmt(0x486358, "\"draw main unlock error\"", 0);
apply_type (0x486358, "extern char str_486358[23];", TINFO_DEFINITE);
cleanup("step_from_movement_delta");set_name(0x4A0D70, "step_from_movement_delta");
set_cmt(0x4A0D70, "step_from_movement_delta maps from X-Y delta movement to step.\n     5\n    2 1\n   8 0 6\n    4 3\n     7", 0);
apply_type (0x4A0D70, "extern step step_from_movement_delta[3][3];", TINFO_DEFINITE);
cleanup("str_48D770");set_name(0x48D770, "str_48D770");
set_cmt(0x48D770, "`C:\Src\Diablo\Source\ENGINE.CPP`", 0);
apply_type (0x48D770, "extern char str_48D770[32];", TINFO_DEFINITE);
cleanup("str_48D790");set_name(0x48D790, "str_48D790");
set_cmt(0x48D790, "\"Zero length SFILE:\n%s\"", 0);
apply_type (0x48D790, "extern char str_48D790[22];", TINFO_DEFINITE);
cleanup("str_48D7A8");set_name(0x48D7A8, "str_48D7A8");
set_cmt(0x48D7A8, "\"LoadFileWithMem(NULL):\n%s\"", 0);
apply_type (0x48D7A8, "extern char str_48D7A8[26];", TINFO_DEFINITE);
cleanup("str_48E44C");set_name(0x48E44C, "str_48E44C");
set_cmt(0x48E44C, "\"Press ESC to end or the arrow keys to scroll.\"", 0);
apply_type (0x48E44C, "extern char str_48E44C[46];", TINFO_DEFINITE);
cleanup("str_48E47C");set_name(0x48E47C, "str_48E47C");
set_cmt(0x48E47C, "\"Diablo Help\"", 0);
apply_type (0x48E47C, "extern char str_48E47C[12];", TINFO_DEFINITE);
cleanup("str_484250");set_name(0x484250, "str_484250");
set_cmt(0x484250, "`Data\Inv\Objcurs.CEL`", 0);
apply_type (0x484250, "extern char str_484250[21];", TINFO_DEFINITE);
cleanup("str_484268");set_name(0x484268, "str_484268");
set_cmt(0x484268, "\"from %s\"", 0);
apply_type (0x484268, "extern char str_484268[8];", TINFO_DEFINITE);
cleanup("str_484270");set_name(0x484270, "str_484270");
set_cmt(0x484270, "\"Town Portal\"", 0);
apply_type (0x484270, "extern char str_484270[12];", TINFO_DEFINITE);
cleanup("str_48427C");set_name(0x48427C, "str_48427C");
set_cmt(0x48427C, "\"level 15\"", 0);
apply_type (0x48427C, "extern char str_48427C[9];", TINFO_DEFINITE);
cleanup("str_484288");set_name(0x484288, "str_484288");
set_cmt(0x484288, "\"The Unholy Altar\"", 0);
apply_type (0x484288, "extern char str_484288[17];", TINFO_DEFINITE);
cleanup("str_48429C");set_name(0x48429C, "str_48429C");
set_cmt(0x48429C, "\"Portal to\"", 0);
apply_type (0x48429C, "extern char str_48429C[10];", TINFO_DEFINITE);
cleanup("str_4842A8");set_name(0x4842A8, "str_4842A8");
set_cmt(0x4842A8, "`Data\Square.CEL`", 0);
apply_type (0x4842A8, "extern char str_4842A8[16];", TINFO_DEFINITE);
cleanup("str_4842B8");set_name(0x4842B8, "str_4842B8");
set_cmt(0x4842B8, "\"Players not cleared\"", 0);
apply_type (0x4842B8, "extern char str_4842B8[20];", TINFO_DEFINITE);
cleanup("str_4842CC");set_name(0x4842CC, "str_4842CC");
set_cmt(0x4842CC, "\"Monsters not cleared\"", 0);
apply_type (0x4842CC, "extern char str_4842CC[21];", TINFO_DEFINITE);
cleanup("quest_data");set_name(0x4A1AE0, "quest_data");
set_cmt(0x4A1AE0, "quest_data contains the data related to each quest_id.", 0);
apply_type (0x4A1AE0, "extern QuestData quest_data[16];", TINFO_DEFINITE);
cleanup("quest_entrance_cursor_x_delta");set_name(0x4A1C20, "quest_entrance_cursor_x_delta");
set_cmt(0x4A1C20, "quest_entrance_cursor_x_delta specifies a delta in X-coordinates from the\nquest entrance for which the hover text of the cursor will be visible.", 0);
apply_type (0x4A1C20, "extern int8_t quest_entrance_cursor_x_delta[7];", TINFO_DEFINITE);
cleanup("quest_entrance_cursor_y_delta");set_name(0x4A1C28, "quest_entrance_cursor_y_delta");
set_cmt(0x4A1C28, "quest_entrance_cursor_y_delta specifies a delta in Y-coordinates from the\nquest entrance for which the hover text of the cursor will be visible.", 0);
apply_type (0x4A1C28, "extern int8_t quest_entrance_cursor_y_delta[7];", TINFO_DEFINITE);
cleanup("quest_stairway_names");set_name(0x4A1C30, "quest_stairway_names");
set_cmt(0x4A1C30, "quest_stairway_names specifies the names of quest levels for the hover text\nof the cursor.", 0);
apply_type (0x4A1C30, "extern char *quest_stairway_names[5];", TINFO_DEFINITE);
cleanup("rand_quest_id_group_1");set_name(0x04A1C44, "rand_quest_id_group_1");
set_cmt(0x04A1C44, "rand_quest_id_group_1 is a quest group containing the three quests the\nButcher, Ogden's Sign and Gharbad the Weak, which ensures that exactly one of\nthese three quests appears in any single player game.", 0);
apply_type (0x04A1C44, "extern int rand_quest_id_group_1[3];", TINFO_DEFINITE);
cleanup("rand_quest_id_group_2");set_name(0x04A1C50, "rand_quest_id_group_2");
set_cmt(0x04A1C50, "rand_quest_id_group_2 is a quest group containing the three quests Halls of\nthe Blind, the Magic Rock and Valor, which ensures that exactly one of these\nthree quests appears in any single player game.", 0);
apply_type (0x04A1C50, "extern int rand_quest_id_group_2[3];", TINFO_DEFINITE);
cleanup("rand_quest_id_group_3");set_name(0x04A1C5C, "rand_quest_id_group_3");
set_cmt(0x04A1C5C, "rand_quest_id_group_3 is a quest group containing the three quests Black\nMushroom, Zhar the Mad and Anvil of Fury, which ensures that exactly one of\nthese three quests appears in any single player game.", 0);
apply_type (0x04A1C5C, "extern int rand_quest_id_group_3[3];", TINFO_DEFINITE);
cleanup("rand_quest_id_group_4");set_name(0x04A1C68, "rand_quest_id_group_4");
set_cmt(0x04A1C68, "rand_quest_id_group_4 is a quest group containing the two quests Lachdanan\nand Warlord of Blood, which ensures that exactly one of these two quests\nappears in any single player game.", 0);
apply_type (0x04A1C68, "extern int rand_quest_id_group_4[2];", TINFO_DEFINITE);
cleanup("str_4A1C70");set_name(0x4A1C70, "str_4A1C70");
set_cmt(0x4A1C70, "\"Unholy Altar\"", 0);
apply_type (0x4A1C70, "extern char str_4A1C70[13];", TINFO_DEFINITE);
cleanup("str_4A1C80");set_name(0x4A1C80, "str_4A1C80");
set_cmt(0x4A1C80, "\"A Dark Passage\"", 0);
apply_type (0x4A1C80, "extern char str_4A1C80[15];", TINFO_DEFINITE);
cleanup("str_4A1C90");set_name(0x4A1C90, "str_4A1C90");
set_cmt(0x4A1C90, "\"Maze\"", 0);
apply_type (0x4A1C90, "extern char str_4A1C90[5];", TINFO_DEFINITE);
cleanup("str_4A1C98");set_name(0x4A1C98, "str_4A1C98");
set_cmt(0x4A1C98, "\"King Leoric's Tomb\"", 0);
apply_type (0x4A1C98, "extern char str_4A1C98[19];", TINFO_DEFINITE);
cleanup("str_4A1CAC");set_name(0x4A1CAC, "str_4A1CAC");
set_cmt(0x4A1CAC, "\"Archbishop Lazarus\"", 0);
apply_type (0x4A1CAC, "extern char str_4A1CAC[19];", TINFO_DEFINITE);
cleanup("str_4A1CC0");set_name(0x4A1CC0, "str_4A1CC0");
set_cmt(0x4A1CC0, "\"The Chamber of Bone\"", 0);
apply_type (0x4A1CC0, "extern char str_4A1CC0[20];", TINFO_DEFINITE);
cleanup("str_4A1CD4");set_name(0x4A1CD4, "str_4A1CD4");
set_cmt(0x4A1CD4, "\"Poisoned Water Supply\"", 0);
apply_type (0x4A1CD4, "extern char str_4A1CD4[22];", TINFO_DEFINITE);
cleanup("str_4A1CEC");set_name(0x4A1CEC, "str_4A1CEC");
set_cmt(0x4A1CEC, "\"The Curse of King Leoric\"", 0);
apply_type (0x4A1CEC, "extern char str_4A1CEC[25];", TINFO_DEFINITE);
cleanup("str_4A1D08");set_name(0x4A1D08, "str_4A1D08");
set_cmt(0x4A1D08, "\"Valor\"", 0);
apply_type (0x4A1D08, "extern char str_4A1D08[6];", TINFO_DEFINITE);
cleanup("str_4A1D10");set_name(0x4A1D10, "str_4A1D10");
set_cmt(0x4A1D10, "\"Halls of the Blind\"", 0);
apply_type (0x4A1D10, "extern char str_4A1D10[19];", TINFO_DEFINITE);
cleanup("str_4A1D24");set_name(0x4A1D24, "str_4A1D24");
set_cmt(0x4A1D24, "\"Ogden's Sign\"", 0);
apply_type (0x4A1D24, "extern char str_4A1D24[13];", TINFO_DEFINITE);
cleanup("str_4A1D34");set_name(0x4A1D34, "str_4A1D34");
set_cmt(0x4A1D34, "\"Gharbad The Weak\"", 0);
apply_type (0x4A1D34, "extern char str_4A1D34[17];", TINFO_DEFINITE);
cleanup("str_4A1D48");set_name(0x4A1D48, "str_4A1D48");
set_cmt(0x4A1D48, "\"The Magic Rock\"", 0);
apply_type (0x4A1D48, "extern char str_4A1D48[15];", TINFO_DEFINITE);
cleanup("str_4A1D58");set_name(0x4A1D58, "str_4A1D58");
set_cmt(0x4A1D58, "\"Levels\L3Data\L3pwater.pal\"", 0);
apply_type (0x4A1D58, "extern char str_4A1D58[27];", TINFO_DEFINITE);
cleanup("str_4A1D74");set_name(0x4A1D74, "str_4A1D74");
set_cmt(0x4A1D74, "\"To %s\"", 0);
apply_type (0x4A1D74, "extern char str_4A1D74[6];", TINFO_DEFINITE);
cleanup("str_4A1D7C");set_name(0x4A1D7C, "str_4A1D7C");
set_cmt(0x4A1D7C, "\"Levels\L4Data\Warlord2.DUN\"", 0);
apply_type (0x4A1D7C, "extern char str_4A1D7C[27];", TINFO_DEFINITE);
cleanup("str_4A1D98");set_name(0x4A1D98, "str_4A1D98");
set_cmt(0x4A1D98, "\"Levels\L2Data\Bonestr1.DUN\"", 0);
apply_type (0x4A1D98, "extern char str_4A1D98[27];", TINFO_DEFINITE);
cleanup("str_4A1DB4");set_name(0x4A1DB4, "str_4A1DB4");
set_cmt(0x4A1DB4, "\"Levels\L2Data\Blind1.DUN\"", 0);
apply_type (0x4A1DB4, "extern char str_4A1DB4[25];", TINFO_DEFINITE);
cleanup("str_4A1DD0");set_name(0x4A1DD0, "str_4A1DD0");
set_cmt(0x4A1DD0, "\"Levels\L3Data\L3pfoul.pal\"", 0);
apply_type (0x4A1DD0, "extern char str_4A1DD0[26];", TINFO_DEFINITE);
cleanup("str_4A1DEC");set_name(0x4A1DEC, "str_4A1DEC");
set_cmt(0x4A1DEC, "\"Close Quest Log\"", 0);
apply_type (0x4A1DEC, "extern char str_4A1DEC[16];", TINFO_DEFINITE);
cleanup("str_4A1DFC");set_name(0x4A1DFC, "str_4A1DFC");
set_cmt(0x4A1DFC, "\"Quest Log\"", 0);
apply_type (0x4A1DFC, "extern char str_4A1DFC[10];", TINFO_DEFINITE);
cleanup("str_4B26A4");set_name(0x4B26A4, "str_4B26A4");
set_cmt(0x4B26A4, "`Levels\TownData\Sector4s.DUN`", 0);
apply_type (0x4B26A4, "extern char str_4B26A4[29];", TINFO_DEFINITE);
cleanup("str_4B26C4");set_name(0x4B26C4, "str_4B26C4");
set_cmt(0x4B26C4, "`Levels\TownData\Sector3s.DUN`", 0);
apply_type (0x4B26C4, "extern char str_4B26C4[29];", TINFO_DEFINITE);
cleanup("str_4B26E4");set_name(0x4B26E4, "str_4B26E4");
set_cmt(0x4B26E4, "`Levels\TownData\Sector2s.DUN`", 0);
apply_type (0x4B26E4, "extern char str_4B26E4[29];", TINFO_DEFINITE);
cleanup("str_4B2704");set_name(0x4B2704, "str_4B2704");
set_cmt(0x4B2704, "`Levels\TownData\Sector1s.DUN`", 0);
apply_type (0x4B2704, "extern char str_4B2704[29];", TINFO_DEFINITE);
cleanup("str_4947C0");set_name(0x4947C0, "str_4947C0");
set_cmt(0x4947C0, "\"Invalid save file\"", 0);
apply_type (0x4947C0, "extern char str_4947C0[18];", TINFO_DEFINITE);
cleanup("log_not_created");set_name(0x4947D4, "log_not_created");
set_cmt(0x4947D4, "log_not_created specifies whether the log file has not yet been created.", 0);
apply_type (0x4947D4, "extern bool32_t log_not_created;", TINFO_DEFINITE);
cleanup("log_file");set_name(0x4947D8, "log_file");
set_cmt(0x4947D8, "log_file is a handle to the log file.", 0);
apply_type (0x4947D8, "extern HANDLE log_file;", TINFO_DEFINITE);
cleanup("str_4947DC");set_name(0x4947DC, "str_4947DC");
set_cmt(0x4947DC, "`c:\`", 0);
apply_type (0x4947DC, "extern char str_4947DC[4];", TINFO_DEFINITE);
cleanup("str_4947E0");set_name(0x4947E0, "str_4947E0");
set_cmt(0x4947E0, "\"%s%s%02u%02u%02u.ERR\"", 0);
apply_type (0x4947E0, "extern char str_4947E0[21];", TINFO_DEFINITE);
cleanup("str_4947F8");set_name(0x4947F8, "str_4947F8");
set_cmt(0x4947F8, "\"\r\n------------------------------------------------------\r\nPROGRAM VERSION: %d.%d.%d.%d\r\nCOMPUTER NAME: %s\r\nTIME: %02u/%02u/%02u %02u:%02u:%02u\r\nINFO: %s\r\n\r\n\"", 0);
apply_type (0x4947F8, "extern char str_4947F8[157];", TINFO_DEFINITE);
cleanup("str_48E810");set_name(0x48E810, "str_48E810");
set_cmt(0x48E810, "\"Unknown progress mode\"", 0);
apply_type (0x48E810, "extern char str_48E810[22];", TINFO_DEFINITE);
cleanup("str_48E828");set_name(0x48E828, "str_48E828");
set_cmt(0x48E828, "`Gendata\Cuttt.pal`", 0);
apply_type (0x48E828, "extern char str_48E828[18];", TINFO_DEFINITE);
cleanup("str_48E83C");set_name(0x48E83C, "str_48E83C");
set_cmt(0x48E83C, "`Gendata\Cuttt.CEL`", 0);
apply_type (0x48E83C, "extern char str_48E83C[18];", TINFO_DEFINITE);
cleanup("str_48E850");set_name(0x48E850, "str_48E850");
set_cmt(0x48E850, "`Gendata\Cut3.pal`", 0);
apply_type (0x48E850, "extern char str_48E850[17];", TINFO_DEFINITE);
cleanup("str_48E864");set_name(0x48E864, "str_48E864");
set_cmt(0x48E864, "`Gendata\Cut3.CEL`", 0);
apply_type (0x48E864, "extern char str_48E864[17];", TINFO_DEFINITE);
cleanup("str_48E878");set_name(0x48E878, "str_48E878");
set_cmt(0x48E878, "`Gendata\Cut4.pal`", 0);
apply_type (0x48E878, "extern char str_48E878[17];", TINFO_DEFINITE);
cleanup("str_48E88C");set_name(0x48E88C, "str_48E88C");
set_cmt(0x48E88C, "`Gendata\Cut4.CEL`", 0);
apply_type (0x48E88C, "extern char str_48E88C[17];", TINFO_DEFINITE);
cleanup("str_48E8A0");set_name(0x48E8A0, "str_48E8A0");
set_cmt(0x48E8A0, "`Gendata\Cutstart.pal`", 0);
apply_type (0x48E8A0, "extern char str_48E8A0[21];", TINFO_DEFINITE);
cleanup("str_48E8B8");set_name(0x48E8B8, "str_48E8B8");
set_cmt(0x48E8B8, "`Gendata\Cutstart.CEL`", 0);
apply_type (0x48E8B8, "extern char str_48E8B8[21];", TINFO_DEFINITE);
cleanup("str_48E8D0");set_name(0x48E8D0, "str_48E8D0");
set_cmt(0x48E8D0, "`Gendata\Cutportl.pal`", 0);
apply_type (0x48E8D0, "extern char str_48E8D0[21];", TINFO_DEFINITE);
cleanup("str_48E8E8");set_name(0x48E8E8, "str_48E8E8");
set_cmt(0x48E8E8, "`Gendata\Cutportl.CEL`", 0);
apply_type (0x48E8E8, "extern char str_48E8E8[21];", TINFO_DEFINITE);
cleanup("str_48E900");set_name(0x48E900, "str_48E900");
set_cmt(0x48E900, "`Gendata\Cutportr.pal`", 0);
apply_type (0x48E900, "extern char str_48E900[21];", TINFO_DEFINITE);
cleanup("str_48E918");set_name(0x48E918, "str_48E918");
set_cmt(0x48E918, "`Gendata\Cutportr.CEL`", 0);
apply_type (0x48E918, "extern char str_48E918[21];", TINFO_DEFINITE);
cleanup("str_48E930");set_name(0x48E930, "str_48E930");
set_cmt(0x48E930, "`Gendata\Cutl1d.pal`", 0);
apply_type (0x48E930, "extern char str_48E930[19];", TINFO_DEFINITE);
cleanup("str_48E944");set_name(0x48E944, "str_48E944");
set_cmt(0x48E944, "`Gendata\Cutl1d.CEL`", 0);
apply_type (0x48E944, "extern char str_48E944[19];", TINFO_DEFINITE);
cleanup("str_48E958");set_name(0x48E958, "str_48E958");
set_cmt(0x48E958, "`Gendata\Cut2.pal`", 0);
apply_type (0x48E958, "extern char str_48E958[17];", TINFO_DEFINITE);
cleanup("str_48E96C");set_name(0x48E96C, "str_48E96C");
set_cmt(0x48E96C, "`Gendata\Cut2.CEL`", 0);
apply_type (0x48E96C, "extern char str_48E96C[17];", TINFO_DEFINITE);
cleanup("str_48E980");set_name(0x48E980, "str_48E980");
set_cmt(0x48E980, "`Gendata\Cutgate.pal`", 0);
apply_type (0x48E980, "extern char str_48E980[20];", TINFO_DEFINITE);
cleanup("str_48E994");set_name(0x48E994, "str_48E994");
set_cmt(0x48E994, "`Gendata\Cutgate.CEL`", 0);
apply_type (0x48E994, "extern char str_48E994[20];", TINFO_DEFINITE);
cleanup("missile_graphic_data");set_name(0x4950B8, "missile_graphic_data");
set_cmt(0x4950B8, "missile_graphic_data contains the data related to each missile graphic ID.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/enums.h#missile_graphic_id", 0);
apply_type (0x4950B8, "extern MissileGraphicData missile_graphic_data[47];", TINFO_DEFINITE);
cleanup("str_497C0C");set_name(0x497C0C, "str_497C0C");
set_cmt(0x497C0C, "\"Scbsexpd\"", 0);
apply_type (0x497C0C, "extern char str_497C0C[9];", TINFO_DEFINITE);
cleanup("str_497C18");set_name(0x497C18, "str_497C18");
set_cmt(0x497C18, "\"Scubmisd\"", 0);
apply_type (0x497C18, "extern char str_497C18[9];", TINFO_DEFINITE);
cleanup("str_497C24");set_name(0x497C24, "str_497C24");
set_cmt(0x497C24, "\"Scbsexpc\"", 0);
apply_type (0x497C24, "extern char str_497C24[9];", TINFO_DEFINITE);
cleanup("str_497C30");set_name(0x497C30, "str_497C30");
set_cmt(0x497C30, "\"Scubmisc\"", 0);
apply_type (0x497C30, "extern char str_497C30[9];", TINFO_DEFINITE);
cleanup("str_497C3C");set_name(0x497C3C, "str_497C3C");
set_cmt(0x497C3C, "\"Scbsexpb\"", 0);
apply_type (0x497C3C, "extern char str_497C3C[9];", TINFO_DEFINITE);
cleanup("str_497C48");set_name(0x497C48, "str_497C48");
set_cmt(0x497C48, "\"Scubmisb\"", 0);
apply_type (0x497C48, "extern char str_497C48[9];", TINFO_DEFINITE);
cleanup("str_497C54");set_name(0x497C54, "str_497C54");
set_cmt(0x497C54, "\"Fireplar\"", 0);
apply_type (0x497C54, "extern char str_497C54[9];", TINFO_DEFINITE);
cleanup("str_497C60");set_name(0x497C60, "str_497C60");
set_cmt(0x497C60, "\"Rportal\"", 0);
apply_type (0x497C60, "extern char str_497C60[8];", TINFO_DEFINITE);
cleanup("str_497C68");set_name(0x497C68, "str_497C68");
set_cmt(0x497C68, "\"Sklball\"", 0);
apply_type (0x497C68, "extern char str_497C68[8];", TINFO_DEFINITE);
cleanup("str_497C70");set_name(0x497C70, "str_497C70");
set_cmt(0x497C70, "\"Ressur1\"", 0);
apply_type (0x497C70, "extern char str_497C70[8];", TINFO_DEFINITE);
cleanup("str_497C78");set_name(0x497C78, "str_497C78");
set_cmt(0x497C78, "\"Firerun\"", 0);
apply_type (0x497C78, "extern char str_497C78[8];", TINFO_DEFINITE);
cleanup("str_497C80");set_name(0x497C80, "str_497C80");
set_cmt(0x497C80, "\"Ethrshld\"", 0);
apply_type (0x497C80, "extern char str_497C80[9];", TINFO_DEFINITE);
cleanup("str_497C8C");set_name(0x497C8C, "str_497C8C");
set_cmt(0x497C8C, "\"Acidpud\"", 0);
apply_type (0x497C8C, "extern char str_497C8C[8];", TINFO_DEFINITE);
cleanup("str_497C94");set_name(0x497C94, "str_497C94");
set_cmt(0x497C94, "\"Acidspla\"", 0);
apply_type (0x497C94, "extern char str_497C94[9];", TINFO_DEFINITE);
cleanup("str_497CA0");set_name(0x497CA0, "str_497CA0");
set_cmt(0x497CA0, "\"Acidbf\"", 0);
apply_type (0x497CA0, "extern char str_497CA0[7];", TINFO_DEFINITE);
cleanup("str_497CA8");set_name(0x497CA8, "str_497CA8");
set_cmt(0x497CA8, "\"Firarwex\"", 0);
apply_type (0x497CA8, "extern char str_497CA8[9];", TINFO_DEFINITE);
cleanup("str_497CB4");set_name(0x497CB4, "str_497CB4");
set_cmt(0x497CB4, "\"Larrow\"", 0);
apply_type (0x497CB4, "extern char str_497CB4[7];", TINFO_DEFINITE);
cleanup("str_497CBC");set_name(0x497CBC, "str_497CBC");
set_cmt(0x497CBC, "\"Holyexpl\"", 0);
apply_type (0x497CBC, "extern char str_497CBC[9];", TINFO_DEFINITE);
cleanup("str_497CC8");set_name(0x497CC8, "str_497CC8");
set_cmt(0x497CC8, "\"Miniltng\"", 0);
apply_type (0x497CC8, "extern char str_497CC8[9];", TINFO_DEFINITE);
cleanup("str_497CD4");set_name(0x497CD4, "str_497CD4");
set_cmt(0x497CD4, "\"Krull\"", 0);
apply_type (0x497CD4, "extern char str_497CD4[6];", TINFO_DEFINITE);
cleanup("str_497CDC");set_name(0x497CDC, "str_497CDC");
set_cmt(0x497CDC, "\"Magball\"", 0);
apply_type (0x497CDC, "extern char str_497CDC[8];", TINFO_DEFINITE);
cleanup("str_497CE4");set_name(0x497CE4, "str_497CE4");
set_cmt(0x497CE4, "\"Flareexp\"", 0);
apply_type (0x497CE4, "extern char str_497CE4[9];", TINFO_DEFINITE);
cleanup("str_497CF0");set_name(0x497CF0, "str_497CF0");
set_cmt(0x497CF0, "\"Flare\"", 0);
apply_type (0x497CF0, "extern char str_497CF0[6];", TINFO_DEFINITE);
cleanup("str_497CF8");set_name(0x497CF8, "str_497CF8");
set_cmt(0x497CF8, "\"Thinlght\"", 0);
apply_type (0x497CF8, "extern char str_497CF8[9];", TINFO_DEFINITE);
cleanup("str_497D04");set_name(0x497D04, "str_497D04");
set_cmt(0x497D04, "\"Bigexp\"", 0);
apply_type (0x497D04, "extern char str_497D04[7];", TINFO_DEFINITE);
cleanup("str_497D0C");set_name(0x497D0C, "str_497D0C");
set_cmt(0x497D0C, "\"Shatter1\"", 0);
apply_type (0x497D0C, "extern char str_497D0C[9];", TINFO_DEFINITE);
cleanup("str_497D18");set_name(0x497D18, "str_497D18");
set_cmt(0x497D18, "\"Newexp\"", 0);
apply_type (0x497D18, "extern char str_497D18[7];", TINFO_DEFINITE);
cleanup("str_497D20");set_name(0x497D20, "str_497D20");
set_cmt(0x497D20, "\"Blodbur\"", 0);
apply_type (0x497D20, "extern char str_497D20[8];", TINFO_DEFINITE);
cleanup("str_497D28");set_name(0x497D28, "str_497D28");
set_cmt(0x497D28, "\"Doom\"", 0);
apply_type (0x497D28, "extern char str_497D28[5];", TINFO_DEFINITE);
cleanup("str_497D30");set_name(0x497D30, "str_497D30");
set_cmt(0x497D30, "\"Farrow\"", 0);
apply_type (0x497D30, "extern char str_497D30[7];", TINFO_DEFINITE);
cleanup("str_497D38");set_name(0x497D38, "str_497D38");
set_cmt(0x497D38, "\"Metlhit\"", 0);
apply_type (0x497D38, "extern char str_497D38[8];", TINFO_DEFINITE);
cleanup("str_497D40");set_name(0x497D40, "str_497D40");
set_cmt(0x497D40, "\"Bone\"", 0);
apply_type (0x497D40, "extern char str_497D40[5];", TINFO_DEFINITE);
cleanup("str_497D48");set_name(0x497D48, "str_497D48");
set_cmt(0x497D48, "\"Blood\"", 0);
apply_type (0x497D48, "extern char str_497D48[6];", TINFO_DEFINITE);
cleanup("str_497D50");set_name(0x497D50, "str_497D50");
set_cmt(0x497D50, "\"Manashld\"", 0);
apply_type (0x497D50, "extern char str_497D50[9];", TINFO_DEFINITE);
cleanup("str_497D5C");set_name(0x497D5C, "str_497D5C");
set_cmt(0x497D5C, "\"Bluexbk\"", 0);
apply_type (0x497D5C, "extern char str_497D5C[8];", TINFO_DEFINITE);
cleanup("str_497D64");set_name(0x497D64, "str_497D64");
set_cmt(0x497D64, "\"Bluexfr\"", 0);
apply_type (0x497D64, "extern char str_497D64[8];", TINFO_DEFINITE);
cleanup("str_497D6C");set_name(0x497D6C, "str_497D6C");
set_cmt(0x497D6C, "\"Portal\"", 0);
apply_type (0x497D6C, "extern char str_497D6C[7];", TINFO_DEFINITE);
cleanup("str_497D74");set_name(0x497D74, "str_497D74");
set_cmt(0x497D74, "\"MagBlos\"", 0);
apply_type (0x497D74, "extern char str_497D74[8];", TINFO_DEFINITE);
cleanup("str_497D7C");set_name(0x497D7C, "str_497D7C");
set_cmt(0x497D7C, "\"Firewal\"", 0);
apply_type (0x497D7C, "extern char str_497D7C[8];", TINFO_DEFINITE);
cleanup("str_497D84");set_name(0x497D84, "str_497D84");
set_cmt(0x497D84, "\"Lghning\"", 0);
apply_type (0x497D84, "extern char str_497D84[8];", TINFO_DEFINITE);
cleanup("str_497D8C");set_name(0x497D8C, "str_497D8C");
set_cmt(0x497D8C, "\"Guard\"", 0);
apply_type (0x497D8C, "extern char str_497D8C[6];", TINFO_DEFINITE);
cleanup("str_497D94");set_name(0x497D94, "str_497D94");
set_cmt(0x497D94, "\"Fireba\"", 0);
apply_type (0x497D94, "extern char str_497D94[7];", TINFO_DEFINITE);
cleanup("str_497D9C");set_name(0x497D9C, "str_497D9C");
set_cmt(0x497D9C, "\"Arrows\"", 0);
apply_type (0x497D9C, "extern char str_497D9C[7];", TINFO_DEFINITE);
cleanup("str_497DE4");set_name(0x497DE4, "str_497DE4");
set_cmt(0x497DE4, "`Missiles\%s%i.CL2`", 0);
apply_type (0x497DE4, "extern char str_497DE4[18];", TINFO_DEFINITE);
cleanup("str_497DF8");set_name(0x497DF8, "str_497DF8");
set_cmt(0x497DF8, "`Missiles\%s.CL2`", 0);
apply_type (0x497DF8, "extern char str_497DF8[16];", TINFO_DEFINITE);
cleanup("spelicon_frame_from_spell_id");set_name(0x483C2C, "spelicon_frame_from_spell_id");
set_cmt(0x483C2C, "spelicon_frame_from_spell_id maps from spell_id to spelicon.cel frame number.", 0);
apply_type (0x483C2C, "extern int8_t spelicon_frame_from_spell_id[37];", TINFO_DEFINITE);
cleanup("panel_buttons");set_name(0x483C54, "panel_buttons");
set_cmt(0x483C54, "panel_buttons maps from panel_button_id to the position and dimensions of a\npanel button.", 0);
apply_type (0x483C54, "extern PanelButton panel_buttons[8];", TINFO_DEFINITE);
cleanup("button_hotkeys");set_name(0x483CF4, "button_hotkeys");
set_cmt(0x483CF4, "button_hotkeys maps from panel_button_id to hotkey name.", 0);
apply_type (0x483CF4, "extern char *button_hotkeys[8];", TINFO_DEFINITE);
cleanup("button_descriptions");set_name(0x483D14, "button_descriptions");
set_cmt(0x483D14, "button_descriptions maps from panel_button_id to panel button description.", 0);
apply_type (0x483D14, "extern char *button_descriptions[8];", TINFO_DEFINITE);
cleanup("attribute_inc_rects");set_name(0x483D34, "attribute_inc_rects");
set_cmt(0x483D34, "attribute_inc_rects maps from attribute_id to the rectangle on screen used\nfor attribute increment buttons.", 0);
apply_type (0x483D34, "extern Rectangle_t attribute_inc_rects[4];", TINFO_DEFINITE);
cleanup("spell_id_from_spellbook_pos");set_name(0x483D74, "spell_id_from_spellbook_pos");
set_cmt(0x483D74, "spell_id_from_spellbook_pos maps from spellbook position to spell_id.", 0);
apply_type (0x483D74, "extern spell_id spell_id_from_spellbook_pos[42];", TINFO_DEFINITE);
cleanup("str_483E1C");set_name(0x483E1C, "str_483E1C");
set_cmt(0x483E1C, "\"Player Attack\"", 0);
apply_type (0x483E1C, "extern char str_483E1C[14];", TINFO_DEFINITE);
cleanup("str_483E2C");set_name(0x483E2C, "str_483E2C");
set_cmt(0x483E2C, "\"Send Message\"", 0);
apply_type (0x483E2C, "extern char str_483E2C[13];", TINFO_DEFINITE);
cleanup("str_483E3C");set_name(0x483E3C, "str_483E3C");
set_cmt(0x483E3C, "\"Spell book\"", 0);
apply_type (0x483E3C, "extern char str_483E3C[11];", TINFO_DEFINITE);
cleanup("str_483E48");set_name(0x483E48, "str_483E48");
set_cmt(0x483E48, "\"Inventory\"", 0);
apply_type (0x483E48, "extern char str_483E48[10];", TINFO_DEFINITE);
cleanup("str_483E54");set_name(0x483E54, "str_483E54");
set_cmt(0x483E54, "\"Main Menu\"", 0);
apply_type (0x483E54, "extern char str_483E54[10];", TINFO_DEFINITE);
cleanup("str_483E60");set_name(0x483E60, "str_483E60");
set_cmt(0x483E60, "\"Automap\"", 0);
apply_type (0x483E60, "extern char str_483E60[8];", TINFO_DEFINITE);
cleanup("str_483E68");set_name(0x483E68, "str_483E68");
set_cmt(0x483E68, "\"Quests log\"", 0);
apply_type (0x483E68, "extern char str_483E68[11];", TINFO_DEFINITE);
cleanup("str_483E74");set_name(0x483E74, "str_483E74");
set_cmt(0x483E74, "\"Character Information\"", 0);
apply_type (0x483E74, "extern char str_483E74[22];", TINFO_DEFINITE);
cleanup("str_483E8C");set_name(0x483E8C, "str_483E8C");
set_cmt(0x483E8C, "\"Enter\"", 0);
apply_type (0x483E8C, "extern char str_483E8C[6];", TINFO_DEFINITE);
cleanup("str_483E94");set_name(0x483E94, "str_483E94");
set_cmt(0x483E94, "\"'b'\"", 0);
apply_type (0x483E94, "extern char str_483E94[4];", TINFO_DEFINITE);
cleanup("str_483E98");set_name(0x483E98, "str_483E98");
set_cmt(0x483E98, "\"'i'\"", 0);
apply_type (0x483E98, "extern char str_483E98[4];", TINFO_DEFINITE);
cleanup("str_483E9C");set_name(0x483E9C, "str_483E9C");
set_cmt(0x483E9C, "\"Esc\"", 0);
apply_type (0x483E9C, "extern char str_483E9C[4];", TINFO_DEFINITE);
cleanup("str_483EA0");set_name(0x483EA0, "str_483EA0");
set_cmt(0x483EA0, "\"Tab\"", 0);
apply_type (0x483EA0, "extern char str_483EA0[4];", TINFO_DEFINITE);
cleanup("str_483EA4");set_name(0x483EA4, "str_483EA4");
set_cmt(0x483EA4, "\"'q'\"", 0);
apply_type (0x483EA4, "extern char str_483EA4[4];", TINFO_DEFINITE);
cleanup("str_483EA8");set_name(0x483EA8, "str_483EA8");
set_cmt(0x483EA8, "\"'c'\"", 0);
apply_type (0x483EA8, "extern char str_483EA8[4];", TINFO_DEFINITE);
cleanup("str_483EAC");set_name(0x483EAC, "str_483EAC");
set_cmt(0x483EAC, "\"Spell Hot Key #F%i\"", 0);
apply_type (0x483EAC, "extern char str_483EAC[19];", TINFO_DEFINITE);
cleanup("str_483EC0");set_name(0x483EC0, "str_483EC0");
set_cmt(0x483EC0, "\"%s Skill\"", 0);
apply_type (0x483EC0, "extern char str_483EC0[9];", TINFO_DEFINITE);
cleanup("str_483ECC");set_name(0x483ECC, "str_483ECC");
set_cmt(0x483ECC, "\"Spell Level %i\"", 0);
apply_type (0x483ECC, "extern char str_483ECC[15];", TINFO_DEFINITE);
cleanup("str_483EDC");set_name(0x483EDC, "str_483EDC");
set_cmt(0x483EDC, "\"Spell Level 0 - Unusable\"", 0);
apply_type (0x483EDC, "extern char str_483EDC[25];", TINFO_DEFINITE);
cleanup("str_483EF8");set_name(0x483EF8, "str_483EF8");
set_cmt(0x483EF8, "\"Damages undead only\"", 0);
apply_type (0x483EF8, "extern char str_483EF8[20];", TINFO_DEFINITE);
cleanup("str_483F0C");set_name(0x483F0C, "str_483F0C");
set_cmt(0x483F0C, "\"%s Spell\"", 0);
apply_type (0x483F0C, "extern char str_483F0C[9];", TINFO_DEFINITE);
cleanup("str_483F18");set_name(0x483F18, "str_483F18");
set_cmt(0x483F18, "\"%i Scrolls\"", 0);
apply_type (0x483F18, "extern char str_483F18[11];", TINFO_DEFINITE);
cleanup("str_483F24");set_name(0x483F24, "str_483F24");
set_cmt(0x483F24, "\"1 Scroll\"", 0);
apply_type (0x483F24, "extern char str_483F24[9];", TINFO_DEFINITE);
cleanup("str_483F30");set_name(0x483F30, "str_483F30");
set_cmt(0x483F30, "\"Scroll of %s\"", 0);
apply_type (0x483F30, "extern char str_483F30[13];", TINFO_DEFINITE);
cleanup("str_483F40");set_name(0x483F40, "str_483F40");
set_cmt(0x483F40, "\"%i Charges\"", 0);
apply_type (0x483F40, "extern char str_483F40[11];", TINFO_DEFINITE);
cleanup("str_483F4C");set_name(0x483F4C, "str_483F4C");
set_cmt(0x483F4C, "\"1 Charge\"", 0);
apply_type (0x483F4C, "extern char str_483F4C[9];", TINFO_DEFINITE);
cleanup("str_483F58");set_name(0x483F58, "str_483F58");
set_cmt(0x483F58, "\"Staff of %s\"", 0);
apply_type (0x483F58, "extern char str_483F58[12];", TINFO_DEFINITE);
cleanup("str_483F64");set_name(0x483F64, "str_483F64");
set_cmt(0x483F64, "`CtrlPan\Golddrop.cel`", 0);
apply_type (0x483F64, "extern char str_483F64[21];", TINFO_DEFINITE);
cleanup("str_483F7C");set_name(0x483F7C, "str_483F7C");
set_cmt(0x483F7C, "`Data\Quest.CEL`", 0);
apply_type (0x483F7C, "extern char str_483F7C[15];", TINFO_DEFINITE);
cleanup("str_483F8C");set_name(0x483F8C, "str_483F8C");
set_cmt(0x483F8C, "`Data\SpellI2.CEL`", 0);
apply_type (0x483F8C, "extern char str_483F8C[17];", TINFO_DEFINITE);
cleanup("str_483FA0");set_name(0x483FA0, "str_483FA0");
set_cmt(0x483FA0, "`Data\SpellBkB.CEL`", 0);
apply_type (0x483FA0, "extern char str_483FA0[18];", TINFO_DEFINITE);
cleanup("str_483FB4");set_name(0x483FB4, "str_483FB4");
set_cmt(0x483FB4, "`Data\SpellBk.CEL`", 0);
apply_type (0x483FB4, "extern char str_483FB4[17];", TINFO_DEFINITE);
cleanup("str_483FC8");set_name(0x483FC8, "str_483FC8");
set_cmt(0x483FC8, "`Items\DurIcons.CEL`", 0);
apply_type (0x483FC8, "extern char str_483FC8[19];", TINFO_DEFINITE);
cleanup("str_483FDC");set_name(0x483FDC, "str_483FDC");
set_cmt(0x483FDC, "`Data\CharBut.CEL`", 0);
apply_type (0x483FDC, "extern char str_483FDC[17];", TINFO_DEFINITE);
cleanup("str_483FF0");set_name(0x483FF0, "str_483FF0");
set_cmt(0x483FF0, "`CtrlPan\Panel8bu.CEL`", 0);
apply_type (0x483FF0, "extern char str_483FF0[21];", TINFO_DEFINITE);
cleanup("str_484008");set_name(0x484008, "str_484008");
set_cmt(0x484008, "`CtrlPan\TalkButt.CEL`", 0);
apply_type (0x484008, "extern char str_484008[21];", TINFO_DEFINITE);
cleanup("str_484020");set_name(0x484020, "str_484020");
set_cmt(0x484020, "`CtrlPan\P8But2.CEL`", 0);
apply_type (0x484020, "extern char str_484020[19];", TINFO_DEFINITE);
cleanup("str_484034");set_name(0x484034, "str_484034");
set_cmt(0x484034, "`CtrlPan\TalkPanl.CEL`", 0);
apply_type (0x484034, "extern char str_484034[21];", TINFO_DEFINITE);
cleanup("str_48404C");set_name(0x48404C, "str_48404C");
set_cmt(0x48404C, "`CtrlPan\P8Bulbs.CEL`", 0);
apply_type (0x48404C, "extern char str_48404C[20];", TINFO_DEFINITE);
cleanup("str_484060");set_name(0x484060, "str_484060");
set_cmt(0x484060, "`CtrlPan\Panel8.CEL`", 0);
apply_type (0x484060, "extern char str_484060[19];", TINFO_DEFINITE);
cleanup("str_484074");set_name(0x484074, "str_484074");
set_cmt(0x484074, "`CtrlPan\SpelIcon.CEL`", 0);
apply_type (0x484074, "extern char str_484074[21];", TINFO_DEFINITE);
cleanup("str_48408C");set_name(0x48408C, "str_48408C");
set_cmt(0x48408C, "`Data\Char.CEL`", 0);
apply_type (0x48408C, "extern char str_48408C[14];", TINFO_DEFINITE);
cleanup("str_48409C");set_name(0x48409C, "str_48409C");
set_cmt(0x48409C, "`CtrlPan\SmalText.CEL`", 0);
apply_type (0x48409C, "extern char str_48409C[21];", TINFO_DEFINITE);
cleanup("str_4840B4");set_name(0x4840B4, "str_4840B4");
set_cmt(0x4840B4, "\"Hotkey : 's'\"", 0);
apply_type (0x4840B4, "extern char str_4840B4[13];", TINFO_DEFINITE);
cleanup("str_4840C4");set_name(0x4840C4, "str_4840C4");
set_cmt(0x4840C4, "\"Select current spell button\"", 0);
apply_type (0x4840C4, "extern char str_4840C4[28];", TINFO_DEFINITE);
cleanup("str_4840E0");set_name(0x4840E0, "str_4840E0");
set_cmt(0x4840E0, "\"Hotkey : %s\"", 0);
apply_type (0x4840E0, "extern char str_4840E0[12];", TINFO_DEFINITE);
cleanup("str_4840EC");set_name(0x4840EC, "str_4840EC");
set_cmt(0x4840EC, "\"Player attack\"", 0);
apply_type (0x4840EC, "extern char str_4840EC[14];", TINFO_DEFINITE);
cleanup("str_4840FC");set_name(0x4840FC, "str_4840FC");
set_cmt(0x4840FC, "\"Player friendly\"", 0);
apply_type (0x4840FC, "extern char str_4840FC[16];", TINFO_DEFINITE);
cleanup("str_48410C");set_name(0x48410C, "str_48410C");
set_cmt(0x48410C, "\"Hit Points %i of %i\"", 0);
apply_type (0x48410C, "extern char str_48410C[20];", TINFO_DEFINITE);
cleanup("str_484120");set_name(0x484120, "str_484120");
set_cmt(0x484120, "\"Level : %i\"", 0);
apply_type (0x484120, "extern char str_484120[11];", TINFO_DEFINITE);
cleanup("str_48412C");set_name(0x48412C, "str_48412C");
set_cmt(0x48412C, "\"Requirements not met\"", 0);
apply_type (0x48412C, "extern char str_48412C[21];", TINFO_DEFINITE);
cleanup("str_484144");set_name(0x484144, "str_484144");
set_cmt(0x484144, "\"%i gold %s\"", 0);
apply_type (0x484144, "extern char str_484144[11];", TINFO_DEFINITE);
cleanup("str_484150");set_name(0x484150, "str_484150");
set_cmt(0x484150, "\"MAX\"", 0);
apply_type (0x484150, "extern char str_484150[4];", TINFO_DEFINITE);
cleanup("str_484154");set_name(0x484154, "str_484154");
set_cmt(0x484154, "\"%i-%i\"", 0);
apply_type (0x484154, "extern char str_484154[6];", TINFO_DEFINITE);
cleanup("str_48415C");set_name(0x48415C, "str_48415C");
set_cmt(0x48415C, "\"%i%%\"", 0);
apply_type (0x48415C, "extern char str_48415C[5];", TINFO_DEFINITE);
cleanup("str_484164");set_name(0x484164, "str_484164");
set_cmt(0x484164, "\"None\"", 0);
apply_type (0x484164, "extern char str_484164[5];", TINFO_DEFINITE);
cleanup("str_48416C");set_name(0x48416C, "str_48416C");
set_cmt(0x48416C, "\"%li\"", 0);
apply_type (0x48416C, "extern char str_48416C[4];", TINFO_DEFINITE);
cleanup("str_484170");set_name(0x484170, "str_484170");
set_cmt(0x484170, "\"%i\"", 0);
apply_type (0x484170, "extern char str_484170[3];", TINFO_DEFINITE);
cleanup("str_484174");set_name(0x484174, "str_484174");
set_cmt(0x484174, "\"Sorceror\"", 0);
apply_type (0x484174, "extern char str_484174[9];", TINFO_DEFINITE);
cleanup("str_484180");set_name(0x484180, "str_484180");
set_cmt(0x484180, "\"Rogue\"", 0);
apply_type (0x484180, "extern char str_484180[6];", TINFO_DEFINITE);
cleanup("str_484188");set_name(0x484188, "str_484188");
set_cmt(0x484188, "\"Warrior\"", 0);
apply_type (0x484188, "extern char str_484188[8];", TINFO_DEFINITE);
cleanup("str_484190");set_name(0x484190, "str_484190");
set_cmt(0x484190, "\"Level Up\"", 0);
apply_type (0x484190, "extern char str_484190[9];", TINFO_DEFINITE);
cleanup("str_48419C");set_name(0x48419C, "str_48419C");
set_cmt(0x48419C, "\"Skill\"", 0);
apply_type (0x48419C, "extern char str_48419C[6];", TINFO_DEFINITE);
cleanup("str_4841A4");set_name(0x4841A4, "str_4841A4");
set_cmt(0x4841A4, "\"Staff (%i charges)\"", 0);
apply_type (0x4841A4, "extern char str_4841A4[19];", TINFO_DEFINITE);
cleanup("str_4841B8");set_name(0x4841B8, "str_4841B8");
set_cmt(0x4841B8, "\"Mana: %i  Dam: 1/3 tgt hp\"", 0);
apply_type (0x4841B8, "extern char str_4841B8[26];", TINFO_DEFINITE);
cleanup("str_4841D4");set_name(0x4841D4, "str_4841D4");
set_cmt(0x4841D4, "\"Mana: %i   Dam: n/a\"", 0);
apply_type (0x4841D4, "extern char str_4841D4[20];", TINFO_DEFINITE);
cleanup("str_4841E8");set_name(0x4841E8, "str_4841E8");
set_cmt(0x4841E8, "\"Mana: %i  Dam: %i - %i\"", 0);
apply_type (0x4841E8, "extern char str_4841E8[23];", TINFO_DEFINITE);
cleanup("str_484200");set_name(0x484200, "str_484200");
set_cmt(0x484200, "\"pieces\"", 0);
apply_type (0x484200, "extern char str_484200[7];", TINFO_DEFINITE);
cleanup("str_484208");set_name(0x484208, "str_484208");
set_cmt(0x484208, "\"piece\"", 0);
apply_type (0x484208, "extern char str_484208[6];", TINFO_DEFINITE);
cleanup("str_484210");set_name(0x484210, "str_484210");
set_cmt(0x484210, "\"%u\"", 0);
apply_type (0x484210, "extern char str_484210[3];", TINFO_DEFINITE);
cleanup("str_484214");set_name(0x484214, "str_484214");
set_cmt(0x484214, "\"you want to remove?\"", 0);
apply_type (0x484214, "extern char str_484214[20];", TINFO_DEFINITE);
cleanup("str_484228");set_name(0x484228, "str_484228");
set_cmt(0x484228, "\"%s.  How many do\"", 0);
apply_type (0x484228, "extern char str_484228[17];", TINFO_DEFINITE);
cleanup("str_48423C");set_name(0x48423C, "str_48423C");
set_cmt(0x48423C, "\"You have %u gold\"", 0);
apply_type (0x48423C, "extern char str_48423C[17];", TINFO_DEFINITE);
cleanup("str_4A1AAC");set_name(0x4A1AAC, "str_4A1AAC");
set_cmt(0x4A1AAC, "\"%s (lvl %d): %s\"", 0);
apply_type (0x4A1AAC, "extern char str_4A1AAC[16];", TINFO_DEFINITE);
cleanup("error_messages");set_name(0x48D7C4, "error_messages");
set_cmt(0x48D7C4, "error_messages maps from error_id to error message.", 0);
apply_type (0x48D7C4, "extern char *error_messages[44];", TINFO_DEFINITE);
cleanup("str_48D874");set_name(0x48D874, "str_48D874");
set_cmt(0x48D874, "\"Arcane knowledge gained!\"", 0);
apply_type (0x48D874, "extern char str_48D874[25];", TINFO_DEFINITE);
cleanup("str_48D890");set_name(0x48D890, "str_48D890");
set_cmt(0x48D890, "\"You must be at least level 17 to use this.\"", 0);
apply_type (0x48D890, "extern char str_48D890[43];", TINFO_DEFINITE);
cleanup("str_48D8BC");set_name(0x48D8BC, "str_48D8BC");
set_cmt(0x48D8BC, "\"You must be at least level 13 to use this.\"", 0);
apply_type (0x48D8BC, "extern char str_48D8BC[43];", TINFO_DEFINITE);
cleanup("str_48D8E8");set_name(0x48D8E8, "str_48D8E8");
set_cmt(0x48D8E8, "\"You must be at least level 8 to use this.\"", 0);
apply_type (0x48D8E8, "extern char str_48D8E8[42];", TINFO_DEFINITE);
cleanup("str_48D914");set_name(0x48D914, "str_48D914");
set_cmt(0x48D914, "\"Generosity brings its own rewards\"", 0);
apply_type (0x48D914, "extern char str_48D914[34];", TINFO_DEFINITE);
cleanup("str_48D938");set_name(0x48D938, "str_48D938");
set_cmt(0x48D938, "\"Those who are last may yet be first\"", 0);
apply_type (0x48D938, "extern char str_48D938[36];", TINFO_DEFINITE);
cleanup("str_48D95C");set_name(0x48D95C, "str_48D95C");
set_cmt(0x48D95C, "\"Mysteries are revealed in the light of reason\"", 0);
apply_type (0x48D95C, "extern char str_48D95C[46];", TINFO_DEFINITE);
cleanup("str_48D98C");set_name(0x48D98C, "str_48D98C");
set_cmt(0x48D98C, "\"Salvation comes at the cost of wisdom\"", 0);
apply_type (0x48D98C, "extern char str_48D98C[38];", TINFO_DEFINITE);
cleanup("str_48D9B4");set_name(0x48D9B4, "str_48D9B4");
set_cmt(0x48D9B4, "\"The way is made clear when viewed from above\"", 0);
apply_type (0x48D9B4, "extern char str_48D9B4[45];", TINFO_DEFINITE);
cleanup("str_48D9E4");set_name(0x48D9E4, "str_48D9E4");
set_cmt(0x48D9E4, "\"The essence of life flows from within\"", 0);
apply_type (0x48D9E4, "extern char str_48D9E4[38];", TINFO_DEFINITE);
cleanup("str_48DA0C");set_name(0x48DA0C, "str_48DA0C");
set_cmt(0x48DA0C, "\"Strength is bolstered by heavenly faith\"", 0);
apply_type (0x48DA0C, "extern char str_48DA0C[40];", TINFO_DEFINITE);
cleanup("str_48DA34");set_name(0x48DA34, "str_48DA34");
set_cmt(0x48DA34, "\"The hands of men may be guided by fate\"", 0);
apply_type (0x48DA34, "extern char str_48DA34[39];", TINFO_DEFINITE);
cleanup("str_48DA5C");set_name(0x48DA5C, "str_48DA5C");
set_cmt(0x48DA5C, "\"Blessed by a benevolent companion!\"", 0);
apply_type (0x48DA5C, "extern char str_48DA5C[35];", TINFO_DEFINITE);
cleanup("str_48DA80");set_name(0x48DA80, "str_48DA80");
set_cmt(0x48DA80, "\"Where avarice fails, patience gains reward\"", 0);
apply_type (0x48DA80, "extern char str_48DA80[43];", TINFO_DEFINITE);
cleanup("str_48DAAC");set_name(0x48DAAC, "str_48DAAC");
set_cmt(0x48DAAC, "\"Riches abound when least expected\"", 0);
apply_type (0x48DAAC, "extern char str_48DAAC[34];", TINFO_DEFINITE);
cleanup("str_48DAD0");set_name(0x48DAD0, "str_48DAD0");
set_cmt(0x48DAD0, "\"Energy comes at the cost of wisdom\"", 0);
apply_type (0x48DAD0, "extern char str_48DAD0[35];", TINFO_DEFINITE);
cleanup("str_48DAF4");set_name(0x48DAF4, "str_48DAF4");
set_cmt(0x48DAF4, "\"Wherever you go, there you are\"", 0);
apply_type (0x48DAF4, "extern char str_48DAF4[31];", TINFO_DEFINITE);
cleanup("str_48DB14");set_name(0x48DB14, "str_48DB14");
set_cmt(0x48DB14, "\"Drink and be refreshed\"", 0);
apply_type (0x48DB14, "extern char str_48DB14[23];", TINFO_DEFINITE);
cleanup("str_48DB2C");set_name(0x48DB2C, "str_48DB2C");
set_cmt(0x48DB2C, "\"Knowledge and wisdom at the cost of self\"", 0);
apply_type (0x48DB2C, "extern char str_48DB2C[41];", TINFO_DEFINITE);
cleanup("str_48DB58");set_name(0x48DB58, "str_48DB58");
set_cmt(0x48DB58, "\"Crimson and Azure become as the sun\"", 0);
apply_type (0x48DB58, "extern char str_48DB58[36];", TINFO_DEFINITE);
cleanup("str_48DB7C");set_name(0x48DB7C, "str_48DB7C");
set_cmt(0x48DB7C, "\"That which cannot be held cannot be harmed\"", 0);
apply_type (0x48DB7C, "extern char str_48DB7C[43];", TINFO_DEFINITE);
cleanup("str_48DBA8");set_name(0x48DBA8, "str_48DBA8");
set_cmt(0x48DBA8, "\"Arcane power brings destruction\"", 0);
apply_type (0x48DBA8, "extern char str_48DBA8[32];", TINFO_DEFINITE);
cleanup("str_48DBC8");set_name(0x48DBC8, "str_48DBC8");
set_cmt(0x48DBC8, "\"Intensity comes at the cost of wisdom\"", 0);
apply_type (0x48DBC8, "extern char str_48DBC8[38];", TINFO_DEFINITE);
cleanup("str_48DBF0");set_name(0x48DBF0, "str_48DBF0");
set_cmt(0x48DBF0, "\"What once was opened now is closed\"", 0);
apply_type (0x48DBF0, "extern char str_48DBF0[35];", TINFO_DEFINITE);
cleanup("str_48DC14");set_name(0x48DC14, "str_48DC14");
set_cmt(0x48DC14, "\"Magic is not always what it seems to be\"", 0);
apply_type (0x48DC14, "extern char str_48DC14[40];", TINFO_DEFINITE);
cleanup("str_48DC3C");set_name(0x48DC3C, "str_48DC3C");
set_cmt(0x48DC3C, "\"Time cannot diminish the power of steel\"", 0);
apply_type (0x48DC3C, "extern char str_48DC3C[40];", TINFO_DEFINITE);
cleanup("str_48DC64");set_name(0x48DC64, "str_48DC64");
set_cmt(0x48DC64, "\"The powers of mana refocused renews\"", 0);
apply_type (0x48DC64, "extern char str_48DC64[36];", TINFO_DEFINITE);
cleanup("str_48DC88");set_name(0x48DC88, "str_48DC88");
set_cmt(0x48DC88, "\"While the spirit is vigilant the body thrives\"", 0);
apply_type (0x48DC88, "extern char str_48DC88[46];", TINFO_DEFINITE);
cleanup("str_48DCB8");set_name(0x48DCB8, "str_48DCB8");
set_cmt(0x48DCB8, "\"The sword of justice is swift and sharp\"", 0);
apply_type (0x48DCB8, "extern char str_48DCB8[40];", TINFO_DEFINITE);
cleanup("str_48DCE0");set_name(0x48DCE0, "str_48DCE0");
set_cmt(0x48DCE0, "\"Those who defend seldom attack\"", 0);
apply_type (0x48DCE0, "extern char str_48DCE0[31];", TINFO_DEFINITE);
cleanup("str_48DD00");set_name(0x48DD00, "str_48DD00");
set_cmt(0x48DD00, "\"New strength is forged through destruction\"", 0);
apply_type (0x48DD00, "extern char str_48DD00[43];", TINFO_DEFINITE);
cleanup("str_48DD2C");set_name(0x48DD2C, "str_48DD2C");
set_cmt(0x48DD2C, "\"Some are weakened as one grows strong\"", 0);
apply_type (0x48DD2C, "extern char str_48DD2C[38];", TINFO_DEFINITE);
cleanup("str_48DD54");set_name(0x48DD54, "str_48DD54");
set_cmt(0x48DD54, "\"Saving...\"", 0);
apply_type (0x48DD54, "extern char str_48DD54[10];", TINFO_DEFINITE);
cleanup("str_48DD60");set_name(0x48DD60, "str_48DD60");
set_cmt(0x48DD60, "\"Loading...\"", 0);
apply_type (0x48DD60, "extern char str_48DD60[11];", TINFO_DEFINITE);
cleanup("str_48DD6C");set_name(0x48DD6C, "str_48DD6C");
set_cmt(0x48DD6C, "\"No pause in multiplayer\"", 0);
apply_type (0x48DD6C, "extern char str_48DD6C[24];", TINFO_DEFINITE);
cleanup("str_48DD84");set_name(0x48DD84, "str_48DD84");
set_cmt(0x48DD84, "\"Multiplayer sync problem\"", 0);
apply_type (0x48DD84, "extern char str_48DD84[25];", TINFO_DEFINITE);
cleanup("str_48DDA0");set_name(0x48DDA0, "str_48DDA0");
set_cmt(0x48DDA0, "\"Copying to a hard disk is recommended\"", 0);
apply_type (0x48DDA0, "extern char str_48DDA0[38];", TINFO_DEFINITE);
cleanup("str_48DDC8");set_name(0x48DDC8, "str_48DDC8");
set_cmt(0x48DDC8, "\"No Pause in town\"", 0);
apply_type (0x48DDC8, "extern char str_48DDC8[17];", TINFO_DEFINITE);
cleanup("str_48DDDC");set_name(0x48DDDC, "str_48DDDC");
set_cmt(0x48DDDC, "\"Not enough space to save\"", 0);
apply_type (0x48DDDC, "extern char str_48DDDC[25];", TINFO_DEFINITE);
cleanup("str_48DDF8");set_name(0x48DDF8, "str_48DDF8");
set_cmt(0x48DDF8, "\"Not available in shareware version\"", 0);
apply_type (0x48DDF8, "extern char str_48DDF8[35];", TINFO_DEFINITE);
cleanup("str_48DE1C");set_name(0x48DE1C, "str_48DE1C");
set_cmt(0x48DE1C, "\"Direct Sound Creation Failed\"", 0);
apply_type (0x48DE1C, "extern char str_48DE1C[29];", TINFO_DEFINITE);
cleanup("str_48DE3C");set_name(0x48DE3C, "str_48DE3C");
set_cmt(0x48DE3C, "\"No multiplayer functions in demo\"", 0);
apply_type (0x48DE3C, "extern char str_48DE3C[33];", TINFO_DEFINITE);
cleanup("str_48DE60");set_name(0x48DE60, "str_48DE60");
set_cmt(0x48DE60, "\"No automap available in town\"", 0);
apply_type (0x48DE60, "extern char str_48DE60[29];", TINFO_DEFINITE);
cleanup("str_49F08C");set_name(0x49F08C, "str_49F08C");
set_cmt(0x49F08C, "\"SNetSendMessage0\"", 0);
apply_type (0x49F08C, "extern char str_49F08C[17];", TINFO_DEFINITE);
cleanup("str_49F0A0");set_name(0x49F0A0, "str_49F0A0");
set_cmt(0x49F0A0, "\"SNetSendMessage\"", 0);
apply_type (0x49F0A0, "extern char str_49F0A0[16];", TINFO_DEFINITE);
cleanup("str_49F0B0");set_name(0x49F0B0, "str_49F0B0");
set_cmt(0x49F0B0, "\"Player '%s' killed Diablo and left the game!\"", 0);
apply_type (0x49F0B0, "extern char str_49F0B0[45];", TINFO_DEFINITE);
cleanup("str_49F0E0");set_name(0x49F0E0, "str_49F0E0");
set_cmt(0x49F0E0, "\"Player '%s' dropped due to timeout\"", 0);
apply_type (0x49F0E0, "extern char str_49F0E0[35];", TINFO_DEFINITE);
cleanup("str_49F104");set_name(0x49F104, "str_49F104");
set_cmt(0x49F104, "\"Player '%s' just left the game\"", 0);
apply_type (0x49F104, "extern char str_49F104[31];", TINFO_DEFINITE);
cleanup("str_49F124");set_name(0x49F124, "str_49F124");
set_cmt(0x49F124, "\"SNetReceiveMsg\"", 0);
apply_type (0x49F124, "extern char str_49F124[15];", TINFO_DEFINITE);
cleanup("str_49F134");set_name(0x49F134, "str_49F134");
set_cmt(0x49F134, "\"SNetSendMessage2\"", 0);
apply_type (0x49F134, "extern char str_49F134[17];", TINFO_DEFINITE);
cleanup("str_49F148");set_name(0x49F148, "str_49F148");
set_cmt(0x49F148, "\"SNetRegisterEventHandler:\n%s\"", 0);
apply_type (0x49F148, "extern char str_49F148[29];", TINFO_DEFINITE);
cleanup("str_49F168");set_name(0x49F168, "str_49F168");
set_cmt(0x49F168, "\"SNetGetGameInfo2\"", 0);
apply_type (0x49F168, "extern char str_49F168[17];", TINFO_DEFINITE);
cleanup("str_49F17C");set_name(0x49F17C, "str_49F17C");
set_cmt(0x49F17C, "\"SNetGetGameInfo1\"", 0);
apply_type (0x49F17C, "extern char str_49F17C[17];", TINFO_DEFINITE);
cleanup("str_49F190");set_name(0x49F190, "str_49F190");
set_cmt(0x49F190, "\"Diablo Retail\"", 0);
apply_type (0x49F190, "extern char str_49F190[14];", TINFO_DEFINITE);
cleanup("str_49F1A0");set_name(0x49F1A0, "str_49F1A0");
set_cmt(0x49F1A0, "\"SNetCreateGame1:\n%s\"", 0);
apply_type (0x49F1A0, "extern char str_49F1A0[20];", TINFO_DEFINITE);
cleanup("str_49F1B4");set_name(0x49F1B4, "str_49F1B4");
set_cmt(0x49F1B4, "\"local\"", 0);
apply_type (0x49F1B4, "extern char str_49F1B4[6];", TINFO_DEFINITE);
cleanup("str_49F1BC");set_name(0x49F1BC, "str_49F1BC");
set_cmt(0x49F1BC, "\"Network upgrade failed\"", 0);
apply_type (0x49F1BC, "extern char str_49F1BC[23];", TINFO_DEFINITE);
cleanup("str_49F1D4");set_name(0x49F1D4, "str_49F1D4");
set_cmt(0x49F1D4, "\"Player '%s' (level %d) is already in the game\"", 0);
apply_type (0x49F1D4, "extern char str_49F1D4[46];", TINFO_DEFINITE);
cleanup("str_48DE80");set_name(0x48DE80, "str_48DE80");
set_cmt(0x48DE80, "\"\r\n\"", 0);
apply_type (0x48DE80, "extern char str_48DE80[3];", TINFO_DEFINITE);
cleanup("str_48DE84");set_name(0x48DE84, "str_48DE84");
set_cmt(0x48DE84, "\"Code bytes:\r\n\"", 0);
apply_type (0x48DE84, "extern char str_48DE84[14];", TINFO_DEFINITE);
cleanup("str_48DE94");set_name(0x48DE94, "str_48DE94");
set_cmt(0x48DE94, "\"Stack bytes:\r\n\"", 0);
apply_type (0x48DE94, "extern char str_48DE94[15];", TINFO_DEFINITE);
cleanup("str_48DEA4");set_name(0x48DEA4, "str_48DEA4");
set_cmt(0x48DEA4, "\"Flags:%08X\r\n\"", 0);
apply_type (0x48DEA4, "extern char str_48DEA4[13];", TINFO_DEFINITE);
cleanup("str_48DEB4");set_name(0x48DEB4, "str_48DEB4");
set_cmt(0x48DEB4, "\"DS:%04X ES:%04X FS:%04X GS:%04X\r\n\"", 0);
apply_type (0x48DEB4, "extern char str_48DEB4[34];", TINFO_DEFINITE);
cleanup("str_48DED8");set_name(0x48DED8, "str_48DED8");
set_cmt(0x48DED8, "\"SS:ESP:%04X:%08X EBP:%08X\r\n\"", 0);
apply_type (0x48DED8, "extern char str_48DED8[28];", TINFO_DEFINITE);
cleanup("str_48DEF4");set_name(0x48DEF4, "str_48DEF4");
set_cmt(0x48DEF4, "\"CS:EIP:%04X:%08X\r\n\"", 0);
apply_type (0x48DEF4, "extern char str_48DEF4[19];", TINFO_DEFINITE);
cleanup("str_48DF08");set_name(0x48DF08, "str_48DF08");
set_cmt(0x48DF08, "\"EAX:%08X\r\nEBX:%08X\r\nECX:%08X\r\nEDX:%08X\r\nESI:%08X\r\nEDI:%08X\r\n\"", 0);
apply_type (0x48DF08, "extern char str_48DF08[61];", TINFO_DEFINITE);
cleanup("str_48DF48");set_name(0x48DF48, "str_48DF48");
set_cmt(0x48DF48, "\"\r\nRegisters:\r\n\"", 0);
apply_type (0x48DF48, "extern char str_48DF48[15];", TINFO_DEFINITE);
cleanup("str_48DF58");set_name(0x48DF58, "str_48DF58");
set_cmt(0x48DF58, "\"Fault address:\t%08X %02X:%08X %s\r\n\"", 0);
apply_type (0x48DF58, "extern char str_48DF58[35];", TINFO_DEFINITE);
cleanup("str_48DF7C");set_name(0x48DF7C, "str_48DF7C");
set_cmt(0x48DF7C, "\"Exception code: %08X %s\r\n\"", 0);
apply_type (0x48DF7C, "extern char str_48DF7C[26];", TINFO_DEFINITE);
cleanup("str_48DF98");set_name(0x48DF98, "str_48DF98");
set_cmt(0x48DF98, "\"%c\"", 0);
apply_type (0x48DF98, "extern char str_48DF98[3];", TINFO_DEFINITE);
cleanup("str_48DF9C");set_name(0x48DF9C, "str_48DF9C");
set_cmt(0x48DF9C, "\" \"", 0);
apply_type (0x48DF9C, "extern char str_48DF9C[2];", TINFO_DEFINITE);
cleanup("str_48DFA0");set_name(0x48DFA0, "str_48DFA0");
set_cmt(0x48DFA0, "\"   \"", 0);
apply_type (0x48DFA0, "extern char str_48DFA0[4];", TINFO_DEFINITE);
cleanup("str_48DFA4");set_name(0x48DFA4, "str_48DFA4");
set_cmt(0x48DFA4, "\"%02x \"", 0);
apply_type (0x48DFA4, "extern char str_48DFA4[6];", TINFO_DEFINITE);
cleanup("str_48DFAC");set_name(0x48DFAC, "str_48DFAC");
set_cmt(0x48DFAC, "\"0x%08x: \"", 0);
apply_type (0x48DFAC, "extern char str_48DFAC[9];", TINFO_DEFINITE);
cleanup("str_48DFB8");set_name(0x48DFB8, "str_48DFB8");
set_cmt(0x48DFB8, "\"%08X %08X %04X:%08X %s\r\n\"", 0);
apply_type (0x48DFB8, "extern char str_48DFB8[25];", TINFO_DEFINITE);
cleanup("str_48DFD4");set_name(0x48DFD4, "str_48DFD4");
set_cmt(0x48DFD4, "\"Call stack:\r\nAddress  Frame    Logical addr  Module\r\n\"", 0);
apply_type (0x48DFD4, "extern char str_48DFD4[54];", TINFO_DEFINITE);
cleanup("str_48E00C");set_name(0x48E00C, "str_48E00C");
set_cmt(0x48E00C, "\"NTDLL.DLL\"", 0);
apply_type (0x48E00C, "extern char str_48E00C[10];", TINFO_DEFINITE);
cleanup("str_48E018");set_name(0x48E018, "str_48E018");
set_cmt(0x48E018, "\"STACK_OVERFLOW\"", 0);
apply_type (0x48E018, "extern char str_48E018[15];", TINFO_DEFINITE);
cleanup("str_48E028");set_name(0x48E028, "str_48E028");
set_cmt(0x48E028, "\"PRIV_INSTRUCTION\"", 0);
apply_type (0x48E028, "extern char str_48E028[17];", TINFO_DEFINITE);
cleanup("str_48E03C");set_name(0x48E03C, "str_48E03C");
set_cmt(0x48E03C, "\"INT_OVERFLOW\"", 0);
apply_type (0x48E03C, "extern char str_48E03C[13];", TINFO_DEFINITE);
cleanup("str_48E04C");set_name(0x48E04C, "str_48E04C");
set_cmt(0x48E04C, "\"INT_DIVIDE_BY_ZERO\"", 0);
apply_type (0x48E04C, "extern char str_48E04C[19];", TINFO_DEFINITE);
cleanup("str_48E060");set_name(0x48E060, "str_48E060");
set_cmt(0x48E060, "\"FLT_UNDERFLOW\"", 0);
apply_type (0x48E060, "extern char str_48E060[14];", TINFO_DEFINITE);
cleanup("str_48E070");set_name(0x48E070, "str_48E070");
set_cmt(0x48E070, "\"FLT_STACK_CHECK\"", 0);
apply_type (0x48E070, "extern char str_48E070[16];", TINFO_DEFINITE);
cleanup("str_48E080");set_name(0x48E080, "str_48E080");
set_cmt(0x48E080, "\"FLT_OVERFLOW\"", 0);
apply_type (0x48E080, "extern char str_48E080[13];", TINFO_DEFINITE);
cleanup("str_48E090");set_name(0x48E090, "str_48E090");
set_cmt(0x48E090, "\"FLT_INVALID_OPERATION\"", 0);
apply_type (0x48E090, "extern char str_48E090[22];", TINFO_DEFINITE);
cleanup("str_48E0A8");set_name(0x48E0A8, "str_48E0A8");
set_cmt(0x48E0A8, "\"FLT_INEXACT_RESULT\"", 0);
apply_type (0x48E0A8, "extern char str_48E0A8[19];", TINFO_DEFINITE);
cleanup("str_48E0BC");set_name(0x48E0BC, "str_48E0BC");
set_cmt(0x48E0BC, "\"FLT_DIVIDE_BY_ZERO\"", 0);
apply_type (0x48E0BC, "extern char str_48E0BC[19];", TINFO_DEFINITE);
cleanup("str_48E0D0");set_name(0x48E0D0, "str_48E0D0");
set_cmt(0x48E0D0, "\"FLT_DENORMAL_OPERAND\"", 0);
apply_type (0x48E0D0, "extern char str_48E0D0[21];", TINFO_DEFINITE);
cleanup("str_48E0E8");set_name(0x48E0E8, "str_48E0E8");
set_cmt(0x48E0E8, "\"INVALID_HANDLE\"", 0);
apply_type (0x48E0E8, "extern char str_48E0E8[15];", TINFO_DEFINITE);
cleanup("str_48E0F8");set_name(0x48E0F8, "str_48E0F8");
set_cmt(0x48E0F8, "\"ILLEGAL_INSTRUCTION\"", 0);
apply_type (0x48E0F8, "extern char str_48E0F8[20];", TINFO_DEFINITE);
cleanup("str_48E10C");set_name(0x48E10C, "str_48E10C");
set_cmt(0x48E10C, "\"NONCONTINUABLE_EXCEPTION\"", 0);
apply_type (0x48E10C, "extern char str_48E10C[25];", TINFO_DEFINITE);
cleanup("str_48E128");set_name(0x48E128, "str_48E128");
set_cmt(0x48E128, "\"INVALID_DISPOSITION\"", 0);
apply_type (0x48E128, "extern char str_48E128[20];", TINFO_DEFINITE);
cleanup("str_48E13C");set_name(0x48E13C, "str_48E13C");
set_cmt(0x48E13C, "\"ARRAY_BOUNDS_EXCEEDED\"", 0);
apply_type (0x48E13C, "extern char str_48E13C[22];", TINFO_DEFINITE);
cleanup("str_48E154");set_name(0x48E154, "str_48E154");
set_cmt(0x48E154, "\"IN_PAGE_ERROR\"", 0);
apply_type (0x48E154, "extern char str_48E154[14];", TINFO_DEFINITE);
cleanup("str_48E164");set_name(0x48E164, "str_48E164");
set_cmt(0x48E164, "\"GUARD_PAGE\"", 0);
apply_type (0x48E164, "extern char str_48E164[11];", TINFO_DEFINITE);
cleanup("str_48E170");set_name(0x48E170, "str_48E170");
set_cmt(0x48E170, "\"DATATYPE_MISALIGNMENT\"", 0);
apply_type (0x48E170, "extern char str_48E170[22];", TINFO_DEFINITE);
cleanup("str_48E188");set_name(0x48E188, "str_48E188");
set_cmt(0x48E188, "\"BREAKPOINT\"", 0);
apply_type (0x48E188, "extern char str_48E188[11];", TINFO_DEFINITE);
cleanup("str_48E194");set_name(0x48E194, "str_48E194");
set_cmt(0x48E194, "\"SINGLE_STEP\"", 0);
apply_type (0x48E194, "extern char str_48E194[12];", TINFO_DEFINITE);
cleanup("str_48E1A0");set_name(0x48E1A0, "str_48E1A0");
set_cmt(0x48E1A0, "\"ACCESS_VIOLATION\"", 0);
apply_type (0x48E1A0, "extern char str_48E1A0[17];", TINFO_DEFINITE);
cleanup("str_494920");set_name(0x494920, "str_494920");
set_cmt(0x494920, "`Data\TextBox.CEL`", 0);
apply_type (0x494920, "extern char str_494920[17];", TINFO_DEFINITE);
cleanup("str_494934");set_name(0x494934, "str_494934");
set_cmt(0x494934, "`Data\MedTextS.CEL`", 0);
apply_type (0x494934, "extern char str_494934[18];", TINFO_DEFINITE);
cleanup("str_4861BC");set_name(0x4861BC, "str_4861BC");
set_cmt(0x4861BC, "`Levels\L4Data\Vile1.DUN`", 0);
apply_type (0x4861BC, "extern char str_4861BC[24];", TINFO_DEFINITE);
cleanup("str_4861D4");set_name(0x4861D4, "str_4861D4");
set_cmt(0x4861D4, "`Levels\L4Data\Warlord.DUN`", 0);
apply_type (0x4861D4, "extern char str_4861D4[26];", TINFO_DEFINITE);
cleanup("str_4861F0");set_name(0x4861F0, "str_4861F0");
set_cmt(0x4861F0, "`Levels\L4Data\diab4a.DUN`", 0);
apply_type (0x4861F0, "extern char str_4861F0[25];", TINFO_DEFINITE);
cleanup("str_48620C");set_name(0x48620C, "str_48620C");
set_cmt(0x48620C, "`Levels\L4Data\diab4b.DUN`", 0);
apply_type (0x48620C, "extern char str_48620C[25];", TINFO_DEFINITE);
cleanup("str_486228");set_name(0x486228, "str_486228");
set_cmt(0x486228, "`Levels\L4Data\diab3a.DUN`", 0);
apply_type (0x486228, "extern char str_486228[25];", TINFO_DEFINITE);
cleanup("str_486244");set_name(0x486244, "str_486244");
set_cmt(0x486244, "`Levels\L4Data\diab3b.DUN`", 0);
apply_type (0x486244, "extern char str_486244[25];", TINFO_DEFINITE);
cleanup("str_486260");set_name(0x486260, "str_486260");
set_cmt(0x486260, "`Levels\L4Data\diab2a.DUN`", 0);
apply_type (0x486260, "extern char str_486260[25];", TINFO_DEFINITE);
cleanup("str_48627C");set_name(0x48627C, "str_48627C");
set_cmt(0x48627C, "`Levels\L4Data\diab2b.DUN`", 0);
apply_type (0x48627C, "extern char str_48627C[25];", TINFO_DEFINITE);
cleanup("str_486298");set_name(0x486298, "str_486298");
set_cmt(0x486298, "`Levels\L4Data\diab1.DUN`", 0);
apply_type (0x486298, "extern char str_486298[24];", TINFO_DEFINITE);
cleanup("towner_anim_seq");set_name(0x4B2724, "towner_anim_seq");
set_cmt(0x4B2724, "towner_anim_seq specifies the animation frame sequence of a given NPC.", 0);
apply_type (0x4B2724, "extern int8_t towner_anim_seq[148][6];", TINFO_DEFINITE);
cleanup("cow_start_x");set_name(0x4B2A9C, "cow_start_x");
set_cmt(0x4B2A9C, "cow_start_x specifies the start X-coordinates of the cows in Tristram.", 0);
apply_type (0x4B2A9C, "extern int cow_start_x[3];", TINFO_DEFINITE);
cleanup("cow_start_y");set_name(0x4B2AA8, "cow_start_y");
set_cmt(0x4B2AA8, "cow_start_y specifies the start Y-coordinates of the cows in Tristram.", 0);
apply_type (0x4B2AA8, "extern int cow_start_y[3];", TINFO_DEFINITE);
cleanup("cow_start_direction");set_name(0x4B2AB4, "cow_start_direction");
set_cmt(0x4B2AB4, "cow_start_direction specifies the start directions of the cows in Tristram.", 0);
apply_type (0x4B2AB4, "extern direction cow_start_direction[3];", TINFO_DEFINITE);
cleanup("cow_x_delta_from_direction");set_name(0x4B2AC0, "cow_x_delta_from_direction");
set_cmt(0x4B2AC0, "cow_x_delta_from_direction maps from direction to X-coordinate delta, which\nis used when placing cows in Tristram. A single cow may require space of up\nto three tiles when being placed on the map.", 0);
apply_type (0x4B2AC0, "extern int cow_x_delta_from_direction[8];", TINFO_DEFINITE);
cleanup("cow_y_delta_from_direction");set_name(0x4B2AE0, "cow_y_delta_from_direction");
set_cmt(0x4B2AE0, "cow_y_delta_from_direction maps from direction to Y-coordinate delta, which\nis used when placing cows in Tristram. A single cow may require space of up\nto three tiles when being placed on the map.", 0);
apply_type (0x4B2AE0, "extern int cow_y_delta_from_direction[8];", TINFO_DEFINITE);
cleanup("gossip_data");set_name(0x4B2B00, "gossip_data");
set_cmt(0x4B2B00, "gossip_data contains the data related to quest gossip for each towner ID.", 0);
apply_type (0x4B2B00, "extern GossipData gossip_data[10];", TINFO_DEFINITE);
cleanup("cow_active_sfx_id");set_name(0x4B2DC0, "cow_active_sfx_id");
set_cmt(0x4B2DC0, "cow_active_sfx_id specifies the active sound effect ID for interacting with\ncows.", 0);
apply_type (0x4B2DC0, "extern sfx_id cow_active_sfx_id;", TINFO_DEFINITE);
cleanup("str_4B2DC4");set_name(0x4B2DC4, "str_4B2DC4");
set_cmt(0x4B2DC4, "\"Griswold the Blacksmith\"", 0);
apply_type (0x4B2DC4, "extern char str_4B2DC4[24];", TINFO_DEFINITE);
cleanup("str_4B2DDC");set_name(0x4B2DDC, "str_4B2DDC");
set_cmt(0x4B2DDC, "`Towners\Smith\SmithN.CEL`", 0);
apply_type (0x4B2DDC, "extern char str_4B2DDC[25];", TINFO_DEFINITE);
cleanup("str_4B2DF8");set_name(0x4B2DF8, "str_4B2DF8");
set_cmt(0x4B2DF8, "\"Ogden the Tavern owner\"", 0);
apply_type (0x4B2DF8, "extern char str_4B2DF8[23];", TINFO_DEFINITE);
cleanup("str_4B2E10");set_name(0x4B2E10, "str_4B2E10");
set_cmt(0x4B2E10, "`Towners\TwnF\TwnFN.CEL`", 0);
apply_type (0x4B2E10, "extern char str_4B2E10[23];", TINFO_DEFINITE);
cleanup("str_4B2E28");set_name(0x4B2E28, "str_4B2E28");
set_cmt(0x4B2E28, "\"Wounded Townsman\"", 0);
apply_type (0x4B2E28, "extern char str_4B2E28[17];", TINFO_DEFINITE);
cleanup("str_4B2E3C");set_name(0x4B2E3C, "str_4B2E3C");
set_cmt(0x4B2E3C, "`Towners\Butch\Deadguy.CEL`", 0);
apply_type (0x4B2E3C, "extern char str_4B2E3C[26];", TINFO_DEFINITE);
cleanup("str_4B2E58");set_name(0x4B2E58, "str_4B2E58");
set_cmt(0x4B2E58, "\"Adria the Witch\"", 0);
apply_type (0x4B2E58, "extern char str_4B2E58[16];", TINFO_DEFINITE);
cleanup("str_4B2E68");set_name(0x4B2E68, "str_4B2E68");
set_cmt(0x4B2E68, "`Towners\TownWmn1\Witch.CEL`", 0);
apply_type (0x4B2E68, "extern char str_4B2E68[27];", TINFO_DEFINITE);
cleanup("str_4B2E84");set_name(0x4B2E84, "str_4B2E84");
set_cmt(0x4B2E84, "\"Gillian the Barmaid\"", 0);
apply_type (0x4B2E84, "extern char str_4B2E84[20];", TINFO_DEFINITE);
cleanup("str_4B2E98");set_name(0x4B2E98, "str_4B2E98");
set_cmt(0x4B2E98, "`Towners\TownWmn1\WmnN.CEL`", 0);
apply_type (0x4B2E98, "extern char str_4B2E98[26];", TINFO_DEFINITE);
cleanup("str_4B2EB4");set_name(0x4B2EB4, "str_4B2EB4");
set_cmt(0x4B2EB4, "`Towners\TownBoy\PegKid1.CEL`", 0);
apply_type (0x4B2EB4, "extern char str_4B2EB4[28];", TINFO_DEFINITE);
cleanup("str_4B2ED0");set_name(0x4B2ED0, "str_4B2ED0");
set_cmt(0x4B2ED0, "\"Pepin the Healer\"", 0);
apply_type (0x4B2ED0, "extern char str_4B2ED0[17];", TINFO_DEFINITE);
cleanup("str_4B2EE4");set_name(0x4B2EE4, "str_4B2EE4");
set_cmt(0x4B2EE4, "`Towners\Healer\Healer.CEL`", 0);
apply_type (0x4B2EE4, "extern char str_4B2EE4[26];", TINFO_DEFINITE);
cleanup("str_4B2F00");set_name(0x4B2F00, "str_4B2F00");
set_cmt(0x4B2F00, "\"Cain the Elder\"", 0);
apply_type (0x4B2F00, "extern char str_4B2F00[15];", TINFO_DEFINITE);
cleanup("str_4B2F10");set_name(0x4B2F10, "str_4B2F10");
set_cmt(0x4B2F10, "`Towners\Strytell\Strytell.CEL`", 0);
apply_type (0x4B2F10, "extern char str_4B2F10[30];", TINFO_DEFINITE);
cleanup("str_4B2F30");set_name(0x4B2F30, "str_4B2F30");
set_cmt(0x4B2F30, "`Towners\Drunk\TwnDrunk.CEL`", 0);
apply_type (0x4B2F30, "extern char str_4B2F30[27];", TINFO_DEFINITE);
cleanup("str_4B2F4C");set_name(0x4B2F4C, "str_4B2F4C");
set_cmt(0x4B2F4C, "\"Cow\"", 0);
apply_type (0x4B2F4C, "extern char str_4B2F4C[4];", TINFO_DEFINITE);
cleanup("str_4B2F50");set_name(0x4B2F50, "str_4B2F50");
set_cmt(0x4B2F50, "`Towners\Animals\Cow.CEL`", 0);
apply_type (0x4B2F50, "extern char str_4B2F50[24];", TINFO_DEFINITE);
cleanup("str_4B2F68");set_name(0x4B2F68, "str_4B2F68");
set_cmt(0x4B2F68, "\"Slain Townsman\"", 0);
apply_type (0x4B2F68, "extern char str_4B2F68[15];", TINFO_DEFINITE);
cleanup("str_4846B0");set_name(0x4846B0, "str_4846B0");
set_cmt(0x4846B0, "`Items\Map\MapZ00%i.CEL`", 0);
apply_type (0x4846B0, "extern char str_4846B0[23];", TINFO_DEFINITE);
cleanup("str_4846C8");set_name(0x4846C8, "str_4846C8");
set_cmt(0x4846C8, "`Items\Map\MapZ000%i.CEL`", 0);
apply_type (0x4846C8, "extern char str_4846C8[24];", TINFO_DEFINITE);
cleanup("str_4846E0");set_name(0x4846E0, "str_4846E0");
set_cmt(0x4846E0, "`Items\Map\MapZDoom.CEL`", 0);
apply_type (0x4846E0, "extern char str_4846E0[23];", TINFO_DEFINITE);
cleanup("exclusive");set_name(0x484364, "exclusive");
set_cmt(0x484364, "exclusive specifies whether to give the game exclusive access to the screen.", 0);
apply_type (0x484364, "extern bool32_t exclusive;", TINFO_DEFINITE);
cleanup("player_friendly");set_name(0x484368, "player_friendly");
set_cmt(0x484368, "player_friendly specifies whether players are in non-PvP mode.", 0);
apply_type (0x484368, "extern bool32_t player_friendly;", TINFO_DEFINITE);
cleanup("net_msg_texts");set_name(0x48436C, "net_msg_texts");
set_cmt(0x48436C, "net_msg_texts maps from net_msg_id to hotkey network message.", 0);
apply_type (0x48436C, "extern char *net_msg_texts[4];", TINFO_DEFINITE);
cleanup("net_msg_hotkeys");set_name(0x48437C, "net_msg_hotkeys");
set_cmt(0x48437C, "net_msg_hotkeys maps from net_msg_id to hotkey name.", 0);
apply_type (0x48437C, "extern char *net_msg_hotkeys[4];", TINFO_DEFINITE);
cleanup("str_48438C");set_name(0x48438C, "str_48438C");
set_cmt(0x48438C, "\"F12\"", 0);
apply_type (0x48438C, "extern char str_48438C[4];", TINFO_DEFINITE);
cleanup("str_484390");set_name(0x484390, "str_484390");
set_cmt(0x484390, "\"F11\"", 0);
apply_type (0x484390, "extern char str_484390[4];", TINFO_DEFINITE);
cleanup("str_484394");set_name(0x484394, "str_484394");
set_cmt(0x484394, "\"F10\"", 0);
apply_type (0x484394, "extern char str_484394[4];", TINFO_DEFINITE);
cleanup("str_484398");set_name(0x484398, "str_484398");
set_cmt(0x484398, "\"F9\"", 0);
apply_type (0x484398, "extern char str_484398[3];", TINFO_DEFINITE);
cleanup("str_48439C");set_name(0x48439C, "str_48439C");
set_cmt(0x48439C, "\"Now you DIE!\"", 0);
apply_type (0x48439C, "extern char str_48439C[13];", TINFO_DEFINITE);
cleanup("str_4843AC");set_name(0x4843AC, "str_4843AC");
set_cmt(0x4843AC, "\"Here's something for you.\"", 0);
apply_type (0x4843AC, "extern char str_4843AC[26];", TINFO_DEFINITE);
cleanup("str_4843C8");set_name(0x4843C8, "str_4843C8");
set_cmt(0x4843C8, "\"Follow me.\"", 0);
apply_type (0x4843C8, "extern char str_4843C8[11];", TINFO_DEFINITE);
cleanup("str_4843D4");set_name(0x4843D4, "str_4843D4");
set_cmt(0x4843D4, "\"I need help! Come Here!\"", 0);
apply_type (0x4843D4, "extern char str_4843D4[24];", TINFO_DEFINITE);
cleanup("str_4843EC");set_name(0x4843EC, "str_4843EC");
set_cmt(0x4843EC, "\"DiabloEvent\"", 0);
apply_type (0x4843EC, "extern char str_4843EC[12];", TINFO_DEFINITE);
cleanup("str_4843F8");set_name(0x4843F8, "str_4843F8");
set_cmt(0x4843F8, "`gendata\diablo1.smk`", 0);
apply_type (0x4843F8, "extern char str_4843F8[20];", TINFO_DEFINITE);
cleanup("str_48440C");set_name(0x48440C, "str_48440C");
set_cmt(0x48440C, "\"Intro\"", 0);
apply_type (0x48440C, "extern char str_48440C[6];", TINFO_DEFINITE);
cleanup("str_484414");set_name(0x484414, "str_484414");
set_cmt(0x484414, "`gendata\logo.smk`", 0);
apply_type (0x484414, "extern char str_484414[17];", TINFO_DEFINITE);
cleanup("str_484428");set_name(0x484428, "str_484428");
set_cmt(0x484428, "`C:\Src\Diablo\Source\DIABLO.CPP`", 0);
apply_type (0x484428, "extern char str_484428[32];", TINFO_DEFINITE);
cleanup("str_484448");set_name(0x484448, "str_484448");
set_cmt(0x484448, "\"Reload-%s\"", 0);
apply_type (0x484448, "extern char str_484448[10];", TINFO_DEFINITE);
cleanup("str_484454");set_name(0x484454, "str_484454");
set_cmt(0x484454, "\"NetMsg\"", 0);
apply_type (0x484454, "extern char str_484454[7];", TINFO_DEFINITE);
cleanup("str_48445C");set_name(0x48445C, "str_48445C");
set_cmt(0x48445C, "`\Diablo.ini`", 0);
apply_type (0x48445C, "extern char str_48445C[12];", TINFO_DEFINITE);
cleanup("str_484468");set_name(0x484468, "str_484468");
set_cmt(0x484468, "\"Can't get program name\"", 0);
apply_type (0x484468, "extern char str_484468[23];", TINFO_DEFINITE);
cleanup("str_484480");set_name(0x484480, "str_484480");
set_cmt(0x484480, "\"while in stores\"", 0);
apply_type (0x484480, "extern char str_484480[16];", TINFO_DEFINITE);
cleanup("str_484490");set_name(0x484490, "str_484490");
set_cmt(0x484490, "\"No help available\"", 0);
apply_type (0x484490, "extern char str_484490[18];", TINFO_DEFINITE);
cleanup("str_4844A4");set_name(0x4844A4, "str_4844A4");
set_cmt(0x4844A4, "`Levels\TownData\TownS.CEL`", 0);
apply_type (0x4844A4, "extern char str_4844A4[26];", TINFO_DEFINITE);
cleanup("str_4844C0");set_name(0x4844C0, "str_4844C0");
set_cmt(0x4844C0, "`Levels\TownData\Town.MIN`", 0);
apply_type (0x4844C0, "extern char str_4844C0[25];", TINFO_DEFINITE);
cleanup("str_4844DC");set_name(0x4844DC, "str_4844DC");
set_cmt(0x4844DC, "`Levels\TownData\Town.TIL`", 0);
apply_type (0x4844DC, "extern char str_4844DC[25];", TINFO_DEFINITE);
cleanup("str_4844F8");set_name(0x4844F8, "str_4844F8");
set_cmt(0x4844F8, "`Levels\TownData\Town.CEL`", 0);
apply_type (0x4844F8, "extern char str_4844F8[25];", TINFO_DEFINITE);
cleanup("str_484514");set_name(0x484514, "str_484514");
set_cmt(0x484514, "`Levels\L1Data\L1S.CEL`", 0);
apply_type (0x484514, "extern char str_484514[22];", TINFO_DEFINITE);
cleanup("str_48452C");set_name(0x48452C, "str_48452C");
set_cmt(0x48452C, "`Levels\L1Data\L1.MIN`", 0);
apply_type (0x48452C, "extern char str_48452C[21];", TINFO_DEFINITE);
cleanup("str_484544");set_name(0x484544, "str_484544");
set_cmt(0x484544, "`Levels\L1Data\L1.TIL`", 0);
apply_type (0x484544, "extern char str_484544[21];", TINFO_DEFINITE);
cleanup("str_48455C");set_name(0x48455C, "str_48455C");
set_cmt(0x48455C, "`Levels\L1Data\L1.CEL`", 0);
apply_type (0x48455C, "extern char str_48455C[21];", TINFO_DEFINITE);
cleanup("str_484574");set_name(0x484574, "str_484574");
set_cmt(0x484574, "`Levels\L2Data\L2S.CEL`", 0);
apply_type (0x484574, "extern char str_484574[22];", TINFO_DEFINITE);
cleanup("str_48458C");set_name(0x48458C, "str_48458C");
set_cmt(0x48458C, "`Levels\L2Data\L2.MIN`", 0);
apply_type (0x48458C, "extern char str_48458C[21];", TINFO_DEFINITE);
cleanup("str_4845A4");set_name(0x4845A4, "str_4845A4");
set_cmt(0x4845A4, "`Levels\L2Data\L2.TIL`", 0);
apply_type (0x4845A4, "extern char str_4845A4[21];", TINFO_DEFINITE);
cleanup("str_4845BC");set_name(0x4845BC, "str_4845BC");
set_cmt(0x4845BC, "`Levels\L2Data\L2.CEL`", 0);
apply_type (0x4845BC, "extern char str_4845BC[21];", TINFO_DEFINITE);
cleanup("str_4845D4");set_name(0x4845D4, "str_4845D4");
set_cmt(0x4845D4, "`Levels\L3Data\L3.MIN`", 0);
apply_type (0x4845D4, "extern char str_4845D4[21];", TINFO_DEFINITE);
cleanup("str_4845EC");set_name(0x4845EC, "str_4845EC");
set_cmt(0x4845EC, "`Levels\L3Data\L3.TIL`", 0);
apply_type (0x4845EC, "extern char str_4845EC[21];", TINFO_DEFINITE);
cleanup("str_484604");set_name(0x484604, "str_484604");
set_cmt(0x484604, "`Levels\L3Data\L3.CEL`", 0);
apply_type (0x484604, "extern char str_484604[21];", TINFO_DEFINITE);
cleanup("str_48461C");set_name(0x48461C, "str_48461C");
set_cmt(0x48461C, "`Levels\L4Data\L4.MIN`", 0);
apply_type (0x48461C, "extern char str_48461C[21];", TINFO_DEFINITE);
cleanup("str_484634");set_name(0x484634, "str_484634");
set_cmt(0x484634, "`Levels\L4Data\L4.TIL`", 0);
apply_type (0x484634, "extern char str_484634[21];", TINFO_DEFINITE);
cleanup("str_48464C");set_name(0x48464C, "str_48464C");
set_cmt(0x48464C, "`Levels\L4Data\L4.CEL`", 0);
apply_type (0x48464C, "extern char str_48464C[21];", TINFO_DEFINITE);
cleanup("str_484664");set_name(0x484664, "str_484664");
set_cmt(0x484664, "\"LoadLvlGFX\"", 0);
apply_type (0x484664, "extern char str_484664[11];", TINFO_DEFINITE);
cleanup("str_484670");set_name(0x484670, "str_484670");
set_cmt(0x484670, "\"CreateLevel\"", 0);
apply_type (0x484670, "extern char str_484670[12];", TINFO_DEFINITE);
cleanup("str_48467C");set_name(0x48467C, "str_48467C");
set_cmt(0x48467C, "\"-- Waiting for players --\"", 0);
apply_type (0x48467C, "extern char str_48467C[26];", TINFO_DEFINITE);
cleanup("str_484698");set_name(0x484698, "str_484698");
set_cmt(0x484698, "\"-- Network timeout --\"", 0);
apply_type (0x484698, "extern char str_484698[22];", TINFO_DEFINITE);
cleanup("sfx_data");set_name(0x486370, "sfx_data");
set_cmt(0x486370, "sfx_data contains the data related to each sound effect ID.", 0);
apply_type (0x486370, "extern SfxData sfx_data[858];", TINFO_DEFINITE);
cleanup("str_48819C");set_name(0x48819C, "str_48819C");
set_cmt(0x48819C, "`Sfx\Monsters\DiabloD.wav`", 0);
apply_type (0x48819C, "extern char str_48819C[25];", TINFO_DEFINITE);
cleanup("str_4881B8");set_name(0x4881B8, "str_4881B8");
set_cmt(0x4881B8, "`Sfx\Monsters\Zhar02.wav`", 0);
apply_type (0x4881B8, "extern char str_4881B8[24];", TINFO_DEFINITE);
cleanup("str_4881D0");set_name(0x4881D0, "str_4881D0");
set_cmt(0x4881D0, "`Sfx\Monsters\Zhar01.wav`", 0);
apply_type (0x4881D0, "extern char str_4881D0[24];", TINFO_DEFINITE);
cleanup("str_4881E8");set_name(0x4881E8, "str_4881E8");
set_cmt(0x4881E8, "`Sfx\Monsters\Wlock01.wav`", 0);
apply_type (0x4881E8, "extern char str_4881E8[25];", TINFO_DEFINITE);
cleanup("str_488204");set_name(0x488204, "str_488204");
set_cmt(0x488204, "`Sfx\Monsters\Warlrd01.wav`", 0);
apply_type (0x488204, "extern char str_488204[26];", TINFO_DEFINITE);
cleanup("str_488220");set_name(0x488220, "str_488220");
set_cmt(0x488220, "`Sfx\Monsters\Snot03.wav`", 0);
apply_type (0x488220, "extern char str_488220[24];", TINFO_DEFINITE);
cleanup("str_488238");set_name(0x488238, "str_488238");
set_cmt(0x488238, "`Sfx\Monsters\Snot02.wav`", 0);
apply_type (0x488238, "extern char str_488238[24];", TINFO_DEFINITE);
cleanup("str_488250");set_name(0x488250, "str_488250");
set_cmt(0x488250, "`Sfx\Monsters\Snot01.wav`", 0);
apply_type (0x488250, "extern char str_488250[24];", TINFO_DEFINITE);
cleanup("str_488268");set_name(0x488268, "str_488268");
set_cmt(0x488268, "`Sfx\Monsters\Sking01.wav`", 0);
apply_type (0x488268, "extern char str_488268[25];", TINFO_DEFINITE);
cleanup("str_488284");set_name(0x488284, "str_488284");
set_cmt(0x488284, "`Sfx\Monsters\Laz02.wav`", 0);
apply_type (0x488284, "extern char str_488284[23];", TINFO_DEFINITE);
cleanup("str_48829C");set_name(0x48829C, "str_48829C");
set_cmt(0x48829C, "`Sfx\Monsters\Laz01.wav`", 0);
apply_type (0x48829C, "extern char str_48829C[23];", TINFO_DEFINITE);
cleanup("str_4882B4");set_name(0x4882B4, "str_4882B4");
set_cmt(0x4882B4, "`Sfx\Monsters\Lach03.wav`", 0);
apply_type (0x4882B4, "extern char str_4882B4[24];", TINFO_DEFINITE);
cleanup("str_4882CC");set_name(0x4882CC, "str_4882CC");
set_cmt(0x4882CC, "`Sfx\Monsters\Lach02.wav`", 0);
apply_type (0x4882CC, "extern char str_4882CC[24];", TINFO_DEFINITE);
cleanup("str_4882E4");set_name(0x4882E4, "str_4882E4");
set_cmt(0x4882E4, "`Sfx\Monsters\Lach01.wav`", 0);
apply_type (0x4882E4, "extern char str_4882E4[24];", TINFO_DEFINITE);
cleanup("str_4882FC");set_name(0x4882FC, "str_4882FC");
set_cmt(0x4882FC, "`Sfx\Monsters\Izual01.wav`", 0);
apply_type (0x4882FC, "extern char str_4882FC[25];", TINFO_DEFINITE);
cleanup("str_488318");set_name(0x488318, "str_488318");
set_cmt(0x488318, "`Sfx\Monsters\Garbud04.wav`", 0);
apply_type (0x488318, "extern char str_488318[26];", TINFO_DEFINITE);
cleanup("str_488334");set_name(0x488334, "str_488334");
set_cmt(0x488334, "`Sfx\Monsters\Garbud03.wav`", 0);
apply_type (0x488334, "extern char str_488334[26];", TINFO_DEFINITE);
cleanup("str_488350");set_name(0x488350, "str_488350");
set_cmt(0x488350, "`Sfx\Monsters\Garbud02.wav`", 0);
apply_type (0x488350, "extern char str_488350[26];", TINFO_DEFINITE);
cleanup("str_48836C");set_name(0x48836C, "str_48836C");
set_cmt(0x48836C, "`Sfx\Monsters\Garbud01.wav`", 0);
apply_type (0x48836C, "extern char str_48836C[26];", TINFO_DEFINITE);
cleanup("str_488388");set_name(0x488388, "str_488388");
set_cmt(0x488388, "`Sfx\Monsters\Butcher.wav`", 0);
apply_type (0x488388, "extern char str_488388[25];", TINFO_DEFINITE);
cleanup("str_4883A4");set_name(0x4883A4, "str_4883A4");
set_cmt(0x4883A4, "`Sfx\Misc\Lvl16int.wav`", 0);
apply_type (0x4883A4, "extern char str_4883A4[22];", TINFO_DEFINITE);
cleanup("str_4883BC");set_name(0x4883BC, "str_4883BC");
set_cmt(0x4883BC, "`Sfx\Narrator\Nar09.wav`", 0);
apply_type (0x4883BC, "extern char str_4883BC[23];", TINFO_DEFINITE);
cleanup("str_4883D4");set_name(0x4883D4, "str_4883D4");
set_cmt(0x4883D4, "`Sfx\Narrator\Nar08.wav`", 0);
apply_type (0x4883D4, "extern char str_4883D4[23];", TINFO_DEFINITE);
cleanup("str_4883EC");set_name(0x4883EC, "str_4883EC");
set_cmt(0x4883EC, "`Sfx\Narrator\Nar07.wav`", 0);
apply_type (0x4883EC, "extern char str_4883EC[23];", TINFO_DEFINITE);
cleanup("str_488404");set_name(0x488404, "str_488404");
set_cmt(0x488404, "`Sfx\Narrator\Nar06.wav`", 0);
apply_type (0x488404, "extern char str_488404[23];", TINFO_DEFINITE);
cleanup("str_48841C");set_name(0x48841C, "str_48841C");
set_cmt(0x48841C, "`Sfx\Narrator\Nar05.wav`", 0);
apply_type (0x48841C, "extern char str_48841C[23];", TINFO_DEFINITE);
cleanup("str_488434");set_name(0x488434, "str_488434");
set_cmt(0x488434, "`Sfx\Narrator\Nar04.wav`", 0);
apply_type (0x488434, "extern char str_488434[23];", TINFO_DEFINITE);
cleanup("str_48844C");set_name(0x48844C, "str_48844C");
set_cmt(0x48844C, "`Sfx\Narrator\Nar03.wav`", 0);
apply_type (0x48844C, "extern char str_48844C[23];", TINFO_DEFINITE);
cleanup("str_488464");set_name(0x488464, "str_488464");
set_cmt(0x488464, "`Sfx\Narrator\Nar02.wav`", 0);
apply_type (0x488464, "extern char str_488464[23];", TINFO_DEFINITE);
cleanup("str_48847C");set_name(0x48847C, "str_48847C");
set_cmt(0x48847C, "`Sfx\Narrator\Nar01.wav`", 0);
apply_type (0x48847C, "extern char str_48847C[23];", TINFO_DEFINITE);
cleanup("str_488494");set_name(0x488494, "str_488494");
set_cmt(0x488494, "`Sfx\Warrior\Wario102.wav`", 0);
apply_type (0x488494, "extern char str_488494[25];", TINFO_DEFINITE);
cleanup("str_4884B0");set_name(0x4884B0, "str_4884B0");
set_cmt(0x4884B0, "`Sfx\Warrior\Wario101.wav`", 0);
apply_type (0x4884B0, "extern char str_4884B0[25];", TINFO_DEFINITE);
cleanup("str_4884CC");set_name(0x4884CC, "str_4884CC");
set_cmt(0x4884CC, "`Sfx\Warrior\Wario100.wav`", 0);
apply_type (0x4884CC, "extern char str_4884CC[25];", TINFO_DEFINITE);
cleanup("str_4884E8");set_name(0x4884E8, "str_4884E8");
set_cmt(0x4884E8, "`Sfx\Warrior\Warior99.wav`", 0);
apply_type (0x4884E8, "extern char str_4884E8[25];", TINFO_DEFINITE);
cleanup("str_488504");set_name(0x488504, "str_488504");
set_cmt(0x488504, "`Sfx\Warrior\Wario98.wav`", 0);
apply_type (0x488504, "extern char str_488504[24];", TINFO_DEFINITE);
cleanup("str_48851C");set_name(0x48851C, "str_48851C");
set_cmt(0x48851C, "`Sfx\Warrior\Wario97.wav`", 0);
apply_type (0x48851C, "extern char str_48851C[24];", TINFO_DEFINITE);
cleanup("str_488534");set_name(0x488534, "str_488534");
set_cmt(0x488534, "`Sfx\Warrior\Wario96b.wav`", 0);
apply_type (0x488534, "extern char str_488534[25];", TINFO_DEFINITE);
cleanup("str_488550");set_name(0x488550, "str_488550");
set_cmt(0x488550, "`Sfx\Warrior\Wario95f.wav`", 0);
apply_type (0x488550, "extern char str_488550[25];", TINFO_DEFINITE);
cleanup("str_48856C");set_name(0x48856C, "str_48856C");
set_cmt(0x48856C, "`Sfx\Warrior\Wario95e.wav`", 0);
apply_type (0x48856C, "extern char str_48856C[25];", TINFO_DEFINITE);
cleanup("str_488588");set_name(0x488588, "str_488588");
set_cmt(0x488588, "`Sfx\Warrior\Wario95d.wav`", 0);
apply_type (0x488588, "extern char str_488588[25];", TINFO_DEFINITE);
cleanup("str_4885A4");set_name(0x4885A4, "str_4885A4");
set_cmt(0x4885A4, "`Sfx\Warrior\Wario95c.wav`", 0);
apply_type (0x4885A4, "extern char str_4885A4[25];", TINFO_DEFINITE);
cleanup("str_4885C0");set_name(0x4885C0, "str_4885C0");
set_cmt(0x4885C0, "`Sfx\Warrior\Wario95b.wav`", 0);
apply_type (0x4885C0, "extern char str_4885C0[25];", TINFO_DEFINITE);
cleanup("str_4885DC");set_name(0x4885DC, "str_4885DC");
set_cmt(0x4885DC, "`Sfx\Warrior\Warior95.wav`", 0);
apply_type (0x4885DC, "extern char str_4885DC[25];", TINFO_DEFINITE);
cleanup("str_4885F8");set_name(0x4885F8, "str_4885F8");
set_cmt(0x4885F8, "`Sfx\Warrior\Warior94.wav`", 0);
apply_type (0x4885F8, "extern char str_4885F8[25];", TINFO_DEFINITE);
cleanup("str_488614");set_name(0x488614, "str_488614");
set_cmt(0x488614, "`Sfx\Warrior\Warior93.wav`", 0);
apply_type (0x488614, "extern char str_488614[25];", TINFO_DEFINITE);
cleanup("str_488630");set_name(0x488630, "str_488630");
set_cmt(0x488630, "`Sfx\Warrior\Warior92.wav`", 0);
apply_type (0x488630, "extern char str_488630[25];", TINFO_DEFINITE);
cleanup("str_48864C");set_name(0x48864C, "str_48864C");
set_cmt(0x48864C, "`Sfx\Warrior\Warior91.wav`", 0);
apply_type (0x48864C, "extern char str_48864C[25];", TINFO_DEFINITE);
cleanup("str_488668");set_name(0x488668, "str_488668");
set_cmt(0x488668, "`Sfx\Warrior\Warior90.wav`", 0);
apply_type (0x488668, "extern char str_488668[25];", TINFO_DEFINITE);
cleanup("str_488684");set_name(0x488684, "str_488684");
set_cmt(0x488684, "`Sfx\Warrior\Warior89.wav`", 0);
apply_type (0x488684, "extern char str_488684[25];", TINFO_DEFINITE);
cleanup("str_4886A0");set_name(0x4886A0, "str_4886A0");
set_cmt(0x4886A0, "`Sfx\Warrior\Warior88.wav`", 0);
apply_type (0x4886A0, "extern char str_4886A0[25];", TINFO_DEFINITE);
cleanup("str_4886BC");set_name(0x4886BC, "str_4886BC");
set_cmt(0x4886BC, "`Sfx\Warrior\Warior87.wav`", 0);
apply_type (0x4886BC, "extern char str_4886BC[25];", TINFO_DEFINITE);
cleanup("str_4886D8");set_name(0x4886D8, "str_4886D8");
set_cmt(0x4886D8, "`Sfx\Warrior\Warior86.wav`", 0);
apply_type (0x4886D8, "extern char str_4886D8[25];", TINFO_DEFINITE);
cleanup("str_4886F4");set_name(0x4886F4, "str_4886F4");
set_cmt(0x4886F4, "`Sfx\Warrior\Warior85.wav`", 0);
apply_type (0x4886F4, "extern char str_4886F4[25];", TINFO_DEFINITE);
cleanup("str_488710");set_name(0x488710, "str_488710");
set_cmt(0x488710, "`Sfx\Warrior\Warior84.wav`", 0);
apply_type (0x488710, "extern char str_488710[25];", TINFO_DEFINITE);
cleanup("str_48872C");set_name(0x48872C, "str_48872C");
set_cmt(0x48872C, "`Sfx\Warrior\Warior83.wav`", 0);
apply_type (0x48872C, "extern char str_48872C[25];", TINFO_DEFINITE);
cleanup("str_488748");set_name(0x488748, "str_488748");
set_cmt(0x488748, "`Sfx\Warrior\Warior82.wav`", 0);
apply_type (0x488748, "extern char str_488748[25];", TINFO_DEFINITE);
cleanup("str_488764");set_name(0x488764, "str_488764");
set_cmt(0x488764, "`Sfx\Warrior\Warior81.wav`", 0);
apply_type (0x488764, "extern char str_488764[25];", TINFO_DEFINITE);
cleanup("str_488780");set_name(0x488780, "str_488780");
set_cmt(0x488780, "`Sfx\Warrior\Warior80.wav`", 0);
apply_type (0x488780, "extern char str_488780[25];", TINFO_DEFINITE);
cleanup("str_48879C");set_name(0x48879C, "str_48879C");
set_cmt(0x48879C, "`Sfx\Warrior\Warior79.wav`", 0);
apply_type (0x48879C, "extern char str_48879C[25];", TINFO_DEFINITE);
cleanup("str_4887B8");set_name(0x4887B8, "str_4887B8");
set_cmt(0x4887B8, "`Sfx\Warrior\Warior78.wav`", 0);
apply_type (0x4887B8, "extern char str_4887B8[25];", TINFO_DEFINITE);
cleanup("str_4887D4");set_name(0x4887D4, "str_4887D4");
set_cmt(0x4887D4, "`Sfx\Warrior\Warior77.wav`", 0);
apply_type (0x4887D4, "extern char str_4887D4[25];", TINFO_DEFINITE);
cleanup("str_4887F0");set_name(0x4887F0, "str_4887F0");
set_cmt(0x4887F0, "`Sfx\Warrior\Warior76.wav`", 0);
apply_type (0x4887F0, "extern char str_4887F0[25];", TINFO_DEFINITE);
cleanup("str_48880C");set_name(0x48880C, "str_48880C");
set_cmt(0x48880C, "`Sfx\Warrior\Warior75.wav`", 0);
apply_type (0x48880C, "extern char str_48880C[25];", TINFO_DEFINITE);
cleanup("str_488828");set_name(0x488828, "str_488828");
set_cmt(0x488828, "`Sfx\Warrior\Warior74.wav`", 0);
apply_type (0x488828, "extern char str_488828[25];", TINFO_DEFINITE);
cleanup("str_488844");set_name(0x488844, "str_488844");
set_cmt(0x488844, "`Sfx\Warrior\Warior73.wav`", 0);
apply_type (0x488844, "extern char str_488844[25];", TINFO_DEFINITE);
cleanup("str_488860");set_name(0x488860, "str_488860");
set_cmt(0x488860, "`Sfx\Warrior\Warior72.wav`", 0);
apply_type (0x488860, "extern char str_488860[25];", TINFO_DEFINITE);
cleanup("str_48887C");set_name(0x48887C, "str_48887C");
set_cmt(0x48887C, "`Sfx\Warrior\Warior71.wav`", 0);
apply_type (0x48887C, "extern char str_48887C[25];", TINFO_DEFINITE);
cleanup("str_488898");set_name(0x488898, "str_488898");
set_cmt(0x488898, "`Sfx\Warrior\Warior70.wav`", 0);
apply_type (0x488898, "extern char str_488898[25];", TINFO_DEFINITE);
cleanup("str_4888B4");set_name(0x4888B4, "str_4888B4");
set_cmt(0x4888B4, "`Sfx\Warrior\Wario69b.wav`", 0);
apply_type (0x4888B4, "extern char str_4888B4[25];", TINFO_DEFINITE);
cleanup("str_4888D0");set_name(0x4888D0, "str_4888D0");
set_cmt(0x4888D0, "`Sfx\Warrior\Warior69.wav`", 0);
apply_type (0x4888D0, "extern char str_4888D0[25];", TINFO_DEFINITE);
cleanup("str_4888EC");set_name(0x4888EC, "str_4888EC");
set_cmt(0x4888EC, "`Sfx\Warrior\Warior68.wav`", 0);
apply_type (0x4888EC, "extern char str_4888EC[25];", TINFO_DEFINITE);
cleanup("str_488908");set_name(0x488908, "str_488908");
set_cmt(0x488908, "`Sfx\Warrior\Warior67.wav`", 0);
apply_type (0x488908, "extern char str_488908[25];", TINFO_DEFINITE);
cleanup("str_488924");set_name(0x488924, "str_488924");
set_cmt(0x488924, "`Sfx\Warrior\Warior66.wav`", 0);
apply_type (0x488924, "extern char str_488924[25];", TINFO_DEFINITE);
cleanup("str_488940");set_name(0x488940, "str_488940");
set_cmt(0x488940, "`Sfx\Warrior\Warior65.wav`", 0);
apply_type (0x488940, "extern char str_488940[25];", TINFO_DEFINITE);
cleanup("str_48895C");set_name(0x48895C, "str_48895C");
set_cmt(0x48895C, "`Sfx\Warrior\Warior64.wav`", 0);
apply_type (0x48895C, "extern char str_48895C[25];", TINFO_DEFINITE);
cleanup("str_488978");set_name(0x488978, "str_488978");
set_cmt(0x488978, "`Sfx\Warrior\Warior63.wav`", 0);
apply_type (0x488978, "extern char str_488978[25];", TINFO_DEFINITE);
cleanup("str_488994");set_name(0x488994, "str_488994");
set_cmt(0x488994, "`Sfx\Warrior\Warior62.wav`", 0);
apply_type (0x488994, "extern char str_488994[25];", TINFO_DEFINITE);
cleanup("str_4889B0");set_name(0x4889B0, "str_4889B0");
set_cmt(0x4889B0, "`Sfx\Warrior\Warior61.wav`", 0);
apply_type (0x4889B0, "extern char str_4889B0[25];", TINFO_DEFINITE);
cleanup("str_4889CC");set_name(0x4889CC, "str_4889CC");
set_cmt(0x4889CC, "`Sfx\Warrior\Warior60.wav`", 0);
apply_type (0x4889CC, "extern char str_4889CC[25];", TINFO_DEFINITE);
cleanup("str_4889E8");set_name(0x4889E8, "str_4889E8");
set_cmt(0x4889E8, "`Sfx\Warrior\Warior59.wav`", 0);
apply_type (0x4889E8, "extern char str_4889E8[25];", TINFO_DEFINITE);
cleanup("str_488A04");set_name(0x488A04, "str_488A04");
set_cmt(0x488A04, "`Sfx\Warrior\Warior58.wav`", 0);
apply_type (0x488A04, "extern char str_488A04[25];", TINFO_DEFINITE);
cleanup("str_488A20");set_name(0x488A20, "str_488A20");
set_cmt(0x488A20, "`Sfx\Warrior\Warior57.wav`", 0);
apply_type (0x488A20, "extern char str_488A20[25];", TINFO_DEFINITE);
cleanup("str_488A3C");set_name(0x488A3C, "str_488A3C");
set_cmt(0x488A3C, "`Sfx\Warrior\Warior56.wav`", 0);
apply_type (0x488A3C, "extern char str_488A3C[25];", TINFO_DEFINITE);
cleanup("str_488A58");set_name(0x488A58, "str_488A58");
set_cmt(0x488A58, "`Sfx\Warrior\Warior55.wav`", 0);
apply_type (0x488A58, "extern char str_488A58[25];", TINFO_DEFINITE);
cleanup("str_488A74");set_name(0x488A74, "str_488A74");
set_cmt(0x488A74, "`Sfx\Warrior\Warior54.wav`", 0);
apply_type (0x488A74, "extern char str_488A74[25];", TINFO_DEFINITE);
cleanup("str_488A90");set_name(0x488A90, "str_488A90");
set_cmt(0x488A90, "`Sfx\Warrior\Warior53.wav`", 0);
apply_type (0x488A90, "extern char str_488A90[25];", TINFO_DEFINITE);
cleanup("str_488AAC");set_name(0x488AAC, "str_488AAC");
set_cmt(0x488AAC, "`Sfx\Warrior\Warior52.wav`", 0);
apply_type (0x488AAC, "extern char str_488AAC[25];", TINFO_DEFINITE);
cleanup("str_488AC8");set_name(0x488AC8, "str_488AC8");
set_cmt(0x488AC8, "`Sfx\Warrior\Warior51.wav`", 0);
apply_type (0x488AC8, "extern char str_488AC8[25];", TINFO_DEFINITE);
cleanup("str_488AE4");set_name(0x488AE4, "str_488AE4");
set_cmt(0x488AE4, "`Sfx\Warrior\Warior50.wav`", 0);
apply_type (0x488AE4, "extern char str_488AE4[25];", TINFO_DEFINITE);
cleanup("str_488B00");set_name(0x488B00, "str_488B00");
set_cmt(0x488B00, "`Sfx\Warrior\Warior49.wav`", 0);
apply_type (0x488B00, "extern char str_488B00[25];", TINFO_DEFINITE);
cleanup("str_488B1C");set_name(0x488B1C, "str_488B1C");
set_cmt(0x488B1C, "`Sfx\Warrior\Warior48.wav`", 0);
apply_type (0x488B1C, "extern char str_488B1C[25];", TINFO_DEFINITE);
cleanup("str_488B38");set_name(0x488B38, "str_488B38");
set_cmt(0x488B38, "`Sfx\Warrior\Warior47.wav`", 0);
apply_type (0x488B38, "extern char str_488B38[25];", TINFO_DEFINITE);
cleanup("str_488B54");set_name(0x488B54, "str_488B54");
set_cmt(0x488B54, "`Sfx\Warrior\Warior46.wav`", 0);
apply_type (0x488B54, "extern char str_488B54[25];", TINFO_DEFINITE);
cleanup("str_488B70");set_name(0x488B70, "str_488B70");
set_cmt(0x488B70, "`Sfx\Warrior\Warior45.wav`", 0);
apply_type (0x488B70, "extern char str_488B70[25];", TINFO_DEFINITE);
cleanup("str_488B8C");set_name(0x488B8C, "str_488B8C");
set_cmt(0x488B8C, "`Sfx\Warrior\Warior44.wav`", 0);
apply_type (0x488B8C, "extern char str_488B8C[25];", TINFO_DEFINITE);
cleanup("str_488BA8");set_name(0x488BA8, "str_488BA8");
set_cmt(0x488BA8, "`Sfx\Warrior\Warior43.wav`", 0);
apply_type (0x488BA8, "extern char str_488BA8[25];", TINFO_DEFINITE);
cleanup("str_488BC4");set_name(0x488BC4, "str_488BC4");
set_cmt(0x488BC4, "`Sfx\Warrior\Warior42.wav`", 0);
apply_type (0x488BC4, "extern char str_488BC4[25];", TINFO_DEFINITE);
cleanup("str_488BE0");set_name(0x488BE0, "str_488BE0");
set_cmt(0x488BE0, "`Sfx\Warrior\Warior41.wav`", 0);
apply_type (0x488BE0, "extern char str_488BE0[25];", TINFO_DEFINITE);
cleanup("str_488BFC");set_name(0x488BFC, "str_488BFC");
set_cmt(0x488BFC, "`Sfx\Warrior\Warior40.wav`", 0);
apply_type (0x488BFC, "extern char str_488BFC[25];", TINFO_DEFINITE);
cleanup("str_488C18");set_name(0x488C18, "str_488C18");
set_cmt(0x488C18, "`Sfx\Warrior\Warior39.wav`", 0);
apply_type (0x488C18, "extern char str_488C18[25];", TINFO_DEFINITE);
cleanup("str_488C34");set_name(0x488C34, "str_488C34");
set_cmt(0x488C34, "`Sfx\Warrior\Warior38.wav`", 0);
apply_type (0x488C34, "extern char str_488C34[25];", TINFO_DEFINITE);
cleanup("str_488C50");set_name(0x488C50, "str_488C50");
set_cmt(0x488C50, "`Sfx\Warrior\Warior37.wav`", 0);
apply_type (0x488C50, "extern char str_488C50[25];", TINFO_DEFINITE);
cleanup("str_488C6C");set_name(0x488C6C, "str_488C6C");
set_cmt(0x488C6C, "`Sfx\Warrior\Warior36.wav`", 0);
apply_type (0x488C6C, "extern char str_488C6C[25];", TINFO_DEFINITE);
cleanup("str_488C88");set_name(0x488C88, "str_488C88");
set_cmt(0x488C88, "`Sfx\Warrior\Warior35.wav`", 0);
apply_type (0x488C88, "extern char str_488C88[25];", TINFO_DEFINITE);
cleanup("str_488CA4");set_name(0x488CA4, "str_488CA4");
set_cmt(0x488CA4, "`Sfx\Warrior\Warior34.wav`", 0);
apply_type (0x488CA4, "extern char str_488CA4[25];", TINFO_DEFINITE);
cleanup("str_488CC0");set_name(0x488CC0, "str_488CC0");
set_cmt(0x488CC0, "`Sfx\Warrior\Warior33.wav`", 0);
apply_type (0x488CC0, "extern char str_488CC0[25];", TINFO_DEFINITE);
cleanup("str_488CDC");set_name(0x488CDC, "str_488CDC");
set_cmt(0x488CDC, "`Sfx\Warrior\Warior32.wav`", 0);
apply_type (0x488CDC, "extern char str_488CDC[25];", TINFO_DEFINITE);
cleanup("str_488CF8");set_name(0x488CF8, "str_488CF8");
set_cmt(0x488CF8, "`Sfx\Warrior\Warior31.wav`", 0);
apply_type (0x488CF8, "extern char str_488CF8[25];", TINFO_DEFINITE);
cleanup("str_488D14");set_name(0x488D14, "str_488D14");
set_cmt(0x488D14, "`Sfx\Warrior\Warior30.wav`", 0);
apply_type (0x488D14, "extern char str_488D14[25];", TINFO_DEFINITE);
cleanup("str_488D30");set_name(0x488D30, "str_488D30");
set_cmt(0x488D30, "`Sfx\Warrior\Warior29.wav`", 0);
apply_type (0x488D30, "extern char str_488D30[25];", TINFO_DEFINITE);
cleanup("str_488D4C");set_name(0x488D4C, "str_488D4C");
set_cmt(0x488D4C, "`Sfx\Warrior\Warior28.wav`", 0);
apply_type (0x488D4C, "extern char str_488D4C[25];", TINFO_DEFINITE);
cleanup("str_488D68");set_name(0x488D68, "str_488D68");
set_cmt(0x488D68, "`Sfx\Warrior\Warior27.wav`", 0);
apply_type (0x488D68, "extern char str_488D68[25];", TINFO_DEFINITE);
cleanup("str_488D84");set_name(0x488D84, "str_488D84");
set_cmt(0x488D84, "`Sfx\Warrior\Warior26.wav`", 0);
apply_type (0x488D84, "extern char str_488D84[25];", TINFO_DEFINITE);
cleanup("str_488DA0");set_name(0x488DA0, "str_488DA0");
set_cmt(0x488DA0, "`Sfx\Warrior\Warior25.wav`", 0);
apply_type (0x488DA0, "extern char str_488DA0[25];", TINFO_DEFINITE);
cleanup("str_488DBC");set_name(0x488DBC, "str_488DBC");
set_cmt(0x488DBC, "`Sfx\Warrior\Warior24.wav`", 0);
apply_type (0x488DBC, "extern char str_488DBC[25];", TINFO_DEFINITE);
cleanup("str_488DD8");set_name(0x488DD8, "str_488DD8");
set_cmt(0x488DD8, "`Sfx\Warrior\Warior23.wav`", 0);
apply_type (0x488DD8, "extern char str_488DD8[25];", TINFO_DEFINITE);
cleanup("str_488DF4");set_name(0x488DF4, "str_488DF4");
set_cmt(0x488DF4, "`Sfx\Warrior\Warior22.wav`", 0);
apply_type (0x488DF4, "extern char str_488DF4[25];", TINFO_DEFINITE);
cleanup("str_488E10");set_name(0x488E10, "str_488E10");
set_cmt(0x488E10, "`Sfx\Warrior\Warior21.wav`", 0);
apply_type (0x488E10, "extern char str_488E10[25];", TINFO_DEFINITE);
cleanup("str_488E2C");set_name(0x488E2C, "str_488E2C");
set_cmt(0x488E2C, "`Sfx\Warrior\Warior20.wav`", 0);
apply_type (0x488E2C, "extern char str_488E2C[25];", TINFO_DEFINITE);
cleanup("str_488E48");set_name(0x488E48, "str_488E48");
set_cmt(0x488E48, "`Sfx\Warrior\Warior19.wav`", 0);
apply_type (0x488E48, "extern char str_488E48[25];", TINFO_DEFINITE);
cleanup("str_488E64");set_name(0x488E64, "str_488E64");
set_cmt(0x488E64, "`Sfx\Warrior\Warior18.wav`", 0);
apply_type (0x488E64, "extern char str_488E64[25];", TINFO_DEFINITE);
cleanup("str_488E80");set_name(0x488E80, "str_488E80");
set_cmt(0x488E80, "`Sfx\Warrior\Warior17.wav`", 0);
apply_type (0x488E80, "extern char str_488E80[25];", TINFO_DEFINITE);
cleanup("str_488E9C");set_name(0x488E9C, "str_488E9C");
set_cmt(0x488E9C, "`Sfx\Warrior\Wario16c.wav`", 0);
apply_type (0x488E9C, "extern char str_488E9C[25];", TINFO_DEFINITE);
cleanup("str_488EB8");set_name(0x488EB8, "str_488EB8");
set_cmt(0x488EB8, "`Sfx\Warrior\Wario16b.wav`", 0);
apply_type (0x488EB8, "extern char str_488EB8[25];", TINFO_DEFINITE);
cleanup("str_488ED4");set_name(0x488ED4, "str_488ED4");
set_cmt(0x488ED4, "`Sfx\Warrior\Warior16.wav`", 0);
apply_type (0x488ED4, "extern char str_488ED4[25];", TINFO_DEFINITE);
cleanup("str_488EF0");set_name(0x488EF0, "str_488EF0");
set_cmt(0x488EF0, "`Sfx\Warrior\Wario15c.wav`", 0);
apply_type (0x488EF0, "extern char str_488EF0[25];", TINFO_DEFINITE);
cleanup("str_488F0C");set_name(0x488F0C, "str_488F0C");
set_cmt(0x488F0C, "`Sfx\Warrior\Wario15b.wav`", 0);
apply_type (0x488F0C, "extern char str_488F0C[25];", TINFO_DEFINITE);
cleanup("str_488F28");set_name(0x488F28, "str_488F28");
set_cmt(0x488F28, "`Sfx\Warrior\Warior15.wav`", 0);
apply_type (0x488F28, "extern char str_488F28[25];", TINFO_DEFINITE);
cleanup("str_488F44");set_name(0x488F44, "str_488F44");
set_cmt(0x488F44, "`Sfx\Warrior\Wario14c.wav`", 0);
apply_type (0x488F44, "extern char str_488F44[25];", TINFO_DEFINITE);
cleanup("str_488F60");set_name(0x488F60, "str_488F60");
set_cmt(0x488F60, "`Sfx\Warrior\Wario14b.wav`", 0);
apply_type (0x488F60, "extern char str_488F60[25];", TINFO_DEFINITE);
cleanup("str_488F7C");set_name(0x488F7C, "str_488F7C");
set_cmt(0x488F7C, "`Sfx\Warrior\Warior14.wav`", 0);
apply_type (0x488F7C, "extern char str_488F7C[25];", TINFO_DEFINITE);
cleanup("str_488F98");set_name(0x488F98, "str_488F98");
set_cmt(0x488F98, "`Sfx\Warrior\Warior13.wav`", 0);
apply_type (0x488F98, "extern char str_488F98[25];", TINFO_DEFINITE);
cleanup("str_488FB4");set_name(0x488FB4, "str_488FB4");
set_cmt(0x488FB4, "`Sfx\Warrior\Warior12.wav`", 0);
apply_type (0x488FB4, "extern char str_488FB4[25];", TINFO_DEFINITE);
cleanup("str_488FD0");set_name(0x488FD0, "str_488FD0");
set_cmt(0x488FD0, "`Sfx\Warrior\Warior11.wav`", 0);
apply_type (0x488FD0, "extern char str_488FD0[25];", TINFO_DEFINITE);
cleanup("str_488FEC");set_name(0x488FEC, "str_488FEC");
set_cmt(0x488FEC, "`Sfx\Warrior\Warior10.wav`", 0);
apply_type (0x488FEC, "extern char str_488FEC[25];", TINFO_DEFINITE);
cleanup("str_489008");set_name(0x489008, "str_489008");
set_cmt(0x489008, "`Sfx\Warrior\Warior09.wav`", 0);
apply_type (0x489008, "extern char str_489008[25];", TINFO_DEFINITE);
cleanup("str_489024");set_name(0x489024, "str_489024");
set_cmt(0x489024, "`Sfx\Warrior\Warior08.wav`", 0);
apply_type (0x489024, "extern char str_489024[25];", TINFO_DEFINITE);
cleanup("str_489040");set_name(0x489040, "str_489040");
set_cmt(0x489040, "`Sfx\Warrior\Warior07.wav`", 0);
apply_type (0x489040, "extern char str_489040[25];", TINFO_DEFINITE);
cleanup("str_48905C");set_name(0x48905C, "str_48905C");
set_cmt(0x48905C, "`Sfx\Warrior\Warior06.wav`", 0);
apply_type (0x48905C, "extern char str_48905C[25];", TINFO_DEFINITE);
cleanup("str_489078");set_name(0x489078, "str_489078");
set_cmt(0x489078, "`Sfx\Warrior\Warior05.wav`", 0);
apply_type (0x489078, "extern char str_489078[25];", TINFO_DEFINITE);
cleanup("str_489094");set_name(0x489094, "str_489094");
set_cmt(0x489094, "`Sfx\Warrior\Warior04.wav`", 0);
apply_type (0x489094, "extern char str_489094[25];", TINFO_DEFINITE);
cleanup("str_4890B0");set_name(0x4890B0, "str_4890B0");
set_cmt(0x4890B0, "`Sfx\Warrior\Warior03.wav`", 0);
apply_type (0x4890B0, "extern char str_4890B0[25];", TINFO_DEFINITE);
cleanup("str_4890CC");set_name(0x4890CC, "str_4890CC");
set_cmt(0x4890CC, "`Sfx\Warrior\Warior02.wav`", 0);
apply_type (0x4890CC, "extern char str_4890CC[25];", TINFO_DEFINITE);
cleanup("str_4890E8");set_name(0x4890E8, "str_4890E8");
set_cmt(0x4890E8, "`Sfx\Warrior\Warior01.wav`", 0);
apply_type (0x4890E8, "extern char str_4890E8[25];", TINFO_DEFINITE);
cleanup("str_489104");set_name(0x489104, "str_489104");
set_cmt(0x489104, "`Sfx\Rogue\Rogue102.wav`", 0);
apply_type (0x489104, "extern char str_489104[23];", TINFO_DEFINITE);
cleanup("str_48911C");set_name(0x48911C, "str_48911C");
set_cmt(0x48911C, "`Sfx\Rogue\Rogue101.wav`", 0);
apply_type (0x48911C, "extern char str_48911C[23];", TINFO_DEFINITE);
cleanup("str_489134");set_name(0x489134, "str_489134");
set_cmt(0x489134, "`Sfx\Rogue\Rogue100.wav`", 0);
apply_type (0x489134, "extern char str_489134[23];", TINFO_DEFINITE);
cleanup("str_48914C");set_name(0x48914C, "str_48914C");
set_cmt(0x48914C, "`Sfx\Rogue\Rogue99.wav`", 0);
apply_type (0x48914C, "extern char str_48914C[22];", TINFO_DEFINITE);
cleanup("str_489164");set_name(0x489164, "str_489164");
set_cmt(0x489164, "`Sfx\Rogue\Rogue98.wav`", 0);
apply_type (0x489164, "extern char str_489164[22];", TINFO_DEFINITE);
cleanup("str_48917C");set_name(0x48917C, "str_48917C");
set_cmt(0x48917C, "`Sfx\Rogue\Rogue97.wav`", 0);
apply_type (0x48917C, "extern char str_48917C[22];", TINFO_DEFINITE);
cleanup("str_489194");set_name(0x489194, "str_489194");
set_cmt(0x489194, "`Sfx\Rogue\Rogue96.wav`", 0);
apply_type (0x489194, "extern char str_489194[22];", TINFO_DEFINITE);
cleanup("str_4891AC");set_name(0x4891AC, "str_4891AC");
set_cmt(0x4891AC, "`Sfx\Rogue\Rogue95.wav`", 0);
apply_type (0x4891AC, "extern char str_4891AC[22];", TINFO_DEFINITE);
cleanup("str_4891C4");set_name(0x4891C4, "str_4891C4");
set_cmt(0x4891C4, "`Sfx\Rogue\Rogue94.wav`", 0);
apply_type (0x4891C4, "extern char str_4891C4[22];", TINFO_DEFINITE);
cleanup("str_4891DC");set_name(0x4891DC, "str_4891DC");
set_cmt(0x4891DC, "`Sfx\Rogue\Rogue93.wav`", 0);
apply_type (0x4891DC, "extern char str_4891DC[22];", TINFO_DEFINITE);
cleanup("str_4891F4");set_name(0x4891F4, "str_4891F4");
set_cmt(0x4891F4, "`Sfx\Rogue\Rogue92.wav`", 0);
apply_type (0x4891F4, "extern char str_4891F4[22];", TINFO_DEFINITE);
cleanup("str_48920C");set_name(0x48920C, "str_48920C");
set_cmt(0x48920C, "`Sfx\Rogue\Rogue91.wav`", 0);
apply_type (0x48920C, "extern char str_48920C[22];", TINFO_DEFINITE);
cleanup("str_489224");set_name(0x489224, "str_489224");
set_cmt(0x489224, "`Sfx\Rogue\Rogue90.wav`", 0);
apply_type (0x489224, "extern char str_489224[22];", TINFO_DEFINITE);
cleanup("str_48923C");set_name(0x48923C, "str_48923C");
set_cmt(0x48923C, "`Sfx\Rogue\Rogue89.wav`", 0);
apply_type (0x48923C, "extern char str_48923C[22];", TINFO_DEFINITE);
cleanup("str_489254");set_name(0x489254, "str_489254");
set_cmt(0x489254, "`Sfx\Rogue\Rogue88.wav`", 0);
apply_type (0x489254, "extern char str_489254[22];", TINFO_DEFINITE);
cleanup("str_48926C");set_name(0x48926C, "str_48926C");
set_cmt(0x48926C, "`Sfx\Rogue\Rogue87.wav`", 0);
apply_type (0x48926C, "extern char str_48926C[22];", TINFO_DEFINITE);
cleanup("str_489284");set_name(0x489284, "str_489284");
set_cmt(0x489284, "`Sfx\Rogue\Rogue86.wav`", 0);
apply_type (0x489284, "extern char str_489284[22];", TINFO_DEFINITE);
cleanup("str_48929C");set_name(0x48929C, "str_48929C");
set_cmt(0x48929C, "`Sfx\Rogue\Rogue85.wav`", 0);
apply_type (0x48929C, "extern char str_48929C[22];", TINFO_DEFINITE);
cleanup("str_4892B4");set_name(0x4892B4, "str_4892B4");
set_cmt(0x4892B4, "`Sfx\Rogue\Rogue84.wav`", 0);
apply_type (0x4892B4, "extern char str_4892B4[22];", TINFO_DEFINITE);
cleanup("str_4892CC");set_name(0x4892CC, "str_4892CC");
set_cmt(0x4892CC, "`Sfx\Rogue\Rogue83.wav`", 0);
apply_type (0x4892CC, "extern char str_4892CC[22];", TINFO_DEFINITE);
cleanup("str_4892E4");set_name(0x4892E4, "str_4892E4");
set_cmt(0x4892E4, "`Sfx\Rogue\Rogue82.wav`", 0);
apply_type (0x4892E4, "extern char str_4892E4[22];", TINFO_DEFINITE);
cleanup("str_4892FC");set_name(0x4892FC, "str_4892FC");
set_cmt(0x4892FC, "`Sfx\Rogue\Rogue81.wav`", 0);
apply_type (0x4892FC, "extern char str_4892FC[22];", TINFO_DEFINITE);
cleanup("str_489314");set_name(0x489314, "str_489314");
set_cmt(0x489314, "`Sfx\Rogue\Rogue80.wav`", 0);
apply_type (0x489314, "extern char str_489314[22];", TINFO_DEFINITE);
cleanup("str_48932C");set_name(0x48932C, "str_48932C");
set_cmt(0x48932C, "`Sfx\Rogue\Rogue79.wav`", 0);
apply_type (0x48932C, "extern char str_48932C[22];", TINFO_DEFINITE);
cleanup("str_489344");set_name(0x489344, "str_489344");
set_cmt(0x489344, "`Sfx\Rogue\Rogue78.wav`", 0);
apply_type (0x489344, "extern char str_489344[22];", TINFO_DEFINITE);
cleanup("str_48935C");set_name(0x48935C, "str_48935C");
set_cmt(0x48935C, "`Sfx\Rogue\Rogue77.wav`", 0);
apply_type (0x48935C, "extern char str_48935C[22];", TINFO_DEFINITE);
cleanup("str_489374");set_name(0x489374, "str_489374");
set_cmt(0x489374, "`Sfx\Rogue\Rogue76.wav`", 0);
apply_type (0x489374, "extern char str_489374[22];", TINFO_DEFINITE);
cleanup("str_48938C");set_name(0x48938C, "str_48938C");
set_cmt(0x48938C, "`Sfx\Rogue\Rogue75.wav`", 0);
apply_type (0x48938C, "extern char str_48938C[22];", TINFO_DEFINITE);
cleanup("str_4893A4");set_name(0x4893A4, "str_4893A4");
set_cmt(0x4893A4, "`Sfx\Rogue\Rogue74.wav`", 0);
apply_type (0x4893A4, "extern char str_4893A4[22];", TINFO_DEFINITE);
cleanup("str_4893BC");set_name(0x4893BC, "str_4893BC");
set_cmt(0x4893BC, "`Sfx\Rogue\Rogue73.wav`", 0);
apply_type (0x4893BC, "extern char str_4893BC[22];", TINFO_DEFINITE);
cleanup("str_4893D4");set_name(0x4893D4, "str_4893D4");
set_cmt(0x4893D4, "`Sfx\Rogue\Rogue72.wav`", 0);
apply_type (0x4893D4, "extern char str_4893D4[22];", TINFO_DEFINITE);
cleanup("str_4893EC");set_name(0x4893EC, "str_4893EC");
set_cmt(0x4893EC, "`Sfx\Rogue\Rogue71.wav`", 0);
apply_type (0x4893EC, "extern char str_4893EC[22];", TINFO_DEFINITE);
cleanup("str_489404");set_name(0x489404, "str_489404");
set_cmt(0x489404, "`Sfx\Rogue\Rogue70.wav`", 0);
apply_type (0x489404, "extern char str_489404[22];", TINFO_DEFINITE);
cleanup("str_48941C");set_name(0x48941C, "str_48941C");
set_cmt(0x48941C, "`Sfx\Rogue\Rogue69b.wav`", 0);
apply_type (0x48941C, "extern char str_48941C[23];", TINFO_DEFINITE);
cleanup("str_489434");set_name(0x489434, "str_489434");
set_cmt(0x489434, "`Sfx\Rogue\Rogue69.wav`", 0);
apply_type (0x489434, "extern char str_489434[22];", TINFO_DEFINITE);
cleanup("str_48944C");set_name(0x48944C, "str_48944C");
set_cmt(0x48944C, "`Sfx\Rogue\Rogue68.wav`", 0);
apply_type (0x48944C, "extern char str_48944C[22];", TINFO_DEFINITE);
cleanup("str_489464");set_name(0x489464, "str_489464");
set_cmt(0x489464, "`Sfx\Rogue\Rogue67.wav`", 0);
apply_type (0x489464, "extern char str_489464[22];", TINFO_DEFINITE);
cleanup("str_48947C");set_name(0x48947C, "str_48947C");
set_cmt(0x48947C, "`Sfx\Rogue\Rogue66.wav`", 0);
apply_type (0x48947C, "extern char str_48947C[22];", TINFO_DEFINITE);
cleanup("str_489494");set_name(0x489494, "str_489494");
set_cmt(0x489494, "`Sfx\Rogue\Rogue65.wav`", 0);
apply_type (0x489494, "extern char str_489494[22];", TINFO_DEFINITE);
cleanup("str_4894AC");set_name(0x4894AC, "str_4894AC");
set_cmt(0x4894AC, "`Sfx\Rogue\Rogue64.wav`", 0);
apply_type (0x4894AC, "extern char str_4894AC[22];", TINFO_DEFINITE);
cleanup("str_4894C4");set_name(0x4894C4, "str_4894C4");
set_cmt(0x4894C4, "`Sfx\Rogue\Rogue63.wav`", 0);
apply_type (0x4894C4, "extern char str_4894C4[22];", TINFO_DEFINITE);
cleanup("str_4894DC");set_name(0x4894DC, "str_4894DC");
set_cmt(0x4894DC, "`Sfx\Rogue\Rogue62.wav`", 0);
apply_type (0x4894DC, "extern char str_4894DC[22];", TINFO_DEFINITE);
cleanup("str_4894F4");set_name(0x4894F4, "str_4894F4");
set_cmt(0x4894F4, "`Sfx\Rogue\Rogue61.wav`", 0);
apply_type (0x4894F4, "extern char str_4894F4[22];", TINFO_DEFINITE);
cleanup("str_48950C");set_name(0x48950C, "str_48950C");
set_cmt(0x48950C, "`Sfx\Rogue\Rogue60.wav`", 0);
apply_type (0x48950C, "extern char str_48950C[22];", TINFO_DEFINITE);
cleanup("str_489524");set_name(0x489524, "str_489524");
set_cmt(0x489524, "`Sfx\Rogue\Rogue59.wav`", 0);
apply_type (0x489524, "extern char str_489524[22];", TINFO_DEFINITE);
cleanup("str_48953C");set_name(0x48953C, "str_48953C");
set_cmt(0x48953C, "`Sfx\Rogue\Rogue58.wav`", 0);
apply_type (0x48953C, "extern char str_48953C[22];", TINFO_DEFINITE);
cleanup("str_489554");set_name(0x489554, "str_489554");
set_cmt(0x489554, "`Sfx\Rogue\Rogue57.wav`", 0);
apply_type (0x489554, "extern char str_489554[22];", TINFO_DEFINITE);
cleanup("str_48956C");set_name(0x48956C, "str_48956C");
set_cmt(0x48956C, "`Sfx\Rogue\Rogue56.wav`", 0);
apply_type (0x48956C, "extern char str_48956C[22];", TINFO_DEFINITE);
cleanup("str_489584");set_name(0x489584, "str_489584");
set_cmt(0x489584, "`Sfx\Rogue\Rogue55.wav`", 0);
apply_type (0x489584, "extern char str_489584[22];", TINFO_DEFINITE);
cleanup("str_48959C");set_name(0x48959C, "str_48959C");
set_cmt(0x48959C, "`Sfx\Rogue\Rogue54.wav`", 0);
apply_type (0x48959C, "extern char str_48959C[22];", TINFO_DEFINITE);
cleanup("str_4895B4");set_name(0x4895B4, "str_4895B4");
set_cmt(0x4895B4, "`Sfx\Rogue\Rogue53.wav`", 0);
apply_type (0x4895B4, "extern char str_4895B4[22];", TINFO_DEFINITE);
cleanup("str_4895CC");set_name(0x4895CC, "str_4895CC");
set_cmt(0x4895CC, "`Sfx\Rogue\Rogue52.wav`", 0);
apply_type (0x4895CC, "extern char str_4895CC[22];", TINFO_DEFINITE);
cleanup("str_4895E4");set_name(0x4895E4, "str_4895E4");
set_cmt(0x4895E4, "`Sfx\Rogue\Rogue51.wav`", 0);
apply_type (0x4895E4, "extern char str_4895E4[22];", TINFO_DEFINITE);
cleanup("str_4895FC");set_name(0x4895FC, "str_4895FC");
set_cmt(0x4895FC, "`Sfx\Rogue\Rogue50.wav`", 0);
apply_type (0x4895FC, "extern char str_4895FC[22];", TINFO_DEFINITE);
cleanup("str_489614");set_name(0x489614, "str_489614");
set_cmt(0x489614, "`Sfx\Rogue\Rogue49.wav`", 0);
apply_type (0x489614, "extern char str_489614[22];", TINFO_DEFINITE);
cleanup("str_48962C");set_name(0x48962C, "str_48962C");
set_cmt(0x48962C, "`Sfx\Rogue\Rogue48.wav`", 0);
apply_type (0x48962C, "extern char str_48962C[22];", TINFO_DEFINITE);
cleanup("str_489644");set_name(0x489644, "str_489644");
set_cmt(0x489644, "`Sfx\Rogue\Rogue47.wav`", 0);
apply_type (0x489644, "extern char str_489644[22];", TINFO_DEFINITE);
cleanup("str_48965C");set_name(0x48965C, "str_48965C");
set_cmt(0x48965C, "`Sfx\Rogue\Rogue46.wav`", 0);
apply_type (0x48965C, "extern char str_48965C[22];", TINFO_DEFINITE);
cleanup("str_489674");set_name(0x489674, "str_489674");
set_cmt(0x489674, "`Sfx\Rogue\Rogue45.wav`", 0);
apply_type (0x489674, "extern char str_489674[22];", TINFO_DEFINITE);
cleanup("str_48968C");set_name(0x48968C, "str_48968C");
set_cmt(0x48968C, "`Sfx\Rogue\Rogue44.wav`", 0);
apply_type (0x48968C, "extern char str_48968C[22];", TINFO_DEFINITE);
cleanup("str_4896A4");set_name(0x4896A4, "str_4896A4");
set_cmt(0x4896A4, "`Sfx\Rogue\Rogue43.wav`", 0);
apply_type (0x4896A4, "extern char str_4896A4[22];", TINFO_DEFINITE);
cleanup("str_4896BC");set_name(0x4896BC, "str_4896BC");
set_cmt(0x4896BC, "`Sfx\Rogue\Rogue42.wav`", 0);
apply_type (0x4896BC, "extern char str_4896BC[22];", TINFO_DEFINITE);
cleanup("str_4896D4");set_name(0x4896D4, "str_4896D4");
set_cmt(0x4896D4, "`Sfx\Rogue\Rogue41.wav`", 0);
apply_type (0x4896D4, "extern char str_4896D4[22];", TINFO_DEFINITE);
cleanup("str_4896EC");set_name(0x4896EC, "str_4896EC");
set_cmt(0x4896EC, "`Sfx\Rogue\Rogue40.wav`", 0);
apply_type (0x4896EC, "extern char str_4896EC[22];", TINFO_DEFINITE);
cleanup("str_489704");set_name(0x489704, "str_489704");
set_cmt(0x489704, "`Sfx\Rogue\Rogue39.wav`", 0);
apply_type (0x489704, "extern char str_489704[22];", TINFO_DEFINITE);
cleanup("str_48971C");set_name(0x48971C, "str_48971C");
set_cmt(0x48971C, "`Sfx\Rogue\Rogue38.wav`", 0);
apply_type (0x48971C, "extern char str_48971C[22];", TINFO_DEFINITE);
cleanup("str_489734");set_name(0x489734, "str_489734");
set_cmt(0x489734, "`Sfx\Rogue\Rogue37.wav`", 0);
apply_type (0x489734, "extern char str_489734[22];", TINFO_DEFINITE);
cleanup("str_48974C");set_name(0x48974C, "str_48974C");
set_cmt(0x48974C, "`Sfx\Rogue\Rogue36.wav`", 0);
apply_type (0x48974C, "extern char str_48974C[22];", TINFO_DEFINITE);
cleanup("str_489764");set_name(0x489764, "str_489764");
set_cmt(0x489764, "`Sfx\Rogue\Rogue35.wav`", 0);
apply_type (0x489764, "extern char str_489764[22];", TINFO_DEFINITE);
cleanup("str_48977C");set_name(0x48977C, "str_48977C");
set_cmt(0x48977C, "`Sfx\Rogue\Rogue34.wav`", 0);
apply_type (0x48977C, "extern char str_48977C[22];", TINFO_DEFINITE);
cleanup("str_489794");set_name(0x489794, "str_489794");
set_cmt(0x489794, "`Sfx\Rogue\Rogue33.wav`", 0);
apply_type (0x489794, "extern char str_489794[22];", TINFO_DEFINITE);
cleanup("str_4897AC");set_name(0x4897AC, "str_4897AC");
set_cmt(0x4897AC, "`Sfx\Rogue\Rogue32.wav`", 0);
apply_type (0x4897AC, "extern char str_4897AC[22];", TINFO_DEFINITE);
cleanup("str_4897C4");set_name(0x4897C4, "str_4897C4");
set_cmt(0x4897C4, "`Sfx\Rogue\Rogue31.wav`", 0);
apply_type (0x4897C4, "extern char str_4897C4[22];", TINFO_DEFINITE);
cleanup("str_4897DC");set_name(0x4897DC, "str_4897DC");
set_cmt(0x4897DC, "`Sfx\Rogue\Rogue30.wav`", 0);
apply_type (0x4897DC, "extern char str_4897DC[22];", TINFO_DEFINITE);
cleanup("str_4897F4");set_name(0x4897F4, "str_4897F4");
set_cmt(0x4897F4, "`Sfx\Rogue\Rogue29.wav`", 0);
apply_type (0x4897F4, "extern char str_4897F4[22];", TINFO_DEFINITE);
cleanup("str_48980C");set_name(0x48980C, "str_48980C");
set_cmt(0x48980C, "`Sfx\Rogue\Rogue28.wav`", 0);
apply_type (0x48980C, "extern char str_48980C[22];", TINFO_DEFINITE);
cleanup("str_489824");set_name(0x489824, "str_489824");
set_cmt(0x489824, "`Sfx\Rogue\Rogue27.wav`", 0);
apply_type (0x489824, "extern char str_489824[22];", TINFO_DEFINITE);
cleanup("str_48983C");set_name(0x48983C, "str_48983C");
set_cmt(0x48983C, "`Sfx\Rogue\Rogue26.wav`", 0);
apply_type (0x48983C, "extern char str_48983C[22];", TINFO_DEFINITE);
cleanup("str_489854");set_name(0x489854, "str_489854");
set_cmt(0x489854, "`Sfx\Rogue\Rogue25.wav`", 0);
apply_type (0x489854, "extern char str_489854[22];", TINFO_DEFINITE);
cleanup("str_48986C");set_name(0x48986C, "str_48986C");
set_cmt(0x48986C, "`Sfx\Rogue\Rogue24.wav`", 0);
apply_type (0x48986C, "extern char str_48986C[22];", TINFO_DEFINITE);
cleanup("str_489884");set_name(0x489884, "str_489884");
set_cmt(0x489884, "`Sfx\Rogue\Rogue23.wav`", 0);
apply_type (0x489884, "extern char str_489884[22];", TINFO_DEFINITE);
cleanup("str_48989C");set_name(0x48989C, "str_48989C");
set_cmt(0x48989C, "`Sfx\Rogue\Rogue22.wav`", 0);
apply_type (0x48989C, "extern char str_48989C[22];", TINFO_DEFINITE);
cleanup("str_4898B4");set_name(0x4898B4, "str_4898B4");
set_cmt(0x4898B4, "`Sfx\Rogue\Rogue21.wav`", 0);
apply_type (0x4898B4, "extern char str_4898B4[22];", TINFO_DEFINITE);
cleanup("str_4898CC");set_name(0x4898CC, "str_4898CC");
set_cmt(0x4898CC, "`Sfx\Rogue\Rogue20.wav`", 0);
apply_type (0x4898CC, "extern char str_4898CC[22];", TINFO_DEFINITE);
cleanup("str_4898E4");set_name(0x4898E4, "str_4898E4");
set_cmt(0x4898E4, "`Sfx\Rogue\Rogue19.wav`", 0);
apply_type (0x4898E4, "extern char str_4898E4[22];", TINFO_DEFINITE);
cleanup("str_4898FC");set_name(0x4898FC, "str_4898FC");
set_cmt(0x4898FC, "`Sfx\Rogue\Rogue18.wav`", 0);
apply_type (0x4898FC, "extern char str_4898FC[22];", TINFO_DEFINITE);
cleanup("str_489914");set_name(0x489914, "str_489914");
set_cmt(0x489914, "`Sfx\Rogue\Rogue17.wav`", 0);
apply_type (0x489914, "extern char str_489914[22];", TINFO_DEFINITE);
cleanup("str_48992C");set_name(0x48992C, "str_48992C");
set_cmt(0x48992C, "`Sfx\Rogue\Rogue16.wav`", 0);
apply_type (0x48992C, "extern char str_48992C[22];", TINFO_DEFINITE);
cleanup("str_489944");set_name(0x489944, "str_489944");
set_cmt(0x489944, "`Sfx\Rogue\Rogue15.wav`", 0);
apply_type (0x489944, "extern char str_489944[22];", TINFO_DEFINITE);
cleanup("str_48995C");set_name(0x48995C, "str_48995C");
set_cmt(0x48995C, "`Sfx\Rogue\Rogue14.wav`", 0);
apply_type (0x48995C, "extern char str_48995C[22];", TINFO_DEFINITE);
cleanup("str_489974");set_name(0x489974, "str_489974");
set_cmt(0x489974, "`Sfx\Rogue\Rogue13.wav`", 0);
apply_type (0x489974, "extern char str_489974[22];", TINFO_DEFINITE);
cleanup("str_48998C");set_name(0x48998C, "str_48998C");
set_cmt(0x48998C, "`Sfx\Rogue\Rogue12.wav`", 0);
apply_type (0x48998C, "extern char str_48998C[22];", TINFO_DEFINITE);
cleanup("str_4899A4");set_name(0x4899A4, "str_4899A4");
set_cmt(0x4899A4, "`Sfx\Rogue\Rogue11.wav`", 0);
apply_type (0x4899A4, "extern char str_4899A4[22];", TINFO_DEFINITE);
cleanup("str_4899BC");set_name(0x4899BC, "str_4899BC");
set_cmt(0x4899BC, "`Sfx\Rogue\Rogue10.wav`", 0);
apply_type (0x4899BC, "extern char str_4899BC[22];", TINFO_DEFINITE);
cleanup("str_4899D4");set_name(0x4899D4, "str_4899D4");
set_cmt(0x4899D4, "`Sfx\Rogue\Rogue09.wav`", 0);
apply_type (0x4899D4, "extern char str_4899D4[22];", TINFO_DEFINITE);
cleanup("str_4899EC");set_name(0x4899EC, "str_4899EC");
set_cmt(0x4899EC, "`Sfx\Rogue\Rogue08.wav`", 0);
apply_type (0x4899EC, "extern char str_4899EC[22];", TINFO_DEFINITE);
cleanup("str_489A04");set_name(0x489A04, "str_489A04");
set_cmt(0x489A04, "`Sfx\Rogue\Rogue07.wav`", 0);
apply_type (0x489A04, "extern char str_489A04[22];", TINFO_DEFINITE);
cleanup("str_489A1C");set_name(0x489A1C, "str_489A1C");
set_cmt(0x489A1C, "`Sfx\Rogue\Rogue06.wav`", 0);
apply_type (0x489A1C, "extern char str_489A1C[22];", TINFO_DEFINITE);
cleanup("str_489A34");set_name(0x489A34, "str_489A34");
set_cmt(0x489A34, "`Sfx\Rogue\Rogue05.wav`", 0);
apply_type (0x489A34, "extern char str_489A34[22];", TINFO_DEFINITE);
cleanup("str_489A4C");set_name(0x489A4C, "str_489A4C");
set_cmt(0x489A4C, "`Sfx\Rogue\Rogue04.wav`", 0);
apply_type (0x489A4C, "extern char str_489A4C[22];", TINFO_DEFINITE);
cleanup("str_489A64");set_name(0x489A64, "str_489A64");
set_cmt(0x489A64, "`Sfx\Rogue\Rogue03.wav`", 0);
apply_type (0x489A64, "extern char str_489A64[22];", TINFO_DEFINITE);
cleanup("str_489A7C");set_name(0x489A7C, "str_489A7C");
set_cmt(0x489A7C, "`Sfx\Rogue\Rogue02.wav`", 0);
apply_type (0x489A7C, "extern char str_489A7C[22];", TINFO_DEFINITE);
cleanup("str_489A94");set_name(0x489A94, "str_489A94");
set_cmt(0x489A94, "`Sfx\Rogue\Rogue01.wav`", 0);
apply_type (0x489A94, "extern char str_489A94[22];", TINFO_DEFINITE);
cleanup("str_489AAC");set_name(0x489AAC, "str_489AAC");
set_cmt(0x489AAC, "`Sfx\Sorceror\Mage102.wav`", 0);
apply_type (0x489AAC, "extern char str_489AAC[25];", TINFO_DEFINITE);
cleanup("str_489AC8");set_name(0x489AC8, "str_489AC8");
set_cmt(0x489AC8, "`Sfx\Sorceror\Mage101.wav`", 0);
apply_type (0x489AC8, "extern char str_489AC8[25];", TINFO_DEFINITE);
cleanup("str_489AE4");set_name(0x489AE4, "str_489AE4");
set_cmt(0x489AE4, "`Sfx\Sorceror\Mage100.wav`", 0);
apply_type (0x489AE4, "extern char str_489AE4[25];", TINFO_DEFINITE);
cleanup("str_489B00");set_name(0x489B00, "str_489B00");
set_cmt(0x489B00, "`Sfx\Sorceror\Mage99.wav`", 0);
apply_type (0x489B00, "extern char str_489B00[24];", TINFO_DEFINITE);
cleanup("str_489B18");set_name(0x489B18, "str_489B18");
set_cmt(0x489B18, "`Sfx\Sorceror\Mage98.wav`", 0);
apply_type (0x489B18, "extern char str_489B18[24];", TINFO_DEFINITE);
cleanup("str_489B30");set_name(0x489B30, "str_489B30");
set_cmt(0x489B30, "`Sfx\Sorceror\Mage97.wav`", 0);
apply_type (0x489B30, "extern char str_489B30[24];", TINFO_DEFINITE);
cleanup("str_489B48");set_name(0x489B48, "str_489B48");
set_cmt(0x489B48, "`Sfx\Sorceror\Mage96.wav`", 0);
apply_type (0x489B48, "extern char str_489B48[24];", TINFO_DEFINITE);
cleanup("str_489B60");set_name(0x489B60, "str_489B60");
set_cmt(0x489B60, "`Sfx\Sorceror\Mage95.wav`", 0);
apply_type (0x489B60, "extern char str_489B60[24];", TINFO_DEFINITE);
cleanup("str_489B78");set_name(0x489B78, "str_489B78");
set_cmt(0x489B78, "`Sfx\Sorceror\Mage94.wav`", 0);
apply_type (0x489B78, "extern char str_489B78[24];", TINFO_DEFINITE);
cleanup("str_489B90");set_name(0x489B90, "str_489B90");
set_cmt(0x489B90, "`Sfx\Sorceror\Mage93.wav`", 0);
apply_type (0x489B90, "extern char str_489B90[24];", TINFO_DEFINITE);
cleanup("str_489BA8");set_name(0x489BA8, "str_489BA8");
set_cmt(0x489BA8, "`Sfx\Sorceror\Mage92.wav`", 0);
apply_type (0x489BA8, "extern char str_489BA8[24];", TINFO_DEFINITE);
cleanup("str_489BC0");set_name(0x489BC0, "str_489BC0");
set_cmt(0x489BC0, "`Sfx\Sorceror\Mage91.wav`", 0);
apply_type (0x489BC0, "extern char str_489BC0[24];", TINFO_DEFINITE);
cleanup("str_489BD8");set_name(0x489BD8, "str_489BD8");
set_cmt(0x489BD8, "`Sfx\Sorceror\Mage90.wav`", 0);
apply_type (0x489BD8, "extern char str_489BD8[24];", TINFO_DEFINITE);
cleanup("str_489BF0");set_name(0x489BF0, "str_489BF0");
set_cmt(0x489BF0, "`Sfx\Sorceror\Mage89.wav`", 0);
apply_type (0x489BF0, "extern char str_489BF0[24];", TINFO_DEFINITE);
cleanup("str_489C08");set_name(0x489C08, "str_489C08");
set_cmt(0x489C08, "`Sfx\Sorceror\Mage88.wav`", 0);
apply_type (0x489C08, "extern char str_489C08[24];", TINFO_DEFINITE);
cleanup("str_489C20");set_name(0x489C20, "str_489C20");
set_cmt(0x489C20, "`Sfx\Sorceror\Mage87.wav`", 0);
apply_type (0x489C20, "extern char str_489C20[24];", TINFO_DEFINITE);
cleanup("str_489C38");set_name(0x489C38, "str_489C38");
set_cmt(0x489C38, "`Sfx\Sorceror\Mage86.wav`", 0);
apply_type (0x489C38, "extern char str_489C38[24];", TINFO_DEFINITE);
cleanup("str_489C50");set_name(0x489C50, "str_489C50");
set_cmt(0x489C50, "`Sfx\Sorceror\Mage85.wav`", 0);
apply_type (0x489C50, "extern char str_489C50[24];", TINFO_DEFINITE);
cleanup("str_489C68");set_name(0x489C68, "str_489C68");
set_cmt(0x489C68, "`Sfx\Sorceror\Mage84.wav`", 0);
apply_type (0x489C68, "extern char str_489C68[24];", TINFO_DEFINITE);
cleanup("str_489C80");set_name(0x489C80, "str_489C80");
set_cmt(0x489C80, "`Sfx\Sorceror\Mage83.wav`", 0);
apply_type (0x489C80, "extern char str_489C80[24];", TINFO_DEFINITE);
cleanup("str_489C98");set_name(0x489C98, "str_489C98");
set_cmt(0x489C98, "`Sfx\Sorceror\Mage82.wav`", 0);
apply_type (0x489C98, "extern char str_489C98[24];", TINFO_DEFINITE);
cleanup("str_489CB0");set_name(0x489CB0, "str_489CB0");
set_cmt(0x489CB0, "`Sfx\Sorceror\Mage81.wav`", 0);
apply_type (0x489CB0, "extern char str_489CB0[24];", TINFO_DEFINITE);
cleanup("str_489CC8");set_name(0x489CC8, "str_489CC8");
set_cmt(0x489CC8, "`Sfx\Sorceror\Mage80.wav`", 0);
apply_type (0x489CC8, "extern char str_489CC8[24];", TINFO_DEFINITE);
cleanup("str_489CE0");set_name(0x489CE0, "str_489CE0");
set_cmt(0x489CE0, "`Sfx\Sorceror\Mage79.wav`", 0);
apply_type (0x489CE0, "extern char str_489CE0[24];", TINFO_DEFINITE);
cleanup("str_489CF8");set_name(0x489CF8, "str_489CF8");
set_cmt(0x489CF8, "`Sfx\Sorceror\Mage78.wav`", 0);
apply_type (0x489CF8, "extern char str_489CF8[24];", TINFO_DEFINITE);
cleanup("str_489D10");set_name(0x489D10, "str_489D10");
set_cmt(0x489D10, "`Sfx\Sorceror\Mage77.wav`", 0);
apply_type (0x489D10, "extern char str_489D10[24];", TINFO_DEFINITE);
cleanup("str_489D28");set_name(0x489D28, "str_489D28");
set_cmt(0x489D28, "`Sfx\Sorceror\Mage76.wav`", 0);
apply_type (0x489D28, "extern char str_489D28[24];", TINFO_DEFINITE);
cleanup("str_489D40");set_name(0x489D40, "str_489D40");
set_cmt(0x489D40, "`Sfx\Sorceror\Mage75.wav`", 0);
apply_type (0x489D40, "extern char str_489D40[24];", TINFO_DEFINITE);
cleanup("str_489D58");set_name(0x489D58, "str_489D58");
set_cmt(0x489D58, "`Sfx\Sorceror\Mage74.wav`", 0);
apply_type (0x489D58, "extern char str_489D58[24];", TINFO_DEFINITE);
cleanup("str_489D70");set_name(0x489D70, "str_489D70");
set_cmt(0x489D70, "`Sfx\Sorceror\Mage73.wav`", 0);
apply_type (0x489D70, "extern char str_489D70[24];", TINFO_DEFINITE);
cleanup("str_489D88");set_name(0x489D88, "str_489D88");
set_cmt(0x489D88, "`Sfx\Sorceror\Mage72.wav`", 0);
apply_type (0x489D88, "extern char str_489D88[24];", TINFO_DEFINITE);
cleanup("str_489DA0");set_name(0x489DA0, "str_489DA0");
set_cmt(0x489DA0, "`Sfx\Sorceror\Mage71.wav`", 0);
apply_type (0x489DA0, "extern char str_489DA0[24];", TINFO_DEFINITE);
cleanup("str_489DB8");set_name(0x489DB8, "str_489DB8");
set_cmt(0x489DB8, "`Sfx\Sorceror\Mage70.wav`", 0);
apply_type (0x489DB8, "extern char str_489DB8[24];", TINFO_DEFINITE);
cleanup("str_489DD0");set_name(0x489DD0, "str_489DD0");
set_cmt(0x489DD0, "`Sfx\Sorceror\Mage69b.wav`", 0);
apply_type (0x489DD0, "extern char str_489DD0[25];", TINFO_DEFINITE);
cleanup("str_489DEC");set_name(0x489DEC, "str_489DEC");
set_cmt(0x489DEC, "`Sfx\Sorceror\Mage69.wav`", 0);
apply_type (0x489DEC, "extern char str_489DEC[24];", TINFO_DEFINITE);
cleanup("str_489E04");set_name(0x489E04, "str_489E04");
set_cmt(0x489E04, "`Sfx\Sorceror\Mage68.wav`", 0);
apply_type (0x489E04, "extern char str_489E04[24];", TINFO_DEFINITE);
cleanup("str_489E1C");set_name(0x489E1C, "str_489E1C");
set_cmt(0x489E1C, "`Sfx\Sorceror\Mage67.wav`", 0);
apply_type (0x489E1C, "extern char str_489E1C[24];", TINFO_DEFINITE);
cleanup("str_489E34");set_name(0x489E34, "str_489E34");
set_cmt(0x489E34, "`Sfx\Sorceror\Mage66.wav`", 0);
apply_type (0x489E34, "extern char str_489E34[24];", TINFO_DEFINITE);
cleanup("str_489E4C");set_name(0x489E4C, "str_489E4C");
set_cmt(0x489E4C, "`Sfx\Sorceror\Mage65.wav`", 0);
apply_type (0x489E4C, "extern char str_489E4C[24];", TINFO_DEFINITE);
cleanup("str_489E64");set_name(0x489E64, "str_489E64");
set_cmt(0x489E64, "`Sfx\Sorceror\Mage64.wav`", 0);
apply_type (0x489E64, "extern char str_489E64[24];", TINFO_DEFINITE);
cleanup("str_489E7C");set_name(0x489E7C, "str_489E7C");
set_cmt(0x489E7C, "`Sfx\Sorceror\Mage63.wav`", 0);
apply_type (0x489E7C, "extern char str_489E7C[24];", TINFO_DEFINITE);
cleanup("str_489E94");set_name(0x489E94, "str_489E94");
set_cmt(0x489E94, "`Sfx\Sorceror\Mage62.wav`", 0);
apply_type (0x489E94, "extern char str_489E94[24];", TINFO_DEFINITE);
cleanup("str_489EAC");set_name(0x489EAC, "str_489EAC");
set_cmt(0x489EAC, "`Sfx\Sorceror\Mage61.wav`", 0);
apply_type (0x489EAC, "extern char str_489EAC[24];", TINFO_DEFINITE);
cleanup("str_489EC4");set_name(0x489EC4, "str_489EC4");
set_cmt(0x489EC4, "`Sfx\Sorceror\Mage60.wav`", 0);
apply_type (0x489EC4, "extern char str_489EC4[24];", TINFO_DEFINITE);
cleanup("str_489EDC");set_name(0x489EDC, "str_489EDC");
set_cmt(0x489EDC, "`Sfx\Sorceror\Mage59.wav`", 0);
apply_type (0x489EDC, "extern char str_489EDC[24];", TINFO_DEFINITE);
cleanup("str_489EF4");set_name(0x489EF4, "str_489EF4");
set_cmt(0x489EF4, "`Sfx\Sorceror\Mage58.wav`", 0);
apply_type (0x489EF4, "extern char str_489EF4[24];", TINFO_DEFINITE);
cleanup("str_489F0C");set_name(0x489F0C, "str_489F0C");
set_cmt(0x489F0C, "`Sfx\Sorceror\Mage57.wav`", 0);
apply_type (0x489F0C, "extern char str_489F0C[24];", TINFO_DEFINITE);
cleanup("str_489F24");set_name(0x489F24, "str_489F24");
set_cmt(0x489F24, "`Sfx\Sorceror\Mage56.wav`", 0);
apply_type (0x489F24, "extern char str_489F24[24];", TINFO_DEFINITE);
cleanup("str_489F3C");set_name(0x489F3C, "str_489F3C");
set_cmt(0x489F3C, "`Sfx\Sorceror\Mage55.wav`", 0);
apply_type (0x489F3C, "extern char str_489F3C[24];", TINFO_DEFINITE);
cleanup("str_489F54");set_name(0x489F54, "str_489F54");
set_cmt(0x489F54, "`Sfx\Sorceror\Mage54.wav`", 0);
apply_type (0x489F54, "extern char str_489F54[24];", TINFO_DEFINITE);
cleanup("str_489F6C");set_name(0x489F6C, "str_489F6C");
set_cmt(0x489F6C, "`Sfx\Sorceror\Mage53.wav`", 0);
apply_type (0x489F6C, "extern char str_489F6C[24];", TINFO_DEFINITE);
cleanup("str_489F84");set_name(0x489F84, "str_489F84");
set_cmt(0x489F84, "`Sfx\Sorceror\Mage52.wav`", 0);
apply_type (0x489F84, "extern char str_489F84[24];", TINFO_DEFINITE);
cleanup("str_489F9C");set_name(0x489F9C, "str_489F9C");
set_cmt(0x489F9C, "`Sfx\Sorceror\Mage51.wav`", 0);
apply_type (0x489F9C, "extern char str_489F9C[24];", TINFO_DEFINITE);
cleanup("str_489FB4");set_name(0x489FB4, "str_489FB4");
set_cmt(0x489FB4, "`Sfx\Sorceror\Mage50.wav`", 0);
apply_type (0x489FB4, "extern char str_489FB4[24];", TINFO_DEFINITE);
cleanup("str_489FCC");set_name(0x489FCC, "str_489FCC");
set_cmt(0x489FCC, "`Sfx\Sorceror\Mage49.wav`", 0);
apply_type (0x489FCC, "extern char str_489FCC[24];", TINFO_DEFINITE);
cleanup("str_489FE4");set_name(0x489FE4, "str_489FE4");
set_cmt(0x489FE4, "`Sfx\Sorceror\Mage48.wav`", 0);
apply_type (0x489FE4, "extern char str_489FE4[24];", TINFO_DEFINITE);
cleanup("str_489FFC");set_name(0x489FFC, "str_489FFC");
set_cmt(0x489FFC, "`Sfx\Sorceror\Mage47.wav`", 0);
apply_type (0x489FFC, "extern char str_489FFC[24];", TINFO_DEFINITE);
cleanup("str_48A014");set_name(0x48A014, "str_48A014");
set_cmt(0x48A014, "`Sfx\Sorceror\Mage46.wav`", 0);
apply_type (0x48A014, "extern char str_48A014[24];", TINFO_DEFINITE);
cleanup("str_48A02C");set_name(0x48A02C, "str_48A02C");
set_cmt(0x48A02C, "`Sfx\Sorceror\Mage45.wav`", 0);
apply_type (0x48A02C, "extern char str_48A02C[24];", TINFO_DEFINITE);
cleanup("str_48A044");set_name(0x48A044, "str_48A044");
set_cmt(0x48A044, "`Sfx\Sorceror\Mage44.wav`", 0);
apply_type (0x48A044, "extern char str_48A044[24];", TINFO_DEFINITE);
cleanup("str_48A05C");set_name(0x48A05C, "str_48A05C");
set_cmt(0x48A05C, "`Sfx\Sorceror\Mage43.wav`", 0);
apply_type (0x48A05C, "extern char str_48A05C[24];", TINFO_DEFINITE);
cleanup("str_48A074");set_name(0x48A074, "str_48A074");
set_cmt(0x48A074, "`Sfx\Sorceror\Mage42.wav`", 0);
apply_type (0x48A074, "extern char str_48A074[24];", TINFO_DEFINITE);
cleanup("str_48A08C");set_name(0x48A08C, "str_48A08C");
set_cmt(0x48A08C, "`Sfx\Sorceror\Mage41.wav`", 0);
apply_type (0x48A08C, "extern char str_48A08C[24];", TINFO_DEFINITE);
cleanup("str_48A0A4");set_name(0x48A0A4, "str_48A0A4");
set_cmt(0x48A0A4, "`Sfx\Sorceror\Mage40.wav`", 0);
apply_type (0x48A0A4, "extern char str_48A0A4[24];", TINFO_DEFINITE);
cleanup("str_48A0BC");set_name(0x48A0BC, "str_48A0BC");
set_cmt(0x48A0BC, "`Sfx\Sorceror\Mage39.wav`", 0);
apply_type (0x48A0BC, "extern char str_48A0BC[24];", TINFO_DEFINITE);
cleanup("str_48A0D4");set_name(0x48A0D4, "str_48A0D4");
set_cmt(0x48A0D4, "`Sfx\Sorceror\Mage38.wav`", 0);
apply_type (0x48A0D4, "extern char str_48A0D4[24];", TINFO_DEFINITE);
cleanup("str_48A0EC");set_name(0x48A0EC, "str_48A0EC");
set_cmt(0x48A0EC, "`Sfx\Sorceror\Mage37.wav`", 0);
apply_type (0x48A0EC, "extern char str_48A0EC[24];", TINFO_DEFINITE);
cleanup("str_48A104");set_name(0x48A104, "str_48A104");
set_cmt(0x48A104, "`Sfx\Sorceror\Mage36.wav`", 0);
apply_type (0x48A104, "extern char str_48A104[24];", TINFO_DEFINITE);
cleanup("str_48A11C");set_name(0x48A11C, "str_48A11C");
set_cmt(0x48A11C, "`Sfx\Sorceror\Mage35.wav`", 0);
apply_type (0x48A11C, "extern char str_48A11C[24];", TINFO_DEFINITE);
cleanup("str_48A134");set_name(0x48A134, "str_48A134");
set_cmt(0x48A134, "`Sfx\Sorceror\Mage34.wav`", 0);
apply_type (0x48A134, "extern char str_48A134[24];", TINFO_DEFINITE);
cleanup("str_48A14C");set_name(0x48A14C, "str_48A14C");
set_cmt(0x48A14C, "`Sfx\Sorceror\Mage33.wav`", 0);
apply_type (0x48A14C, "extern char str_48A14C[24];", TINFO_DEFINITE);
cleanup("str_48A164");set_name(0x48A164, "str_48A164");
set_cmt(0x48A164, "`Sfx\Sorceror\Mage32.wav`", 0);
apply_type (0x48A164, "extern char str_48A164[24];", TINFO_DEFINITE);
cleanup("str_48A17C");set_name(0x48A17C, "str_48A17C");
set_cmt(0x48A17C, "`Sfx\Sorceror\Mage31.wav`", 0);
apply_type (0x48A17C, "extern char str_48A17C[24];", TINFO_DEFINITE);
cleanup("str_48A194");set_name(0x48A194, "str_48A194");
set_cmt(0x48A194, "`Sfx\Sorceror\Mage30.wav`", 0);
apply_type (0x48A194, "extern char str_48A194[24];", TINFO_DEFINITE);
cleanup("str_48A1AC");set_name(0x48A1AC, "str_48A1AC");
set_cmt(0x48A1AC, "`Sfx\Sorceror\Mage29.wav`", 0);
apply_type (0x48A1AC, "extern char str_48A1AC[24];", TINFO_DEFINITE);
cleanup("str_48A1C4");set_name(0x48A1C4, "str_48A1C4");
set_cmt(0x48A1C4, "`Sfx\Sorceror\Mage28.wav`", 0);
apply_type (0x48A1C4, "extern char str_48A1C4[24];", TINFO_DEFINITE);
cleanup("str_48A1DC");set_name(0x48A1DC, "str_48A1DC");
set_cmt(0x48A1DC, "`Sfx\Sorceror\Mage27.wav`", 0);
apply_type (0x48A1DC, "extern char str_48A1DC[24];", TINFO_DEFINITE);
cleanup("str_48A1F4");set_name(0x48A1F4, "str_48A1F4");
set_cmt(0x48A1F4, "`Sfx\Sorceror\Mage26.wav`", 0);
apply_type (0x48A1F4, "extern char str_48A1F4[24];", TINFO_DEFINITE);
cleanup("str_48A20C");set_name(0x48A20C, "str_48A20C");
set_cmt(0x48A20C, "`Sfx\Sorceror\Mage25.wav`", 0);
apply_type (0x48A20C, "extern char str_48A20C[24];", TINFO_DEFINITE);
cleanup("str_48A224");set_name(0x48A224, "str_48A224");
set_cmt(0x48A224, "`Sfx\Sorceror\Mage24.wav`", 0);
apply_type (0x48A224, "extern char str_48A224[24];", TINFO_DEFINITE);
cleanup("str_48A23C");set_name(0x48A23C, "str_48A23C");
set_cmt(0x48A23C, "`Sfx\Sorceror\Mage23.wav`", 0);
apply_type (0x48A23C, "extern char str_48A23C[24];", TINFO_DEFINITE);
cleanup("str_48A254");set_name(0x48A254, "str_48A254");
set_cmt(0x48A254, "`Sfx\Sorceror\Mage22.wav`", 0);
apply_type (0x48A254, "extern char str_48A254[24];", TINFO_DEFINITE);
cleanup("str_48A26C");set_name(0x48A26C, "str_48A26C");
set_cmt(0x48A26C, "`Sfx\Sorceror\Mage21.wav`", 0);
apply_type (0x48A26C, "extern char str_48A26C[24];", TINFO_DEFINITE);
cleanup("str_48A284");set_name(0x48A284, "str_48A284");
set_cmt(0x48A284, "`Sfx\Sorceror\Mage20.wav`", 0);
apply_type (0x48A284, "extern char str_48A284[24];", TINFO_DEFINITE);
cleanup("str_48A29C");set_name(0x48A29C, "str_48A29C");
set_cmt(0x48A29C, "`Sfx\Sorceror\Mage19.wav`", 0);
apply_type (0x48A29C, "extern char str_48A29C[24];", TINFO_DEFINITE);
cleanup("str_48A2B4");set_name(0x48A2B4, "str_48A2B4");
set_cmt(0x48A2B4, "`Sfx\Sorceror\Mage18.wav`", 0);
apply_type (0x48A2B4, "extern char str_48A2B4[24];", TINFO_DEFINITE);
cleanup("str_48A2CC");set_name(0x48A2CC, "str_48A2CC");
set_cmt(0x48A2CC, "`Sfx\Sorceror\Mage17.wav`", 0);
apply_type (0x48A2CC, "extern char str_48A2CC[24];", TINFO_DEFINITE);
cleanup("str_48A2E4");set_name(0x48A2E4, "str_48A2E4");
set_cmt(0x48A2E4, "`Sfx\Sorceror\Mage16.wav`", 0);
apply_type (0x48A2E4, "extern char str_48A2E4[24];", TINFO_DEFINITE);
cleanup("str_48A2FC");set_name(0x48A2FC, "str_48A2FC");
set_cmt(0x48A2FC, "`Sfx\Sorceror\Mage15.wav`", 0);
apply_type (0x48A2FC, "extern char str_48A2FC[24];", TINFO_DEFINITE);
cleanup("str_48A314");set_name(0x48A314, "str_48A314");
set_cmt(0x48A314, "`Sfx\Sorceror\Mage14.wav`", 0);
apply_type (0x48A314, "extern char str_48A314[24];", TINFO_DEFINITE);
cleanup("str_48A32C");set_name(0x48A32C, "str_48A32C");
set_cmt(0x48A32C, "`Sfx\Sorceror\Mage13.wav`", 0);
apply_type (0x48A32C, "extern char str_48A32C[24];", TINFO_DEFINITE);
cleanup("str_48A344");set_name(0x48A344, "str_48A344");
set_cmt(0x48A344, "`Sfx\Sorceror\Mage12.wav`", 0);
apply_type (0x48A344, "extern char str_48A344[24];", TINFO_DEFINITE);
cleanup("str_48A35C");set_name(0x48A35C, "str_48A35C");
set_cmt(0x48A35C, "`Sfx\Sorceror\Mage11.wav`", 0);
apply_type (0x48A35C, "extern char str_48A35C[24];", TINFO_DEFINITE);
cleanup("str_48A374");set_name(0x48A374, "str_48A374");
set_cmt(0x48A374, "`Sfx\Sorceror\Mage10.wav`", 0);
apply_type (0x48A374, "extern char str_48A374[24];", TINFO_DEFINITE);
cleanup("str_48A38C");set_name(0x48A38C, "str_48A38C");
set_cmt(0x48A38C, "`Sfx\Sorceror\Mage09.wav`", 0);
apply_type (0x48A38C, "extern char str_48A38C[24];", TINFO_DEFINITE);
cleanup("str_48A3A4");set_name(0x48A3A4, "str_48A3A4");
set_cmt(0x48A3A4, "`Sfx\Sorceror\Mage08.wav`", 0);
apply_type (0x48A3A4, "extern char str_48A3A4[24];", TINFO_DEFINITE);
cleanup("str_48A3BC");set_name(0x48A3BC, "str_48A3BC");
set_cmt(0x48A3BC, "`Sfx\Sorceror\Mage07.wav`", 0);
apply_type (0x48A3BC, "extern char str_48A3BC[24];", TINFO_DEFINITE);
cleanup("str_48A3D4");set_name(0x48A3D4, "str_48A3D4");
set_cmt(0x48A3D4, "`Sfx\Sorceror\Mage06.wav`", 0);
apply_type (0x48A3D4, "extern char str_48A3D4[24];", TINFO_DEFINITE);
cleanup("str_48A3EC");set_name(0x48A3EC, "str_48A3EC");
set_cmt(0x48A3EC, "`Sfx\Sorceror\Mage05.wav`", 0);
apply_type (0x48A3EC, "extern char str_48A3EC[24];", TINFO_DEFINITE);
cleanup("str_48A404");set_name(0x48A404, "str_48A404");
set_cmt(0x48A404, "`Sfx\Sorceror\Mage04.wav`", 0);
apply_type (0x48A404, "extern char str_48A404[24];", TINFO_DEFINITE);
cleanup("str_48A41C");set_name(0x48A41C, "str_48A41C");
set_cmt(0x48A41C, "`Sfx\Sorceror\Mage03.wav`", 0);
apply_type (0x48A41C, "extern char str_48A41C[24];", TINFO_DEFINITE);
cleanup("str_48A434");set_name(0x48A434, "str_48A434");
set_cmt(0x48A434, "`Sfx\Sorceror\Mage02.wav`", 0);
apply_type (0x48A434, "extern char str_48A434[24];", TINFO_DEFINITE);
cleanup("str_48A44C");set_name(0x48A44C, "str_48A44C");
set_cmt(0x48A44C, "`Sfx\Sorceror\Mage01.wav`", 0);
apply_type (0x48A44C, "extern char str_48A44C[24];", TINFO_DEFINITE);
cleanup("str_48A464");set_name(0x48A464, "str_48A464");
set_cmt(0x48A464, "`Sfx\Towners\Wound01.wav`", 0);
apply_type (0x48A464, "extern char str_48A464[24];", TINFO_DEFINITE);
cleanup("str_48A47C");set_name(0x48A47C, "str_48A47C");
set_cmt(0x48A47C, "`Sfx\Towners\Witch50.wav`", 0);
apply_type (0x48A47C, "extern char str_48A47C[24];", TINFO_DEFINITE);
cleanup("str_48A494");set_name(0x48A494, "str_48A494");
set_cmt(0x48A494, "`Sfx\Towners\Witch49.wav`", 0);
apply_type (0x48A494, "extern char str_48A494[24];", TINFO_DEFINITE);
cleanup("str_48A4AC");set_name(0x48A4AC, "str_48A4AC");
set_cmt(0x48A4AC, "`Sfx\Towners\Witch48.wav`", 0);
apply_type (0x48A4AC, "extern char str_48A4AC[24];", TINFO_DEFINITE);
cleanup("str_48A4C4");set_name(0x48A4C4, "str_48A4C4");
set_cmt(0x48A4C4, "`Sfx\Towners\Witch47.wav`", 0);
apply_type (0x48A4C4, "extern char str_48A4C4[24];", TINFO_DEFINITE);
cleanup("str_48A4DC");set_name(0x48A4DC, "str_48A4DC");
set_cmt(0x48A4DC, "`Sfx\Towners\Witch46.wav`", 0);
apply_type (0x48A4DC, "extern char str_48A4DC[24];", TINFO_DEFINITE);
cleanup("str_48A4F4");set_name(0x48A4F4, "str_48A4F4");
set_cmt(0x48A4F4, "`Sfx\Towners\Witch45.wav`", 0);
apply_type (0x48A4F4, "extern char str_48A4F4[24];", TINFO_DEFINITE);
cleanup("str_48A50C");set_name(0x48A50C, "str_48A50C");
set_cmt(0x48A50C, "`Sfx\Towners\Witch44.wav`", 0);
apply_type (0x48A50C, "extern char str_48A50C[24];", TINFO_DEFINITE);
cleanup("str_48A524");set_name(0x48A524, "str_48A524");
set_cmt(0x48A524, "`Sfx\Towners\Witch43.wav`", 0);
apply_type (0x48A524, "extern char str_48A524[24];", TINFO_DEFINITE);
cleanup("str_48A53C");set_name(0x48A53C, "str_48A53C");
set_cmt(0x48A53C, "`Sfx\Towners\Witch42.wav`", 0);
apply_type (0x48A53C, "extern char str_48A53C[24];", TINFO_DEFINITE);
cleanup("str_48A554");set_name(0x48A554, "str_48A554");
set_cmt(0x48A554, "`Sfx\Towners\Witch41.wav`", 0);
apply_type (0x48A554, "extern char str_48A554[24];", TINFO_DEFINITE);
cleanup("str_48A56C");set_name(0x48A56C, "str_48A56C");
set_cmt(0x48A56C, "`Sfx\Towners\Witch40.wav`", 0);
apply_type (0x48A56C, "extern char str_48A56C[24];", TINFO_DEFINITE);
cleanup("str_48A584");set_name(0x48A584, "str_48A584");
set_cmt(0x48A584, "`Sfx\Towners\Witch39.wav`", 0);
apply_type (0x48A584, "extern char str_48A584[24];", TINFO_DEFINITE);
cleanup("str_48A59C");set_name(0x48A59C, "str_48A59C");
set_cmt(0x48A59C, "`Sfx\Towners\Witch38.wav`", 0);
apply_type (0x48A59C, "extern char str_48A59C[24];", TINFO_DEFINITE);
cleanup("str_48A5B4");set_name(0x48A5B4, "str_48A5B4");
set_cmt(0x48A5B4, "`Sfx\Towners\Witch37.wav`", 0);
apply_type (0x48A5B4, "extern char str_48A5B4[24];", TINFO_DEFINITE);
cleanup("str_48A5CC");set_name(0x48A5CC, "str_48A5CC");
set_cmt(0x48A5CC, "`Sfx\Towners\Witch36.wav`", 0);
apply_type (0x48A5CC, "extern char str_48A5CC[24];", TINFO_DEFINITE);
cleanup("str_48A5E4");set_name(0x48A5E4, "str_48A5E4");
set_cmt(0x48A5E4, "`Sfx\Towners\Witch35.wav`", 0);
apply_type (0x48A5E4, "extern char str_48A5E4[24];", TINFO_DEFINITE);
cleanup("str_48A5FC");set_name(0x48A5FC, "str_48A5FC");
set_cmt(0x48A5FC, "`Sfx\Towners\Witch34.wav`", 0);
apply_type (0x48A5FC, "extern char str_48A5FC[24];", TINFO_DEFINITE);
cleanup("str_48A614");set_name(0x48A614, "str_48A614");
set_cmt(0x48A614, "`Sfx\Towners\Witch33.wav`", 0);
apply_type (0x48A614, "extern char str_48A614[24];", TINFO_DEFINITE);
cleanup("str_48A62C");set_name(0x48A62C, "str_48A62C");
set_cmt(0x48A62C, "`Sfx\Towners\Witch32.wav`", 0);
apply_type (0x48A62C, "extern char str_48A62C[24];", TINFO_DEFINITE);
cleanup("str_48A644");set_name(0x48A644, "str_48A644");
set_cmt(0x48A644, "`Sfx\Towners\Witch31.wav`", 0);
apply_type (0x48A644, "extern char str_48A644[24];", TINFO_DEFINITE);
cleanup("str_48A65C");set_name(0x48A65C, "str_48A65C");
set_cmt(0x48A65C, "`Sfx\Towners\Witch30.wav`", 0);
apply_type (0x48A65C, "extern char str_48A65C[24];", TINFO_DEFINITE);
cleanup("str_48A674");set_name(0x48A674, "str_48A674");
set_cmt(0x48A674, "`Sfx\Towners\Witch29.wav`", 0);
apply_type (0x48A674, "extern char str_48A674[24];", TINFO_DEFINITE);
cleanup("str_48A68C");set_name(0x48A68C, "str_48A68C");
set_cmt(0x48A68C, "`Sfx\Towners\Witch28.wav`", 0);
apply_type (0x48A68C, "extern char str_48A68C[24];", TINFO_DEFINITE);
cleanup("str_48A6A4");set_name(0x48A6A4, "str_48A6A4");
set_cmt(0x48A6A4, "`Sfx\Towners\Witch27.wav`", 0);
apply_type (0x48A6A4, "extern char str_48A6A4[24];", TINFO_DEFINITE);
cleanup("str_48A6BC");set_name(0x48A6BC, "str_48A6BC");
set_cmt(0x48A6BC, "`Sfx\Towners\Witch26.wav`", 0);
apply_type (0x48A6BC, "extern char str_48A6BC[24];", TINFO_DEFINITE);
cleanup("str_48A6D4");set_name(0x48A6D4, "str_48A6D4");
set_cmt(0x48A6D4, "`Sfx\Towners\Witch25.wav`", 0);
apply_type (0x48A6D4, "extern char str_48A6D4[24];", TINFO_DEFINITE);
cleanup("str_48A6EC");set_name(0x48A6EC, "str_48A6EC");
set_cmt(0x48A6EC, "`Sfx\Towners\Witch24.wav`", 0);
apply_type (0x48A6EC, "extern char str_48A6EC[24];", TINFO_DEFINITE);
cleanup("str_48A704");set_name(0x48A704, "str_48A704");
set_cmt(0x48A704, "`Sfx\Towners\Witch23.wav`", 0);
apply_type (0x48A704, "extern char str_48A704[24];", TINFO_DEFINITE);
cleanup("str_48A71C");set_name(0x48A71C, "str_48A71C");
set_cmt(0x48A71C, "`Sfx\Towners\Witch22.wav`", 0);
apply_type (0x48A71C, "extern char str_48A71C[24];", TINFO_DEFINITE);
cleanup("str_48A734");set_name(0x48A734, "str_48A734");
set_cmt(0x48A734, "`Sfx\Towners\Witch21.wav`", 0);
apply_type (0x48A734, "extern char str_48A734[24];", TINFO_DEFINITE);
cleanup("str_48A74C");set_name(0x48A74C, "str_48A74C");
set_cmt(0x48A74C, "`Sfx\Towners\Witch20.wav`", 0);
apply_type (0x48A74C, "extern char str_48A74C[24];", TINFO_DEFINITE);
cleanup("str_48A764");set_name(0x48A764, "str_48A764");
set_cmt(0x48A764, "`Sfx\Towners\Witch19.wav`", 0);
apply_type (0x48A764, "extern char str_48A764[24];", TINFO_DEFINITE);
cleanup("str_48A77C");set_name(0x48A77C, "str_48A77C");
set_cmt(0x48A77C, "`Sfx\Towners\Witch18.wav`", 0);
apply_type (0x48A77C, "extern char str_48A77C[24];", TINFO_DEFINITE);
cleanup("str_48A794");set_name(0x48A794, "str_48A794");
set_cmt(0x48A794, "`Sfx\Towners\Witch17.wav`", 0);
apply_type (0x48A794, "extern char str_48A794[24];", TINFO_DEFINITE);
cleanup("str_48A7AC");set_name(0x48A7AC, "str_48A7AC");
set_cmt(0x48A7AC, "`Sfx\Towners\Witch16.wav`", 0);
apply_type (0x48A7AC, "extern char str_48A7AC[24];", TINFO_DEFINITE);
cleanup("str_48A7C4");set_name(0x48A7C4, "str_48A7C4");
set_cmt(0x48A7C4, "`Sfx\Towners\Witch15.wav`", 0);
apply_type (0x48A7C4, "extern char str_48A7C4[24];", TINFO_DEFINITE);
cleanup("str_48A7DC");set_name(0x48A7DC, "str_48A7DC");
set_cmt(0x48A7DC, "`Sfx\Towners\Witch14.wav`", 0);
apply_type (0x48A7DC, "extern char str_48A7DC[24];", TINFO_DEFINITE);
cleanup("str_48A7F4");set_name(0x48A7F4, "str_48A7F4");
set_cmt(0x48A7F4, "`Sfx\Towners\Witch13.wav`", 0);
apply_type (0x48A7F4, "extern char str_48A7F4[24];", TINFO_DEFINITE);
cleanup("str_48A80C");set_name(0x48A80C, "str_48A80C");
set_cmt(0x48A80C, "`Sfx\Towners\Witch12.wav`", 0);
apply_type (0x48A80C, "extern char str_48A80C[24];", TINFO_DEFINITE);
cleanup("str_48A824");set_name(0x48A824, "str_48A824");
set_cmt(0x48A824, "`Sfx\Towners\Witch11.wav`", 0);
apply_type (0x48A824, "extern char str_48A824[24];", TINFO_DEFINITE);
cleanup("str_48A83C");set_name(0x48A83C, "str_48A83C");
set_cmt(0x48A83C, "`Sfx\Towners\Witch10.wav`", 0);
apply_type (0x48A83C, "extern char str_48A83C[24];", TINFO_DEFINITE);
cleanup("str_48A854");set_name(0x48A854, "str_48A854");
set_cmt(0x48A854, "`Sfx\Towners\Witch09.wav`", 0);
apply_type (0x48A854, "extern char str_48A854[24];", TINFO_DEFINITE);
cleanup("str_48A86C");set_name(0x48A86C, "str_48A86C");
set_cmt(0x48A86C, "`Sfx\Towners\Witch08.wav`", 0);
apply_type (0x48A86C, "extern char str_48A86C[24];", TINFO_DEFINITE);
cleanup("str_48A884");set_name(0x48A884, "str_48A884");
set_cmt(0x48A884, "`Sfx\Towners\Witch07.wav`", 0);
apply_type (0x48A884, "extern char str_48A884[24];", TINFO_DEFINITE);
cleanup("str_48A89C");set_name(0x48A89C, "str_48A89C");
set_cmt(0x48A89C, "`Sfx\Towners\Witch06.wav`", 0);
apply_type (0x48A89C, "extern char str_48A89C[24];", TINFO_DEFINITE);
cleanup("str_48A8B4");set_name(0x48A8B4, "str_48A8B4");
set_cmt(0x48A8B4, "`Sfx\Towners\Witch05.wav`", 0);
apply_type (0x48A8B4, "extern char str_48A8B4[24];", TINFO_DEFINITE);
cleanup("str_48A8CC");set_name(0x48A8CC, "str_48A8CC");
set_cmt(0x48A8CC, "`Sfx\Towners\Witch04.wav`", 0);
apply_type (0x48A8CC, "extern char str_48A8CC[24];", TINFO_DEFINITE);
cleanup("str_48A8E4");set_name(0x48A8E4, "str_48A8E4");
set_cmt(0x48A8E4, "`Sfx\Towners\Witch03.wav`", 0);
apply_type (0x48A8E4, "extern char str_48A8E4[24];", TINFO_DEFINITE);
cleanup("str_48A8FC");set_name(0x48A8FC, "str_48A8FC");
set_cmt(0x48A8FC, "`Sfx\Towners\Witch02.wav`", 0);
apply_type (0x48A8FC, "extern char str_48A8FC[24];", TINFO_DEFINITE);
cleanup("str_48A914");set_name(0x48A914, "str_48A914");
set_cmt(0x48A914, "`Sfx\Towners\Witch01.wav`", 0);
apply_type (0x48A914, "extern char str_48A914[24];", TINFO_DEFINITE);
cleanup("str_48A92C");set_name(0x48A92C, "str_48A92C");
set_cmt(0x48A92C, "`Sfx\Towners\Tavown45.wav`", 0);
apply_type (0x48A92C, "extern char str_48A92C[25];", TINFO_DEFINITE);
cleanup("str_48A948");set_name(0x48A948, "str_48A948");
set_cmt(0x48A948, "`Sfx\Towners\Tavown44.wav`", 0);
apply_type (0x48A948, "extern char str_48A948[25];", TINFO_DEFINITE);
cleanup("str_48A964");set_name(0x48A964, "str_48A964");
set_cmt(0x48A964, "`Sfx\Towners\Tavown43.wav`", 0);
apply_type (0x48A964, "extern char str_48A964[25];", TINFO_DEFINITE);
cleanup("str_48A980");set_name(0x48A980, "str_48A980");
set_cmt(0x48A980, "`Sfx\Towners\Tavown42.wav`", 0);
apply_type (0x48A980, "extern char str_48A980[25];", TINFO_DEFINITE);
cleanup("str_48A99C");set_name(0x48A99C, "str_48A99C");
set_cmt(0x48A99C, "`Sfx\Towners\Tavown41.wav`", 0);
apply_type (0x48A99C, "extern char str_48A99C[25];", TINFO_DEFINITE);
cleanup("str_48A9B8");set_name(0x48A9B8, "str_48A9B8");
set_cmt(0x48A9B8, "`Sfx\Towners\Tavown40.wav`", 0);
apply_type (0x48A9B8, "extern char str_48A9B8[25];", TINFO_DEFINITE);
cleanup("str_48A9D4");set_name(0x48A9D4, "str_48A9D4");
set_cmt(0x48A9D4, "`Sfx\Towners\Tavown39.wav`", 0);
apply_type (0x48A9D4, "extern char str_48A9D4[25];", TINFO_DEFINITE);
cleanup("str_48A9F0");set_name(0x48A9F0, "str_48A9F0");
set_cmt(0x48A9F0, "`Sfx\Towners\Tavown38.wav`", 0);
apply_type (0x48A9F0, "extern char str_48A9F0[25];", TINFO_DEFINITE);
cleanup("str_48AA0C");set_name(0x48AA0C, "str_48AA0C");
set_cmt(0x48AA0C, "`Sfx\Towners\Tavown37.wav`", 0);
apply_type (0x48AA0C, "extern char str_48AA0C[25];", TINFO_DEFINITE);
cleanup("str_48AA28");set_name(0x48AA28, "str_48AA28");
set_cmt(0x48AA28, "`Sfx\Towners\Tavown36.wav`", 0);
apply_type (0x48AA28, "extern char str_48AA28[25];", TINFO_DEFINITE);
cleanup("str_48AA44");set_name(0x48AA44, "str_48AA44");
set_cmt(0x48AA44, "`Sfx\Towners\Tavown35.wav`", 0);
apply_type (0x48AA44, "extern char str_48AA44[25];", TINFO_DEFINITE);
cleanup("str_48AA60");set_name(0x48AA60, "str_48AA60");
set_cmt(0x48AA60, "`Sfx\Towners\Tavown34.wav`", 0);
apply_type (0x48AA60, "extern char str_48AA60[25];", TINFO_DEFINITE);
cleanup("str_48AA7C");set_name(0x48AA7C, "str_48AA7C");
set_cmt(0x48AA7C, "`Sfx\Towners\Tavown33.wav`", 0);
apply_type (0x48AA7C, "extern char str_48AA7C[25];", TINFO_DEFINITE);
cleanup("str_48AA98");set_name(0x48AA98, "str_48AA98");
set_cmt(0x48AA98, "`Sfx\Towners\Tavown32.wav`", 0);
apply_type (0x48AA98, "extern char str_48AA98[25];", TINFO_DEFINITE);
cleanup("str_48AAB4");set_name(0x48AAB4, "str_48AAB4");
set_cmt(0x48AAB4, "`Sfx\Towners\Tavown31.wav`", 0);
apply_type (0x48AAB4, "extern char str_48AAB4[25];", TINFO_DEFINITE);
cleanup("str_48AAD0");set_name(0x48AAD0, "str_48AAD0");
set_cmt(0x48AAD0, "`Sfx\Towners\Tavown30.wav`", 0);
apply_type (0x48AAD0, "extern char str_48AAD0[25];", TINFO_DEFINITE);
cleanup("str_48AAEC");set_name(0x48AAEC, "str_48AAEC");
set_cmt(0x48AAEC, "`Sfx\Towners\Tavown29.wav`", 0);
apply_type (0x48AAEC, "extern char str_48AAEC[25];", TINFO_DEFINITE);
cleanup("str_48AB08");set_name(0x48AB08, "str_48AB08");
set_cmt(0x48AB08, "`Sfx\Towners\Tavown28.wav`", 0);
apply_type (0x48AB08, "extern char str_48AB08[25];", TINFO_DEFINITE);
cleanup("str_48AB24");set_name(0x48AB24, "str_48AB24");
set_cmt(0x48AB24, "`Sfx\Towners\Tavown27.wav`", 0);
apply_type (0x48AB24, "extern char str_48AB24[25];", TINFO_DEFINITE);
cleanup("str_48AB40");set_name(0x48AB40, "str_48AB40");
set_cmt(0x48AB40, "`Sfx\Towners\Tavown26.wav`", 0);
apply_type (0x48AB40, "extern char str_48AB40[25];", TINFO_DEFINITE);
cleanup("str_48AB5C");set_name(0x48AB5C, "str_48AB5C");
set_cmt(0x48AB5C, "`Sfx\Towners\Tavown25.wav`", 0);
apply_type (0x48AB5C, "extern char str_48AB5C[25];", TINFO_DEFINITE);
cleanup("str_48AB78");set_name(0x48AB78, "str_48AB78");
set_cmt(0x48AB78, "`Sfx\Towners\Tavown24.wav`", 0);
apply_type (0x48AB78, "extern char str_48AB78[25];", TINFO_DEFINITE);
cleanup("str_48AB94");set_name(0x48AB94, "str_48AB94");
set_cmt(0x48AB94, "`Sfx\Towners\Tavown23.wav`", 0);
apply_type (0x48AB94, "extern char str_48AB94[25];", TINFO_DEFINITE);
cleanup("str_48ABB0");set_name(0x48ABB0, "str_48ABB0");
set_cmt(0x48ABB0, "`Sfx\Towners\Tavown22.wav`", 0);
apply_type (0x48ABB0, "extern char str_48ABB0[25];", TINFO_DEFINITE);
cleanup("str_48ABCC");set_name(0x48ABCC, "str_48ABCC");
set_cmt(0x48ABCC, "`Sfx\Towners\Tavown21.wav`", 0);
apply_type (0x48ABCC, "extern char str_48ABCC[25];", TINFO_DEFINITE);
cleanup("str_48ABE8");set_name(0x48ABE8, "str_48ABE8");
set_cmt(0x48ABE8, "`Sfx\Towners\Tavown20.wav`", 0);
apply_type (0x48ABE8, "extern char str_48ABE8[25];", TINFO_DEFINITE);
cleanup("str_48AC04");set_name(0x48AC04, "str_48AC04");
set_cmt(0x48AC04, "`Sfx\Towners\Tavown19.wav`", 0);
apply_type (0x48AC04, "extern char str_48AC04[25];", TINFO_DEFINITE);
cleanup("str_48AC20");set_name(0x48AC20, "str_48AC20");
set_cmt(0x48AC20, "`Sfx\Towners\Tavown18.wav`", 0);
apply_type (0x48AC20, "extern char str_48AC20[25];", TINFO_DEFINITE);
cleanup("str_48AC3C");set_name(0x48AC3C, "str_48AC3C");
set_cmt(0x48AC3C, "`Sfx\Towners\Tavown17.wav`", 0);
apply_type (0x48AC3C, "extern char str_48AC3C[25];", TINFO_DEFINITE);
cleanup("str_48AC58");set_name(0x48AC58, "str_48AC58");
set_cmt(0x48AC58, "`Sfx\Towners\Tavown16.wav`", 0);
apply_type (0x48AC58, "extern char str_48AC58[25];", TINFO_DEFINITE);
cleanup("str_48AC74");set_name(0x48AC74, "str_48AC74");
set_cmt(0x48AC74, "`Sfx\Towners\Tavown15.wav`", 0);
apply_type (0x48AC74, "extern char str_48AC74[25];", TINFO_DEFINITE);
cleanup("str_48AC90");set_name(0x48AC90, "str_48AC90");
set_cmt(0x48AC90, "`Sfx\Towners\Tavown14.wav`", 0);
apply_type (0x48AC90, "extern char str_48AC90[25];", TINFO_DEFINITE);
cleanup("str_48ACAC");set_name(0x48ACAC, "str_48ACAC");
set_cmt(0x48ACAC, "`Sfx\Towners\Tavown13.wav`", 0);
apply_type (0x48ACAC, "extern char str_48ACAC[25];", TINFO_DEFINITE);
cleanup("str_48ACC8");set_name(0x48ACC8, "str_48ACC8");
set_cmt(0x48ACC8, "`Sfx\Towners\Tavown12.wav`", 0);
apply_type (0x48ACC8, "extern char str_48ACC8[25];", TINFO_DEFINITE);
cleanup("str_48ACE4");set_name(0x48ACE4, "str_48ACE4");
set_cmt(0x48ACE4, "`Sfx\Towners\Tavown11.wav`", 0);
apply_type (0x48ACE4, "extern char str_48ACE4[25];", TINFO_DEFINITE);
cleanup("str_48AD00");set_name(0x48AD00, "str_48AD00");
set_cmt(0x48AD00, "`Sfx\Towners\Tavown10.wav`", 0);
apply_type (0x48AD00, "extern char str_48AD00[25];", TINFO_DEFINITE);
cleanup("str_48AD1C");set_name(0x48AD1C, "str_48AD1C");
set_cmt(0x48AD1C, "`Sfx\Towners\Tavown09.wav`", 0);
apply_type (0x48AD1C, "extern char str_48AD1C[25];", TINFO_DEFINITE);
cleanup("str_48AD38");set_name(0x48AD38, "str_48AD38");
set_cmt(0x48AD38, "`Sfx\Towners\Tavown08.wav`", 0);
apply_type (0x48AD38, "extern char str_48AD38[25];", TINFO_DEFINITE);
cleanup("str_48AD54");set_name(0x48AD54, "str_48AD54");
set_cmt(0x48AD54, "`Sfx\Towners\Tavown07.wav`", 0);
apply_type (0x48AD54, "extern char str_48AD54[25];", TINFO_DEFINITE);
cleanup("str_48AD70");set_name(0x48AD70, "str_48AD70");
set_cmt(0x48AD70, "`Sfx\Towners\Tavown06.wav`", 0);
apply_type (0x48AD70, "extern char str_48AD70[25];", TINFO_DEFINITE);
cleanup("str_48AD8C");set_name(0x48AD8C, "str_48AD8C");
set_cmt(0x48AD8C, "`Sfx\Towners\Tavown05.wav`", 0);
apply_type (0x48AD8C, "extern char str_48AD8C[25];", TINFO_DEFINITE);
cleanup("str_48ADA8");set_name(0x48ADA8, "str_48ADA8");
set_cmt(0x48ADA8, "`Sfx\Towners\Tavown04.wav`", 0);
apply_type (0x48ADA8, "extern char str_48ADA8[25];", TINFO_DEFINITE);
cleanup("str_48ADC4");set_name(0x48ADC4, "str_48ADC4");
set_cmt(0x48ADC4, "`Sfx\Towners\Tavown03.wav`", 0);
apply_type (0x48ADC4, "extern char str_48ADC4[25];", TINFO_DEFINITE);
cleanup("str_48ADE0");set_name(0x48ADE0, "str_48ADE0");
set_cmt(0x48ADE0, "`Sfx\Towners\Tavown02.wav`", 0);
apply_type (0x48ADE0, "extern char str_48ADE0[25];", TINFO_DEFINITE);
cleanup("str_48ADFC");set_name(0x48ADFC, "str_48ADFC");
set_cmt(0x48ADFC, "`Sfx\Towners\Tavown01.wav`", 0);
apply_type (0x48ADFC, "extern char str_48ADFC[25];", TINFO_DEFINITE);
cleanup("str_48AE18");set_name(0x48AE18, "str_48AE18");
set_cmt(0x48AE18, "`Sfx\Towners\Tavown00.wav`", 0);
apply_type (0x48AE18, "extern char str_48AE18[25];", TINFO_DEFINITE);
cleanup("str_48AE34");set_name(0x48AE34, "str_48AE34");
set_cmt(0x48AE34, "`Sfx\Towners\Storyt38.wav`", 0);
apply_type (0x48AE34, "extern char str_48AE34[25];", TINFO_DEFINITE);
cleanup("str_48AE50");set_name(0x48AE50, "str_48AE50");
set_cmt(0x48AE50, "`Sfx\Towners\Storyt37.wav`", 0);
apply_type (0x48AE50, "extern char str_48AE50[25];", TINFO_DEFINITE);
cleanup("str_48AE6C");set_name(0x48AE6C, "str_48AE6C");
set_cmt(0x48AE6C, "`Sfx\Towners\Storyt36.wav`", 0);
apply_type (0x48AE6C, "extern char str_48AE6C[25];", TINFO_DEFINITE);
cleanup("str_48AE88");set_name(0x48AE88, "str_48AE88");
set_cmt(0x48AE88, "`Sfx\Towners\Storyt35.wav`", 0);
apply_type (0x48AE88, "extern char str_48AE88[25];", TINFO_DEFINITE);
cleanup("str_48AEA4");set_name(0x48AEA4, "str_48AEA4");
set_cmt(0x48AEA4, "`Sfx\Towners\Storyt34.wav`", 0);
apply_type (0x48AEA4, "extern char str_48AEA4[25];", TINFO_DEFINITE);
cleanup("str_48AEC0");set_name(0x48AEC0, "str_48AEC0");
set_cmt(0x48AEC0, "`Sfx\Towners\Storyt33.wav`", 0);
apply_type (0x48AEC0, "extern char str_48AEC0[25];", TINFO_DEFINITE);
cleanup("str_48AEDC");set_name(0x48AEDC, "str_48AEDC");
set_cmt(0x48AEDC, "`Sfx\Towners\Storyt32.wav`", 0);
apply_type (0x48AEDC, "extern char str_48AEDC[25];", TINFO_DEFINITE);
cleanup("str_48AEF8");set_name(0x48AEF8, "str_48AEF8");
set_cmt(0x48AEF8, "`Sfx\Towners\Storyt31.wav`", 0);
apply_type (0x48AEF8, "extern char str_48AEF8[25];", TINFO_DEFINITE);
cleanup("str_48AF14");set_name(0x48AF14, "str_48AF14");
set_cmt(0x48AF14, "`Sfx\Towners\Storyt30.wav`", 0);
apply_type (0x48AF14, "extern char str_48AF14[25];", TINFO_DEFINITE);
cleanup("str_48AF30");set_name(0x48AF30, "str_48AF30");
set_cmt(0x48AF30, "`Sfx\Towners\Storyt29.wav`", 0);
apply_type (0x48AF30, "extern char str_48AF30[25];", TINFO_DEFINITE);
cleanup("str_48AF4C");set_name(0x48AF4C, "str_48AF4C");
set_cmt(0x48AF4C, "`Sfx\Towners\Storyt28.wav`", 0);
apply_type (0x48AF4C, "extern char str_48AF4C[25];", TINFO_DEFINITE);
cleanup("str_48AF68");set_name(0x48AF68, "str_48AF68");
set_cmt(0x48AF68, "`Sfx\Towners\Storyt27.wav`", 0);
apply_type (0x48AF68, "extern char str_48AF68[25];", TINFO_DEFINITE);
cleanup("str_48AF84");set_name(0x48AF84, "str_48AF84");
set_cmt(0x48AF84, "`Sfx\Towners\Storyt26.wav`", 0);
apply_type (0x48AF84, "extern char str_48AF84[25];", TINFO_DEFINITE);
cleanup("str_48AFA0");set_name(0x48AFA0, "str_48AFA0");
set_cmt(0x48AFA0, "`Sfx\Towners\Storyt25.wav`", 0);
apply_type (0x48AFA0, "extern char str_48AFA0[25];", TINFO_DEFINITE);
cleanup("str_48AFBC");set_name(0x48AFBC, "str_48AFBC");
set_cmt(0x48AFBC, "`Sfx\Towners\Storyt24.wav`", 0);
apply_type (0x48AFBC, "extern char str_48AFBC[25];", TINFO_DEFINITE);
cleanup("str_48AFD8");set_name(0x48AFD8, "str_48AFD8");
set_cmt(0x48AFD8, "`Sfx\Towners\Storyt23.wav`", 0);
apply_type (0x48AFD8, "extern char str_48AFD8[25];", TINFO_DEFINITE);
cleanup("str_48AFF4");set_name(0x48AFF4, "str_48AFF4");
set_cmt(0x48AFF4, "`Sfx\Towners\Storyt22.wav`", 0);
apply_type (0x48AFF4, "extern char str_48AFF4[25];", TINFO_DEFINITE);
cleanup("str_48B010");set_name(0x48B010, "str_48B010");
set_cmt(0x48B010, "`Sfx\Towners\Storyt21.wav`", 0);
apply_type (0x48B010, "extern char str_48B010[25];", TINFO_DEFINITE);
cleanup("str_48B02C");set_name(0x48B02C, "str_48B02C");
set_cmt(0x48B02C, "`Sfx\Towners\Storyt20.wav`", 0);
apply_type (0x48B02C, "extern char str_48B02C[25];", TINFO_DEFINITE);
cleanup("str_48B048");set_name(0x48B048, "str_48B048");
set_cmt(0x48B048, "`Sfx\Towners\Storyt19.wav`", 0);
apply_type (0x48B048, "extern char str_48B048[25];", TINFO_DEFINITE);
cleanup("str_48B064");set_name(0x48B064, "str_48B064");
set_cmt(0x48B064, "`Sfx\Towners\Storyt18.wav`", 0);
apply_type (0x48B064, "extern char str_48B064[25];", TINFO_DEFINITE);
cleanup("str_48B080");set_name(0x48B080, "str_48B080");
set_cmt(0x48B080, "`Sfx\Towners\Storyt17.wav`", 0);
apply_type (0x48B080, "extern char str_48B080[25];", TINFO_DEFINITE);
cleanup("str_48B09C");set_name(0x48B09C, "str_48B09C");
set_cmt(0x48B09C, "`Sfx\Towners\Storyt16.wav`", 0);
apply_type (0x48B09C, "extern char str_48B09C[25];", TINFO_DEFINITE);
cleanup("str_48B0B8");set_name(0x48B0B8, "str_48B0B8");
set_cmt(0x48B0B8, "`Sfx\Towners\Storyt15.wav`", 0);
apply_type (0x48B0B8, "extern char str_48B0B8[25];", TINFO_DEFINITE);
cleanup("str_48B0D4");set_name(0x48B0D4, "str_48B0D4");
set_cmt(0x48B0D4, "`Sfx\Towners\Storyt14.wav`", 0);
apply_type (0x48B0D4, "extern char str_48B0D4[25];", TINFO_DEFINITE);
cleanup("str_48B0F0");set_name(0x48B0F0, "str_48B0F0");
set_cmt(0x48B0F0, "`Sfx\Towners\Storyt13.wav`", 0);
apply_type (0x48B0F0, "extern char str_48B0F0[25];", TINFO_DEFINITE);
cleanup("str_48B10C");set_name(0x48B10C, "str_48B10C");
set_cmt(0x48B10C, "`Sfx\Towners\Storyt12.wav`", 0);
apply_type (0x48B10C, "extern char str_48B10C[25];", TINFO_DEFINITE);
cleanup("str_48B128");set_name(0x48B128, "str_48B128");
set_cmt(0x48B128, "`Sfx\Towners\Storyt11.wav`", 0);
apply_type (0x48B128, "extern char str_48B128[25];", TINFO_DEFINITE);
cleanup("str_48B144");set_name(0x48B144, "str_48B144");
set_cmt(0x48B144, "`Sfx\Towners\Storyt10.wav`", 0);
apply_type (0x48B144, "extern char str_48B144[25];", TINFO_DEFINITE);
cleanup("str_48B160");set_name(0x48B160, "str_48B160");
set_cmt(0x48B160, "`Sfx\Towners\Storyt09.wav`", 0);
apply_type (0x48B160, "extern char str_48B160[25];", TINFO_DEFINITE);
cleanup("str_48B17C");set_name(0x48B17C, "str_48B17C");
set_cmt(0x48B17C, "`Sfx\Towners\Storyt08.wav`", 0);
apply_type (0x48B17C, "extern char str_48B17C[25];", TINFO_DEFINITE);
cleanup("str_48B198");set_name(0x48B198, "str_48B198");
set_cmt(0x48B198, "`Sfx\Towners\Storyt07.wav`", 0);
apply_type (0x48B198, "extern char str_48B198[25];", TINFO_DEFINITE);
cleanup("str_48B1B4");set_name(0x48B1B4, "str_48B1B4");
set_cmt(0x48B1B4, "`Sfx\Towners\Storyt06.wav`", 0);
apply_type (0x48B1B4, "extern char str_48B1B4[25];", TINFO_DEFINITE);
cleanup("str_48B1D0");set_name(0x48B1D0, "str_48B1D0");
set_cmt(0x48B1D0, "`Sfx\Towners\Storyt05.wav`", 0);
apply_type (0x48B1D0, "extern char str_48B1D0[25];", TINFO_DEFINITE);
cleanup("str_48B1EC");set_name(0x48B1EC, "str_48B1EC");
set_cmt(0x48B1EC, "`Sfx\Towners\Storyt04.wav`", 0);
apply_type (0x48B1EC, "extern char str_48B1EC[25];", TINFO_DEFINITE);
cleanup("str_48B208");set_name(0x48B208, "str_48B208");
set_cmt(0x48B208, "`Sfx\Towners\Storyt03.wav`", 0);
apply_type (0x48B208, "extern char str_48B208[25];", TINFO_DEFINITE);
cleanup("str_48B224");set_name(0x48B224, "str_48B224");
set_cmt(0x48B224, "`Sfx\Towners\Storyt02.wav`", 0);
apply_type (0x48B224, "extern char str_48B224[25];", TINFO_DEFINITE);
cleanup("str_48B240");set_name(0x48B240, "str_48B240");
set_cmt(0x48B240, "`Sfx\Towners\Storyt01.wav`", 0);
apply_type (0x48B240, "extern char str_48B240[25];", TINFO_DEFINITE);
cleanup("str_48B25C");set_name(0x48B25C, "str_48B25C");
set_cmt(0x48B25C, "`Sfx\Towners\Storyt00.wav`", 0);
apply_type (0x48B25C, "extern char str_48B25C[25];", TINFO_DEFINITE);
cleanup("str_48B278");set_name(0x48B278, "str_48B278");
set_cmt(0x48B278, "`Sfx\Towners\Priest07.wav`", 0);
apply_type (0x48B278, "extern char str_48B278[25];", TINFO_DEFINITE);
cleanup("str_48B294");set_name(0x48B294, "str_48B294");
set_cmt(0x48B294, "`Sfx\Towners\Priest06.wav`", 0);
apply_type (0x48B294, "extern char str_48B294[25];", TINFO_DEFINITE);
cleanup("str_48B2B0");set_name(0x48B2B0, "str_48B2B0");
set_cmt(0x48B2B0, "`Sfx\Towners\Priest05.wav`", 0);
apply_type (0x48B2B0, "extern char str_48B2B0[25];", TINFO_DEFINITE);
cleanup("str_48B2CC");set_name(0x48B2CC, "str_48B2CC");
set_cmt(0x48B2CC, "`Sfx\Towners\Priest04.wav`", 0);
apply_type (0x48B2CC, "extern char str_48B2CC[25];", TINFO_DEFINITE);
cleanup("str_48B2E8");set_name(0x48B2E8, "str_48B2E8");
set_cmt(0x48B2E8, "`Sfx\Towners\Priest03.wav`", 0);
apply_type (0x48B2E8, "extern char str_48B2E8[25];", TINFO_DEFINITE);
cleanup("str_48B304");set_name(0x48B304, "str_48B304");
set_cmt(0x48B304, "`Sfx\Towners\Priest02.wav`", 0);
apply_type (0x48B304, "extern char str_48B304[25];", TINFO_DEFINITE);
cleanup("str_48B320");set_name(0x48B320, "str_48B320");
set_cmt(0x48B320, "`Sfx\Towners\Priest01.wav`", 0);
apply_type (0x48B320, "extern char str_48B320[25];", TINFO_DEFINITE);
cleanup("str_48B33C");set_name(0x48B33C, "str_48B33C");
set_cmt(0x48B33C, "`Sfx\Towners\Priest00.wav`", 0);
apply_type (0x48B33C, "extern char str_48B33C[25];", TINFO_DEFINITE);
cleanup("str_48B358");set_name(0x48B358, "str_48B358");
set_cmt(0x48B358, "`Sfx\Towners\Pegboy43.wav`", 0);
apply_type (0x48B358, "extern char str_48B358[25];", TINFO_DEFINITE);
cleanup("str_48B374");set_name(0x48B374, "str_48B374");
set_cmt(0x48B374, "`Sfx\Towners\Pegboy42.wav`", 0);
apply_type (0x48B374, "extern char str_48B374[25];", TINFO_DEFINITE);
cleanup("str_48B390");set_name(0x48B390, "str_48B390");
set_cmt(0x48B390, "`Sfx\Towners\Pegboy41.wav`", 0);
apply_type (0x48B390, "extern char str_48B390[25];", TINFO_DEFINITE);
cleanup("str_48B3AC");set_name(0x48B3AC, "str_48B3AC");
set_cmt(0x48B3AC, "`Sfx\Towners\Pegboy40.wav`", 0);
apply_type (0x48B3AC, "extern char str_48B3AC[25];", TINFO_DEFINITE);
cleanup("str_48B3C8");set_name(0x48B3C8, "str_48B3C8");
set_cmt(0x48B3C8, "`Sfx\Towners\Pegboy39.wav`", 0);
apply_type (0x48B3C8, "extern char str_48B3C8[25];", TINFO_DEFINITE);
cleanup("str_48B3E4");set_name(0x48B3E4, "str_48B3E4");
set_cmt(0x48B3E4, "`Sfx\Towners\Pegboy38.wav`", 0);
apply_type (0x48B3E4, "extern char str_48B3E4[25];", TINFO_DEFINITE);
cleanup("str_48B400");set_name(0x48B400, "str_48B400");
set_cmt(0x48B400, "`Sfx\Towners\Pegboy37.wav`", 0);
apply_type (0x48B400, "extern char str_48B400[25];", TINFO_DEFINITE);
cleanup("str_48B41C");set_name(0x48B41C, "str_48B41C");
set_cmt(0x48B41C, "`Sfx\Towners\Pegboy36.wav`", 0);
apply_type (0x48B41C, "extern char str_48B41C[25];", TINFO_DEFINITE);
cleanup("str_48B438");set_name(0x48B438, "str_48B438");
set_cmt(0x48B438, "`Sfx\Towners\Pegboy35.wav`", 0);
apply_type (0x48B438, "extern char str_48B438[25];", TINFO_DEFINITE);
cleanup("str_48B454");set_name(0x48B454, "str_48B454");
set_cmt(0x48B454, "`Sfx\Towners\Pegboy34.wav`", 0);
apply_type (0x48B454, "extern char str_48B454[25];", TINFO_DEFINITE);
cleanup("str_48B470");set_name(0x48B470, "str_48B470");
set_cmt(0x48B470, "`Sfx\Towners\Pegboy33.wav`", 0);
apply_type (0x48B470, "extern char str_48B470[25];", TINFO_DEFINITE);
cleanup("str_48B48C");set_name(0x48B48C, "str_48B48C");
set_cmt(0x48B48C, "`Sfx\Towners\Pegboy32.wav`", 0);
apply_type (0x48B48C, "extern char str_48B48C[25];", TINFO_DEFINITE);
cleanup("str_48B4A8");set_name(0x48B4A8, "str_48B4A8");
set_cmt(0x48B4A8, "`Sfx\Towners\Pegboy31.wav`", 0);
apply_type (0x48B4A8, "extern char str_48B4A8[25];", TINFO_DEFINITE);
cleanup("str_48B4C4");set_name(0x48B4C4, "str_48B4C4");
set_cmt(0x48B4C4, "`Sfx\Towners\Pegboy30.wav`", 0);
apply_type (0x48B4C4, "extern char str_48B4C4[25];", TINFO_DEFINITE);
cleanup("str_48B4E0");set_name(0x48B4E0, "str_48B4E0");
set_cmt(0x48B4E0, "`Sfx\Towners\Pegboy29.wav`", 0);
apply_type (0x48B4E0, "extern char str_48B4E0[25];", TINFO_DEFINITE);
cleanup("str_48B4FC");set_name(0x48B4FC, "str_48B4FC");
set_cmt(0x48B4FC, "`Sfx\Towners\Pegboy28.wav`", 0);
apply_type (0x48B4FC, "extern char str_48B4FC[25];", TINFO_DEFINITE);
cleanup("str_48B518");set_name(0x48B518, "str_48B518");
set_cmt(0x48B518, "`Sfx\Towners\Pegboy27.wav`", 0);
apply_type (0x48B518, "extern char str_48B518[25];", TINFO_DEFINITE);
cleanup("str_48B534");set_name(0x48B534, "str_48B534");
set_cmt(0x48B534, "`Sfx\Towners\Pegboy26.wav`", 0);
apply_type (0x48B534, "extern char str_48B534[25];", TINFO_DEFINITE);
cleanup("str_48B550");set_name(0x48B550, "str_48B550");
set_cmt(0x48B550, "`Sfx\Towners\Pegboy25.wav`", 0);
apply_type (0x48B550, "extern char str_48B550[25];", TINFO_DEFINITE);
cleanup("str_48B56C");set_name(0x48B56C, "str_48B56C");
set_cmt(0x48B56C, "`Sfx\Towners\Pegboy24.wav`", 0);
apply_type (0x48B56C, "extern char str_48B56C[25];", TINFO_DEFINITE);
cleanup("str_48B588");set_name(0x48B588, "str_48B588");
set_cmt(0x48B588, "`Sfx\Towners\Pegboy23.wav`", 0);
apply_type (0x48B588, "extern char str_48B588[25];", TINFO_DEFINITE);
cleanup("str_48B5A4");set_name(0x48B5A4, "str_48B5A4");
set_cmt(0x48B5A4, "`Sfx\Towners\Pegboy22.wav`", 0);
apply_type (0x48B5A4, "extern char str_48B5A4[25];", TINFO_DEFINITE);
cleanup("str_48B5C0");set_name(0x48B5C0, "str_48B5C0");
set_cmt(0x48B5C0, "`Sfx\Towners\Pegboy21.wav`", 0);
apply_type (0x48B5C0, "extern char str_48B5C0[25];", TINFO_DEFINITE);
cleanup("str_48B5DC");set_name(0x48B5DC, "str_48B5DC");
set_cmt(0x48B5DC, "`Sfx\Towners\Pegboy20.wav`", 0);
apply_type (0x48B5DC, "extern char str_48B5DC[25];", TINFO_DEFINITE);
cleanup("str_48B5F8");set_name(0x48B5F8, "str_48B5F8");
set_cmt(0x48B5F8, "`Sfx\Towners\Pegboy19.wav`", 0);
apply_type (0x48B5F8, "extern char str_48B5F8[25];", TINFO_DEFINITE);
cleanup("str_48B614");set_name(0x48B614, "str_48B614");
set_cmt(0x48B614, "`Sfx\Towners\Pegboy18.wav`", 0);
apply_type (0x48B614, "extern char str_48B614[25];", TINFO_DEFINITE);
cleanup("str_48B630");set_name(0x48B630, "str_48B630");
set_cmt(0x48B630, "`Sfx\Towners\Pegboy17.wav`", 0);
apply_type (0x48B630, "extern char str_48B630[25];", TINFO_DEFINITE);
cleanup("str_48B64C");set_name(0x48B64C, "str_48B64C");
set_cmt(0x48B64C, "`Sfx\Towners\Pegboy16.wav`", 0);
apply_type (0x48B64C, "extern char str_48B64C[25];", TINFO_DEFINITE);
cleanup("str_48B668");set_name(0x48B668, "str_48B668");
set_cmt(0x48B668, "`Sfx\Towners\Pegboy15.wav`", 0);
apply_type (0x48B668, "extern char str_48B668[25];", TINFO_DEFINITE);
cleanup("str_48B684");set_name(0x48B684, "str_48B684");
set_cmt(0x48B684, "`Sfx\Towners\Pegboy14.wav`", 0);
apply_type (0x48B684, "extern char str_48B684[25];", TINFO_DEFINITE);
cleanup("str_48B6A0");set_name(0x48B6A0, "str_48B6A0");
set_cmt(0x48B6A0, "`Sfx\Towners\Pegboy13.wav`", 0);
apply_type (0x48B6A0, "extern char str_48B6A0[25];", TINFO_DEFINITE);
cleanup("str_48B6BC");set_name(0x48B6BC, "str_48B6BC");
set_cmt(0x48B6BC, "`Sfx\Towners\Pegboy12.wav`", 0);
apply_type (0x48B6BC, "extern char str_48B6BC[25];", TINFO_DEFINITE);
cleanup("str_48B6D8");set_name(0x48B6D8, "str_48B6D8");
set_cmt(0x48B6D8, "`Sfx\Towners\Pegboy11.wav`", 0);
apply_type (0x48B6D8, "extern char str_48B6D8[25];", TINFO_DEFINITE);
cleanup("str_48B6F4");set_name(0x48B6F4, "str_48B6F4");
set_cmt(0x48B6F4, "`Sfx\Towners\Pegboy10.wav`", 0);
apply_type (0x48B6F4, "extern char str_48B6F4[25];", TINFO_DEFINITE);
cleanup("str_48B710");set_name(0x48B710, "str_48B710");
set_cmt(0x48B710, "`Sfx\Towners\Pegboy09.wav`", 0);
apply_type (0x48B710, "extern char str_48B710[25];", TINFO_DEFINITE);
cleanup("str_48B72C");set_name(0x48B72C, "str_48B72C");
set_cmt(0x48B72C, "`Sfx\Towners\Pegboy08.wav`", 0);
apply_type (0x48B72C, "extern char str_48B72C[25];", TINFO_DEFINITE);
cleanup("str_48B748");set_name(0x48B748, "str_48B748");
set_cmt(0x48B748, "`Sfx\Towners\Pegboy07.wav`", 0);
apply_type (0x48B748, "extern char str_48B748[25];", TINFO_DEFINITE);
cleanup("str_48B764");set_name(0x48B764, "str_48B764");
set_cmt(0x48B764, "`Sfx\Towners\Pegboy06.wav`", 0);
apply_type (0x48B764, "extern char str_48B764[25];", TINFO_DEFINITE);
cleanup("str_48B780");set_name(0x48B780, "str_48B780");
set_cmt(0x48B780, "`Sfx\Towners\Pegboy05.wav`", 0);
apply_type (0x48B780, "extern char str_48B780[25];", TINFO_DEFINITE);
cleanup("str_48B79C");set_name(0x48B79C, "str_48B79C");
set_cmt(0x48B79C, "`Sfx\Towners\Pegboy04.wav`", 0);
apply_type (0x48B79C, "extern char str_48B79C[25];", TINFO_DEFINITE);
cleanup("str_48B7B8");set_name(0x48B7B8, "str_48B7B8");
set_cmt(0x48B7B8, "`Sfx\Towners\Pegboy03.wav`", 0);
apply_type (0x48B7B8, "extern char str_48B7B8[25];", TINFO_DEFINITE);
cleanup("str_48B7D4");set_name(0x48B7D4, "str_48B7D4");
set_cmt(0x48B7D4, "`Sfx\Towners\Pegboy02.wav`", 0);
apply_type (0x48B7D4, "extern char str_48B7D4[25];", TINFO_DEFINITE);
cleanup("str_48B7F0");set_name(0x48B7F0, "str_48B7F0");
set_cmt(0x48B7F0, "`Sfx\Towners\Pegboy01.wav`", 0);
apply_type (0x48B7F0, "extern char str_48B7F0[25];", TINFO_DEFINITE);
cleanup("str_48B80C");set_name(0x48B80C, "str_48B80C");
set_cmt(0x48B80C, "`Sfx\Towners\Healer47.wav`", 0);
apply_type (0x48B80C, "extern char str_48B80C[25];", TINFO_DEFINITE);
cleanup("str_48B828");set_name(0x48B828, "str_48B828");
set_cmt(0x48B828, "`Sfx\Towners\Healer46.wav`", 0);
apply_type (0x48B828, "extern char str_48B828[25];", TINFO_DEFINITE);
cleanup("str_48B844");set_name(0x48B844, "str_48B844");
set_cmt(0x48B844, "`Sfx\Towners\Healer45.wav`", 0);
apply_type (0x48B844, "extern char str_48B844[25];", TINFO_DEFINITE);
cleanup("str_48B860");set_name(0x48B860, "str_48B860");
set_cmt(0x48B860, "`Sfx\Towners\Healer44.wav`", 0);
apply_type (0x48B860, "extern char str_48B860[25];", TINFO_DEFINITE);
cleanup("str_48B87C");set_name(0x48B87C, "str_48B87C");
set_cmt(0x48B87C, "`Sfx\Towners\Healer43.wav`", 0);
apply_type (0x48B87C, "extern char str_48B87C[25];", TINFO_DEFINITE);
cleanup("str_48B898");set_name(0x48B898, "str_48B898");
set_cmt(0x48B898, "`Sfx\Towners\Healer42.wav`", 0);
apply_type (0x48B898, "extern char str_48B898[25];", TINFO_DEFINITE);
cleanup("str_48B8B4");set_name(0x48B8B4, "str_48B8B4");
set_cmt(0x48B8B4, "`Sfx\Towners\Healer41.wav`", 0);
apply_type (0x48B8B4, "extern char str_48B8B4[25];", TINFO_DEFINITE);
cleanup("str_48B8D0");set_name(0x48B8D0, "str_48B8D0");
set_cmt(0x48B8D0, "`Sfx\Towners\Healer40.wav`", 0);
apply_type (0x48B8D0, "extern char str_48B8D0[25];", TINFO_DEFINITE);
cleanup("str_48B8EC");set_name(0x48B8EC, "str_48B8EC");
set_cmt(0x48B8EC, "`Sfx\Towners\Healer39.wav`", 0);
apply_type (0x48B8EC, "extern char str_48B8EC[25];", TINFO_DEFINITE);
cleanup("str_48B908");set_name(0x48B908, "str_48B908");
set_cmt(0x48B908, "`Sfx\Towners\Healer38.wav`", 0);
apply_type (0x48B908, "extern char str_48B908[25];", TINFO_DEFINITE);
cleanup("str_48B924");set_name(0x48B924, "str_48B924");
set_cmt(0x48B924, "`Sfx\Towners\Healer37.wav`", 0);
apply_type (0x48B924, "extern char str_48B924[25];", TINFO_DEFINITE);
cleanup("str_48B940");set_name(0x48B940, "str_48B940");
set_cmt(0x48B940, "`Sfx\Towners\Healer36.wav`", 0);
apply_type (0x48B940, "extern char str_48B940[25];", TINFO_DEFINITE);
cleanup("str_48B95C");set_name(0x48B95C, "str_48B95C");
set_cmt(0x48B95C, "`Sfx\Towners\Healer35.wav`", 0);
apply_type (0x48B95C, "extern char str_48B95C[25];", TINFO_DEFINITE);
cleanup("str_48B978");set_name(0x48B978, "str_48B978");
set_cmt(0x48B978, "`Sfx\Towners\Healer34.wav`", 0);
apply_type (0x48B978, "extern char str_48B978[25];", TINFO_DEFINITE);
cleanup("str_48B994");set_name(0x48B994, "str_48B994");
set_cmt(0x48B994, "`Sfx\Towners\Healer33.wav`", 0);
apply_type (0x48B994, "extern char str_48B994[25];", TINFO_DEFINITE);
cleanup("str_48B9B0");set_name(0x48B9B0, "str_48B9B0");
set_cmt(0x48B9B0, "`Sfx\Towners\Healer32.wav`", 0);
apply_type (0x48B9B0, "extern char str_48B9B0[25];", TINFO_DEFINITE);
cleanup("str_48B9CC");set_name(0x48B9CC, "str_48B9CC");
set_cmt(0x48B9CC, "`Sfx\Towners\Healer31.wav`", 0);
apply_type (0x48B9CC, "extern char str_48B9CC[25];", TINFO_DEFINITE);
cleanup("str_48B9E8");set_name(0x48B9E8, "str_48B9E8");
set_cmt(0x48B9E8, "`Sfx\Towners\Healer30.wav`", 0);
apply_type (0x48B9E8, "extern char str_48B9E8[25];", TINFO_DEFINITE);
cleanup("str_48BA04");set_name(0x48BA04, "str_48BA04");
set_cmt(0x48BA04, "`Sfx\Towners\Healer29.wav`", 0);
apply_type (0x48BA04, "extern char str_48BA04[25];", TINFO_DEFINITE);
cleanup("str_48BA20");set_name(0x48BA20, "str_48BA20");
set_cmt(0x48BA20, "`Sfx\Towners\Healer28.wav`", 0);
apply_type (0x48BA20, "extern char str_48BA20[25];", TINFO_DEFINITE);
cleanup("str_48BA3C");set_name(0x48BA3C, "str_48BA3C");
set_cmt(0x48BA3C, "`Sfx\Towners\Healer27.wav`", 0);
apply_type (0x48BA3C, "extern char str_48BA3C[25];", TINFO_DEFINITE);
cleanup("str_48BA58");set_name(0x48BA58, "str_48BA58");
set_cmt(0x48BA58, "`Sfx\Towners\Healer26.wav`", 0);
apply_type (0x48BA58, "extern char str_48BA58[25];", TINFO_DEFINITE);
cleanup("str_48BA74");set_name(0x48BA74, "str_48BA74");
set_cmt(0x48BA74, "`Sfx\Towners\Healer25.wav`", 0);
apply_type (0x48BA74, "extern char str_48BA74[25];", TINFO_DEFINITE);
cleanup("str_48BA90");set_name(0x48BA90, "str_48BA90");
set_cmt(0x48BA90, "`Sfx\Towners\Healer24.wav`", 0);
apply_type (0x48BA90, "extern char str_48BA90[25];", TINFO_DEFINITE);
cleanup("str_48BAAC");set_name(0x48BAAC, "str_48BAAC");
set_cmt(0x48BAAC, "`Sfx\Towners\Healer23.wav`", 0);
apply_type (0x48BAAC, "extern char str_48BAAC[25];", TINFO_DEFINITE);
cleanup("str_48BAC8");set_name(0x48BAC8, "str_48BAC8");
set_cmt(0x48BAC8, "`Sfx\Towners\Healer22.wav`", 0);
apply_type (0x48BAC8, "extern char str_48BAC8[25];", TINFO_DEFINITE);
cleanup("str_48BAE4");set_name(0x48BAE4, "str_48BAE4");
set_cmt(0x48BAE4, "`Sfx\Towners\Healer21.wav`", 0);
apply_type (0x48BAE4, "extern char str_48BAE4[25];", TINFO_DEFINITE);
cleanup("str_48BB00");set_name(0x48BB00, "str_48BB00");
set_cmt(0x48BB00, "`Sfx\Towners\Healer20.wav`", 0);
apply_type (0x48BB00, "extern char str_48BB00[25];", TINFO_DEFINITE);
cleanup("str_48BB1C");set_name(0x48BB1C, "str_48BB1C");
set_cmt(0x48BB1C, "`Sfx\Towners\Healer19.wav`", 0);
apply_type (0x48BB1C, "extern char str_48BB1C[25];", TINFO_DEFINITE);
cleanup("str_48BB38");set_name(0x48BB38, "str_48BB38");
set_cmt(0x48BB38, "`Sfx\Towners\Healer18.wav`", 0);
apply_type (0x48BB38, "extern char str_48BB38[25];", TINFO_DEFINITE);
cleanup("str_48BB54");set_name(0x48BB54, "str_48BB54");
set_cmt(0x48BB54, "`Sfx\Towners\Healer17.wav`", 0);
apply_type (0x48BB54, "extern char str_48BB54[25];", TINFO_DEFINITE);
cleanup("str_48BB70");set_name(0x48BB70, "str_48BB70");
set_cmt(0x48BB70, "`Sfx\Towners\Healer16.wav`", 0);
apply_type (0x48BB70, "extern char str_48BB70[25];", TINFO_DEFINITE);
cleanup("str_48BB8C");set_name(0x48BB8C, "str_48BB8C");
set_cmt(0x48BB8C, "`Sfx\Towners\Healer15.wav`", 0);
apply_type (0x48BB8C, "extern char str_48BB8C[25];", TINFO_DEFINITE);
cleanup("str_48BBA8");set_name(0x48BBA8, "str_48BBA8");
set_cmt(0x48BBA8, "`Sfx\Towners\Healer14.wav`", 0);
apply_type (0x48BBA8, "extern char str_48BBA8[25];", TINFO_DEFINITE);
cleanup("str_48BBC4");set_name(0x48BBC4, "str_48BBC4");
set_cmt(0x48BBC4, "`Sfx\Towners\Healer13.wav`", 0);
apply_type (0x48BBC4, "extern char str_48BBC4[25];", TINFO_DEFINITE);
cleanup("str_48BBE0");set_name(0x48BBE0, "str_48BBE0");
set_cmt(0x48BBE0, "`Sfx\Towners\Healer12.wav`", 0);
apply_type (0x48BBE0, "extern char str_48BBE0[25];", TINFO_DEFINITE);
cleanup("str_48BBFC");set_name(0x48BBFC, "str_48BBFC");
set_cmt(0x48BBFC, "`Sfx\Towners\Healer11.wav`", 0);
apply_type (0x48BBFC, "extern char str_48BBFC[25];", TINFO_DEFINITE);
cleanup("str_48BC18");set_name(0x48BC18, "str_48BC18");
set_cmt(0x48BC18, "`Sfx\Towners\Healer10.wav`", 0);
apply_type (0x48BC18, "extern char str_48BC18[25];", TINFO_DEFINITE);
cleanup("str_48BC34");set_name(0x48BC34, "str_48BC34");
set_cmt(0x48BC34, "`Sfx\Towners\Healer09.wav`", 0);
apply_type (0x48BC34, "extern char str_48BC34[25];", TINFO_DEFINITE);
cleanup("str_48BC50");set_name(0x48BC50, "str_48BC50");
set_cmt(0x48BC50, "`Sfx\Towners\Healer08.wav`", 0);
apply_type (0x48BC50, "extern char str_48BC50[25];", TINFO_DEFINITE);
cleanup("str_48BC6C");set_name(0x48BC6C, "str_48BC6C");
set_cmt(0x48BC6C, "`Sfx\Towners\Healer07.wav`", 0);
apply_type (0x48BC6C, "extern char str_48BC6C[25];", TINFO_DEFINITE);
cleanup("str_48BC88");set_name(0x48BC88, "str_48BC88");
set_cmt(0x48BC88, "`Sfx\Towners\Healer06.wav`", 0);
apply_type (0x48BC88, "extern char str_48BC88[25];", TINFO_DEFINITE);
cleanup("str_48BCA4");set_name(0x48BCA4, "str_48BCA4");
set_cmt(0x48BCA4, "`Sfx\Towners\Healer05.wav`", 0);
apply_type (0x48BCA4, "extern char str_48BCA4[25];", TINFO_DEFINITE);
cleanup("str_48BCC0");set_name(0x48BCC0, "str_48BCC0");
set_cmt(0x48BCC0, "`Sfx\Towners\Healer04.wav`", 0);
apply_type (0x48BCC0, "extern char str_48BCC0[25];", TINFO_DEFINITE);
cleanup("str_48BCDC");set_name(0x48BCDC, "str_48BCDC");
set_cmt(0x48BCDC, "`Sfx\Towners\Healer03.wav`", 0);
apply_type (0x48BCDC, "extern char str_48BCDC[25];", TINFO_DEFINITE);
cleanup("str_48BCF8");set_name(0x48BCF8, "str_48BCF8");
set_cmt(0x48BCF8, "`Sfx\Towners\Healer02.wav`", 0);
apply_type (0x48BCF8, "extern char str_48BCF8[25];", TINFO_DEFINITE);
cleanup("str_48BD14");set_name(0x48BD14, "str_48BD14");
set_cmt(0x48BD14, "`Sfx\Towners\Healer01.wav`", 0);
apply_type (0x48BD14, "extern char str_48BD14[25];", TINFO_DEFINITE);
cleanup("str_48BD30");set_name(0x48BD30, "str_48BD30");
set_cmt(0x48BD30, "`Sfx\Towners\Drunk35.wav`", 0);
apply_type (0x48BD30, "extern char str_48BD30[24];", TINFO_DEFINITE);
cleanup("str_48BD48");set_name(0x48BD48, "str_48BD48");
set_cmt(0x48BD48, "`Sfx\Towners\Drunk34.wav`", 0);
apply_type (0x48BD48, "extern char str_48BD48[24];", TINFO_DEFINITE);
cleanup("str_48BD60");set_name(0x48BD60, "str_48BD60");
set_cmt(0x48BD60, "`Sfx\Towners\Drunk33.wav`", 0);
apply_type (0x48BD60, "extern char str_48BD60[24];", TINFO_DEFINITE);
cleanup("str_48BD78");set_name(0x48BD78, "str_48BD78");
set_cmt(0x48BD78, "`Sfx\Towners\Drunk32.wav`", 0);
apply_type (0x48BD78, "extern char str_48BD78[24];", TINFO_DEFINITE);
cleanup("str_48BD90");set_name(0x48BD90, "str_48BD90");
set_cmt(0x48BD90, "`Sfx\Towners\Drunk31.wav`", 0);
apply_type (0x48BD90, "extern char str_48BD90[24];", TINFO_DEFINITE);
cleanup("str_48BDA8");set_name(0x48BDA8, "str_48BDA8");
set_cmt(0x48BDA8, "`Sfx\Towners\Drunk30.wav`", 0);
apply_type (0x48BDA8, "extern char str_48BDA8[24];", TINFO_DEFINITE);
cleanup("str_48BDC0");set_name(0x48BDC0, "str_48BDC0");
set_cmt(0x48BDC0, "`Sfx\Towners\Drunk29.wav`", 0);
apply_type (0x48BDC0, "extern char str_48BDC0[24];", TINFO_DEFINITE);
cleanup("str_48BDD8");set_name(0x48BDD8, "str_48BDD8");
set_cmt(0x48BDD8, "`Sfx\Towners\Drunk28.wav`", 0);
apply_type (0x48BDD8, "extern char str_48BDD8[24];", TINFO_DEFINITE);
cleanup("str_48BDF0");set_name(0x48BDF0, "str_48BDF0");
set_cmt(0x48BDF0, "`Sfx\Towners\Drunk27.wav`", 0);
apply_type (0x48BDF0, "extern char str_48BDF0[24];", TINFO_DEFINITE);
cleanup("str_48BE08");set_name(0x48BE08, "str_48BE08");
set_cmt(0x48BE08, "`Sfx\Towners\Drunk26.wav`", 0);
apply_type (0x48BE08, "extern char str_48BE08[24];", TINFO_DEFINITE);
cleanup("str_48BE20");set_name(0x48BE20, "str_48BE20");
set_cmt(0x48BE20, "`Sfx\Towners\Drunk25.wav`", 0);
apply_type (0x48BE20, "extern char str_48BE20[24];", TINFO_DEFINITE);
cleanup("str_48BE38");set_name(0x48BE38, "str_48BE38");
set_cmt(0x48BE38, "`Sfx\Towners\Drunk24.wav`", 0);
apply_type (0x48BE38, "extern char str_48BE38[24];", TINFO_DEFINITE);
cleanup("str_48BE50");set_name(0x48BE50, "str_48BE50");
set_cmt(0x48BE50, "`Sfx\Towners\Drunk23.wav`", 0);
apply_type (0x48BE50, "extern char str_48BE50[24];", TINFO_DEFINITE);
cleanup("str_48BE68");set_name(0x48BE68, "str_48BE68");
set_cmt(0x48BE68, "`Sfx\Towners\Drunk22.wav`", 0);
apply_type (0x48BE68, "extern char str_48BE68[24];", TINFO_DEFINITE);
cleanup("str_48BE80");set_name(0x48BE80, "str_48BE80");
set_cmt(0x48BE80, "`Sfx\Towners\Drunk21.wav`", 0);
apply_type (0x48BE80, "extern char str_48BE80[24];", TINFO_DEFINITE);
cleanup("str_48BE98");set_name(0x48BE98, "str_48BE98");
set_cmt(0x48BE98, "`Sfx\Towners\Drunk20.wav`", 0);
apply_type (0x48BE98, "extern char str_48BE98[24];", TINFO_DEFINITE);
cleanup("str_48BEB0");set_name(0x48BEB0, "str_48BEB0");
set_cmt(0x48BEB0, "`Sfx\Towners\Drunk19.wav`", 0);
apply_type (0x48BEB0, "extern char str_48BEB0[24];", TINFO_DEFINITE);
cleanup("str_48BEC8");set_name(0x48BEC8, "str_48BEC8");
set_cmt(0x48BEC8, "`Sfx\Towners\Drunk18.wav`", 0);
apply_type (0x48BEC8, "extern char str_48BEC8[24];", TINFO_DEFINITE);
cleanup("str_48BEE0");set_name(0x48BEE0, "str_48BEE0");
set_cmt(0x48BEE0, "`Sfx\Towners\Drunk17.wav`", 0);
apply_type (0x48BEE0, "extern char str_48BEE0[24];", TINFO_DEFINITE);
cleanup("str_48BEF8");set_name(0x48BEF8, "str_48BEF8");
set_cmt(0x48BEF8, "`Sfx\Towners\Drunk16.wav`", 0);
apply_type (0x48BEF8, "extern char str_48BEF8[24];", TINFO_DEFINITE);
cleanup("str_48BF10");set_name(0x48BF10, "str_48BF10");
set_cmt(0x48BF10, "`Sfx\Towners\Drunk15.wav`", 0);
apply_type (0x48BF10, "extern char str_48BF10[24];", TINFO_DEFINITE);
cleanup("str_48BF28");set_name(0x48BF28, "str_48BF28");
set_cmt(0x48BF28, "`Sfx\Towners\Drunk14.wav`", 0);
apply_type (0x48BF28, "extern char str_48BF28[24];", TINFO_DEFINITE);
cleanup("str_48BF40");set_name(0x48BF40, "str_48BF40");
set_cmt(0x48BF40, "`Sfx\Towners\Drunk13.wav`", 0);
apply_type (0x48BF40, "extern char str_48BF40[24];", TINFO_DEFINITE);
cleanup("str_48BF58");set_name(0x48BF58, "str_48BF58");
set_cmt(0x48BF58, "`Sfx\Towners\Drunk12.wav`", 0);
apply_type (0x48BF58, "extern char str_48BF58[24];", TINFO_DEFINITE);
cleanup("str_48BF70");set_name(0x48BF70, "str_48BF70");
set_cmt(0x48BF70, "`Sfx\Towners\Drunk11.wav`", 0);
apply_type (0x48BF70, "extern char str_48BF70[24];", TINFO_DEFINITE);
cleanup("str_48BF88");set_name(0x48BF88, "str_48BF88");
set_cmt(0x48BF88, "`Sfx\Towners\Drunk10.wav`", 0);
apply_type (0x48BF88, "extern char str_48BF88[24];", TINFO_DEFINITE);
cleanup("str_48BFA0");set_name(0x48BFA0, "str_48BFA0");
set_cmt(0x48BFA0, "`Sfx\Towners\Drunk09.wav`", 0);
apply_type (0x48BFA0, "extern char str_48BFA0[24];", TINFO_DEFINITE);
cleanup("str_48BFB8");set_name(0x48BFB8, "str_48BFB8");
set_cmt(0x48BFB8, "`Sfx\Towners\Drunk08.wav`", 0);
apply_type (0x48BFB8, "extern char str_48BFB8[24];", TINFO_DEFINITE);
cleanup("str_48BFD0");set_name(0x48BFD0, "str_48BFD0");
set_cmt(0x48BFD0, "`Sfx\Towners\Drunk07.wav`", 0);
apply_type (0x48BFD0, "extern char str_48BFD0[24];", TINFO_DEFINITE);
cleanup("str_48BFE8");set_name(0x48BFE8, "str_48BFE8");
set_cmt(0x48BFE8, "`Sfx\Towners\Drunk06.wav`", 0);
apply_type (0x48BFE8, "extern char str_48BFE8[24];", TINFO_DEFINITE);
cleanup("str_48C000");set_name(0x48C000, "str_48C000");
set_cmt(0x48C000, "`Sfx\Towners\Drunk05.wav`", 0);
apply_type (0x48C000, "extern char str_48C000[24];", TINFO_DEFINITE);
cleanup("str_48C018");set_name(0x48C018, "str_48C018");
set_cmt(0x48C018, "`Sfx\Towners\Drunk04.wav`", 0);
apply_type (0x48C018, "extern char str_48C018[24];", TINFO_DEFINITE);
cleanup("str_48C030");set_name(0x48C030, "str_48C030");
set_cmt(0x48C030, "`Sfx\Towners\Drunk03.wav`", 0);
apply_type (0x48C030, "extern char str_48C030[24];", TINFO_DEFINITE);
cleanup("str_48C048");set_name(0x48C048, "str_48C048");
set_cmt(0x48C048, "`Sfx\Towners\Drunk02.wav`", 0);
apply_type (0x48C048, "extern char str_48C048[24];", TINFO_DEFINITE);
cleanup("str_48C060");set_name(0x48C060, "str_48C060");
set_cmt(0x48C060, "`Sfx\Towners\Drunk01.wav`", 0);
apply_type (0x48C060, "extern char str_48C060[24];", TINFO_DEFINITE);
cleanup("str_48C078");set_name(0x48C078, "str_48C078");
set_cmt(0x48C078, "`Sfx\Towners\Deadguy2.wav`", 0);
apply_type (0x48C078, "extern char str_48C078[25];", TINFO_DEFINITE);
cleanup("str_48C094");set_name(0x48C094, "str_48C094");
set_cmt(0x48C094, "`Sfx\Towners\Cow2.wav`", 0);
apply_type (0x48C094, "extern char str_48C094[21];", TINFO_DEFINITE);
cleanup("str_48C0AC");set_name(0x48C0AC, "str_48C0AC");
set_cmt(0x48C0AC, "`Sfx\Towners\Cow1.wav`", 0);
apply_type (0x48C0AC, "extern char str_48C0AC[21];", TINFO_DEFINITE);
cleanup("str_48C0C4");set_name(0x48C0C4, "str_48C0C4");
set_cmt(0x48C0C4, "`Sfx\Towners\Bsmith56.wav`", 0);
apply_type (0x48C0C4, "extern char str_48C0C4[25];", TINFO_DEFINITE);
cleanup("str_48C0E0");set_name(0x48C0E0, "str_48C0E0");
set_cmt(0x48C0E0, "`Sfx\Towners\Bsmith55.wav`", 0);
apply_type (0x48C0E0, "extern char str_48C0E0[25];", TINFO_DEFINITE);
cleanup("str_48C0FC");set_name(0x48C0FC, "str_48C0FC");
set_cmt(0x48C0FC, "`Sfx\Towners\Bsmith54.wav`", 0);
apply_type (0x48C0FC, "extern char str_48C0FC[25];", TINFO_DEFINITE);
cleanup("str_48C118");set_name(0x48C118, "str_48C118");
set_cmt(0x48C118, "`Sfx\Towners\Bsmith53.wav`", 0);
apply_type (0x48C118, "extern char str_48C118[25];", TINFO_DEFINITE);
cleanup("str_48C134");set_name(0x48C134, "str_48C134");
set_cmt(0x48C134, "`Sfx\Towners\Bsmith52.wav`", 0);
apply_type (0x48C134, "extern char str_48C134[25];", TINFO_DEFINITE);
cleanup("str_48C150");set_name(0x48C150, "str_48C150");
set_cmt(0x48C150, "`Sfx\Towners\Bsmith51.wav`", 0);
apply_type (0x48C150, "extern char str_48C150[25];", TINFO_DEFINITE);
cleanup("str_48C16C");set_name(0x48C16C, "str_48C16C");
set_cmt(0x48C16C, "`Sfx\Towners\Bsmith50.wav`", 0);
apply_type (0x48C16C, "extern char str_48C16C[25];", TINFO_DEFINITE);
cleanup("str_48C188");set_name(0x48C188, "str_48C188");
set_cmt(0x48C188, "`Sfx\Towners\Bsmith49.wav`", 0);
apply_type (0x48C188, "extern char str_48C188[25];", TINFO_DEFINITE);
cleanup("str_48C1A4");set_name(0x48C1A4, "str_48C1A4");
set_cmt(0x48C1A4, "`Sfx\Towners\Bsmith48.wav`", 0);
apply_type (0x48C1A4, "extern char str_48C1A4[25];", TINFO_DEFINITE);
cleanup("str_48C1C0");set_name(0x48C1C0, "str_48C1C0");
set_cmt(0x48C1C0, "`Sfx\Towners\Bsmith47.wav`", 0);
apply_type (0x48C1C0, "extern char str_48C1C0[25];", TINFO_DEFINITE);
cleanup("str_48C1DC");set_name(0x48C1DC, "str_48C1DC");
set_cmt(0x48C1DC, "`Sfx\Towners\Bsmith46.wav`", 0);
apply_type (0x48C1DC, "extern char str_48C1DC[25];", TINFO_DEFINITE);
cleanup("str_48C1F8");set_name(0x48C1F8, "str_48C1F8");
set_cmt(0x48C1F8, "`Sfx\Towners\Bsmith45.wav`", 0);
apply_type (0x48C1F8, "extern char str_48C1F8[25];", TINFO_DEFINITE);
cleanup("str_48C214");set_name(0x48C214, "str_48C214");
set_cmt(0x48C214, "`Sfx\Towners\Bsmith44.wav`", 0);
apply_type (0x48C214, "extern char str_48C214[25];", TINFO_DEFINITE);
cleanup("str_48C230");set_name(0x48C230, "str_48C230");
set_cmt(0x48C230, "`Sfx\Towners\Bsmith43.wav`", 0);
apply_type (0x48C230, "extern char str_48C230[25];", TINFO_DEFINITE);
cleanup("str_48C24C");set_name(0x48C24C, "str_48C24C");
set_cmt(0x48C24C, "`Sfx\Towners\Bsmith42.wav`", 0);
apply_type (0x48C24C, "extern char str_48C24C[25];", TINFO_DEFINITE);
cleanup("str_48C268");set_name(0x48C268, "str_48C268");
set_cmt(0x48C268, "`Sfx\Towners\Bsmith41.wav`", 0);
apply_type (0x48C268, "extern char str_48C268[25];", TINFO_DEFINITE);
cleanup("str_48C284");set_name(0x48C284, "str_48C284");
set_cmt(0x48C284, "`Sfx\Towners\Bsmith40.wav`", 0);
apply_type (0x48C284, "extern char str_48C284[25];", TINFO_DEFINITE);
cleanup("str_48C2A0");set_name(0x48C2A0, "str_48C2A0");
set_cmt(0x48C2A0, "`Sfx\Towners\Bsmith39.wav`", 0);
apply_type (0x48C2A0, "extern char str_48C2A0[25];", TINFO_DEFINITE);
cleanup("str_48C2BC");set_name(0x48C2BC, "str_48C2BC");
set_cmt(0x48C2BC, "`Sfx\Towners\Bsmith38.wav`", 0);
apply_type (0x48C2BC, "extern char str_48C2BC[25];", TINFO_DEFINITE);
cleanup("str_48C2D8");set_name(0x48C2D8, "str_48C2D8");
set_cmt(0x48C2D8, "`Sfx\Towners\Bsmith37.wav`", 0);
apply_type (0x48C2D8, "extern char str_48C2D8[25];", TINFO_DEFINITE);
cleanup("str_48C2F4");set_name(0x48C2F4, "str_48C2F4");
set_cmt(0x48C2F4, "`Sfx\Towners\Bsmith36.wav`", 0);
apply_type (0x48C2F4, "extern char str_48C2F4[25];", TINFO_DEFINITE);
cleanup("str_48C310");set_name(0x48C310, "str_48C310");
set_cmt(0x48C310, "`Sfx\Towners\Bsmith35.wav`", 0);
apply_type (0x48C310, "extern char str_48C310[25];", TINFO_DEFINITE);
cleanup("str_48C32C");set_name(0x48C32C, "str_48C32C");
set_cmt(0x48C32C, "`Sfx\Towners\Bsmith34.wav`", 0);
apply_type (0x48C32C, "extern char str_48C32C[25];", TINFO_DEFINITE);
cleanup("str_48C348");set_name(0x48C348, "str_48C348");
set_cmt(0x48C348, "`Sfx\Towners\Bsmith33.wav`", 0);
apply_type (0x48C348, "extern char str_48C348[25];", TINFO_DEFINITE);
cleanup("str_48C364");set_name(0x48C364, "str_48C364");
set_cmt(0x48C364, "`Sfx\Towners\Bsmith32.wav`", 0);
apply_type (0x48C364, "extern char str_48C364[25];", TINFO_DEFINITE);
cleanup("str_48C380");set_name(0x48C380, "str_48C380");
set_cmt(0x48C380, "`Sfx\Towners\Bsmith31.wav`", 0);
apply_type (0x48C380, "extern char str_48C380[25];", TINFO_DEFINITE);
cleanup("str_48C39C");set_name(0x48C39C, "str_48C39C");
set_cmt(0x48C39C, "`Sfx\Towners\Bsmith30.wav`", 0);
apply_type (0x48C39C, "extern char str_48C39C[25];", TINFO_DEFINITE);
cleanup("str_48C3B8");set_name(0x48C3B8, "str_48C3B8");
set_cmt(0x48C3B8, "`Sfx\Towners\Bsmith29.wav`", 0);
apply_type (0x48C3B8, "extern char str_48C3B8[25];", TINFO_DEFINITE);
cleanup("str_48C3D4");set_name(0x48C3D4, "str_48C3D4");
set_cmt(0x48C3D4, "`Sfx\Towners\Bsmith28.wav`", 0);
apply_type (0x48C3D4, "extern char str_48C3D4[25];", TINFO_DEFINITE);
cleanup("str_48C3F0");set_name(0x48C3F0, "str_48C3F0");
set_cmt(0x48C3F0, "`Sfx\Towners\Bsmith27.wav`", 0);
apply_type (0x48C3F0, "extern char str_48C3F0[25];", TINFO_DEFINITE);
cleanup("str_48C40C");set_name(0x48C40C, "str_48C40C");
set_cmt(0x48C40C, "`Sfx\Towners\Bsmith26.wav`", 0);
apply_type (0x48C40C, "extern char str_48C40C[25];", TINFO_DEFINITE);
cleanup("str_48C428");set_name(0x48C428, "str_48C428");
set_cmt(0x48C428, "`Sfx\Towners\Bsmith25.wav`", 0);
apply_type (0x48C428, "extern char str_48C428[25];", TINFO_DEFINITE);
cleanup("str_48C444");set_name(0x48C444, "str_48C444");
set_cmt(0x48C444, "`Sfx\Towners\Bsmith24.wav`", 0);
apply_type (0x48C444, "extern char str_48C444[25];", TINFO_DEFINITE);
cleanup("str_48C460");set_name(0x48C460, "str_48C460");
set_cmt(0x48C460, "`Sfx\Towners\Bsmith23.wav`", 0);
apply_type (0x48C460, "extern char str_48C460[25];", TINFO_DEFINITE);
cleanup("str_48C47C");set_name(0x48C47C, "str_48C47C");
set_cmt(0x48C47C, "`Sfx\Towners\Bsmith22.wav`", 0);
apply_type (0x48C47C, "extern char str_48C47C[25];", TINFO_DEFINITE);
cleanup("str_48C498");set_name(0x48C498, "str_48C498");
set_cmt(0x48C498, "`Sfx\Towners\Bsmith21.wav`", 0);
apply_type (0x48C498, "extern char str_48C498[25];", TINFO_DEFINITE);
cleanup("str_48C4B4");set_name(0x48C4B4, "str_48C4B4");
set_cmt(0x48C4B4, "`Sfx\Towners\Bsmith20.wav`", 0);
apply_type (0x48C4B4, "extern char str_48C4B4[25];", TINFO_DEFINITE);
cleanup("str_48C4D0");set_name(0x48C4D0, "str_48C4D0");
set_cmt(0x48C4D0, "`Sfx\Towners\Bsmith19.wav`", 0);
apply_type (0x48C4D0, "extern char str_48C4D0[25];", TINFO_DEFINITE);
cleanup("str_48C4EC");set_name(0x48C4EC, "str_48C4EC");
set_cmt(0x48C4EC, "`Sfx\Towners\Bsmith18.wav`", 0);
apply_type (0x48C4EC, "extern char str_48C4EC[25];", TINFO_DEFINITE);
cleanup("str_48C508");set_name(0x48C508, "str_48C508");
set_cmt(0x48C508, "`Sfx\Towners\Bsmith17.wav`", 0);
apply_type (0x48C508, "extern char str_48C508[25];", TINFO_DEFINITE);
cleanup("str_48C524");set_name(0x48C524, "str_48C524");
set_cmt(0x48C524, "`Sfx\Towners\Bsmith16.wav`", 0);
apply_type (0x48C524, "extern char str_48C524[25];", TINFO_DEFINITE);
cleanup("str_48C540");set_name(0x48C540, "str_48C540");
set_cmt(0x48C540, "`Sfx\Towners\Bsmith15.wav`", 0);
apply_type (0x48C540, "extern char str_48C540[25];", TINFO_DEFINITE);
cleanup("str_48C55C");set_name(0x48C55C, "str_48C55C");
set_cmt(0x48C55C, "`Sfx\Towners\Bsmith14.wav`", 0);
apply_type (0x48C55C, "extern char str_48C55C[25];", TINFO_DEFINITE);
cleanup("str_48C578");set_name(0x48C578, "str_48C578");
set_cmt(0x48C578, "`Sfx\Towners\Bsmith13.wav`", 0);
apply_type (0x48C578, "extern char str_48C578[25];", TINFO_DEFINITE);
cleanup("str_48C594");set_name(0x48C594, "str_48C594");
set_cmt(0x48C594, "`Sfx\Towners\Bsmith12.wav`", 0);
apply_type (0x48C594, "extern char str_48C594[25];", TINFO_DEFINITE);
cleanup("str_48C5B0");set_name(0x48C5B0, "str_48C5B0");
set_cmt(0x48C5B0, "`Sfx\Towners\Bsmith11.wav`", 0);
apply_type (0x48C5B0, "extern char str_48C5B0[25];", TINFO_DEFINITE);
cleanup("str_48C5CC");set_name(0x48C5CC, "str_48C5CC");
set_cmt(0x48C5CC, "`Sfx\Towners\Bsmith10.wav`", 0);
apply_type (0x48C5CC, "extern char str_48C5CC[25];", TINFO_DEFINITE);
cleanup("str_48C5E8");set_name(0x48C5E8, "str_48C5E8");
set_cmt(0x48C5E8, "`Sfx\Towners\Bsmith09.wav`", 0);
apply_type (0x48C5E8, "extern char str_48C5E8[25];", TINFO_DEFINITE);
cleanup("str_48C604");set_name(0x48C604, "str_48C604");
set_cmt(0x48C604, "`Sfx\Towners\Bsmith08.wav`", 0);
apply_type (0x48C604, "extern char str_48C604[25];", TINFO_DEFINITE);
cleanup("str_48C620");set_name(0x48C620, "str_48C620");
set_cmt(0x48C620, "`Sfx\Towners\Bsmith07.wav`", 0);
apply_type (0x48C620, "extern char str_48C620[25];", TINFO_DEFINITE);
cleanup("str_48C63C");set_name(0x48C63C, "str_48C63C");
set_cmt(0x48C63C, "`Sfx\Towners\Bsmith06.wav`", 0);
apply_type (0x48C63C, "extern char str_48C63C[25];", TINFO_DEFINITE);
cleanup("str_48C658");set_name(0x48C658, "str_48C658");
set_cmt(0x48C658, "`Sfx\Towners\Bsmith05.wav`", 0);
apply_type (0x48C658, "extern char str_48C658[25];", TINFO_DEFINITE);
cleanup("str_48C674");set_name(0x48C674, "str_48C674");
set_cmt(0x48C674, "`Sfx\Towners\Bsmith04.wav`", 0);
apply_type (0x48C674, "extern char str_48C674[25];", TINFO_DEFINITE);
cleanup("str_48C690");set_name(0x48C690, "str_48C690");
set_cmt(0x48C690, "`Sfx\Towners\Bsmith03.wav`", 0);
apply_type (0x48C690, "extern char str_48C690[25];", TINFO_DEFINITE);
cleanup("str_48C6AC");set_name(0x48C6AC, "str_48C6AC");
set_cmt(0x48C6AC, "`Sfx\Towners\Bsmith02.wav`", 0);
apply_type (0x48C6AC, "extern char str_48C6AC[25];", TINFO_DEFINITE);
cleanup("str_48C6C8");set_name(0x48C6C8, "str_48C6C8");
set_cmt(0x48C6C8, "`Sfx\Towners\Bsmith01.wav`", 0);
apply_type (0x48C6C8, "extern char str_48C6C8[25];", TINFO_DEFINITE);
cleanup("str_48C6E4");set_name(0x48C6E4, "str_48C6E4");
set_cmt(0x48C6E4, "`Sfx\Towners\Bmaid40.wav`", 0);
apply_type (0x48C6E4, "extern char str_48C6E4[24];", TINFO_DEFINITE);
cleanup("str_48C6FC");set_name(0x48C6FC, "str_48C6FC");
set_cmt(0x48C6FC, "`Sfx\Towners\Bmaid39.wav`", 0);
apply_type (0x48C6FC, "extern char str_48C6FC[24];", TINFO_DEFINITE);
cleanup("str_48C714");set_name(0x48C714, "str_48C714");
set_cmt(0x48C714, "`Sfx\Towners\Bmaid38.wav`", 0);
apply_type (0x48C714, "extern char str_48C714[24];", TINFO_DEFINITE);
cleanup("str_48C72C");set_name(0x48C72C, "str_48C72C");
set_cmt(0x48C72C, "`Sfx\Towners\Bmaid37.wav`", 0);
apply_type (0x48C72C, "extern char str_48C72C[24];", TINFO_DEFINITE);
cleanup("str_48C744");set_name(0x48C744, "str_48C744");
set_cmt(0x48C744, "`Sfx\Towners\Bmaid36.wav`", 0);
apply_type (0x48C744, "extern char str_48C744[24];", TINFO_DEFINITE);
cleanup("str_48C75C");set_name(0x48C75C, "str_48C75C");
set_cmt(0x48C75C, "`Sfx\Towners\Bmaid35.wav`", 0);
apply_type (0x48C75C, "extern char str_48C75C[24];", TINFO_DEFINITE);
cleanup("str_48C774");set_name(0x48C774, "str_48C774");
set_cmt(0x48C774, "`Sfx\Towners\Bmaid34.wav`", 0);
apply_type (0x48C774, "extern char str_48C774[24];", TINFO_DEFINITE);
cleanup("str_48C78C");set_name(0x48C78C, "str_48C78C");
set_cmt(0x48C78C, "`Sfx\Towners\Bmaid33.wav`", 0);
apply_type (0x48C78C, "extern char str_48C78C[24];", TINFO_DEFINITE);
cleanup("str_48C7A4");set_name(0x48C7A4, "str_48C7A4");
set_cmt(0x48C7A4, "`Sfx\Towners\Bmaid32.wav`", 0);
apply_type (0x48C7A4, "extern char str_48C7A4[24];", TINFO_DEFINITE);
cleanup("str_48C7BC");set_name(0x48C7BC, "str_48C7BC");
set_cmt(0x48C7BC, "`Sfx\Towners\Bmaid31.wav`", 0);
apply_type (0x48C7BC, "extern char str_48C7BC[24];", TINFO_DEFINITE);
cleanup("str_48C7D4");set_name(0x48C7D4, "str_48C7D4");
set_cmt(0x48C7D4, "`Sfx\Towners\Bmaid30.wav`", 0);
apply_type (0x48C7D4, "extern char str_48C7D4[24];", TINFO_DEFINITE);
cleanup("str_48C7EC");set_name(0x48C7EC, "str_48C7EC");
set_cmt(0x48C7EC, "`Sfx\Towners\Bmaid29.wav`", 0);
apply_type (0x48C7EC, "extern char str_48C7EC[24];", TINFO_DEFINITE);
cleanup("str_48C804");set_name(0x48C804, "str_48C804");
set_cmt(0x48C804, "`Sfx\Towners\Bmaid28.wav`", 0);
apply_type (0x48C804, "extern char str_48C804[24];", TINFO_DEFINITE);
cleanup("str_48C81C");set_name(0x48C81C, "str_48C81C");
set_cmt(0x48C81C, "`Sfx\Towners\Bmaid27.wav`", 0);
apply_type (0x48C81C, "extern char str_48C81C[24];", TINFO_DEFINITE);
cleanup("str_48C834");set_name(0x48C834, "str_48C834");
set_cmt(0x48C834, "`Sfx\Towners\Bmaid26.wav`", 0);
apply_type (0x48C834, "extern char str_48C834[24];", TINFO_DEFINITE);
cleanup("str_48C84C");set_name(0x48C84C, "str_48C84C");
set_cmt(0x48C84C, "`Sfx\Towners\Bmaid25.wav`", 0);
apply_type (0x48C84C, "extern char str_48C84C[24];", TINFO_DEFINITE);
cleanup("str_48C864");set_name(0x48C864, "str_48C864");
set_cmt(0x48C864, "`Sfx\Towners\Bmaid24.wav`", 0);
apply_type (0x48C864, "extern char str_48C864[24];", TINFO_DEFINITE);
cleanup("str_48C87C");set_name(0x48C87C, "str_48C87C");
set_cmt(0x48C87C, "`Sfx\Towners\Bmaid23.wav`", 0);
apply_type (0x48C87C, "extern char str_48C87C[24];", TINFO_DEFINITE);
cleanup("str_48C894");set_name(0x48C894, "str_48C894");
set_cmt(0x48C894, "`Sfx\Towners\Bmaid22.wav`", 0);
apply_type (0x48C894, "extern char str_48C894[24];", TINFO_DEFINITE);
cleanup("str_48C8AC");set_name(0x48C8AC, "str_48C8AC");
set_cmt(0x48C8AC, "`Sfx\Towners\Bmaid21.wav`", 0);
apply_type (0x48C8AC, "extern char str_48C8AC[24];", TINFO_DEFINITE);
cleanup("str_48C8C4");set_name(0x48C8C4, "str_48C8C4");
set_cmt(0x48C8C4, "`Sfx\Towners\Bmaid20.wav`", 0);
apply_type (0x48C8C4, "extern char str_48C8C4[24];", TINFO_DEFINITE);
cleanup("str_48C8DC");set_name(0x48C8DC, "str_48C8DC");
set_cmt(0x48C8DC, "`Sfx\Towners\Bmaid19.wav`", 0);
apply_type (0x48C8DC, "extern char str_48C8DC[24];", TINFO_DEFINITE);
cleanup("str_48C8F4");set_name(0x48C8F4, "str_48C8F4");
set_cmt(0x48C8F4, "`Sfx\Towners\Bmaid18.wav`", 0);
apply_type (0x48C8F4, "extern char str_48C8F4[24];", TINFO_DEFINITE);
cleanup("str_48C90C");set_name(0x48C90C, "str_48C90C");
set_cmt(0x48C90C, "`Sfx\Towners\Bmaid17.wav`", 0);
apply_type (0x48C90C, "extern char str_48C90C[24];", TINFO_DEFINITE);
cleanup("str_48C924");set_name(0x48C924, "str_48C924");
set_cmt(0x48C924, "`Sfx\Towners\Bmaid16.wav`", 0);
apply_type (0x48C924, "extern char str_48C924[24];", TINFO_DEFINITE);
cleanup("str_48C93C");set_name(0x48C93C, "str_48C93C");
set_cmt(0x48C93C, "`Sfx\Towners\Bmaid15.wav`", 0);
apply_type (0x48C93C, "extern char str_48C93C[24];", TINFO_DEFINITE);
cleanup("str_48C954");set_name(0x48C954, "str_48C954");
set_cmt(0x48C954, "`Sfx\Towners\Bmaid14.wav`", 0);
apply_type (0x48C954, "extern char str_48C954[24];", TINFO_DEFINITE);
cleanup("str_48C96C");set_name(0x48C96C, "str_48C96C");
set_cmt(0x48C96C, "`Sfx\Towners\Bmaid13.wav`", 0);
apply_type (0x48C96C, "extern char str_48C96C[24];", TINFO_DEFINITE);
cleanup("str_48C984");set_name(0x48C984, "str_48C984");
set_cmt(0x48C984, "`Sfx\Towners\Bmaid12.wav`", 0);
apply_type (0x48C984, "extern char str_48C984[24];", TINFO_DEFINITE);
cleanup("str_48C99C");set_name(0x48C99C, "str_48C99C");
set_cmt(0x48C99C, "`Sfx\Towners\Bmaid11.wav`", 0);
apply_type (0x48C99C, "extern char str_48C99C[24];", TINFO_DEFINITE);
cleanup("str_48C9B4");set_name(0x48C9B4, "str_48C9B4");
set_cmt(0x48C9B4, "`Sfx\Towners\Bmaid10.wav`", 0);
apply_type (0x48C9B4, "extern char str_48C9B4[24];", TINFO_DEFINITE);
cleanup("str_48C9CC");set_name(0x48C9CC, "str_48C9CC");
set_cmt(0x48C9CC, "`Sfx\Towners\Bmaid09.wav`", 0);
apply_type (0x48C9CC, "extern char str_48C9CC[24];", TINFO_DEFINITE);
cleanup("str_48C9E4");set_name(0x48C9E4, "str_48C9E4");
set_cmt(0x48C9E4, "`Sfx\Towners\Bmaid08.wav`", 0);
apply_type (0x48C9E4, "extern char str_48C9E4[24];", TINFO_DEFINITE);
cleanup("str_48C9FC");set_name(0x48C9FC, "str_48C9FC");
set_cmt(0x48C9FC, "`Sfx\Towners\Bmaid07.wav`", 0);
apply_type (0x48C9FC, "extern char str_48C9FC[24];", TINFO_DEFINITE);
cleanup("str_48CA14");set_name(0x48CA14, "str_48CA14");
set_cmt(0x48CA14, "`Sfx\Towners\Bmaid06.wav`", 0);
apply_type (0x48CA14, "extern char str_48CA14[24];", TINFO_DEFINITE);
cleanup("str_48CA2C");set_name(0x48CA2C, "str_48CA2C");
set_cmt(0x48CA2C, "`Sfx\Towners\Bmaid05.wav`", 0);
apply_type (0x48CA2C, "extern char str_48CA2C[24];", TINFO_DEFINITE);
cleanup("str_48CA44");set_name(0x48CA44, "str_48CA44");
set_cmt(0x48CA44, "`Sfx\Towners\Bmaid04.wav`", 0);
apply_type (0x48CA44, "extern char str_48CA44[24];", TINFO_DEFINITE);
cleanup("str_48CA5C");set_name(0x48CA5C, "str_48CA5C");
set_cmt(0x48CA5C, "`Sfx\Towners\Bmaid03.wav`", 0);
apply_type (0x48CA5C, "extern char str_48CA5C[24];", TINFO_DEFINITE);
cleanup("str_48CA74");set_name(0x48CA74, "str_48CA74");
set_cmt(0x48CA74, "`Sfx\Towners\Bmaid02.wav`", 0);
apply_type (0x48CA74, "extern char str_48CA74[24];", TINFO_DEFINITE);
cleanup("str_48CA8C");set_name(0x48CA8C, "str_48CA8C");
set_cmt(0x48CA8C, "`Sfx\Towners\Bmaid01.wav`", 0);
apply_type (0x48CA8C, "extern char str_48CA8C[24];", TINFO_DEFINITE);
cleanup("str_48CAA4");set_name(0x48CAA4, "str_48CAA4");
set_cmt(0x48CAA4, "`Sfx\Misc\Wallstrt.wav`", 0);
apply_type (0x48CAA4, "extern char str_48CAA4[22];", TINFO_DEFINITE);
cleanup("str_48CABC");set_name(0x48CABC, "str_48CABC");
set_cmt(0x48CABC, "`Sfx\Misc\Wallloop.wav`", 0);
apply_type (0x48CABC, "extern char str_48CABC[22];", TINFO_DEFINITE);
cleanup("str_48CAD4");set_name(0x48CAD4, "str_48CAD4");
set_cmt(0x48CAD4, "`Sfx\Misc\Vtheft.wav`", 0);
apply_type (0x48CAD4, "extern char str_48CAD4[20];", TINFO_DEFINITE);
cleanup("str_48CAE8");set_name(0x48CAE8, "str_48CAE8");
set_cmt(0x48CAE8, "`Sfx\Misc\Teleport.wav`", 0);
apply_type (0x48CAE8, "extern char str_48CAE8[22];", TINFO_DEFINITE);
cleanup("str_48CB00");set_name(0x48CB00, "str_48CB00");
set_cmt(0x48CB00, "`Sfx\Misc\Trapdis.wav`", 0);
apply_type (0x48CB00, "extern char str_48CB00[21];", TINFO_DEFINITE);
cleanup("str_48CB18");set_name(0x48CB18, "str_48CB18");
set_cmt(0x48CB18, "`Sfx\Misc\Storm.wav`", 0);
apply_type (0x48CB18, "extern char str_48CB18[19];", TINFO_DEFINITE);
cleanup("str_48CB2C");set_name(0x48CB2C, "str_48CB2C");
set_cmt(0x48CB2C, "`Sfx\Misc\Spoutstr.wav`", 0);
apply_type (0x48CB2C, "extern char str_48CB2C[22];", TINFO_DEFINITE);
cleanup("str_48CB44");set_name(0x48CB44, "str_48CB44");
set_cmt(0x48CB44, "`Sfx\Misc\Spoutlop.wav`", 0);
apply_type (0x48CB44, "extern char str_48CB44[22];", TINFO_DEFINITE);
cleanup("str_48CB5C");set_name(0x48CB5C, "str_48CB5C");
set_cmt(0x48CB5C, "`Sfx\Misc\Soulfire.wav`", 0);
apply_type (0x48CB5C, "extern char str_48CB5C[22];", TINFO_DEFINITE);
cleanup("str_48CB74");set_name(0x48CB74, "str_48CB74");
set_cmt(0x48CB74, "`Sfx\Misc\Shatter.wav`", 0);
apply_type (0x48CB74, "extern char str_48CB74[21];", TINFO_DEFINITE);
cleanup("str_48CB8C");set_name(0x48CB8C, "str_48CB8C");
set_cmt(0x48CB8C, "`Sfx\Misc\Sentinel.wav`", 0);
apply_type (0x48CB8C, "extern char str_48CB8C[22];", TINFO_DEFINITE);
cleanup("str_48CBA4");set_name(0x48CBA4, "str_48CBA4");
set_cmt(0x48CBA4, "`Sfx\Misc\Scurimp.wav`", 0);
apply_type (0x48CBA4, "extern char str_48CBA4[21];", TINFO_DEFINITE);
cleanup("str_48CBBC");set_name(0x48CBBC, "str_48CBBC");
set_cmt(0x48CBBC, "`Sfx\Misc\Scurse.wav`", 0);
apply_type (0x48CBBC, "extern char str_48CBBC[20];", TINFO_DEFINITE);
cleanup("str_48CBD0");set_name(0x48CBD0, "str_48CBD0");
set_cmt(0x48CBD0, "`Sfx\Misc\Resur.wav`", 0);
apply_type (0x48CBD0, "extern char str_48CBD0[19];", TINFO_DEFINITE);
cleanup("str_48CBE4");set_name(0x48CBE4, "str_48CBE4");
set_cmt(0x48CBE4, "`Sfx\Misc\Puddle.wav`", 0);
apply_type (0x48CBE4, "extern char str_48CBE4[20];", TINFO_DEFINITE);
cleanup("str_48CBF8");set_name(0x48CBF8, "str_48CBF8");
set_cmt(0x48CBF8, "`Sfx\Misc\Portal.wav`", 0);
apply_type (0x48CBF8, "extern char str_48CBF8[20];", TINFO_DEFINITE);
cleanup("str_48CC0C");set_name(0x48CC0C, "str_48CC0C");
set_cmt(0x48CC0C, "`Sfx\Misc\Nova.wav`", 0);
apply_type (0x48CC0C, "extern char str_48CC0C[18];", TINFO_DEFINITE);
cleanup("str_48CC20");set_name(0x48CC20, "str_48CC20");
set_cmt(0x48CC20, "`Sfx\Misc\Mshield.wav`", 0);
apply_type (0x48CC20, "extern char str_48CC20[21];", TINFO_DEFINITE);
cleanup("str_48CC38");set_name(0x48CC38, "str_48CC38");
set_cmt(0x48CC38, "`Sfx\Misc\Ltning.wav`", 0);
apply_type (0x48CC38, "extern char str_48CC38[20];", TINFO_DEFINITE);
cleanup("str_48CC4C");set_name(0x48CC4C, "str_48CC4C");
set_cmt(0x48CC4C, "`Sfx\Misc\Lning1.wav`", 0);
apply_type (0x48CC4C, "extern char str_48CC4C[20];", TINFO_DEFINITE);
cleanup("str_48CC60");set_name(0x48CC60, "str_48CC60");
set_cmt(0x48CC60, "`Sfx\Misc\Invpot.wav`", 0);
apply_type (0x48CC60, "extern char str_48CC60[20];", TINFO_DEFINITE);
cleanup("str_48CC74");set_name(0x48CC74, "str_48CC74");
set_cmt(0x48CC74, "`Sfx\Misc\Invisibl.wav`", 0);
apply_type (0x48CC74, "extern char str_48CC74[22];", TINFO_DEFINITE);
cleanup("str_48CC8C");set_name(0x48CC8C, "str_48CC8C");
set_cmt(0x48CC8C, "`Sfx\Misc\Infravis.wav`", 0);
apply_type (0x48CC8C, "extern char str_48CC8C[22];", TINFO_DEFINITE);
cleanup("str_48CCA4");set_name(0x48CCA4, "str_48CCA4");
set_cmt(0x48CCA4, "`Sfx\Misc\Hyper.wav`", 0);
apply_type (0x48CCA4, "extern char str_48CCA4[19];", TINFO_DEFINITE);
cleanup("str_48CCB8");set_name(0x48CCB8, "str_48CCB8");
set_cmt(0x48CCB8, "`Sfx\Misc\Holybolt.wav`", 0);
apply_type (0x48CCB8, "extern char str_48CCB8[22];", TINFO_DEFINITE);
cleanup("str_48CCD0");set_name(0x48CCD0, "str_48CCD0");
set_cmt(0x48CCD0, "`Sfx\Misc\Grdlanch.wav`", 0);
apply_type (0x48CCD0, "extern char str_48CCD0[22];", TINFO_DEFINITE);
cleanup("str_48CCE8");set_name(0x48CCE8, "str_48CCE8");
set_cmt(0x48CCE8, "`Sfx\Misc\Guard.wav`", 0);
apply_type (0x48CCE8, "extern char str_48CCE8[19];", TINFO_DEFINITE);
cleanup("str_48CCFC");set_name(0x48CCFC, "str_48CCFC");
set_cmt(0x48CCFC, "`Sfx\Misc\Gshrine.wav`", 0);
apply_type (0x48CCFC, "extern char str_48CCFC[21];", TINFO_DEFINITE);
cleanup("str_48CD14");set_name(0x48CD14, "str_48CD14");
set_cmt(0x48CD14, "`Sfx\Misc\Golumded.wav`", 0);
apply_type (0x48CD14, "extern char str_48CD14[22];", TINFO_DEFINITE);
cleanup("str_48CD2C");set_name(0x48CD2C, "str_48CD2C");
set_cmt(0x48CD2C, "`Sfx\Misc\Golum.wav`", 0);
apply_type (0x48CD2C, "extern char str_48CD2C[19];", TINFO_DEFINITE);
cleanup("str_48CD40");set_name(0x48CD40, "str_48CD40");
set_cmt(0x48CD40, "`Sfx\Misc\Fountain.wav`", 0);
apply_type (0x48CD40, "extern char str_48CD40[22];", TINFO_DEFINITE);
cleanup("str_48CD58");set_name(0x48CD58, "str_48CD58");
set_cmt(0x48CD58, "`Sfx\Misc\Flash.wav`", 0);
apply_type (0x48CD58, "extern char str_48CD58[19];", TINFO_DEFINITE);
cleanup("str_48CD6C");set_name(0x48CD6C, "str_48CD6C");
set_cmt(0x48CD6C, "`Sfx\Misc\Flamwave.wav`", 0);
apply_type (0x48CD6C, "extern char str_48CD6C[22];", TINFO_DEFINITE);
cleanup("str_48CD84");set_name(0x48CD84, "str_48CD84");
set_cmt(0x48CD84, "`Sfx\Misc\Firimp2.wav`", 0);
apply_type (0x48CD84, "extern char str_48CD84[21];", TINFO_DEFINITE);
cleanup("str_48CD9C");set_name(0x48CD9C, "str_48CD9C");
set_cmt(0x48CD9C, "`Sfx\Misc\Firimp1.wav`", 0);
apply_type (0x48CD9C, "extern char str_48CD9C[21];", TINFO_DEFINITE);
cleanup("str_48CDB4");set_name(0x48CDB4, "str_48CDB4");
set_cmt(0x48CDB4, "`Sfx\Misc\Fbolt2.wav`", 0);
apply_type (0x48CDB4, "extern char str_48CDB4[20];", TINFO_DEFINITE);
cleanup("str_48CDC8");set_name(0x48CDC8, "str_48CDC8");
set_cmt(0x48CDC8, "`Sfx\Misc\Fbolt1.wav`", 0);
apply_type (0x48CDC8, "extern char str_48CDC8[20];", TINFO_DEFINITE);
cleanup("str_48CDDC");set_name(0x48CDDC, "str_48CDDC");
set_cmt(0x48CDDC, "`Sfx\Misc\Fball.wav`", 0);
apply_type (0x48CDDC, "extern char str_48CDDC[19];", TINFO_DEFINITE);
cleanup("str_48CDF0");set_name(0x48CDF0, "str_48CDF0");
set_cmt(0x48CDF0, "`Sfx\Misc\Ethereal.wav`", 0);
apply_type (0x48CDF0, "extern char str_48CDF0[22];", TINFO_DEFINITE);
cleanup("str_48CE08");set_name(0x48CE08, "str_48CE08");
set_cmt(0x48CE08, "`Sfx\Misc\Elementl.wav`", 0);
apply_type (0x48CE08, "extern char str_48CE08[22];", TINFO_DEFINITE);
cleanup("str_48CE20");set_name(0x48CE20, "str_48CE20");
set_cmt(0x48CE20, "`Sfx\Misc\Elecimp1.wav`", 0);
apply_type (0x48CE20, "extern char str_48CE20[22];", TINFO_DEFINITE);
cleanup("str_48CE38");set_name(0x48CE38, "str_48CE38");
set_cmt(0x48CE38, "`Sfx\Misc\DSerp.wav`", 0);
apply_type (0x48CE38, "extern char str_48CE38[19];", TINFO_DEFINITE);
cleanup("str_48CE4C");set_name(0x48CE4C, "str_48CE4C");
set_cmt(0x48CE4C, "`Sfx\Misc\Chltning.wav`", 0);
apply_type (0x48CE4C, "extern char str_48CE4C[22];", TINFO_DEFINITE);
cleanup("str_48CE64");set_name(0x48CE64, "str_48CE64");
set_cmt(0x48CE64, "`Sfx\Misc\Cbolt.wav`", 0);
apply_type (0x48CE64, "extern char str_48CE64[19];", TINFO_DEFINITE);
cleanup("str_48CE78");set_name(0x48CE78, "str_48CE78");
set_cmt(0x48CE78, "`Sfx\Misc\Caldron.wav`", 0);
apply_type (0x48CE78, "extern char str_48CE78[21];", TINFO_DEFINITE);
cleanup("str_48CE90");set_name(0x48CE90, "str_48CE90");
set_cmt(0x48CE90, "`Sfx\Misc\Bsimpct.wav`", 0);
apply_type (0x48CE90, "extern char str_48CE90[21];", TINFO_DEFINITE);
cleanup("str_48CEA8");set_name(0x48CEA8, "str_48CEA8");
set_cmt(0x48CEA8, "`Sfx\Misc\Bonesp.wav`", 0);
apply_type (0x48CEA8, "extern char str_48CEA8[20];", TINFO_DEFINITE);
cleanup("str_48CEBC");set_name(0x48CEBC, "str_48CEBC");
set_cmt(0x48CEBC, "`Sfx\Misc\Blsimpt.wav`", 0);
apply_type (0x48CEBC, "extern char str_48CEBC[21];", TINFO_DEFINITE);
cleanup("str_48CED4");set_name(0x48CED4, "str_48CED4");
set_cmt(0x48CED4, "`Sfx\Misc\Blodstar.wav`", 0);
apply_type (0x48CED4, "extern char str_48CED4[22];", TINFO_DEFINITE);
cleanup("str_48CEEC");set_name(0x48CEEC, "str_48CEEC");
set_cmt(0x48CEEC, "`Sfx\Misc\Bldboil.wav`", 0);
apply_type (0x48CEEC, "extern char str_48CEEC[21];", TINFO_DEFINITE);
cleanup("str_48CF04");set_name(0x48CF04, "str_48CF04");
set_cmt(0x48CF04, "`Sfx\Misc\Arrowall.wav`", 0);
apply_type (0x48CF04, "extern char str_48CF04[22];", TINFO_DEFINITE);
cleanup("str_48CF1C");set_name(0x48CF1C, "str_48CF1C");
set_cmt(0x48CF1C, "`Sfx\Misc\Apoc.wav`", 0);
apply_type (0x48CF1C, "extern char str_48CF1C[18];", TINFO_DEFINITE);
cleanup("str_48CF30");set_name(0x48CF30, "str_48CF30");
set_cmt(0x48CF30, "`Sfx\Misc\Acids2.wav`", 0);
apply_type (0x48CF30, "extern char str_48CF30[20];", TINFO_DEFINITE);
cleanup("str_48CF44");set_name(0x48CF44, "str_48CF44");
set_cmt(0x48CF44, "`Sfx\Misc\Acids1.wav`", 0);
apply_type (0x48CF44, "extern char str_48CF44[20];", TINFO_DEFINITE);
cleanup("str_48CF58");set_name(0x48CF58, "str_48CF58");
set_cmt(0x48CF58, "`Sfx\Misc\Repair.wav`", 0);
apply_type (0x48CF58, "extern char str_48CF58[20];", TINFO_DEFINITE);
cleanup("str_48CF6C");set_name(0x48CF6C, "str_48CF6C");
set_cmt(0x48CF6C, "`Sfx\Misc\Healing.wav`", 0);
apply_type (0x48CF6C, "extern char str_48CF6C[21];", TINFO_DEFINITE);
cleanup("str_48CF84");set_name(0x48CF84, "str_48CF84");
set_cmt(0x48CF84, "`Sfx\Misc\Cast9.wav`", 0);
apply_type (0x48CF84, "extern char str_48CF84[19];", TINFO_DEFINITE);
cleanup("str_48CF98");set_name(0x48CF98, "str_48CF98");
set_cmt(0x48CF98, "`Sfx\Misc\Cast8.wav`", 0);
apply_type (0x48CF98, "extern char str_48CF98[19];", TINFO_DEFINITE);
cleanup("str_48CFAC");set_name(0x48CFAC, "str_48CFAC");
set_cmt(0x48CFAC, "`Sfx\Misc\Cast7.wav`", 0);
apply_type (0x48CFAC, "extern char str_48CFAC[19];", TINFO_DEFINITE);
cleanup("str_48CFC0");set_name(0x48CFC0, "str_48CFC0");
set_cmt(0x48CFC0, "`Sfx\Misc\Cast6.wav`", 0);
apply_type (0x48CFC0, "extern char str_48CFC0[19];", TINFO_DEFINITE);
cleanup("str_48CFD4");set_name(0x48CFD4, "str_48CFD4");
set_cmt(0x48CFD4, "`Sfx\Misc\Cast5.wav`", 0);
apply_type (0x48CFD4, "extern char str_48CFD4[19];", TINFO_DEFINITE);
cleanup("str_48CFE8");set_name(0x48CFE8, "str_48CFE8");
set_cmt(0x48CFE8, "`Sfx\Misc\Cast4.wav`", 0);
apply_type (0x48CFE8, "extern char str_48CFE8[19];", TINFO_DEFINITE);
cleanup("str_48CFFC");set_name(0x48CFFC, "str_48CFFC");
set_cmt(0x48CFFC, "`Sfx\Misc\Cast3.wav`", 0);
apply_type (0x48CFFC, "extern char str_48CFFC[19];", TINFO_DEFINITE);
cleanup("str_48D010");set_name(0x48D010, "str_48D010");
set_cmt(0x48D010, "`Sfx\Misc\Cast2.wav`", 0);
apply_type (0x48D010, "extern char str_48D010[19];", TINFO_DEFINITE);
cleanup("str_48D024");set_name(0x48D024, "str_48D024");
set_cmt(0x48D024, "`Sfx\Misc\Cast12.wav`", 0);
apply_type (0x48D024, "extern char str_48D024[20];", TINFO_DEFINITE);
cleanup("str_48D038");set_name(0x48D038, "str_48D038");
set_cmt(0x48D038, "`Sfx\Misc\Cast10.wav`", 0);
apply_type (0x48D038, "extern char str_48D038[20];", TINFO_DEFINITE);
cleanup("str_48D04C");set_name(0x48D04C, "str_48D04C");
set_cmt(0x48D04C, "`Sfx\Misc\Cast1.wav`", 0);
apply_type (0x48D04C, "extern char str_48D04C[19];", TINFO_DEFINITE);
cleanup("str_48D060");set_name(0x48D060, "str_48D060");
set_cmt(0x48D060, "`Sfx\Items\Trap.wav`", 0);
apply_type (0x48D060, "extern char str_48D060[19];", TINFO_DEFINITE);
cleanup("str_48D074");set_name(0x48D074, "str_48D074");
set_cmt(0x48D074, "`Sfx\Misc\blank.wav`", 0);
apply_type (0x48D074, "extern char str_48D074[19];", TINFO_DEFINITE);
cleanup("str_48D088");set_name(0x48D088, "str_48D088");
set_cmt(0x48D088, "`Sfx\Items\Titlslct.wav`", 0);
apply_type (0x48D088, "extern char str_48D088[23];", TINFO_DEFINITE);
cleanup("str_48D0A0");set_name(0x48D0A0, "str_48D0A0");
set_cmt(0x48D0A0, "`Sfx\Items\Titlemov.wav`", 0);
apply_type (0x48D0A0, "extern char str_48D0A0[23];", TINFO_DEFINITE);
cleanup("str_48D0B8");set_name(0x48D0B8, "str_48D0B8");
set_cmt(0x48D0B8, "`Sfx\Items\Swrdfkd.wav`", 0);
apply_type (0x48D0B8, "extern char str_48D0B8[22];", TINFO_DEFINITE);
cleanup("str_48D0D0");set_name(0x48D0D0, "str_48D0D0");
set_cmt(0x48D0D0, "`Sfx\Items\Shielfkd.wav`", 0);
apply_type (0x48D0D0, "extern char str_48D0D0[23];", TINFO_DEFINITE);
cleanup("str_48D0E8");set_name(0x48D0E8, "str_48D0E8");
set_cmt(0x48D0E8, "`Sfx\Items\Sarc.wav`", 0);
apply_type (0x48D0E8, "extern char str_48D0E8[19];", TINFO_DEFINITE);
cleanup("str_48D0FC");set_name(0x48D0FC, "str_48D0FC");
set_cmt(0x48D0FC, "`Sfx\Items\Readbook.wav`", 0);
apply_type (0x48D0FC, "extern char str_48D0FC[23];", TINFO_DEFINITE);
cleanup("str_48D114");set_name(0x48D114, "str_48D114");
set_cmt(0x48D114, "`Sfx\Items\Magic1.wav`", 0);
apply_type (0x48D114, "extern char str_48D114[21];", TINFO_DEFINITE);
cleanup("str_48D12C");set_name(0x48D12C, "str_48D12C");
set_cmt(0x48D12C, "`Sfx\Items\Magic.wav`", 0);
apply_type (0x48D12C, "extern char str_48D12C[20];", TINFO_DEFINITE);
cleanup("str_48D140");set_name(0x48D140, "str_48D140");
set_cmt(0x48D140, "`Sfx\Items\Lever.wav`", 0);
apply_type (0x48D140, "extern char str_48D140[20];", TINFO_DEFINITE);
cleanup("str_48D154");set_name(0x48D154, "str_48D154");
set_cmt(0x48D154, "`Sfx\Items\Invsword.wav`", 0);
apply_type (0x48D154, "extern char str_48D154[23];", TINFO_DEFINITE);
cleanup("str_48D16C");set_name(0x48D16C, "str_48D16C");
set_cmt(0x48D16C, "`Sfx\Items\Invstaf.wav`", 0);
apply_type (0x48D16C, "extern char str_48D16C[22];", TINFO_DEFINITE);
cleanup("str_48D184");set_name(0x48D184, "str_48D184");
set_cmt(0x48D184, "`Sfx\Items\Invsign.wav`", 0);
apply_type (0x48D184, "extern char str_48D184[22];", TINFO_DEFINITE);
cleanup("str_48D19C");set_name(0x48D19C, "str_48D19C");
set_cmt(0x48D19C, "`Sfx\Items\Invshiel.wav`", 0);
apply_type (0x48D19C, "extern char str_48D19C[23];", TINFO_DEFINITE);
cleanup("str_48D1B4");set_name(0x48D1B4, "str_48D1B4");
set_cmt(0x48D1B4, "`Sfx\Items\Invscrol.wav`", 0);
apply_type (0x48D1B4, "extern char str_48D1B4[23];", TINFO_DEFINITE);
cleanup("str_48D1CC");set_name(0x48D1CC, "str_48D1CC");
set_cmt(0x48D1CC, "`Sfx\Items\Invrock.wav`", 0);
apply_type (0x48D1CC, "extern char str_48D1CC[22];", TINFO_DEFINITE);
cleanup("str_48D1E4");set_name(0x48D1E4, "str_48D1E4");
set_cmt(0x48D1E4, "`Sfx\Items\Invring.wav`", 0);
apply_type (0x48D1E4, "extern char str_48D1E4[22];", TINFO_DEFINITE);
cleanup("str_48D1FC");set_name(0x48D1FC, "str_48D1FC");
set_cmt(0x48D1FC, "`Sfx\Items\Invpot.wav`", 0);
apply_type (0x48D1FC, "extern char str_48D1FC[21];", TINFO_DEFINITE);
cleanup("str_48D214");set_name(0x48D214, "str_48D214");
set_cmt(0x48D214, "`Sfx\Items\Invmush.wav`", 0);
apply_type (0x48D214, "extern char str_48D214[22];", TINFO_DEFINITE);
cleanup("str_48D22C");set_name(0x48D22C, "str_48D22C");
set_cmt(0x48D22C, "`Sfx\Items\Invlarm.wav`", 0);
apply_type (0x48D22C, "extern char str_48D22C[22];", TINFO_DEFINITE);
cleanup("str_48D244");set_name(0x48D244, "str_48D244");
set_cmt(0x48D244, "`Sfx\Items\Invharm.wav`", 0);
apply_type (0x48D244, "extern char str_48D244[22];", TINFO_DEFINITE);
cleanup("str_48D25C");set_name(0x48D25C, "str_48D25C");
set_cmt(0x48D25C, "`Sfx\Items\Invgrab.wav`", 0);
apply_type (0x48D25C, "extern char str_48D25C[22];", TINFO_DEFINITE);
cleanup("str_48D274");set_name(0x48D274, "str_48D274");
set_cmt(0x48D274, "`Sfx\Items\Invcap.wav`", 0);
apply_type (0x48D274, "extern char str_48D274[21];", TINFO_DEFINITE);
cleanup("str_48D28C");set_name(0x48D28C, "str_48D28C");
set_cmt(0x48D28C, "`Sfx\Items\Invbow.wav`", 0);
apply_type (0x48D28C, "extern char str_48D28C[21];", TINFO_DEFINITE);
cleanup("str_48D2A4");set_name(0x48D2A4, "str_48D2A4");
set_cmt(0x48D2A4, "`Sfx\Items\Invbook.wav`", 0);
apply_type (0x48D2A4, "extern char str_48D2A4[22];", TINFO_DEFINITE);
cleanup("str_48D2BC");set_name(0x48D2BC, "str_48D2BC");
set_cmt(0x48D2BC, "`Sfx\Items\Invbody.wav`", 0);
apply_type (0x48D2BC, "extern char str_48D2BC[22];", TINFO_DEFINITE);
cleanup("str_48D2D4");set_name(0x48D2D4, "str_48D2D4");
set_cmt(0x48D2D4, "`Sfx\Items\Invblst.wav`", 0);
apply_type (0x48D2D4, "extern char str_48D2D4[22];", TINFO_DEFINITE);
cleanup("str_48D2EC");set_name(0x48D2EC, "str_48D2EC");
set_cmt(0x48D2EC, "`Sfx\Items\Invaxe.wav`", 0);
apply_type (0x48D2EC, "extern char str_48D2EC[21];", TINFO_DEFINITE);
cleanup("str_48D304");set_name(0x48D304, "str_48D304");
set_cmt(0x48D304, "`Sfx\Items\Invanvl.wav`", 0);
apply_type (0x48D304, "extern char str_48D304[22];", TINFO_DEFINITE);
cleanup("str_48D31C");set_name(0x48D31C, "str_48D31C");
set_cmt(0x48D31C, "`Sfx\Items\Hlmtfkd.wav`", 0);
apply_type (0x48D31C, "extern char str_48D31C[22];", TINFO_DEFINITE);
cleanup("str_48D334");set_name(0x48D334, "str_48D334");
set_cmt(0x48D334, "`Sfx\Items\Gold.wav`", 0);
apply_type (0x48D334, "extern char str_48D334[19];", TINFO_DEFINITE);
cleanup("str_48D348");set_name(0x48D348, "str_48D348");
set_cmt(0x48D348, "`Sfx\Items\Flipswor.wav`", 0);
apply_type (0x48D348, "extern char str_48D348[23];", TINFO_DEFINITE);
cleanup("str_48D360");set_name(0x48D360, "str_48D360");
set_cmt(0x48D360, "`Sfx\Items\Flipstaf.wav`", 0);
apply_type (0x48D360, "extern char str_48D360[23];", TINFO_DEFINITE);
cleanup("str_48D378");set_name(0x48D378, "str_48D378");
set_cmt(0x48D378, "`Sfx\Items\Flipsign.wav`", 0);
apply_type (0x48D378, "extern char str_48D378[23];", TINFO_DEFINITE);
cleanup("str_48D390");set_name(0x48D390, "str_48D390");
set_cmt(0x48D390, "`Sfx\Items\Flipshld.wav`", 0);
apply_type (0x48D390, "extern char str_48D390[23];", TINFO_DEFINITE);
cleanup("str_48D3A8");set_name(0x48D3A8, "str_48D3A8");
set_cmt(0x48D3A8, "`Sfx\Items\Flipscrl.wav`", 0);
apply_type (0x48D3A8, "extern char str_48D3A8[23];", TINFO_DEFINITE);
cleanup("str_48D3C0");set_name(0x48D3C0, "str_48D3C0");
set_cmt(0x48D3C0, "`Sfx\Items\Fliprock.wav`", 0);
apply_type (0x48D3C0, "extern char str_48D3C0[23];", TINFO_DEFINITE);
cleanup("str_48D3D8");set_name(0x48D3D8, "str_48D3D8");
set_cmt(0x48D3D8, "`Sfx\Items\Flipring.wav`", 0);
apply_type (0x48D3D8, "extern char str_48D3D8[23];", TINFO_DEFINITE);
cleanup("str_48D3F0");set_name(0x48D3F0, "str_48D3F0");
set_cmt(0x48D3F0, "`Sfx\Items\Flippot.wav`", 0);
apply_type (0x48D3F0, "extern char str_48D3F0[22];", TINFO_DEFINITE);
cleanup("str_48D408");set_name(0x48D408, "str_48D408");
set_cmt(0x48D408, "`Sfx\Items\Flipmush.wav`", 0);
apply_type (0x48D408, "extern char str_48D408[23];", TINFO_DEFINITE);
cleanup("str_48D420");set_name(0x48D420, "str_48D420");
set_cmt(0x48D420, "`Sfx\Items\Flipmag1.wav`", 0);
apply_type (0x48D420, "extern char str_48D420[23];", TINFO_DEFINITE);
cleanup("str_48D438");set_name(0x48D438, "str_48D438");
set_cmt(0x48D438, "`Sfx\Items\Flipmag.wav`", 0);
apply_type (0x48D438, "extern char str_48D438[22];", TINFO_DEFINITE);
cleanup("str_48D450");set_name(0x48D450, "str_48D450");
set_cmt(0x48D450, "`Sfx\Items\Fliplarm.wav`", 0);
apply_type (0x48D450, "extern char str_48D450[23];", TINFO_DEFINITE);
cleanup("str_48D468");set_name(0x48D468, "str_48D468");
set_cmt(0x48D468, "`Sfx\Items\Flipharm.wav`", 0);
apply_type (0x48D468, "extern char str_48D468[23];", TINFO_DEFINITE);
cleanup("str_48D480");set_name(0x48D480, "str_48D480");
set_cmt(0x48D480, "`Sfx\Items\Flipcap.wav`", 0);
apply_type (0x48D480, "extern char str_48D480[22];", TINFO_DEFINITE);
cleanup("str_48D498");set_name(0x48D498, "str_48D498");
set_cmt(0x48D498, "`Sfx\Items\Flipbow.wav`", 0);
apply_type (0x48D498, "extern char str_48D498[22];", TINFO_DEFINITE);
cleanup("str_48D4B0");set_name(0x48D4B0, "str_48D4B0");
set_cmt(0x48D4B0, "`Sfx\Items\Flipbook.wav`", 0);
apply_type (0x48D4B0, "extern char str_48D4B0[23];", TINFO_DEFINITE);
cleanup("str_48D4C8");set_name(0x48D4C8, "str_48D4C8");
set_cmt(0x48D4C8, "`Sfx\Items\Flipbody.wav`", 0);
apply_type (0x48D4C8, "extern char str_48D4C8[23];", TINFO_DEFINITE);
cleanup("str_48D4E0");set_name(0x48D4E0, "str_48D4E0");
set_cmt(0x48D4E0, "`Sfx\Items\Flipblst.wav`", 0);
apply_type (0x48D4E0, "extern char str_48D4E0[23];", TINFO_DEFINITE);
cleanup("str_48D4F8");set_name(0x48D4F8, "str_48D4F8");
set_cmt(0x48D4F8, "`Sfx\Items\Flipaxe.wav`", 0);
apply_type (0x48D4F8, "extern char str_48D4F8[22];", TINFO_DEFINITE);
cleanup("str_48D510");set_name(0x48D510, "str_48D510");
set_cmt(0x48D510, "`Sfx\Items\Flipanvl.wav`", 0);
apply_type (0x48D510, "extern char str_48D510[23];", TINFO_DEFINITE);
cleanup("str_48D528");set_name(0x48D528, "str_48D528");
set_cmt(0x48D528, "`Sfx\Items\Dooropen.wav`", 0);
apply_type (0x48D528, "extern char str_48D528[23];", TINFO_DEFINITE);
cleanup("str_48D540");set_name(0x48D540, "str_48D540");
set_cmt(0x48D540, "`Sfx\Items\Doorclos.wav`", 0);
apply_type (0x48D540, "extern char str_48D540[23];", TINFO_DEFINITE);
cleanup("str_48D558");set_name(0x48D558, "str_48D558");
set_cmt(0x48D558, "`Sfx\Items\Chest.wav`", 0);
apply_type (0x48D558, "extern char str_48D558[20];", TINFO_DEFINITE);
cleanup("str_48D56C");set_name(0x48D56C, "str_48D56C");
set_cmt(0x48D56C, "`Sfx\Items\Bhit1.wav`", 0);
apply_type (0x48D56C, "extern char str_48D56C[20];", TINFO_DEFINITE);
cleanup("str_48D580");set_name(0x48D580, "str_48D580");
set_cmt(0x48D580, "`Sfx\Items\Bhit.wav`", 0);
apply_type (0x48D580, "extern char str_48D580[19];", TINFO_DEFINITE);
cleanup("str_48D594");set_name(0x48D594, "str_48D594");
set_cmt(0x48D594, "`Sfx\Items\Barrel.wav`", 0);
apply_type (0x48D594, "extern char str_48D594[21];", TINFO_DEFINITE);
cleanup("str_48D5AC");set_name(0x48D5AC, "str_48D5AC");
set_cmt(0x48D5AC, "`Sfx\Items\Barlfire.wav`", 0);
apply_type (0x48D5AC, "extern char str_48D5AC[23];", TINFO_DEFINITE);
cleanup("str_48D5C4");set_name(0x48D5C4, "str_48D5C4");
set_cmt(0x48D5C4, "`Sfx\Items\Armrfkd.wav`", 0);
apply_type (0x48D5C4, "extern char str_48D5C4[22];", TINFO_DEFINITE);
cleanup("str_48D5DC");set_name(0x48D5DC, "str_48D5DC");
set_cmt(0x48D5DC, "`Sfx\Misc\Questdon.wav`", 0);
apply_type (0x48D5DC, "extern char str_48D5DC[22];", TINFO_DEFINITE);
cleanup("str_48D5F4");set_name(0x48D5F4, "str_48D5F4");
set_cmt(0x48D5F4, "`Sfx\Misc\Dead.wav`", 0);
apply_type (0x48D5F4, "extern char str_48D5F4[18];", TINFO_DEFINITE);
cleanup("str_48D608");set_name(0x48D608, "str_48D608");
set_cmt(0x48D608, "`Sfx\Misc\Swing2.wav`", 0);
apply_type (0x48D608, "extern char str_48D608[20];", TINFO_DEFINITE);
cleanup("str_48D61C");set_name(0x48D61C, "str_48D61C");
set_cmt(0x48D61C, "`Sfx\Misc\Swing.wav`", 0);
apply_type (0x48D61C, "extern char str_48D61C[19];", TINFO_DEFINITE);
cleanup("str_48D630");set_name(0x48D630, "str_48D630");
set_cmt(0x48D630, "`Sfx\Misc\Lghit1.wav`", 0);
apply_type (0x48D630, "extern char str_48D630[20];", TINFO_DEFINITE);
cleanup("str_48D644");set_name(0x48D644, "str_48D644");
set_cmt(0x48D644, "`Sfx\Misc\Lghit.wav`", 0);
apply_type (0x48D644, "extern char str_48D644[19];", TINFO_DEFINITE);
cleanup("str_48D658");set_name(0x48D658, "str_48D658");
set_cmt(0x48D658, "`Sfx\Misc\Tmag.wav`", 0);
apply_type (0x48D658, "extern char str_48D658[18];", TINFO_DEFINITE);
cleanup("str_48D66C");set_name(0x48D66C, "str_48D66C");
set_cmt(0x48D66C, "`Sfx\Misc\Fmag.wav`", 0);
apply_type (0x48D66C, "extern char str_48D66C[18];", TINFO_DEFINITE);
cleanup("str_48D680");set_name(0x48D680, "str_48D680");
set_cmt(0x48D680, "`Sfx\Misc\BFire.wav`", 0);
apply_type (0x48D680, "extern char str_48D680[19];", TINFO_DEFINITE);
cleanup("str_48D694");set_name(0x48D694, "str_48D694");
set_cmt(0x48D694, "`Sfx\Misc\Walk4.wav`", 0);
apply_type (0x48D694, "extern char str_48D694[19];", TINFO_DEFINITE);
cleanup("str_48D6A8");set_name(0x48D6A8, "str_48D6A8");
set_cmt(0x48D6A8, "`Sfx\Misc\Walk3.wav`", 0);
apply_type (0x48D6A8, "extern char str_48D6A8[19];", TINFO_DEFINITE);
cleanup("str_48D6BC");set_name(0x48D6BC, "str_48D6BC");
set_cmt(0x48D6BC, "`Sfx\Misc\Walk2.wav`", 0);
apply_type (0x48D6BC, "extern char str_48D6BC[19];", TINFO_DEFINITE);
cleanup("str_48D6D0");set_name(0x48D6D0, "str_48D6D0");
set_cmt(0x48D6D0, "`Sfx\Misc\Walk1.wav`", 0);
apply_type (0x48D6D0, "extern char str_48D6D0[19];", TINFO_DEFINITE);
cleanup("str_48D6E4");set_name(0x48D6E4, "str_48D6E4");
set_cmt(0x48D6E4, "\"effects:1\"", 0);
apply_type (0x48D6E4, "extern char str_48D6E4[10];", TINFO_DEFINITE);
cleanup("str_48E358");set_name(0x48E358, "str_48E358");
set_cmt(0x48E358, "`Levels\TownData\Town.SOL`", 0);
apply_type (0x48E358, "extern char str_48E358[25];", TINFO_DEFINITE);
cleanup("str_48E374");set_name(0x48E374, "str_48E374");
set_cmt(0x48E374, "`Levels\L1Data\L1.SOL`", 0);
apply_type (0x48E374, "extern char str_48E374[21];", TINFO_DEFINITE);
cleanup("str_48E38C");set_name(0x48E38C, "str_48E38C");
set_cmt(0x48E38C, "`Levels\L2Data\L2.SOL`", 0);
apply_type (0x48E38C, "extern char str_48E38C[21];", TINFO_DEFINITE);
cleanup("str_48E3A4");set_name(0x48E3A4, "str_48E3A4");
set_cmt(0x48E3A4, "`Levels\L3Data\L3.SOL`", 0);
apply_type (0x48E3A4, "extern char str_48E3A4[21];", TINFO_DEFINITE);
cleanup("str_48E3BC");set_name(0x48E3BC, "str_48E3BC");
set_cmt(0x48E3BC, "`Levels\L4Data\L4.SOL`", 0);
apply_type (0x48E3BC, "extern char str_48E3BC[21];", TINFO_DEFINITE);
cleanup("str_48E3D4");set_name(0x48E3D4, "str_48E3D4");
set_cmt(0x48E3D4, "\"FillSolidBlockTbls\"", 0);
apply_type (0x48E3D4, "extern char str_48E3D4[19];", TINFO_DEFINITE);
cleanup("str_49EFA8");set_name(0x49EFA8, "str_49EFA8");
set_cmt(0x49EFA8, "\"Unable to get level data\"", 0);
apply_type (0x49EFA8, "extern char str_49EFA8[25];", TINFO_DEFINITE);
cleanup("str_49EFC4");set_name(0x49EFC4, "str_49EFC4");
set_cmt(0x49EFC4, "\"The game ended\"", 0);
apply_type (0x49EFC4, "extern char str_49EFC4[15];", TINFO_DEFINITE);
cleanup("str_49EFD4");set_name(0x49EFD4, "str_49EFD4");
set_cmt(0x49EFD4, "\"Waiting for game data...\"", 0);
apply_type (0x49EFD4, "extern char str_49EFD4[25];", TINFO_DEFINITE);
cleanup("str_49EFF0");set_name(0x49EFF0, "str_49EFF0");
set_cmt(0x49EFF0, "\"msg:1\"", 0);
apply_type (0x49EFF0, "extern char str_49EFF0[6];", TINFO_DEFINITE);
cleanup("str_49EFF8");set_name(0x49EFF8, "str_49EFF8");
set_cmt(0x49EFF8, "\"%s has cast an illegal spell.\"", 0);
apply_type (0x49EFF8, "extern char str_49EFF8[30];", TINFO_DEFINITE);
cleanup("str_49F018");set_name(0x49F018, "str_49F018");
set_cmt(0x49F018, "\"delta:1\"", 0);
apply_type (0x49F018, "extern char str_49F018[8];", TINFO_DEFINITE);
cleanup("str_49F020");set_name(0x49F020, "str_49F020");
set_cmt(0x49F020, "\"Trying to drop a floor item?\"", 0);
apply_type (0x49F020, "extern char str_49F020[29];", TINFO_DEFINITE);
cleanup("str_49F040");set_name(0x49F040, "str_49F040");
set_cmt(0x49F040, "\"Player '%s' (level %d) just joined the game\"", 0);
apply_type (0x49F040, "extern char str_49F040[44];", TINFO_DEFINITE);
cleanup("str_4A0D7C");set_name(0x4A0D7C, "str_4A0D7C");
set_cmt(0x4A0D7C, "\"Unable to initialize save directory\"", 0);
apply_type (0x4A0D7C, "extern char str_4A0D7C[36];", TINFO_DEFINITE);
cleanup("str_4A0DA0");set_name(0x4A0DA0, "str_4A0DA0");
set_cmt(0x4A0DA0, "Multi player password.\n\"szqnlsk1\"", 0);
apply_type (0x4A0DA0, "extern char str_4A0DA0[9];", TINFO_DEFINITE);
cleanup("str_4A0DAC");set_name(0x4A0DAC, "str_4A0DAC");
set_cmt(0x4A0DAC, "Single player password.\n\"xrgyrkj1\"", 0);
apply_type (0x4A0DAC, "extern char str_4A0DAC[9];", TINFO_DEFINITE);
cleanup("str_4A0DB8");set_name(0x4A0DB8, "str_4A0DB8");
set_cmt(0x4A0DB8, "\"Unable to get save directory\"", 0);
apply_type (0x4A0DB8, "extern char str_4A0DB8[29];", TINFO_DEFINITE);
cleanup("str_4A0DD8");set_name(0x4A0DD8, "str_4A0DD8");
set_cmt(0x4A0DD8, "`\single_%d.sv`", 0);
apply_type (0x4A0DD8, "extern char str_4A0DD8[14];", TINFO_DEFINITE);
cleanup("str_4A0DE8");set_name(0x4A0DE8, "str_4A0DE8");
set_cmt(0x4A0DE8, "`\multi_%d.sv`", 0);
apply_type (0x4A0DE8, "extern char str_4A0DE8[13];", TINFO_DEFINITE);
cleanup("str_4A0DF8");set_name(0x4A0DF8, "str_4A0DF8");
set_cmt(0x4A0DF8, "`Diablo\Converted`", 0);
apply_type (0x4A0DF8, "extern char str_4A0DF8[17];", TINFO_DEFINITE);
cleanup("str_4A0E0C");set_name(0x4A0E0C, "str_4A0E0C");
set_cmt(0x4A0E0C, "`\dlinfo_%d.drv`", 0);
apply_type (0x4A0E0C, "extern char str_4A0E0C[15];", TINFO_DEFINITE);
cleanup("str_4A0E1C");set_name(0x4A0E1C, "str_4A0E1C");
set_cmt(0x4A0E1C, "\"Unable to load character\"", 0);
apply_type (0x4A0E1C, "extern char str_4A0E1C[25];", TINFO_DEFINITE);
cleanup("str_4A0E38");set_name(0x4A0E38, "str_4A0E38");
set_cmt(0x4A0E38, "\"Unable to open archive\"", 0);
apply_type (0x4A0E38, "extern char str_4A0E38[23];", TINFO_DEFINITE);
cleanup("str_4A0E50");set_name(0x4A0E50, "str_4A0E50");
set_cmt(0x4A0E50, "\"Unable to read to save file archive\"", 0);
apply_type (0x4A0E50, "extern char str_4A0E50[36];", TINFO_DEFINITE);
cleanup("str_4A0E74");set_name(0x4A0E74, "str_4A0E74");
set_cmt(0x4A0E74, "\"Unable to write to save file archive\"", 0);
apply_type (0x4A0E74, "extern char str_4A0E74[37];", TINFO_DEFINITE);
cleanup("str_4A0E9C");set_name(0x4A0E9C, "str_4A0E9C");
set_cmt(0x4A0E9C, "\"Unable to read save file\"", 0);
apply_type (0x4A0E9C, "extern char str_4A0E9C[25];", TINFO_DEFINITE);
cleanup("str_4A0EB8");set_name(0x4A0EB8, "str_4A0EB8");
set_cmt(0x4A0EB8, "\"Unable to open save file\"", 0);
apply_type (0x4A0EB8, "extern char str_4A0EB8[25];", TINFO_DEFINITE);
cleanup("str_4A0ED4");set_name(0x4A0ED4, "str_4A0ED4");
set_cmt(0x4A0ED4, "\"Unable to open save file archive\"", 0);
apply_type (0x4A0ED4, "extern char str_4A0ED4[33];", TINFO_DEFINITE);
cleanup("Area_Min");set_name(0x484858, "Area_Min");
set_cmt(0x484858, "", 0);
apply_type (0x484858, "extern int Area_Min;", TINFO_DEFINITE);
cleanup("Room_Max");set_name(0x48485C, "Room_Max");
set_cmt(0x48485C, "", 0);
apply_type (0x48485C, "extern int Room_Max;", TINFO_DEFINITE);
cleanup("Room_Min");set_name(0x484860, "Room_Min");
set_cmt(0x484860, "", 0);
apply_type (0x484860, "extern int Room_Min;", TINFO_DEFINITE);
cleanup("Dir_Xadd");set_name(0x484864, "Dir_Xadd");
set_cmt(0x484864, "", 0);
apply_type (0x484864, "extern int Dir_Xadd[5];", TINFO_DEFINITE);
cleanup("Dir_Yadd");set_name(0x484878, "Dir_Yadd");
set_cmt(0x484878, "", 0);
apply_type (0x484878, "extern int Dir_Yadd[5];", TINFO_DEFINITE);
cleanup("SPATSL2");set_name(0x48488C, "SPATSL2");
set_cmt(0x48488C, "", 0);
apply_type (0x48488C, "extern Shadow SPATSL2[2];", TINFO_DEFINITE);
cleanup("BTYPESL2");set_name(0x48489C, "BTYPESL2");
set_cmt(0x48489C, "", 0);
apply_type (0x48489C, "extern uint8_t BTYPESL2[161];", TINFO_DEFINITE);
cleanup("BSTYPESL2");set_name(0x484940, "BSTYPESL2");
set_cmt(0x484940, "", 0);
apply_type (0x484940, "extern uint8_t BSTYPESL2[161];", TINFO_DEFINITE);
cleanup("VARCH1");set_name(0x4849E4, "VARCH1");
set_cmt(0x4849E4, "", 0);
apply_type (0x4849E4, "extern uint8_t VARCH1[18];", TINFO_DEFINITE);
cleanup("VARCH2");set_name(0x4849F8, "VARCH2");
set_cmt(0x4849F8, "", 0);
apply_type (0x4849F8, "extern uint8_t VARCH2[18];", TINFO_DEFINITE);
cleanup("VARCH3");set_name(0x484A0C, "VARCH3");
set_cmt(0x484A0C, "", 0);
apply_type (0x484A0C, "extern uint8_t VARCH3[18];", TINFO_DEFINITE);
cleanup("VARCH4");set_name(0x484A20, "VARCH4");
set_cmt(0x484A20, "", 0);
apply_type (0x484A20, "extern uint8_t VARCH4[18];", TINFO_DEFINITE);
cleanup("VARCH5");set_name(0x484A34, "VARCH5");
set_cmt(0x484A34, "", 0);
apply_type (0x484A34, "extern uint8_t VARCH5[18];", TINFO_DEFINITE);
cleanup("VARCH6");set_name(0x484A48, "VARCH6");
set_cmt(0x484A48, "", 0);
apply_type (0x484A48, "extern uint8_t VARCH6[18];", TINFO_DEFINITE);
cleanup("VARCH7");set_name(0x484A5C, "VARCH7");
set_cmt(0x484A5C, "", 0);
apply_type (0x484A5C, "extern uint8_t VARCH7[18];", TINFO_DEFINITE);
cleanup("VARCH8");set_name(0x484A70, "VARCH8");
set_cmt(0x484A70, "", 0);
apply_type (0x484A70, "extern uint8_t VARCH8[18];", TINFO_DEFINITE);
cleanup("VARCH9");set_name(0x484A84, "VARCH9");
set_cmt(0x484A84, "", 0);
apply_type (0x484A84, "extern uint8_t VARCH9[18];", TINFO_DEFINITE);
cleanup("VARCH10");set_name(0x484A98, "VARCH10");
set_cmt(0x484A98, "", 0);
apply_type (0x484A98, "extern uint8_t VARCH10[18];", TINFO_DEFINITE);
cleanup("VARCH11");set_name(0x484AAC, "VARCH11");
set_cmt(0x484AAC, "", 0);
apply_type (0x484AAC, "extern uint8_t VARCH11[18];", TINFO_DEFINITE);
cleanup("VARCH12");set_name(0x484AC0, "VARCH12");
set_cmt(0x484AC0, "", 0);
apply_type (0x484AC0, "extern uint8_t VARCH12[18];", TINFO_DEFINITE);
cleanup("VARCH13");set_name(0x484AD4, "VARCH13");
set_cmt(0x484AD4, "", 0);
apply_type (0x484AD4, "extern uint8_t VARCH13[18];", TINFO_DEFINITE);
cleanup("VARCH14");set_name(0x484AE8, "VARCH14");
set_cmt(0x484AE8, "", 0);
apply_type (0x484AE8, "extern uint8_t VARCH14[18];", TINFO_DEFINITE);
cleanup("VARCH15");set_name(0x484AFC, "VARCH15");
set_cmt(0x484AFC, "", 0);
apply_type (0x484AFC, "extern uint8_t VARCH15[18];", TINFO_DEFINITE);
cleanup("VARCH16");set_name(0x484B10, "VARCH16");
set_cmt(0x484B10, "", 0);
apply_type (0x484B10, "extern uint8_t VARCH16[18];", TINFO_DEFINITE);
cleanup("VARCH17");set_name(0x484B24, "VARCH17");
set_cmt(0x484B24, "", 0);
apply_type (0x484B24, "extern uint8_t VARCH17[14];", TINFO_DEFINITE);
cleanup("VARCH18");set_name(0x484B34, "VARCH18");
set_cmt(0x484B34, "", 0);
apply_type (0x484B34, "extern uint8_t VARCH18[14];", TINFO_DEFINITE);
cleanup("VARCH19");set_name(0x484B44, "VARCH19");
set_cmt(0x484B44, "", 0);
apply_type (0x484B44, "extern uint8_t VARCH19[14];", TINFO_DEFINITE);
cleanup("VARCH20");set_name(0x484B54, "VARCH20");
set_cmt(0x484B54, "", 0);
apply_type (0x484B54, "extern uint8_t VARCH20[14];", TINFO_DEFINITE);
cleanup("VARCH21");set_name(0x484B64, "VARCH21");
set_cmt(0x484B64, "", 0);
apply_type (0x484B64, "extern uint8_t VARCH21[14];", TINFO_DEFINITE);
cleanup("VARCH22");set_name(0x484B74, "VARCH22");
set_cmt(0x484B74, "", 0);
apply_type (0x484B74, "extern uint8_t VARCH22[14];", TINFO_DEFINITE);
cleanup("VARCH23");set_name(0x484B84, "VARCH23");
set_cmt(0x484B84, "", 0);
apply_type (0x484B84, "extern uint8_t VARCH23[14];", TINFO_DEFINITE);
cleanup("VARCH24");set_name(0x484B94, "VARCH24");
set_cmt(0x484B94, "", 0);
apply_type (0x484B94, "extern uint8_t VARCH24[14];", TINFO_DEFINITE);
cleanup("VARCH25");set_name(0x484BA4, "VARCH25");
set_cmt(0x484BA4, "", 0);
apply_type (0x484BA4, "extern uint8_t VARCH25[18];", TINFO_DEFINITE);
cleanup("VARCH26");set_name(0x484BB8, "VARCH26");
set_cmt(0x484BB8, "", 0);
apply_type (0x484BB8, "extern uint8_t VARCH26[18];", TINFO_DEFINITE);
cleanup("VARCH27");set_name(0x484BCC, "VARCH27");
set_cmt(0x484BCC, "", 0);
apply_type (0x484BCC, "extern uint8_t VARCH27[18];", TINFO_DEFINITE);
cleanup("VARCH28");set_name(0x484BE0, "VARCH28");
set_cmt(0x484BE0, "", 0);
apply_type (0x484BE0, "extern uint8_t VARCH28[18];", TINFO_DEFINITE);
cleanup("VARCH29");set_name(0x484BF4, "VARCH29");
set_cmt(0x484BF4, "", 0);
apply_type (0x484BF4, "extern uint8_t VARCH29[18];", TINFO_DEFINITE);
cleanup("VARCH30");set_name(0x484C08, "VARCH30");
set_cmt(0x484C08, "", 0);
apply_type (0x484C08, "extern uint8_t VARCH30[18];", TINFO_DEFINITE);
cleanup("VARCH31");set_name(0x484C1C, "VARCH31");
set_cmt(0x484C1C, "", 0);
apply_type (0x484C1C, "extern uint8_t VARCH31[18];", TINFO_DEFINITE);
cleanup("VARCH32");set_name(0x484C30, "VARCH32");
set_cmt(0x484C30, "", 0);
apply_type (0x484C30, "extern uint8_t VARCH32[18];", TINFO_DEFINITE);
cleanup("VARCH33");set_name(0x484C44, "VARCH33");
set_cmt(0x484C44, "", 0);
apply_type (0x484C44, "extern uint8_t VARCH33[18];", TINFO_DEFINITE);
cleanup("VARCH34");set_name(0x484C58, "VARCH34");
set_cmt(0x484C58, "", 0);
apply_type (0x484C58, "extern uint8_t VARCH34[18];", TINFO_DEFINITE);
cleanup("VARCH35");set_name(0x484C6C, "VARCH35");
set_cmt(0x484C6C, "", 0);
apply_type (0x484C6C, "extern uint8_t VARCH35[18];", TINFO_DEFINITE);
cleanup("VARCH36");set_name(0x484C80, "VARCH36");
set_cmt(0x484C80, "", 0);
apply_type (0x484C80, "extern uint8_t VARCH36[18];", TINFO_DEFINITE);
cleanup("VARCH37");set_name(0x484C94, "VARCH37");
set_cmt(0x484C94, "", 0);
apply_type (0x484C94, "extern uint8_t VARCH37[18];", TINFO_DEFINITE);
cleanup("VARCH38");set_name(0x484CA8, "VARCH38");
set_cmt(0x484CA8, "", 0);
apply_type (0x484CA8, "extern uint8_t VARCH38[18];", TINFO_DEFINITE);
cleanup("VARCH39");set_name(0x484CBC, "VARCH39");
set_cmt(0x484CBC, "", 0);
apply_type (0x484CBC, "extern uint8_t VARCH39[18];", TINFO_DEFINITE);
cleanup("VARCH40");set_name(0x484CD0, "VARCH40");
set_cmt(0x484CD0, "", 0);
apply_type (0x484CD0, "extern uint8_t VARCH40[18];", TINFO_DEFINITE);
cleanup("HARCH1");set_name(0x484CE4, "HARCH1");
set_cmt(0x484CE4, "", 0);
apply_type (0x484CE4, "extern uint8_t HARCH1[14];", TINFO_DEFINITE);
cleanup("HARCH2");set_name(0x484CF4, "HARCH2");
set_cmt(0x484CF4, "", 0);
apply_type (0x484CF4, "extern uint8_t HARCH2[14];", TINFO_DEFINITE);
cleanup("HARCH3");set_name(0x484D04, "HARCH3");
set_cmt(0x484D04, "", 0);
apply_type (0x484D04, "extern uint8_t HARCH3[14];", TINFO_DEFINITE);
cleanup("HARCH4");set_name(0x484D14, "HARCH4");
set_cmt(0x484D14, "", 0);
apply_type (0x484D14, "extern uint8_t HARCH4[14];", TINFO_DEFINITE);
cleanup("HARCH5");set_name(0x484D24, "HARCH5");
set_cmt(0x484D24, "", 0);
apply_type (0x484D24, "extern uint8_t HARCH5[14];", TINFO_DEFINITE);
cleanup("HARCH6");set_name(0x484D34, "HARCH6");
set_cmt(0x484D34, "", 0);
apply_type (0x484D34, "extern uint8_t HARCH6[14];", TINFO_DEFINITE);
cleanup("HARCH7");set_name(0x484D44, "HARCH7");
set_cmt(0x484D44, "", 0);
apply_type (0x484D44, "extern uint8_t HARCH7[14];", TINFO_DEFINITE);
cleanup("HARCH8");set_name(0x484D54, "HARCH8");
set_cmt(0x484D54, "", 0);
apply_type (0x484D54, "extern uint8_t HARCH8[14];", TINFO_DEFINITE);
cleanup("HARCH9");set_name(0x484D64, "HARCH9");
set_cmt(0x484D64, "", 0);
apply_type (0x484D64, "extern uint8_t HARCH9[14];", TINFO_DEFINITE);
cleanup("HARCH10");set_name(0x484D74, "HARCH10");
set_cmt(0x484D74, "", 0);
apply_type (0x484D74, "extern uint8_t HARCH10[14];", TINFO_DEFINITE);
cleanup("HARCH11");set_name(0x484D84, "HARCH11");
set_cmt(0x484D84, "", 0);
apply_type (0x484D84, "extern uint8_t HARCH11[14];", TINFO_DEFINITE);
cleanup("HARCH12");set_name(0x484D94, "HARCH12");
set_cmt(0x484D94, "", 0);
apply_type (0x484D94, "extern uint8_t HARCH12[14];", TINFO_DEFINITE);
cleanup("HARCH13");set_name(0x484DA4, "HARCH13");
set_cmt(0x484DA4, "", 0);
apply_type (0x484DA4, "extern uint8_t HARCH13[14];", TINFO_DEFINITE);
cleanup("HARCH14");set_name(0x484DB4, "HARCH14");
set_cmt(0x484DB4, "", 0);
apply_type (0x484DB4, "extern uint8_t HARCH14[14];", TINFO_DEFINITE);
cleanup("HARCH15");set_name(0x484DC4, "HARCH15");
set_cmt(0x484DC4, "", 0);
apply_type (0x484DC4, "extern uint8_t HARCH15[14];", TINFO_DEFINITE);
cleanup("HARCH16");set_name(0x484DD4, "HARCH16");
set_cmt(0x484DD4, "", 0);
apply_type (0x484DD4, "extern uint8_t HARCH16[14];", TINFO_DEFINITE);
cleanup("HARCH17");set_name(0x484DE4, "HARCH17");
set_cmt(0x484DE4, "", 0);
apply_type (0x484DE4, "extern uint8_t HARCH17[14];", TINFO_DEFINITE);
cleanup("HARCH18");set_name(0x484DF4, "HARCH18");
set_cmt(0x484DF4, "", 0);
apply_type (0x484DF4, "extern uint8_t HARCH18[14];", TINFO_DEFINITE);
cleanup("HARCH19");set_name(0x484E04, "HARCH19");
set_cmt(0x484E04, "", 0);
apply_type (0x484E04, "extern uint8_t HARCH19[14];", TINFO_DEFINITE);
cleanup("HARCH20");set_name(0x484E14, "HARCH20");
set_cmt(0x484E14, "", 0);
apply_type (0x484E14, "extern uint8_t HARCH20[14];", TINFO_DEFINITE);
cleanup("HARCH21");set_name(0x484E24, "HARCH21");
set_cmt(0x484E24, "", 0);
apply_type (0x484E24, "extern uint8_t HARCH21[14];", TINFO_DEFINITE);
cleanup("HARCH22");set_name(0x484E34, "HARCH22");
set_cmt(0x484E34, "", 0);
apply_type (0x484E34, "extern uint8_t HARCH22[14];", TINFO_DEFINITE);
cleanup("HARCH23");set_name(0x484E44, "HARCH23");
set_cmt(0x484E44, "", 0);
apply_type (0x484E44, "extern uint8_t HARCH23[14];", TINFO_DEFINITE);
cleanup("HARCH24");set_name(0x484E54, "HARCH24");
set_cmt(0x484E54, "", 0);
apply_type (0x484E54, "extern uint8_t HARCH24[14];", TINFO_DEFINITE);
cleanup("HARCH25");set_name(0x484E64, "HARCH25");
set_cmt(0x484E64, "", 0);
apply_type (0x484E64, "extern uint8_t HARCH25[14];", TINFO_DEFINITE);
cleanup("HARCH26");set_name(0x484E74, "HARCH26");
set_cmt(0x484E74, "", 0);
apply_type (0x484E74, "extern uint8_t HARCH26[14];", TINFO_DEFINITE);
cleanup("HARCH27");set_name(0x484E84, "HARCH27");
set_cmt(0x484E84, "", 0);
apply_type (0x484E84, "extern uint8_t HARCH27[14];", TINFO_DEFINITE);
cleanup("HARCH28");set_name(0x484E94, "HARCH28");
set_cmt(0x484E94, "", 0);
apply_type (0x484E94, "extern uint8_t HARCH28[14];", TINFO_DEFINITE);
cleanup("HARCH29");set_name(0x484EA4, "HARCH29");
set_cmt(0x484EA4, "", 0);
apply_type (0x484EA4, "extern uint8_t HARCH29[14];", TINFO_DEFINITE);
cleanup("HARCH30");set_name(0x484EB4, "HARCH30");
set_cmt(0x484EB4, "", 0);
apply_type (0x484EB4, "extern uint8_t HARCH30[14];", TINFO_DEFINITE);
cleanup("HARCH31");set_name(0x484EC4, "HARCH31");
set_cmt(0x484EC4, "", 0);
apply_type (0x484EC4, "extern uint8_t HARCH31[14];", TINFO_DEFINITE);
cleanup("HARCH32");set_name(0x484ED4, "HARCH32");
set_cmt(0x484ED4, "", 0);
apply_type (0x484ED4, "extern uint8_t HARCH32[14];", TINFO_DEFINITE);
cleanup("HARCH33");set_name(0x484EE4, "HARCH33");
set_cmt(0x484EE4, "", 0);
apply_type (0x484EE4, "extern uint8_t HARCH33[14];", TINFO_DEFINITE);
cleanup("HARCH34");set_name(0x484EF4, "HARCH34");
set_cmt(0x484EF4, "", 0);
apply_type (0x484EF4, "extern uint8_t HARCH34[14];", TINFO_DEFINITE);
cleanup("HARCH35");set_name(0x484F04, "HARCH35");
set_cmt(0x484F04, "", 0);
apply_type (0x484F04, "extern uint8_t HARCH35[14];", TINFO_DEFINITE);
cleanup("HARCH36");set_name(0x484F14, "HARCH36");
set_cmt(0x484F14, "", 0);
apply_type (0x484F14, "extern uint8_t HARCH36[14];", TINFO_DEFINITE);
cleanup("HARCH37");set_name(0x484F24, "HARCH37");
set_cmt(0x484F24, "", 0);
apply_type (0x484F24, "extern uint8_t HARCH37[14];", TINFO_DEFINITE);
cleanup("HARCH38");set_name(0x484F34, "HARCH38");
set_cmt(0x484F34, "", 0);
apply_type (0x484F34, "extern uint8_t HARCH38[14];", TINFO_DEFINITE);
cleanup("HARCH39");set_name(0x484F44, "HARCH39");
set_cmt(0x484F44, "", 0);
apply_type (0x484F44, "extern uint8_t HARCH39[14];", TINFO_DEFINITE);
cleanup("HARCH40");set_name(0x484F54, "HARCH40");
set_cmt(0x484F54, "", 0);
apply_type (0x484F54, "extern uint8_t HARCH40[14];", TINFO_DEFINITE);
cleanup("USTAIRS");set_name(0x484F64, "USTAIRS");
set_cmt(0x484F64, "", 0);
apply_type (0x484F64, "extern uint8_t USTAIRS[34];", TINFO_DEFINITE);
cleanup("DSTAIRS");set_name(0x484F88, "DSTAIRS");
set_cmt(0x484F88, "", 0);
apply_type (0x484F88, "extern uint8_t DSTAIRS[34];", TINFO_DEFINITE);
cleanup("WARPSTAIRS");set_name(0x484FAC, "WARPSTAIRS");
set_cmt(0x484FAC, "", 0);
apply_type (0x484FAC, "extern uint8_t WARPSTAIRS[34];", TINFO_DEFINITE);
cleanup("CRUSHCOL");set_name(0x484FD0, "CRUSHCOL");
set_cmt(0x484FD0, "", 0);
apply_type (0x484FD0, "extern uint8_t CRUSHCOL[20];", TINFO_DEFINITE);
cleanup("BIG1");set_name(0x484FE4, "BIG1");
set_cmt(0x484FE4, "", 0);
apply_type (0x484FE4, "extern uint8_t BIG1[10];", TINFO_DEFINITE);
cleanup("BIG2");set_name(0x484FF0, "BIG2");
set_cmt(0x484FF0, "", 0);
apply_type (0x484FF0, "extern uint8_t BIG2[10];", TINFO_DEFINITE);
cleanup("BIG3");set_name(0x484FFC, "BIG3");
set_cmt(0x484FFC, "", 0);
apply_type (0x484FFC, "extern uint8_t BIG3[6];", TINFO_DEFINITE);
cleanup("BIG4");set_name(0x485004, "BIG4");
set_cmt(0x485004, "", 0);
apply_type (0x485004, "extern uint8_t BIG4[6];", TINFO_DEFINITE);
cleanup("BIG5");set_name(0x48500C, "BIG5");
set_cmt(0x48500C, "", 0);
apply_type (0x48500C, "extern uint8_t BIG5[10];", TINFO_DEFINITE);
cleanup("BIG6");set_name(0x485018, "BIG6");
set_cmt(0x485018, "", 0);
apply_type (0x485018, "extern uint8_t BIG6[6];", TINFO_DEFINITE);
cleanup("BIG7");set_name(0x485020, "BIG7");
set_cmt(0x485020, "", 0);
apply_type (0x485020, "extern uint8_t BIG7[6];", TINFO_DEFINITE);
cleanup("BIG8");set_name(0x485028, "BIG8");
set_cmt(0x485028, "", 0);
apply_type (0x485028, "extern uint8_t BIG8[10];", TINFO_DEFINITE);
cleanup("BIG9");set_name(0x485034, "BIG9");
set_cmt(0x485034, "", 0);
apply_type (0x485034, "extern uint8_t BIG9[10];", TINFO_DEFINITE);
cleanup("BIG10");set_name(0x485040, "BIG10");
set_cmt(0x485040, "", 0);
apply_type (0x485040, "extern uint8_t BIG10[10];", TINFO_DEFINITE);
cleanup("RUINS1");set_name(0x48504C, "RUINS1");
set_cmt(0x48504C, "", 0);
apply_type (0x48504C, "extern uint8_t RUINS1[4];", TINFO_DEFINITE);
cleanup("RUINS2");set_name(0x485050, "RUINS2");
set_cmt(0x485050, "", 0);
apply_type (0x485050, "extern uint8_t RUINS2[4];", TINFO_DEFINITE);
cleanup("RUINS3");set_name(0x485054, "RUINS3");
set_cmt(0x485054, "", 0);
apply_type (0x485054, "extern uint8_t RUINS3[4];", TINFO_DEFINITE);
cleanup("RUINS4");set_name(0x485058, "RUINS4");
set_cmt(0x485058, "", 0);
apply_type (0x485058, "extern uint8_t RUINS4[4];", TINFO_DEFINITE);
cleanup("RUINS5");set_name(0x48505C, "RUINS5");
set_cmt(0x48505C, "", 0);
apply_type (0x48505C, "extern uint8_t RUINS5[4];", TINFO_DEFINITE);
cleanup("RUINS6");set_name(0x485060, "RUINS6");
set_cmt(0x485060, "", 0);
apply_type (0x485060, "extern uint8_t RUINS6[4];", TINFO_DEFINITE);
cleanup("RUINS7");set_name(0x485064, "RUINS7");
set_cmt(0x485064, "", 0);
apply_type (0x485064, "extern uint8_t RUINS7[4];", TINFO_DEFINITE);
cleanup("PANCREAS1");set_name(0x485068, "PANCREAS1");
set_cmt(0x485068, "", 0);
apply_type (0x485068, "extern uint8_t PANCREAS1[32];", TINFO_DEFINITE);
cleanup("PANCREAS2");set_name(0x485088, "PANCREAS2");
set_cmt(0x485088, "", 0);
apply_type (0x485088, "extern uint8_t PANCREAS2[32];", TINFO_DEFINITE);
cleanup("CTRDOOR1");set_name(0x4850A8, "CTRDOOR1");
set_cmt(0x4850A8, "", 0);
apply_type (0x4850A8, "extern uint8_t CTRDOOR1[20];", TINFO_DEFINITE);
cleanup("CTRDOOR2");set_name(0x4850BC, "CTRDOOR2");
set_cmt(0x4850BC, "", 0);
apply_type (0x4850BC, "extern uint8_t CTRDOOR2[20];", TINFO_DEFINITE);
cleanup("CTRDOOR3");set_name(0x4850D0, "CTRDOOR3");
set_cmt(0x4850D0, "", 0);
apply_type (0x4850D0, "extern uint8_t CTRDOOR3[20];", TINFO_DEFINITE);
cleanup("CTRDOOR4");set_name(0x4850E4, "CTRDOOR4");
set_cmt(0x4850E4, "", 0);
apply_type (0x4850E4, "extern uint8_t CTRDOOR4[20];", TINFO_DEFINITE);
cleanup("CTRDOOR5");set_name(0x4850F8, "CTRDOOR5");
set_cmt(0x4850F8, "", 0);
apply_type (0x4850F8, "extern uint8_t CTRDOOR5[20];", TINFO_DEFINITE);
cleanup("CTRDOOR6");set_name(0x48510C, "CTRDOOR6");
set_cmt(0x48510C, "", 0);
apply_type (0x48510C, "extern uint8_t CTRDOOR6[20];", TINFO_DEFINITE);
cleanup("CTRDOOR7");set_name(0x485120, "CTRDOOR7");
set_cmt(0x485120, "", 0);
apply_type (0x485120, "extern uint8_t CTRDOOR7[20];", TINFO_DEFINITE);
cleanup("CTRDOOR8");set_name(0x485134, "CTRDOOR8");
set_cmt(0x485134, "", 0);
apply_type (0x485134, "extern uint8_t CTRDOOR8[20];", TINFO_DEFINITE);
cleanup("Patterns");set_name(0x485148, "Patterns");
set_cmt(0x485148, "", 0);
apply_type (0x485148, "extern int Patterns[100][10];", TINFO_DEFINITE);
cleanup("str_4860E8");set_name(0x4860E8, "str_4860E8");
set_cmt(0x4860E8, "`Levels\L2Data\Bonestr2.DUN`", 0);
apply_type (0x4860E8, "extern char str_4860E8[27];", TINFO_DEFINITE);
cleanup("str_486104");set_name(0x486104, "str_486104");
set_cmt(0x486104, "`Levels\L2Data\Blood1.DUN`", 0);
apply_type (0x486104, "extern char str_486104[25];", TINFO_DEFINITE);
cleanup("str_486120");set_name(0x486120, "str_486120");
set_cmt(0x486120, "`Levels\L2Data\Blind2.DUN`", 0);
apply_type (0x486120, "extern char str_486120[25];", TINFO_DEFINITE);
cleanup("setmap_rects");set_name(0x4A208C, "setmap_rects");
set_cmt(0x4A208C, "setmap_rects specifies areas used for set maps.", 0);
apply_type (0x4A208C, "extern Rect setmap_rects[32];", TINFO_DEFINITE);
cleanup("quest_level_names");set_name(0x4A210C, "quest_level_names");
set_cmt(0x4A210C, "quest_level_names maps from quest level to quest level names.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/enums.h#quest_level", 0);
apply_type (0x4A210C, "extern char *quest_level_names[6];", TINFO_DEFINITE);
cleanup("str_4A2124");set_name(0x4A2124, "str_4A2124");
set_cmt(0x4A2124, "\"Archbishop Lazarus' Lair\"", 0);
apply_type (0x4A2124, "extern char str_4A2124[25];", TINFO_DEFINITE);
cleanup("str_4A2140");set_name(0x4A2140, "str_4A2140");
set_cmt(0x4A2140, "\"Bone Chamber\"", 0);
apply_type (0x4A2140, "extern char str_4A2140[13];", TINFO_DEFINITE);
cleanup("str_4A2150");set_name(0x4A2150, "str_4A2150");
set_cmt(0x4A2150, "\"Skeleton King's Lair\"", 0);
apply_type (0x4A2150, "extern char str_4A2150[21];", TINFO_DEFINITE);
cleanup("str_4A2168");set_name(0x4A2168, "str_4A2168");
set_cmt(0x4A2168, "\"ObjIndex: Active object not found at (%d,%d)\"", 0);
apply_type (0x4A2168, "extern char str_4A2168[45];", TINFO_DEFINITE);
cleanup("str_4A2198");set_name(0x4A2198, "str_4A2198");
set_cmt(0x4A2198, "`Levels\L1Data\SklKng2.DUN`", 0);
apply_type (0x4A2198, "extern char str_4A2198[26];", TINFO_DEFINITE);
cleanup("str_4A21B4");set_name(0x4A21B4, "str_4A21B4");
set_cmt(0x4A21B4, "`Levels\L1Data\SklKng1.DUN`", 0);
apply_type (0x4A21B4, "extern char str_4A21B4[26];", TINFO_DEFINITE);
cleanup("str_4A21D0");set_name(0x4A21D0, "str_4A21D0");
set_cmt(0x4A21D0, "`Levels\L2Data\L2_2.pal`", 0);
apply_type (0x4A21D0, "extern char str_4A21D0[23];", TINFO_DEFINITE);
cleanup("str_4A21E8");set_name(0x4A21E8, "str_4A21E8");
set_cmt(0x4A21E8, "`Levels\L2Data\Bonecha1.DUN`", 0);
apply_type (0x4A21E8, "extern char str_4A21E8[27];", TINFO_DEFINITE);
cleanup("str_4A2204");set_name(0x4A2204, "str_4A2204");
set_cmt(0x4A2204, "`Levels\L2Data\Bonecha2.DUN`", 0);
apply_type (0x4A2204, "extern char str_4A2204[27];", TINFO_DEFINITE);
cleanup("str_4A2220");set_name(0x4A2220, "str_4A2220");
set_cmt(0x4A2220, "`Levels\L1Data\L1_5.pal`", 0);
apply_type (0x4A2220, "extern char str_4A2220[23];", TINFO_DEFINITE);
cleanup("str_4A2238");set_name(0x4A2238, "str_4A2238");
set_cmt(0x4A2238, "`Levels\L1Data\Lv1MazeB.DUN`", 0);
apply_type (0x4A2238, "extern char str_4A2238[27];", TINFO_DEFINITE);
cleanup("str_4A2254");set_name(0x4A2254, "str_4A2254");
set_cmt(0x4A2254, "`Levels\L1Data\Lv1MazeA.DUN`", 0);
apply_type (0x4A2254, "extern char str_4A2254[27];", TINFO_DEFINITE);
cleanup("str_4A2270");set_name(0x4A2270, "str_4A2270");
set_cmt(0x4A2270, "`Levels\L3Data\Foulwatr.DUN`", 0);
apply_type (0x4A2270, "extern char str_4A2270[27];", TINFO_DEFINITE);
cleanup("str_4A228C");set_name(0x4A228C, "str_4A228C");
set_cmt(0x4A228C, "`Levels\L1Data\L1_2.pal`", 0);
apply_type (0x4A228C, "extern char str_4A228C[23];", TINFO_DEFINITE);
cleanup("str_4A22A4");set_name(0x4A22A4, "str_4A22A4");
set_cmt(0x4A22A4, "`Levels\L1Data\Vile2.DUN`", 0);
apply_type (0x4A22A4, "extern char str_4A22A4[24];", TINFO_DEFINITE);
cleanup("str_4A22BC");set_name(0x4A22BC, "str_4A22BC");
set_cmt(0x4A22BC, "`Levels\L1Data\Vile1.DUN`", 0);
apply_type (0x4A22BC, "extern char str_4A22BC[24];", TINFO_DEFINITE);
cleanup("gamma_correction");set_name(0x4A0D08, "gamma_correction");
set_cmt(0x4A0D08, "gamma_correction specifies the gamma correction level.", 0);
apply_type (0x4A0D08, "extern int gamma_correction;", TINFO_DEFINITE);
cleanup("coluor_cycling_enabled");set_name(0x4A0D0C, "coluor_cycling_enabled");
set_cmt(0x4A0D0C, "coluor_cycling_enabled specifies whether colour cycling is enabled.", 0);
apply_type (0x4A0D0C, "extern bool32_t coluor_cycling_enabled;", TINFO_DEFINITE);
cleanup("palette_bright");set_name(0x4A0D10, "palette_bright");
set_cmt(0x4A0D10, "palette_bright specifies whether the palette has max brightness.", 0);
apply_type (0x4A0D10, "extern bool8_t palette_bright;", TINFO_DEFINITE);
cleanup("str_4A0D14");set_name(0x4A0D14, "str_4A0D14");
set_cmt(0x4A0D14, "`C:\Src\Diablo\Source\PALETTE.CPP`", 0);
apply_type (0x4A0D14, "extern char str_4A0D14[33];", TINFO_DEFINITE);
cleanup("str_4A0D38");set_name(0x4A0D38, "str_4A0D38");
set_cmt(0x4A0D38, "`Levels\L%iData\L%i_%i.PAL`", 0);
apply_type (0x4A0D38, "extern char str_4A0D38[26];", TINFO_DEFINITE);
cleanup("str_4A0D54");set_name(0x4A0D54, "str_4A0D54");
set_cmt(0x4A0D54, "`Levels\TownData\Town.pal`", 0);
apply_type (0x4A0D54, "extern char str_4A0D54[25];", TINFO_DEFINITE);
cleanup("missile_coord_delta");set_name(0x49387C, "missile_coord_delta");
set_cmt(0x49387C, "missile_coord_delta specifies X- and Y-coordinate deltas from a missile\ntarget coordinate.", 0);
apply_type (0x49387C, "extern CircleCoords missile_coord_delta;", TINFO_DEFINITE);
cleanup("delta_from_circle_radius");set_name(0x49433C, "delta_from_circle_radius");
set_cmt(0x49433C, "delta_from_circle_radius maps from circle radius to the X- and Y-coordinate\ndeltas from the center of a circle.", 0);
apply_type (0x49433C, "extern CircleCoords *delta_from_circle_radius[19];", TINFO_DEFINITE);
cleanup("str_494798");set_name(0x494798, "str_494798");
set_cmt(0x494798, "`PlrGFX\Stone.TRN`", 0);
apply_type (0x494798, "extern char str_494798[17];", TINFO_DEFINITE);
cleanup("str_4947AC");set_name(0x4947AC, "str_4947AC");
set_cmt(0x4947AC, "`PlrGFX\Infra.TRN`", 0);
apply_type (0x4947AC, "extern char str_4947AC[17];", TINFO_DEFINITE);
cleanup("special_theme_ids");set_name(0x4B2584, "special_theme_ids");
set_cmt(0x4B2584, "special_theme_ids specifies the set of special theme IDs from which one will\nbe selected at random.", 0);
apply_type (0x4B2584, "extern theme_id special_theme_ids[4];", TINFO_DEFINITE);
cleanup("x_delta_5x5");set_name(0x4B2594, "x_delta_5x5");
set_cmt(0x4B2594, "x_delta_5x5 specifies a 5x5 area to fit theme objects.", 0);
apply_type (0x4B2594, "extern int x_delta_5x5[25];", TINFO_DEFINITE);
cleanup("y_delta_5x5");set_name(0x4B25F8, "y_delta_5x5");
set_cmt(0x4B25F8, "y_delta_5x5 specifies a 5x5 area to fit theme objects.", 0);
apply_type (0x4B25F8, "extern int y_delta_5x5[25];", TINFO_DEFINITE);
cleanup("x_delta_3x3");set_name(0x4B265C, "x_delta_3x3");
set_cmt(0x4B265C, "x_delta_3x3 specifies a 3x3 area to fit theme objects.", 0);
apply_type (0x4B265C, "extern int x_delta_3x3[9];", TINFO_DEFINITE);
cleanup("y_delta_3x3");set_name(0x4B2680, "y_delta_3x3");
set_cmt(0x4B2680, "y_delta_3x3 specifies a 3x3 area to fit theme objects.", 0);
apply_type (0x4B2680, "extern int y_delta_3x3[9];", TINFO_DEFINITE);
cleanup("monster_data");set_name(0x497E08, "monster_data");
set_cmt(0x497E08, "monster_data contains the data related to each monster ID.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/enums.h#monster_id", 0);
apply_type (0x497E08, "extern MonsterData monster_data[112];", TINFO_DEFINITE);
cleanup("unique_monster_data");set_name(0x49B6F8, "unique_monster_data");
set_cmt(0x49B6F8, "unique_monster_data contains the data related to each unique monster ID.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/enums.h#unique_monster_id", 0);
apply_type (0x49B6F8, "extern UniqueMonsterData unique_monster_data[98];", TINFO_DEFINITE);
cleanup("str_49C338");set_name(0x49C338, "str_49C338");
set_cmt(0x49C338, "\"Doomlock\"", 0);
apply_type (0x49C338, "extern char str_49C338[9];", TINFO_DEFINITE);
cleanup("str_49C344");set_name(0x49C344, "str_49C344");
set_cmt(0x49C344, "\"Grimspike\"", 0);
apply_type (0x49C344, "extern char str_49C344[10];", TINFO_DEFINITE);
cleanup("str_49C350");set_name(0x49C350, "str_49C350");
set_cmt(0x49C350, "\"Fleshdancer\"", 0);
apply_type (0x49C350, "extern char str_49C350[12];", TINFO_DEFINITE);
cleanup("str_49C35C");set_name(0x49C35C, "str_49C35C");
set_cmt(0x49C35C, "\"Webwidow\"", 0);
apply_type (0x49C35C, "extern char str_49C35C[9];", TINFO_DEFINITE);
cleanup("str_49C368");set_name(0x49C368, "str_49C368");
set_cmt(0x49C368, "\"Bloodlust\"", 0);
apply_type (0x49C368, "extern char str_49C368[10];", TINFO_DEFINITE);
cleanup("str_49C374");set_name(0x49C374, "str_49C374");
set_cmt(0x49C374, "\"Zamphir\"", 0);
apply_type (0x49C374, "extern char str_49C374[8];", TINFO_DEFINITE);
cleanup("str_49C37C");set_name(0x49C37C, "str_49C37C");
set_cmt(0x49C37C, "\"The Vizier\"", 0);
apply_type (0x49C37C, "extern char str_49C37C[11];", TINFO_DEFINITE);
cleanup("str_49C388");set_name(0x49C388, "str_49C388");
set_cmt(0x49C388, "\"Sir Gorash\"", 0);
apply_type (0x49C388, "extern char str_49C388[11];", TINFO_DEFINITE);
cleanup("str_49C394");set_name(0x49C394, "str_49C394");
set_cmt(0x49C394, "\"Steelskull the Hunter\"", 0);
apply_type (0x49C394, "extern char str_49C394[22];", TINFO_DEFINITE);
cleanup("str_49C3AC");set_name(0x49C3AC, "str_49C3AC");
set_cmt(0x49C3AC, "\"Stareye the Witch\"", 0);
apply_type (0x49C3AC, "extern char str_49C3AC[18];", TINFO_DEFINITE);
cleanup("str_49C3C0");set_name(0x49C3C0, "str_49C3C0");
set_cmt(0x49C3C0, "\"Dreadjudge\"", 0);
apply_type (0x49C3C0, "extern char str_49C3C0[11];", TINFO_DEFINITE);
cleanup("str_49C3CC");set_name(0x49C3CC, "str_49C3CC");
set_cmt(0x49C3CC, "\"Graywar the Slayer\"", 0);
apply_type (0x49C3CC, "extern char str_49C3CC[19];", TINFO_DEFINITE);
cleanup("str_49C3E0");set_name(0x49C3E0, "str_49C3E0");
set_cmt(0x49C3E0, "\"Gorefeast\"", 0);
apply_type (0x49C3E0, "extern char str_49C3E0[10];", TINFO_DEFINITE);
cleanup("str_49C3EC");set_name(0x49C3EC, "str_49C3EC");
set_cmt(0x49C3EC, "\"Witchmoon\"", 0);
apply_type (0x49C3EC, "extern char str_49C3EC[10];", TINFO_DEFINITE);
cleanup("str_49C3F8");set_name(0x49C3F8, "str_49C3F8");
set_cmt(0x49C3F8, "\"Bloodmoon Soulfire\"", 0);
apply_type (0x49C3F8, "extern char str_49C3F8[19];", TINFO_DEFINITE);
cleanup("str_49C40C");set_name(0x49C40C, "str_49C40C");
set_cmt(0x49C40C, "\"Doomcloud\"", 0);
apply_type (0x49C40C, "extern char str_49C40C[10];", TINFO_DEFINITE);
cleanup("str_49C418");set_name(0x49C418, "str_49C418");
set_cmt(0x49C418, "\"Howlingire the Shade\"", 0);
apply_type (0x49C418, "extern char str_49C418[21];", TINFO_DEFINITE);
cleanup("str_49C430");set_name(0x49C430, "str_49C430");
set_cmt(0x49C430, "\"Rustweaver\"", 0);
apply_type (0x49C430, "extern char str_49C430[11];", TINFO_DEFINITE);
cleanup("str_49C43C");set_name(0x49C43C, "str_49C43C");
set_cmt(0x49C43C, "\"Lord of the Pit\"", 0);
apply_type (0x49C43C, "extern char str_49C43C[16];", TINFO_DEFINITE);
cleanup("str_49C44C");set_name(0x49C44C, "str_49C44C");
set_cmt(0x49C44C, "\"Windspawn\"", 0);
apply_type (0x49C44C, "extern char str_49C44C[10];", TINFO_DEFINITE);
cleanup("str_49C458");set_name(0x49C458, "str_49C458");
set_cmt(0x49C458, "\"Soulslash\"", 0);
apply_type (0x49C458, "extern char str_49C458[10];", TINFO_DEFINITE);
cleanup("str_49C464");set_name(0x49C464, "str_49C464");
set_cmt(0x49C464, "\"Blackskull\"", 0);
apply_type (0x49C464, "extern char str_49C464[11];", TINFO_DEFINITE);
cleanup("str_49C470");set_name(0x49C470, "str_49C470");
set_cmt(0x49C470, "\"Witchfire the Unholy\"", 0);
apply_type (0x49C470, "extern char str_49C470[21];", TINFO_DEFINITE);
cleanup("str_49C488");set_name(0x49C488, "str_49C488");
set_cmt(0x49C488, "\"Fangskin\"", 0);
apply_type (0x49C488, "extern char str_49C488[9];", TINFO_DEFINITE);
cleanup("str_49C494");set_name(0x49C494, "str_49C494");
set_cmt(0x49C494, "\"Viperflame\"", 0);
apply_type (0x49C494, "extern char str_49C494[11];", TINFO_DEFINITE);
cleanup("str_49C4A0");set_name(0x49C4A0, "str_49C4A0");
set_cmt(0x49C4A0, "\"Viletouch\"", 0);
apply_type (0x49C4A0, "extern char str_49C4A0[10];", TINFO_DEFINITE);
cleanup("str_49C4AC");set_name(0x49C4AC, "str_49C4AC");
set_cmt(0x49C4AC, "\"Blacktongue\"", 0);
apply_type (0x49C4AC, "extern char str_49C4AC[12];", TINFO_DEFINITE);
cleanup("str_49C4B8");set_name(0x49C4B8, "str_49C4B8");
set_cmt(0x49C4B8, "\"Lionskull the Bent\"", 0);
apply_type (0x49C4B8, "extern char str_49C4B8[19];", TINFO_DEFINITE);
cleanup("str_49C4CC");set_name(0x49C4CC, "str_49C4CC");
set_cmt(0x49C4CC, "\"Festerskull\"", 0);
apply_type (0x49C4CC, "extern char str_49C4CC[12];", TINFO_DEFINITE);
cleanup("str_49C4D8");set_name(0x49C4D8, "str_49C4D8");
set_cmt(0x49C4D8, "\"Fangspeir\"", 0);
apply_type (0x49C4D8, "extern char str_49C4D8[10];", TINFO_DEFINITE);
cleanup("str_49C4E4");set_name(0x49C4E4, "str_49C4E4");
set_cmt(0x49C4E4, "\"Warpfire Hellspawn\"", 0);
apply_type (0x49C4E4, "extern char str_49C4E4[19];", TINFO_DEFINITE);
cleanup("str_49C4F8");set_name(0x49C4F8, "str_49C4F8");
set_cmt(0x49C4F8, "\"Bluehorn\"", 0);
apply_type (0x49C4F8, "extern char str_49C4F8[9];", TINFO_DEFINITE);
cleanup("str_49C504");set_name(0x49C504, "str_49C504");
set_cmt(0x49C504, "\"The Flayer\"", 0);
apply_type (0x49C504, "extern char str_49C504[11];", TINFO_DEFINITE);
cleanup("str_49C510");set_name(0x49C510, "str_49C510");
set_cmt(0x49C510, "\"Plaguewrath\"", 0);
apply_type (0x49C510, "extern char str_49C510[12];", TINFO_DEFINITE);
cleanup("str_49C51C");set_name(0x49C51C, "str_49C51C");
set_cmt(0x49C51C, "\"Blackstorm\"", 0);
apply_type (0x49C51C, "extern char str_49C51C[11];", TINFO_DEFINITE);
cleanup("str_49C528");set_name(0x49C528, "str_49C528");
set_cmt(0x49C528, "\"Goldblight of the Flame\"", 0);
apply_type (0x49C528, "extern char str_49C528[24];", TINFO_DEFINITE);
cleanup("str_49C540");set_name(0x49C540, "str_49C540");
set_cmt(0x49C540, "\"Oozedrool\"", 0);
apply_type (0x49C540, "extern char str_49C540[10];", TINFO_DEFINITE);
cleanup("str_49C54C");set_name(0x49C54C, "str_49C54C");
set_cmt(0x49C54C, "\"Stormbane\"", 0);
apply_type (0x49C54C, "extern char str_49C54C[10];", TINFO_DEFINITE);
cleanup("str_49C558");set_name(0x49C558, "str_49C558");
set_cmt(0x49C558, "\"Brokenstorm\"", 0);
apply_type (0x49C558, "extern char str_49C558[12];", TINFO_DEFINITE);
cleanup("str_49C564");set_name(0x49C564, "str_49C564");
set_cmt(0x49C564, "\"Devilskull Sharpbone\"", 0);
apply_type (0x49C564, "extern char str_49C564[21];", TINFO_DEFINITE);
cleanup("str_49C57C");set_name(0x49C57C, "str_49C57C");
set_cmt(0x49C57C, "\"Breakspine\"", 0);
apply_type (0x49C57C, "extern char str_49C57C[11];", TINFO_DEFINITE);
cleanup("str_49C588");set_name(0x49C588, "str_49C588");
set_cmt(0x49C588, "\"Bonesaw the Litch\"", 0);
apply_type (0x49C588, "extern char str_49C588[18];", TINFO_DEFINITE);
cleanup("str_49C59C");set_name(0x49C59C, "str_49C59C");
set_cmt(0x49C59C, "\"Madburner\"", 0);
apply_type (0x49C59C, "extern char str_49C59C[10];", TINFO_DEFINITE);
cleanup("str_49C5A8");set_name(0x49C5A8, "str_49C5A8");
set_cmt(0x49C5A8, "\"Doomgrin the Rotting\"", 0);
apply_type (0x49C5A8, "extern char str_49C5A8[21];", TINFO_DEFINITE);
cleanup("str_49C5C0");set_name(0x49C5C0, "str_49C5C0");
set_cmt(0x49C5C0, "\"Chaoshowler\"", 0);
apply_type (0x49C5C0, "extern char str_49C5C0[12];", TINFO_DEFINITE);
cleanup("str_49C5CC");set_name(0x49C5CC, "str_49C5CC");
set_cmt(0x49C5CC, "\"BHSM\"", 0);
apply_type (0x49C5CC, "extern char str_49C5CC[5];", TINFO_DEFINITE);
cleanup("str_49C5D4");set_name(0x49C5D4, "str_49C5D4");
set_cmt(0x49C5D4, "\"Blighthorn Steelmace\"", 0);
apply_type (0x49C5D4, "extern char str_49C5D4[21];", TINFO_DEFINITE);
cleanup("str_49C5EC");set_name(0x49C5EC, "str_49C5EC");
set_cmt(0x49C5EC, "\"BSM\"", 0);
apply_type (0x49C5EC, "extern char str_49C5EC[4];", TINFO_DEFINITE);
cleanup("str_49C5F0");set_name(0x49C5F0, "str_49C5F0");
set_cmt(0x49C5F0, "\"Baron Sludge\"", 0);
apply_type (0x49C5F0, "extern char str_49C5F0[13];", TINFO_DEFINITE);
cleanup("str_49C600");set_name(0x49C600, "str_49C600");
set_cmt(0x49C600, "\"Firewound the Grim\"", 0);
apply_type (0x49C600, "extern char str_49C600[19];", TINFO_DEFINITE);
cleanup("str_49C614");set_name(0x49C614, "str_49C614");
set_cmt(0x49C614, "\"WFTD\"", 0);
apply_type (0x49C614, "extern char str_49C614[5];", TINFO_DEFINITE);
cleanup("str_49C61C");set_name(0x49C61C, "str_49C61C");
set_cmt(0x49C61C, "\"Wrathfire the Doomed\"", 0);
apply_type (0x49C61C, "extern char str_49C61C[21];", TINFO_DEFINITE);
cleanup("str_49C634");set_name(0x49C634, "str_49C634");
set_cmt(0x49C634, "\"Bronzefist Firestone\"", 0);
apply_type (0x49C634, "extern char str_49C634[21];", TINFO_DEFINITE);
cleanup("str_49C64C");set_name(0x49C64C, "str_49C64C");
set_cmt(0x49C64C, "\"Gorestone\"", 0);
apply_type (0x49C64C, "extern char str_49C64C[10];", TINFO_DEFINITE);
cleanup("str_49C658");set_name(0x49C658, "str_49C658");
set_cmt(0x49C658, "\"Nightwing the Cold\"", 0);
apply_type (0x49C658, "extern char str_49C658[19];", TINFO_DEFINITE);
cleanup("str_49C66C");set_name(0x49C66C, "str_49C66C");
set_cmt(0x49C66C, "\"BLF\"", 0);
apply_type (0x49C66C, "extern char str_49C66C[4];", TINFO_DEFINITE);
cleanup("str_49C670");set_name(0x49C670, "str_49C670");
set_cmt(0x49C670, "\"Blightfire\"", 0);
apply_type (0x49C670, "extern char str_49C670[11];", TINFO_DEFINITE);
cleanup("str_49C67C");set_name(0x49C67C, "str_49C67C");
set_cmt(0x49C67C, "\"Glasskull the Jagged\"", 0);
apply_type (0x49C67C, "extern char str_49C67C[21];", TINFO_DEFINITE);
cleanup("str_49C694");set_name(0x49C694, "str_49C694");
set_cmt(0x49C694, "\"Warmaggot the Mad\"", 0);
apply_type (0x49C694, "extern char str_49C694[18];", TINFO_DEFINITE);
cleanup("str_49C6A8");set_name(0x49C6A8, "str_49C6A8");
set_cmt(0x49C6A8, "\"DSFM\"", 0);
apply_type (0x49C6A8, "extern char str_49C6A8[5];", TINFO_DEFINITE);
cleanup("str_49C6B0");set_name(0x49C6B0, "str_49C6B0");
set_cmt(0x49C6B0, "\"Deathshade Fleshmaul\"", 0);
apply_type (0x49C6B0, "extern char str_49C6B0[21];", TINFO_DEFINITE);
cleanup("str_49C6C8");set_name(0x49C6C8, "str_49C6C8");
set_cmt(0x49C6C8, "\"BGBL\"", 0);
apply_type (0x49C6C8, "extern char str_49C6C8[5];", TINFO_DEFINITE);
cleanup("str_49C6D0");set_name(0x49C6D0, "str_49C6D0");
set_cmt(0x49C6D0, "\"Bloodgutter\"", 0);
apply_type (0x49C6D0, "extern char str_49C6D0[12];", TINFO_DEFINITE);
cleanup("str_49C6DC");set_name(0x49C6DC, "str_49C6DC");
set_cmt(0x49C6DC, "\"BFDS\"", 0);
apply_type (0x49C6DC, "extern char str_49C6DC[5];", TINFO_DEFINITE);
cleanup("str_49C6E4");set_name(0x49C6E4, "str_49C6E4");
set_cmt(0x49C6E4, "\"Deathspit\"", 0);
apply_type (0x49C6E4, "extern char str_49C6E4[10];", TINFO_DEFINITE);
cleanup("str_49C6F0");set_name(0x49C6F0, "str_49C6F0");
set_cmt(0x49C6F0, "\"Hazeshifter\"", 0);
apply_type (0x49C6F0, "extern char str_49C6F0[12];", TINFO_DEFINITE);
cleanup("str_49C6FC");set_name(0x49C6FC, "str_49C6FC");
set_cmt(0x49C6FC, "\"SHDR\"", 0);
apply_type (0x49C6FC, "extern char str_49C6FC[5];", TINFO_DEFINITE);
cleanup("str_49C704");set_name(0x49C704, "str_49C704");
set_cmt(0x49C704, "\"Shadowdrinker\"", 0);
apply_type (0x49C704, "extern char str_49C704[14];", TINFO_DEFINITE);
cleanup("str_49C714");set_name(0x49C714, "str_49C714");
set_cmt(0x49C714, "\"DB\"", 0);
apply_type (0x49C714, "extern char str_49C714[3];", TINFO_DEFINITE);
cleanup("str_49C718");set_name(0x49C718, "str_49C718");
set_cmt(0x49C718, "\"Foulwing\"", 0);
apply_type (0x49C718, "extern char str_49C718[9];", TINFO_DEFINITE);
cleanup("str_49C724");set_name(0x49C724, "str_49C724");
set_cmt(0x49C724, "\"Bloodskin Darkbow\"", 0);
apply_type (0x49C724, "extern char str_49C724[18];", TINFO_DEFINITE);
cleanup("str_49C738");set_name(0x49C738, "str_49C738");
set_cmt(0x49C738, "\"BFTP\"", 0);
apply_type (0x49C738, "extern char str_49C738[5];", TINFO_DEFINITE);
cleanup("str_49C740");set_name(0x49C740, "str_49C740");
set_cmt(0x49C740, "\"Bilefroth the Pit Master\"", 0);
apply_type (0x49C740, "extern char str_49C740[25];", TINFO_DEFINITE);
cleanup("str_49C75C");set_name(0x49C75C, "str_49C75C");
set_cmt(0x49C75C, "\"Blightstone the Weak\"", 0);
apply_type (0x49C75C, "extern char str_49C75C[21];", TINFO_DEFINITE);
cleanup("str_49C774");set_name(0x49C774, "str_49C774");
set_cmt(0x49C774, "\"Shadowcrow\"", 0);
apply_type (0x49C774, "extern char str_49C774[11];", TINFO_DEFINITE);
cleanup("str_49C780");set_name(0x49C780, "str_49C780");
set_cmt(0x49C780, "\"BASHTB\"", 0);
apply_type (0x49C780, "extern char str_49C780[7];", TINFO_DEFINITE);
cleanup("str_49C788");set_name(0x49C788, "str_49C788");
set_cmt(0x49C788, "\"Blackash the Burning\"", 0);
apply_type (0x49C788, "extern char str_49C788[21];", TINFO_DEFINITE);
cleanup("str_49C7A0");set_name(0x49C7A0, "str_49C7A0");
set_cmt(0x49C7A0, "\"Spineeater\"", 0);
apply_type (0x49C7A0, "extern char str_49C7A0[11];", TINFO_DEFINITE);
cleanup("str_49C7AC");set_name(0x49C7AC, "str_49C7AC");
set_cmt(0x49C7AC, "\"Wrathraven\"", 0);
apply_type (0x49C7AC, "extern char str_49C7AC[11];", TINFO_DEFINITE);
cleanup("str_49C7B8");set_name(0x49C7B8, "str_49C7B8");
set_cmt(0x49C7B8, "\"Moonbender\"", 0);
apply_type (0x49C7B8, "extern char str_49C7B8[11];", TINFO_DEFINITE);
cleanup("str_49C7C4");set_name(0x49C7C4, "str_49C7C4");
set_cmt(0x49C7C4, "\"Pulsecrawler\"", 0);
apply_type (0x49C7C4, "extern char str_49C7C4[13];", TINFO_DEFINITE);
cleanup("str_49C7D4");set_name(0x49C7D4, "str_49C7D4");
set_cmt(0x49C7D4, "\"PMR\"", 0);
apply_type (0x49C7D4, "extern char str_49C7D4[4];", TINFO_DEFINITE);
cleanup("str_49C7D8");set_name(0x49C7D8, "str_49C7D8");
set_cmt(0x49C7D8, "\"Goretongue\"", 0);
apply_type (0x49C7D8, "extern char str_49C7D8[11];", TINFO_DEFINITE);
cleanup("str_49C7E4");set_name(0x49C7E4, "str_49C7E4");
set_cmt(0x49C7E4, "\"TSPO\"", 0);
apply_type (0x49C7E4, "extern char str_49C7E4[5];", TINFO_DEFINITE);
cleanup("str_49C7EC");set_name(0x49C7EC, "str_49C7EC");
set_cmt(0x49C7EC, "\"Warpskull\"", 0);
apply_type (0x49C7EC, "extern char str_49C7EC[10];", TINFO_DEFINITE);
cleanup("str_49C7F8");set_name(0x49C7F8, "str_49C7F8");
set_cmt(0x49C7F8, "\"SKFR\"", 0);
apply_type (0x49C7F8, "extern char str_49C7F8[5];", TINFO_DEFINITE);
cleanup("str_49C800");set_name(0x49C800, "str_49C800");
set_cmt(0x49C800, "\"Skullfire\"", 0);
apply_type (0x49C800, "extern char str_49C800[10];", TINFO_DEFINITE);
cleanup("str_49C80C");set_name(0x49C80C, "str_49C80C");
set_cmt(0x49C80C, "\"El Chupacabras\"", 0);
apply_type (0x49C80C, "extern char str_49C80C[15];", TINFO_DEFINITE);
cleanup("str_49C81C");set_name(0x49C81C, "str_49C81C");
set_cmt(0x49C81C, "\"MTD\"", 0);
apply_type (0x49C81C, "extern char str_49C81C[4];", TINFO_DEFINITE);
cleanup("str_49C820");set_name(0x49C820, "str_49C820");
set_cmt(0x49C820, "\"Madeye the Dead\"", 0);
apply_type (0x49C820, "extern char str_49C820[16];", TINFO_DEFINITE);
cleanup("str_49C830");set_name(0x49C830, "str_49C830");
set_cmt(0x49C830, "\"DE\"", 0);
apply_type (0x49C830, "extern char str_49C830[3];", TINFO_DEFINITE);
cleanup("str_49C834");set_name(0x49C834, "str_49C834");
set_cmt(0x49C834, "\"Deadeye\"", 0);
apply_type (0x49C834, "extern char str_49C834[8];", TINFO_DEFINITE);
cleanup("str_49C83C");set_name(0x49C83C, "str_49C83C");
set_cmt(0x49C83C, "\"SHBT\"", 0);
apply_type (0x49C83C, "extern char str_49C83C[5];", TINFO_DEFINITE);
cleanup("str_49C844");set_name(0x49C844, "str_49C844");
set_cmt(0x49C844, "\"Shadowbite\"", 0);
apply_type (0x49C844, "extern char str_49C844[11];", TINFO_DEFINITE);
cleanup("str_49C850");set_name(0x49C850, "str_49C850");
set_cmt(0x49C850, "\"RCRN\"", 0);
apply_type (0x49C850, "extern char str_49C850[5];", TINFO_DEFINITE);
cleanup("str_49C858");set_name(0x49C858, "str_49C858");
set_cmt(0x49C858, "\"Rotcarnage\"", 0);
apply_type (0x49C858, "extern char str_49C858[11];", TINFO_DEFINITE);
cleanup("str_49C864");set_name(0x49C864, "str_49C864");
set_cmt(0x49C864, "\"Bongo\"", 0);
apply_type (0x49C864, "extern char str_49C864[6];", TINFO_DEFINITE);
cleanup("str_49C86C");set_name(0x49C86C, "str_49C86C");
set_cmt(0x49C86C, "\"BHBS\"", 0);
apply_type (0x49C86C, "extern char str_49C86C[5];", TINFO_DEFINITE);
cleanup("str_49C874");set_name(0x49C874, "str_49C874");
set_cmt(0x49C874, "\"Brokenhead Bangshield\"", 0);
apply_type (0x49C874, "extern char str_49C874[22];", TINFO_DEFINITE);
cleanup("str_49C88C");set_name(0x49C88C, "str_49C88C");
set_cmt(0x49C88C, "\"GTQ\"", 0);
apply_type (0x49C88C, "extern char str_49C88C[4];", TINFO_DEFINITE);
cleanup("str_49C890");set_name(0x49C890, "str_49C890");
set_cmt(0x49C890, "\"Gutshank the Quick\"", 0);
apply_type (0x49C890, "extern char str_49C890[19];", TINFO_DEFINITE);
cleanup("str_49C8A4");set_name(0x49C8A4, "str_49C8A4");
set_cmt(0x49C8A4, "\"ETH\"", 0);
apply_type (0x49C8A4, "extern char str_49C8A4[4];", TINFO_DEFINITE);
cleanup("str_49C8A8");set_name(0x49C8A8, "str_49C8A8");
set_cmt(0x49C8A8, "\"Rotfeast the Hungry\"", 0);
apply_type (0x49C8A8, "extern char str_49C8A8[20];", TINFO_DEFINITE);
cleanup("str_49C8BC");set_name(0x49C8BC, "str_49C8BC");
set_cmt(0x49C8BC, "\"BR\"", 0);
apply_type (0x49C8BC, "extern char str_49C8BC[3];", TINFO_DEFINITE);
cleanup("str_49C8C0");set_name(0x49C8C0, "str_49C8C0");
set_cmt(0x49C8C0, "\"Boneripper\"", 0);
apply_type (0x49C8C0, "extern char str_49C8C0[11];", TINFO_DEFINITE);
cleanup("str_49C8CC");set_name(0x49C8CC, "str_49C8CC");
set_cmt(0x49C8CC, "\"PTU\"", 0);
apply_type (0x49C8CC, "extern char str_49C8CC[4];", TINFO_DEFINITE);
cleanup("str_49C8D0");set_name(0x49C8D0, "str_49C8D0");
set_cmt(0x49C8D0, "\"Pukerat the Unclean\"", 0);
apply_type (0x49C8D0, "extern char str_49C8D0[20];", TINFO_DEFINITE);
cleanup("str_49C8E4");set_name(0x49C8E4, "str_49C8E4");
set_cmt(0x49C8E4, "\"Soulpus\"", 0);
apply_type (0x49C8E4, "extern char str_49C8E4[8];", TINFO_DEFINITE);
cleanup("str_49C8EC");set_name(0x49C8EC, "str_49C8EC");
set_cmt(0x49C8EC, "\"BSTS\"", 0);
apply_type (0x49C8EC, "extern char str_49C8EC[5];", TINFO_DEFINITE);
cleanup("str_49C8F4");set_name(0x49C8F4, "str_49C8F4");
set_cmt(0x49C8F4, "\"Bladeskin the Slasher\"", 0);
apply_type (0x49C8F4, "extern char str_49C8F4[22];", TINFO_DEFINITE);
cleanup("str_49C90C");set_name(0x49C90C, "str_49C90C");
set_cmt(0x49C90C, "\"Bonehead Keenaxe\"", 0);
apply_type (0x49C90C, "extern char str_49C90C[17];", TINFO_DEFINITE);
cleanup("str_49C920");set_name(0x49C920, "str_49C920");
set_cmt(0x49C920, "\"Warlord of Blood\"", 0);
apply_type (0x49C920, "extern char str_49C920[17];", TINFO_DEFINITE);
cleanup("str_49C934");set_name(0x49C934, "str_49C934");
set_cmt(0x49C934, "\"BHKA\"", 0);
apply_type (0x49C934, "extern char str_49C934[5];", TINFO_DEFINITE);
cleanup("str_49C93C");set_name(0x49C93C, "str_49C93C");
set_cmt(0x49C93C, "\"Lachdanan\"", 0);
apply_type (0x49C93C, "extern char str_49C93C[10];", TINFO_DEFINITE);
cleanup("str_49C948");set_name(0x49C948, "str_49C948");
set_cmt(0x49C948, "\"BLKJD\"", 0);
apply_type (0x49C948, "extern char str_49C948[6];", TINFO_DEFINITE);
cleanup("str_49C950");set_name(0x49C950, "str_49C950");
set_cmt(0x49C950, "\"BlackJade\"", 0);
apply_type (0x49C950, "extern char str_49C950[10];", TINFO_DEFINITE);
cleanup("str_49C95C");set_name(0x49C95C, "str_49C95C");
set_cmt(0x49C95C, "\"REDV\"", 0);
apply_type (0x49C95C, "extern char str_49C95C[5];", TINFO_DEFINITE);
cleanup("str_49C964");set_name(0x49C964, "str_49C964");
set_cmt(0x49C964, "\"Red Vex\"", 0);
apply_type (0x49C964, "extern char str_49C964[8];", TINFO_DEFINITE);
cleanup("str_49C96C");set_name(0x49C96C, "str_49C96C");
set_cmt(0x49C96C, "\"Arch-Bishop Lazarus\"", 0);
apply_type (0x49C96C, "extern char str_49C96C[20];", TINFO_DEFINITE);
cleanup("str_49C980");set_name(0x49C980, "str_49C980");
set_cmt(0x49C980, "\"BNG\"", 0);
apply_type (0x49C980, "extern char str_49C980[4];", TINFO_DEFINITE);
cleanup("str_49C984");set_name(0x49C984, "str_49C984");
set_cmt(0x49C984, "\"Snotspill\"", 0);
apply_type (0x49C984, "extern char str_49C984[10];", TINFO_DEFINITE);
cleanup("str_49C990");set_name(0x49C990, "str_49C990");
set_cmt(0x49C990, "\"GENERAL\"", 0);
apply_type (0x49C990, "extern char str_49C990[8];", TINFO_DEFINITE);
cleanup("str_49C998");set_name(0x49C998, "str_49C998");
set_cmt(0x49C998, "\"Zhar the Mad\"", 0);
apply_type (0x49C998, "extern char str_49C998[13];", TINFO_DEFINITE);
cleanup("str_49C9A8");set_name(0x49C9A8, "str_49C9A8");
set_cmt(0x49C9A8, "\"GENRL\"", 0);
apply_type (0x49C9A8, "extern char str_49C9A8[6];", TINFO_DEFINITE);
cleanup("str_49C9B0");set_name(0x49C9B0, "str_49C9B0");
set_cmt(0x49C9B0, "\"BSDB\"", 0);
apply_type (0x49C9B0, "extern char str_49C9B0[5];", TINFO_DEFINITE);
cleanup("str_49C9B8");set_name(0x49C9B8, "str_49C9B8");
set_cmt(0x49C9B8, "\"Gharbad the Weak\"", 0);
apply_type (0x49C9B8, "extern char str_49C9B8[17];", TINFO_DEFINITE);
cleanup("str_49C9CC");set_name(0x49C9CC, "str_49C9CC");
set_cmt(0x49C9CC, "\"The Arch-Litch Malignus\"", 0);
apply_type (0x49C9CC, "extern char str_49C9CC[24];", TINFO_DEFINITE);
cleanup("str_49C9E4");set_name(0x49C9E4, "str_49C9E4");
set_cmt(0x49C9E4, "`Monsters\DarkMage\Dmag%c%i.WAV`", 0);
apply_type (0x49C9E4, "extern char str_49C9E4[31];", TINFO_DEFINITE);
cleanup("str_49CA04");set_name(0x49CA04, "str_49CA04");
set_cmt(0x49CA04, "`Monsters\DarkMage\Dmage%c.CL2`", 0);
apply_type (0x49CA04, "extern char str_49CA04[30];", TINFO_DEFINITE);
cleanup("str_49CA24");set_name(0x49CA24, "str_49CA24");
set_cmt(0x49CA24, "\"The Dark Lord\"", 0);
apply_type (0x49CA24, "extern char str_49CA24[14];", TINFO_DEFINITE);
cleanup("str_49CA34");set_name(0x49CA34, "str_49CA34");
set_cmt(0x49CA34, "`Monsters\Diablo\Diablo%c%i.WAV`", 0);
apply_type (0x49CA34, "extern char str_49CA34[31];", TINFO_DEFINITE);
cleanup("str_49CA54");set_name(0x49CA54, "str_49CA54");
set_cmt(0x49CA54, "`Monsters\Diablo\Diablo%c.CL2`", 0);
apply_type (0x49CA54, "extern char str_49CA54[29];", TINFO_DEFINITE);
cleanup("str_49CA74");set_name(0x49CA74, "str_49CA74");
set_cmt(0x49CA74, "\"Golem\"", 0);
apply_type (0x49CA74, "extern char str_49CA74[6];", TINFO_DEFINITE);
cleanup("str_49CA7C");set_name(0x49CA7C, "str_49CA7C");
set_cmt(0x49CA7C, "`Monsters\Golem\Golm%c%i.WAV`", 0);
apply_type (0x49CA7C, "extern char str_49CA7C[28];", TINFO_DEFINITE);
cleanup("str_49CA98");set_name(0x49CA98, "str_49CA98");
set_cmt(0x49CA98, "`Monsters\Golem\Golem%c.CL2`", 0);
apply_type (0x49CA98, "extern char str_49CA98[27];", TINFO_DEFINITE);
cleanup("str_49CAB4");set_name(0x49CAB4, "str_49CAB4");
set_cmt(0x49CAB4, "\"Advocate\"", 0);
apply_type (0x49CAB4, "extern char str_49CAB4[9];", TINFO_DEFINITE);
cleanup("str_49CAC0");set_name(0x49CAC0, "str_49CAC0");
set_cmt(0x49CAC0, "`Monsters\Mage\Cnselbk.TRN`", 0);
apply_type (0x49CAC0, "extern char str_49CAC0[26];", TINFO_DEFINITE);
cleanup("str_49CADC");set_name(0x49CADC, "str_49CADC");
set_cmt(0x49CADC, "\"Cabalist\"", 0);
apply_type (0x49CADC, "extern char str_49CADC[9];", TINFO_DEFINITE);
cleanup("str_49CAE8");set_name(0x49CAE8, "str_49CAE8");
set_cmt(0x49CAE8, "`Monsters\Mage\Cnselgd.TRN`", 0);
apply_type (0x49CAE8, "extern char str_49CAE8[26];", TINFO_DEFINITE);
cleanup("str_49CB04");set_name(0x49CB04, "str_49CB04");
set_cmt(0x49CB04, "\"Magistrate\"", 0);
apply_type (0x49CB04, "extern char str_49CB04[11];", TINFO_DEFINITE);
cleanup("str_49CB10");set_name(0x49CB10, "str_49CB10");
set_cmt(0x49CB10, "`Monsters\Mage\Cnselg.TRN`", 0);
apply_type (0x49CB10, "extern char str_49CB10[25];", TINFO_DEFINITE);
cleanup("str_49CB2C");set_name(0x49CB2C, "str_49CB2C");
set_cmt(0x49CB2C, "\"Counselor\"", 0);
apply_type (0x49CB2C, "extern char str_49CB2C[10];", TINFO_DEFINITE);
cleanup("str_49CB38");set_name(0x49CB38, "str_49CB38");
set_cmt(0x49CB38, "`Monsters\Mage\Mage%c%i.WAV`", 0);
apply_type (0x49CB38, "extern char str_49CB38[27];", TINFO_DEFINITE);
cleanup("str_49CB54");set_name(0x49CB54, "str_49CB54");
set_cmt(0x49CB54, "`Monsters\Mage\Mage%c.CL2`", 0);
apply_type (0x49CB54, "extern char str_49CB54[25];", TINFO_DEFINITE);
cleanup("str_49CB70");set_name(0x49CB70, "str_49CB70");
set_cmt(0x49CB70, "\"Soul Burner\"", 0);
apply_type (0x49CB70, "extern char str_49CB70[12];", TINFO_DEFINITE);
cleanup("str_49CB7C");set_name(0x49CB7C, "str_49CB7C");
set_cmt(0x49CB7C, "`Monsters\Succ\Succbw.TRN`", 0);
apply_type (0x49CB7C, "extern char str_49CB7C[25];", TINFO_DEFINITE);
cleanup("str_49CB98");set_name(0x49CB98, "str_49CB98");
set_cmt(0x49CB98, "\"Hell Spawn\"", 0);
apply_type (0x49CB98, "extern char str_49CB98[11];", TINFO_DEFINITE);
cleanup("str_49CBA4");set_name(0x49CBA4, "str_49CBA4");
set_cmt(0x49CBA4, "`Monsters\Succ\Succrw.TRN`", 0);
apply_type (0x49CBA4, "extern char str_49CBA4[25];", TINFO_DEFINITE);
cleanup("str_49CBC0");set_name(0x49CBC0, "str_49CBC0");
set_cmt(0x49CBC0, "\"Snow Witch\"", 0);
apply_type (0x49CBC0, "extern char str_49CBC0[11];", TINFO_DEFINITE);
cleanup("str_49CBCC");set_name(0x49CBCC, "str_49CBCC");
set_cmt(0x49CBCC, "`Monsters\Succ\Succb.TRN`", 0);
apply_type (0x49CBCC, "extern char str_49CBCC[24];", TINFO_DEFINITE);
cleanup("str_49CBE4");set_name(0x49CBE4, "str_49CBE4");
set_cmt(0x49CBE4, "\"Succubus\"", 0);
apply_type (0x49CBE4, "extern char str_49CBE4[9];", TINFO_DEFINITE);
cleanup("str_49CBF0");set_name(0x49CBF0, "str_49CBF0");
set_cmt(0x49CBF0, "`Monsters\Succ\Scbs%c%i.WAV`", 0);
apply_type (0x49CBF0, "extern char str_49CBF0[27];", TINFO_DEFINITE);
cleanup("str_49CC0C");set_name(0x49CC0C, "str_49CC0C");
set_cmt(0x49CC0C, "`Monsters\Succ\Scbs%c.CL2`", 0);
apply_type (0x49CC0C, "extern char str_49CC0C[25];", TINFO_DEFINITE);
cleanup("str_49CC28");set_name(0x49CC28, "str_49CC28");
set_cmt(0x49CC28, "\"Reality Weaver\"", 0);
apply_type (0x49CC28, "extern char str_49CC28[15];", TINFO_DEFINITE);
cleanup("str_49CC38");set_name(0x49CC38, "str_49CC38");
set_cmt(0x49CC38, "\"Pain Master\"", 0);
apply_type (0x49CC38, "extern char str_49CC38[12];", TINFO_DEFINITE);
cleanup("str_49CC44");set_name(0x49CC44, "str_49CC44");
set_cmt(0x49CC44, "\"Hollow One\"", 0);
apply_type (0x49CC44, "extern char str_49CC44[11];", TINFO_DEFINITE);
cleanup("str_49CC50");set_name(0x49CC50, "str_49CC50");
set_cmt(0x49CC50, "\"Unraveler\"", 0);
apply_type (0x49CC50, "extern char str_49CC50[10];", TINFO_DEFINITE);
cleanup("str_49CC5C");set_name(0x49CC5C, "str_49CC5C");
set_cmt(0x49CC5C, "`Monsters\Unrav\Unrav%c.CL2`", 0);
apply_type (0x49CC5C, "extern char str_49CC5C[27];", TINFO_DEFINITE);
cleanup("str_49CC78");set_name(0x49CC78, "str_49CC78");
set_cmt(0x49CC78, "\"Blood Knight\"", 0);
apply_type (0x49CC78, "extern char str_49CC78[13];", TINFO_DEFINITE);
cleanup("str_49CC88");set_name(0x49CC88, "str_49CC88");
set_cmt(0x49CC88, "`Monsters\Black\BlkKntBe.TRN`", 0);
apply_type (0x49CC88, "extern char str_49CC88[28];", TINFO_DEFINITE);
cleanup("str_49CCA4");set_name(0x49CCA4, "str_49CCA4");
set_cmt(0x49CCA4, "\"Steel Lord\"", 0);
apply_type (0x49CCA4, "extern char str_49CCA4[11];", TINFO_DEFINITE);
cleanup("str_49CCB0");set_name(0x49CCB0, "str_49CCB0");
set_cmt(0x49CCB0, "`Monsters\Black\BlkKntBT.TRN`", 0);
apply_type (0x49CCB0, "extern char str_49CCB0[28];", TINFO_DEFINITE);
cleanup("str_49CCCC");set_name(0x49CCCC, "str_49CCCC");
set_cmt(0x49CCCC, "\"Doom Guard\"", 0);
apply_type (0x49CCCC, "extern char str_49CCCC[11];", TINFO_DEFINITE);
cleanup("str_49CCD8");set_name(0x49CCD8, "str_49CCD8");
set_cmt(0x49CCD8, "`Monsters\Black\BlkKntRT.TRN`", 0);
apply_type (0x49CCD8, "extern char str_49CCD8[28];", TINFO_DEFINITE);
cleanup("str_49CCF4");set_name(0x49CCF4, "str_49CCF4");
set_cmt(0x49CCF4, "\"Black Knight\"", 0);
apply_type (0x49CCF4, "extern char str_49CCF4[13];", TINFO_DEFINITE);
cleanup("str_49CD04");set_name(0x49CD04, "str_49CD04");
set_cmt(0x49CD04, "`Monsters\Black\Black%c%i.WAV`", 0);
apply_type (0x49CD04, "extern char str_49CD04[29];", TINFO_DEFINITE);
cleanup("str_49CD24");set_name(0x49CD24, "str_49CD24");
set_cmt(0x49CD24, "`Monsters\Black\Black%c.CL2`", 0);
apply_type (0x49CD24, "extern char str_49CD24[27];", TINFO_DEFINITE);
cleanup("str_49CD40");set_name(0x49CD40, "str_49CD40");
set_cmt(0x49CD40, "\"Azure Drake\"", 0);
apply_type (0x49CD40, "extern char str_49CD40[12];", TINFO_DEFINITE);
cleanup("str_49CD4C");set_name(0x49CD4C, "str_49CD4C");
set_cmt(0x49CD4C, "`Monsters\Snake\Snakb.TRN`", 0);
apply_type (0x49CD4C, "extern char str_49CD4C[25];", TINFO_DEFINITE);
cleanup("str_49CD68");set_name(0x49CD68, "str_49CD68");
set_cmt(0x49CD68, "\"Gold Viper\"", 0);
apply_type (0x49CD68, "extern char str_49CD68[11];", TINFO_DEFINITE);
cleanup("str_49CD74");set_name(0x49CD74, "str_49CD74");
set_cmt(0x49CD74, "`Monsters\Snake\Snakg.TRN`", 0);
apply_type (0x49CD74, "extern char str_49CD74[25];", TINFO_DEFINITE);
cleanup("str_49CD90");set_name(0x49CD90, "str_49CD90");
set_cmt(0x49CD90, "\"Fire Drake\"", 0);
apply_type (0x49CD90, "extern char str_49CD90[11];", TINFO_DEFINITE);
cleanup("str_49CD9C");set_name(0x49CD9C, "str_49CD9C");
set_cmt(0x49CD9C, "`Monsters\Snake\SnakR.TRN`", 0);
apply_type (0x49CD9C, "extern char str_49CD9C[25];", TINFO_DEFINITE);
cleanup("str_49CDB8");set_name(0x49CDB8, "str_49CDB8");
set_cmt(0x49CDB8, "\"Cave Viper\"", 0);
apply_type (0x49CDB8, "extern char str_49CDB8[11];", TINFO_DEFINITE);
cleanup("str_49CDC4");set_name(0x49CDC4, "str_49CDC4");
set_cmt(0x49CDC4, "`Monsters\Snake\Snake%c%i.WAV`", 0);
apply_type (0x49CDC4, "extern char str_49CDC4[29];", TINFO_DEFINITE);
cleanup("str_49CDE4");set_name(0x49CDE4, "str_49CDE4");
set_cmt(0x49CDE4, "`Monsters\Snake\Snake%c.CL2`", 0);
apply_type (0x49CDE4, "extern char str_49CDE4[27];", TINFO_DEFINITE);
cleanup("str_49CE00");set_name(0x49CE00, "str_49CE00");
set_cmt(0x49CE00, "\"Balrog\"", 0);
apply_type (0x49CE00, "extern char str_49CE00[7];", TINFO_DEFINITE);
cleanup("str_49CE08");set_name(0x49CE08, "str_49CE08");
set_cmt(0x49CE08, "`Monsters\Mega\Balr.TRN`", 0);
apply_type (0x49CE08, "extern char str_49CE08[23];", TINFO_DEFINITE);
cleanup("str_49CE20");set_name(0x49CE20, "str_49CE20");
set_cmt(0x49CE20, "\"Vortex Lord\"", 0);
apply_type (0x49CE20, "extern char str_49CE20[12];", TINFO_DEFINITE);
cleanup("str_49CE2C");set_name(0x49CE2C, "str_49CE2C");
set_cmt(0x49CE2C, "`Monsters\Mega\Vtexl.TRN`", 0);
apply_type (0x49CE2C, "extern char str_49CE2C[24];", TINFO_DEFINITE);
cleanup("str_49CE44");set_name(0x49CE44, "str_49CE44");
set_cmt(0x49CE44, "\"Guardian\"", 0);
apply_type (0x49CE44, "extern char str_49CE44[9];", TINFO_DEFINITE);
cleanup("str_49CE50");set_name(0x49CE50, "str_49CE50");
set_cmt(0x49CE50, "`Monsters\Mega\Guard.TRN`", 0);
apply_type (0x49CE50, "extern char str_49CE50[24];", TINFO_DEFINITE);
cleanup("str_49CE68");set_name(0x49CE68, "str_49CE68");
set_cmt(0x49CE68, "\"Slayer\"", 0);
apply_type (0x49CE68, "extern char str_49CE68[7];", TINFO_DEFINITE);
cleanup("str_49CE70");set_name(0x49CE70, "str_49CE70");
set_cmt(0x49CE70, "`Monsters\Mega\Mega%c%i.WAV`", 0);
apply_type (0x49CE70, "extern char str_49CE70[27];", TINFO_DEFINITE);
cleanup("str_49CE8C");set_name(0x49CE8C, "str_49CE8C");
set_cmt(0x49CE8C, "`Monsters\Mega\Mega%c.CL2`", 0);
apply_type (0x49CE8C, "extern char str_49CE8C[25];", TINFO_DEFINITE);
cleanup("str_49CEA8");set_name(0x49CEA8, "str_49CEA8");
set_cmt(0x49CEA8, "\"Death Wing\"", 0);
apply_type (0x49CEA8, "extern char str_49CEA8[11];", TINFO_DEFINITE);
cleanup("str_49CEB4");set_name(0x49CEB4, "str_49CEB4");
set_cmt(0x49CEB4, "`Monsters\Gargoyle\GargB.TRN`", 0);
apply_type (0x49CEB4, "extern char str_49CEB4[28];", TINFO_DEFINITE);
cleanup("str_49CED0");set_name(0x49CED0, "str_49CED0");
set_cmt(0x49CED0, "\"Blood Claw\"", 0);
apply_type (0x49CED0, "extern char str_49CED0[11];", TINFO_DEFINITE);
cleanup("str_49CEDC");set_name(0x49CEDC, "str_49CEDC");
set_cmt(0x49CEDC, "`Monsters\Gargoyle\GargBr.TRN`", 0);
apply_type (0x49CEDC, "extern char str_49CEDC[29];", TINFO_DEFINITE);
cleanup("str_49CEFC");set_name(0x49CEFC, "str_49CEFC");
set_cmt(0x49CEFC, "\"Gargoyle\"", 0);
apply_type (0x49CEFC, "extern char str_49CEFC[9];", TINFO_DEFINITE);
cleanup("str_49CF08");set_name(0x49CF08, "str_49CF08");
set_cmt(0x49CF08, "`Monsters\Gargoyle\GarE.TRN`", 0);
apply_type (0x49CF08, "extern char str_49CF08[27];", TINFO_DEFINITE);
cleanup("str_49CF24");set_name(0x49CF24, "str_49CF24");
set_cmt(0x49CF24, "\"Winged-Demon\"", 0);
apply_type (0x49CF24, "extern char str_49CF24[13];", TINFO_DEFINITE);
cleanup("str_49CF34");set_name(0x49CF34, "str_49CF34");
set_cmt(0x49CF34, "`Monsters\Gargoyle\Gargo%c%i.WAV`", 0);
apply_type (0x49CF34, "extern char str_49CF34[32];", TINFO_DEFINITE);
cleanup("str_49CF54");set_name(0x49CF54, "str_49CF54");
set_cmt(0x49CF54, "`Monsters\Gargoyle\Gargo%c.CL2`", 0);
apply_type (0x49CF54, "extern char str_49CF54[30];", TINFO_DEFINITE);
cleanup("str_49CF74");set_name(0x49CF74, "str_49CF74");
set_cmt(0x49CF74, "\"Devil Kin Brute\"", 0);
apply_type (0x49CF74, "extern char str_49CF74[16];", TINFO_DEFINITE);
cleanup("str_49CF84");set_name(0x49CF84, "str_49CF84");
set_cmt(0x49CF84, "`Monsters\BigFall\Bfal%c%i.WAV`", 0);
apply_type (0x49CF84, "extern char str_49CF84[30];", TINFO_DEFINITE);
cleanup("str_49CFA4");set_name(0x49CFA4, "str_49CFA4");
set_cmt(0x49CFA4, "`Monsters\BigFall\Fallg%c.CL2`", 0);
apply_type (0x49CFA4, "extern char str_49CFA4[29];", TINFO_DEFINITE);
cleanup("str_49CFC4");set_name(0x49CFC4, "str_49CFC4");
set_cmt(0x49CFC4, "\"Maelstorm\"", 0);
apply_type (0x49CFC4, "extern char str_49CFC4[10];", TINFO_DEFINITE);
cleanup("str_49CFD0");set_name(0x49CFD0, "str_49CFD0");
set_cmt(0x49CFD0, "`Monsters\Thin\Thinv1.TRN`", 0);
apply_type (0x49CFD0, "extern char str_49CFD0[25];", TINFO_DEFINITE);
cleanup("str_49CFEC");set_name(0x49CFEC, "str_49CFEC");
set_cmt(0x49CFEC, "\"Storm Lord\"", 0);
apply_type (0x49CFEC, "extern char str_49CFEC[11];", TINFO_DEFINITE);
cleanup("str_49CFF8");set_name(0x49CFF8, "str_49CFF8");
set_cmt(0x49CFF8, "`Monsters\Thin\Thinv2.TRN`", 0);
apply_type (0x49CFF8, "extern char str_49CFF8[25];", TINFO_DEFINITE);
cleanup("str_49D014");set_name(0x49D014, "str_49D014");
set_cmt(0x49D014, "\"Storm Rider\"", 0);
apply_type (0x49D014, "extern char str_49D014[12];", TINFO_DEFINITE);
cleanup("str_49D020");set_name(0x49D020, "str_49D020");
set_cmt(0x49D020, "\"Red Storm\"", 0);
apply_type (0x49D020, "extern char str_49D020[10];", TINFO_DEFINITE);
cleanup("str_49D02C");set_name(0x49D02C, "str_49D02C");
set_cmt(0x49D02C, "\"Hell Burner\"", 0);
apply_type (0x49D02C, "extern char str_49D02C[12];", TINFO_DEFINITE);
cleanup("str_49D038");set_name(0x49D038, "str_49D038");
set_cmt(0x49D038, "\"Doom Fire\"", 0);
apply_type (0x49D038, "extern char str_49D038[10];", TINFO_DEFINITE);
cleanup("str_49D044");set_name(0x49D044, "str_49D044");
set_cmt(0x49D044, "\"Flame Lord\"", 0);
apply_type (0x49D044, "extern char str_49D044[11];", TINFO_DEFINITE);
cleanup("str_49D050");set_name(0x49D050, "str_49D050");
set_cmt(0x49D050, "\"Incinerator\"", 0);
apply_type (0x49D050, "extern char str_49D050[12];", TINFO_DEFINITE);
cleanup("str_49D05C");set_name(0x49D05C, "str_49D05C");
set_cmt(0x49D05C, "`Monsters\Fireman\FireM%c.CL2`", 0);
apply_type (0x49D05C, "extern char str_49D05C[29];", TINFO_DEFINITE);
cleanup("str_49D07C");set_name(0x49D07C, "str_49D07C");
set_cmt(0x49D07C, "\"Undead Balrog\"", 0);
apply_type (0x49D07C, "extern char str_49D07C[14];", TINFO_DEFINITE);
cleanup("str_49D08C");set_name(0x49D08C, "str_49D08C");
set_cmt(0x49D08C, "\"Litch Demon\"", 0);
apply_type (0x49D08C, "extern char str_49D08C[12];", TINFO_DEFINITE);
cleanup("str_49D098");set_name(0x49D098, "str_49D098");
set_cmt(0x49D098, "\"Red Death\"", 0);
apply_type (0x49D098, "extern char str_49D098[10];", TINFO_DEFINITE);
cleanup("str_49D0A4");set_name(0x49D0A4, "str_49D0A4");
set_cmt(0x49D0A4, "`Monsters\Thin\Thin%c.CL2`", 0);
apply_type (0x49D0A4, "extern char str_49D0A4[25];", TINFO_DEFINITE);
cleanup("str_49D0C0");set_name(0x49D0C0, "str_49D0C0");
set_cmt(0x49D0C0, "\"Bone Demon\"", 0);
apply_type (0x49D0C0, "extern char str_49D0C0[11];", TINFO_DEFINITE);
cleanup("str_49D0CC");set_name(0x49D0CC, "str_49D0CC");
set_cmt(0x49D0CC, "`Monsters\Thin\Thinv3.TRN`", 0);
apply_type (0x49D0CC, "extern char str_49D0CC[25];", TINFO_DEFINITE);
cleanup("str_49D0E8");set_name(0x49D0E8, "str_49D0E8");
set_cmt(0x49D0E8, "`Monsters\Thin\Thin%c%i.WAV`", 0);
apply_type (0x49D0E8, "extern char str_49D0E8[27];", TINFO_DEFINITE);
cleanup("str_49D104");set_name(0x49D104, "str_49D104");
set_cmt(0x49D104, "`Monsters\Demskel\Demskl%c.CL2`", 0);
apply_type (0x49D104, "extern char str_49D104[30];", TINFO_DEFINITE);
cleanup("str_49D124");set_name(0x49D124, "str_49D124");
set_cmt(0x49D124, "\"Obsidian Lord\"", 0);
apply_type (0x49D124, "extern char str_49D124[14];", TINFO_DEFINITE);
cleanup("str_49D134");set_name(0x49D134, "str_49D134");
set_cmt(0x49D134, "`Monsters\Rhino\RhinoB.TRN`", 0);
apply_type (0x49D134, "extern char str_49D134[26];", TINFO_DEFINITE);
cleanup("str_49D150");set_name(0x49D150, "str_49D150");
set_cmt(0x49D150, "\"Frost Charger\"", 0);
apply_type (0x49D150, "extern char str_49D150[14];", TINFO_DEFINITE);
cleanup("str_49D160");set_name(0x49D160, "str_49D160");
set_cmt(0x49D160, "`Monsters\Rhino\Blue.TRN`", 0);
apply_type (0x49D160, "extern char str_49D160[24];", TINFO_DEFINITE);
cleanup("str_49D178");set_name(0x49D178, "str_49D178");
set_cmt(0x49D178, "\"Mud Runner\"", 0);
apply_type (0x49D178, "extern char str_49D178[11];", TINFO_DEFINITE);
cleanup("str_49D184");set_name(0x49D184, "str_49D184");
set_cmt(0x49D184, "`Monsters\Rhino\Orange.TRN`", 0);
apply_type (0x49D184, "extern char str_49D184[26];", TINFO_DEFINITE);
cleanup("str_49D1A0");set_name(0x49D1A0, "str_49D1A0");
set_cmt(0x49D1A0, "\"Horned Demon\"", 0);
apply_type (0x49D1A0, "extern char str_49D1A0[13];", TINFO_DEFINITE);
cleanup("str_49D1B0");set_name(0x49D1B0, "str_49D1B0");
set_cmt(0x49D1B0, "`Monsters\Rhino\Rhino%c%i.WAV`", 0);
apply_type (0x49D1B0, "extern char str_49D1B0[29];", TINFO_DEFINITE);
cleanup("str_49D1D0");set_name(0x49D1D0, "str_49D1D0");
set_cmt(0x49D1D0, "`Monsters\Rhino\Rhino%c.CL2`", 0);
apply_type (0x49D1D0, "extern char str_49D1D0[27];", TINFO_DEFINITE);
cleanup("str_49D1EC");set_name(0x49D1EC, "str_49D1EC");
set_cmt(0x49D1EC, "\"Lava Lord\"", 0);
apply_type (0x49D1EC, "extern char str_49D1EC[10];", TINFO_DEFINITE);
cleanup("str_49D1F8");set_name(0x49D1F8, "str_49D1F8");
set_cmt(0x49D1F8, "`Monsters\Magma\Wierd.TRN`", 0);
apply_type (0x49D1F8, "extern char str_49D1F8[25];", TINFO_DEFINITE);
cleanup("str_49D214");set_name(0x49D214, "str_49D214");
set_cmt(0x49D214, "\"Hell Stone\"", 0);
apply_type (0x49D214, "extern char str_49D214[11];", TINFO_DEFINITE);
cleanup("str_49D220");set_name(0x49D220, "str_49D220");
set_cmt(0x49D220, "`Monsters\Magma\Blue.TRN`", 0);
apply_type (0x49D220, "extern char str_49D220[24];", TINFO_DEFINITE);
cleanup("str_49D238");set_name(0x49D238, "str_49D238");
set_cmt(0x49D238, "`Monsters\Magma\Yellow.TRN`", 0);
apply_type (0x49D238, "extern char str_49D238[26];", TINFO_DEFINITE);
cleanup("str_49D254");set_name(0x49D254, "str_49D254");
set_cmt(0x49D254, "\"Magma Demon\"", 0);
apply_type (0x49D254, "extern char str_49D254[12];", TINFO_DEFINITE);
cleanup("str_49D260");set_name(0x49D260, "str_49D260");
set_cmt(0x49D260, "`Monsters\Magma\Magma%c%i.WAV`", 0);
apply_type (0x49D260, "extern char str_49D260[29];", TINFO_DEFINITE);
cleanup("str_49D280");set_name(0x49D280, "str_49D280");
set_cmt(0x49D280, "`Monsters\Magma\Magma%c.CL2`", 0);
apply_type (0x49D280, "extern char str_49D280[27];", TINFO_DEFINITE);
cleanup("str_49D29C");set_name(0x49D29C, "str_49D29C");
set_cmt(0x49D29C, "\"Devourer\"", 0);
apply_type (0x49D29C, "extern char str_49D29C[9];", TINFO_DEFINITE);
cleanup("str_49D2A8");set_name(0x49D2A8, "str_49D2A8");
set_cmt(0x49D2A8, "\"Devil Wyrm\"", 0);
apply_type (0x49D2A8, "extern char str_49D2A8[11];", TINFO_DEFINITE);
cleanup("str_49D2B4");set_name(0x49D2B4, "str_49D2B4");
set_cmt(0x49D2B4, "\"Cave Slug\"", 0);
apply_type (0x49D2B4, "extern char str_49D2B4[10];", TINFO_DEFINITE);
cleanup("str_49D2C0");set_name(0x49D2C0, "str_49D2C0");
set_cmt(0x49D2C0, "\"Wyrm\"", 0);
apply_type (0x49D2C0, "extern char str_49D2C0[5];", TINFO_DEFINITE);
cleanup("str_49D2C8");set_name(0x49D2C8, "str_49D2C8");
set_cmt(0x49D2C8, "`Monsters\Worm\Worm%c.CL2`", 0);
apply_type (0x49D2C8, "extern char str_49D2C8[25];", TINFO_DEFINITE);
cleanup("str_49D2E4");set_name(0x49D2E4, "str_49D2E4");
set_cmt(0x49D2E4, "\"Flayed One\"", 0);
apply_type (0x49D2E4, "extern char str_49D2E4[11];", TINFO_DEFINITE);
cleanup("str_49D2F0");set_name(0x49D2F0, "str_49D2F0");
set_cmt(0x49D2F0, "`Monsters\Fat\FatF.TRN`", 0);
apply_type (0x49D2F0, "extern char str_49D2F0[22];", TINFO_DEFINITE);
cleanup("str_49D308");set_name(0x49D308, "str_49D308");
set_cmt(0x49D308, "\"Toad Demon\"", 0);
apply_type (0x49D308, "extern char str_49D308[11];", TINFO_DEFINITE);
cleanup("str_49D314");set_name(0x49D314, "str_49D314");
set_cmt(0x49D314, "`Monsters\Fat\FatB.TRN`", 0);
apply_type (0x49D314, "extern char str_49D314[22];", TINFO_DEFINITE);
cleanup("str_49D32C");set_name(0x49D32C, "str_49D32C");
set_cmt(0x49D32C, "\"Mud Man\"", 0);
apply_type (0x49D32C, "extern char str_49D32C[8];", TINFO_DEFINITE);
cleanup("str_49D334");set_name(0x49D334, "str_49D334");
set_cmt(0x49D334, "`Monsters\Fat\Blue.TRN`", 0);
apply_type (0x49D334, "extern char str_49D334[22];", TINFO_DEFINITE);
cleanup("str_49D34C");set_name(0x49D34C, "str_49D34C");
set_cmt(0x49D34C, "\"Overlord\"", 0);
apply_type (0x49D34C, "extern char str_49D34C[9];", TINFO_DEFINITE);
cleanup("str_49D358");set_name(0x49D358, "str_49D358");
set_cmt(0x49D358, "`Monsters\Fat\Fat%c%i.WAV`", 0);
apply_type (0x49D358, "extern char str_49D358[25];", TINFO_DEFINITE);
cleanup("str_49D374");set_name(0x49D374, "str_49D374");
set_cmt(0x49D374, "`Monsters\Fat\Fat%c.CL2`", 0);
apply_type (0x49D374, "extern char str_49D374[23];", TINFO_DEFINITE);
cleanup("str_49D38C");set_name(0x49D38C, "str_49D38C");
set_cmt(0x49D38C, "\"The Butcher\"", 0);
apply_type (0x49D38C, "extern char str_49D38C[12];", TINFO_DEFINITE);
cleanup("str_49D398");set_name(0x49D398, "str_49D398");
set_cmt(0x49D398, "`Monsters\FatC\FatC%c%i.WAV`", 0);
apply_type (0x49D398, "extern char str_49D398[27];", TINFO_DEFINITE);
cleanup("str_49D3B4");set_name(0x49D3B4, "str_49D3B4");
set_cmt(0x49D3B4, "`Monsters\FatC\FatC%c.CL2`", 0);
apply_type (0x49D3B4, "extern char str_49D3B4[25];", TINFO_DEFINITE);
cleanup("str_49D3D0");set_name(0x49D3D0, "str_49D3D0");
set_cmt(0x49D3D0, "\"Skeleton King\"", 0);
apply_type (0x49D3D0, "extern char str_49D3D0[14];", TINFO_DEFINITE);
cleanup("str_49D3E0");set_name(0x49D3E0, "str_49D3E0");
set_cmt(0x49D3E0, "`Monsters\SKing\SKing%c%i.WAV`", 0);
apply_type (0x49D3E0, "extern char str_49D3E0[29];", TINFO_DEFINITE);
cleanup("str_49D400");set_name(0x49D400, "str_49D400");
set_cmt(0x49D400, "`Monsters\SKing\SKing%c.CL2`", 0);
apply_type (0x49D400, "extern char str_49D400[27];", TINFO_DEFINITE);
cleanup("str_49D41C");set_name(0x49D41C, "str_49D41C");
set_cmt(0x49D41C, "\"Lava Maw\"", 0);
apply_type (0x49D41C, "extern char str_49D41C[9];", TINFO_DEFINITE);
cleanup("str_49D428");set_name(0x49D428, "str_49D428");
set_cmt(0x49D428, "`Monsters\Acid\AcidR.TRN`", 0);
apply_type (0x49D428, "extern char str_49D428[24];", TINFO_DEFINITE);
cleanup("str_49D440");set_name(0x49D440, "str_49D440");
set_cmt(0x49D440, "\"Pit Beast\"", 0);
apply_type (0x49D440, "extern char str_49D440[10];", TINFO_DEFINITE);
cleanup("str_49D44C");set_name(0x49D44C, "str_49D44C");
set_cmt(0x49D44C, "`Monsters\Acid\AcidB.TRN`", 0);
apply_type (0x49D44C, "extern char str_49D44C[24];", TINFO_DEFINITE);
cleanup("str_49D464");set_name(0x49D464, "str_49D464");
set_cmt(0x49D464, "\"Poison Spitter\"", 0);
apply_type (0x49D464, "extern char str_49D464[15];", TINFO_DEFINITE);
cleanup("str_49D474");set_name(0x49D474, "str_49D474");
set_cmt(0x49D474, "`Monsters\Acid\AcidBlk.TRN`", 0);
apply_type (0x49D474, "extern char str_49D474[26];", TINFO_DEFINITE);
cleanup("str_49D490");set_name(0x49D490, "str_49D490");
set_cmt(0x49D490, "\"Acid Beast\"", 0);
apply_type (0x49D490, "extern char str_49D490[11];", TINFO_DEFINITE);
cleanup("str_49D49C");set_name(0x49D49C, "str_49D49C");
set_cmt(0x49D49C, "`Monsters\Acid\Acid%c%i.WAV`", 0);
apply_type (0x49D49C, "extern char str_49D49C[27];", TINFO_DEFINITE);
cleanup("str_49D4B8");set_name(0x49D4B8, "str_49D4B8");
set_cmt(0x49D4B8, "`Monsters\Acid\Acid%c.CL2`", 0);
apply_type (0x49D4B8, "extern char str_49D4B8[25];", TINFO_DEFINITE);
cleanup("str_49D4D4");set_name(0x49D4D4, "str_49D4D4");
set_cmt(0x49D4D4, "`Monsters\GoatBow\Gray.TRN`", 0);
apply_type (0x49D4D4, "extern char str_49D4D4[26];", TINFO_DEFINITE);
cleanup("str_49D4F0");set_name(0x49D4F0, "str_49D4F0");
set_cmt(0x49D4F0, "`Monsters\GoatBow\Red.TRN`", 0);
apply_type (0x49D4F0, "extern char str_49D4F0[25];", TINFO_DEFINITE);
cleanup("str_49D50C");set_name(0x49D50C, "str_49D50C");
set_cmt(0x49D50C, "`Monsters\GoatBow\Beige.TRN`", 0);
apply_type (0x49D50C, "extern char str_49D50C[27];", TINFO_DEFINITE);
cleanup("str_49D528");set_name(0x49D528, "str_49D528");
set_cmt(0x49D528, "`Monsters\GoatBow\GoatB%c%i.WAV`", 0);
apply_type (0x49D528, "extern char str_49D528[31];", TINFO_DEFINITE);
cleanup("str_49D548");set_name(0x49D548, "str_49D548");
set_cmt(0x49D548, "`Monsters\GoatBow\GoatB%c.CL2`", 0);
apply_type (0x49D548, "extern char str_49D548[29];", TINFO_DEFINITE);
cleanup("str_49D568");set_name(0x49D568, "str_49D568");
set_cmt(0x49D568, "\"Familiar\"", 0);
apply_type (0x49D568, "extern char str_49D568[9];", TINFO_DEFINITE);
cleanup("str_49D574");set_name(0x49D574, "str_49D574");
set_cmt(0x49D574, "`Monsters\Bat\orange.trn`", 0);
apply_type (0x49D574, "extern char str_49D574[24];", TINFO_DEFINITE);
cleanup("str_49D58C");set_name(0x49D58C, "str_49D58C");
set_cmt(0x49D58C, "\"Gloom\"", 0);
apply_type (0x49D58C, "extern char str_49D58C[6];", TINFO_DEFINITE);
cleanup("str_49D594");set_name(0x49D594, "str_49D594");
set_cmt(0x49D594, "`Monsters\Bat\grey.trn`", 0);
apply_type (0x49D594, "extern char str_49D594[22];", TINFO_DEFINITE);
cleanup("str_49D5AC");set_name(0x49D5AC, "str_49D5AC");
set_cmt(0x49D5AC, "\"Blink\"", 0);
apply_type (0x49D5AC, "extern char str_49D5AC[6];", TINFO_DEFINITE);
cleanup("str_49D5B4");set_name(0x49D5B4, "str_49D5B4");
set_cmt(0x49D5B4, "\"Fiend\"", 0);
apply_type (0x49D5B4, "extern char str_49D5B4[6];", TINFO_DEFINITE);
cleanup("str_49D5BC");set_name(0x49D5BC, "str_49D5BC");
set_cmt(0x49D5BC, "`Monsters\Bat\red.trn`", 0);
apply_type (0x49D5BC, "extern char str_49D5BC[21];", TINFO_DEFINITE);
cleanup("str_49D5D4");set_name(0x49D5D4, "str_49D5D4");
set_cmt(0x49D5D4, "`Monsters\Bat\Bat%c%i.WAV`", 0);
apply_type (0x49D5D4, "extern char str_49D5D4[25];", TINFO_DEFINITE);
cleanup("str_49D5F0");set_name(0x49D5F0, "str_49D5F0");
set_cmt(0x49D5F0, "`Monsters\Bat\Bat%c.CL2`", 0);
apply_type (0x49D5F0, "extern char str_49D5F0[23];", TINFO_DEFINITE);
cleanup("str_49D608");set_name(0x49D608, "str_49D608");
set_cmt(0x49D608, "\"Night Clan\"", 0);
apply_type (0x49D608, "extern char str_49D608[11];", TINFO_DEFINITE);
cleanup("str_49D614");set_name(0x49D614, "str_49D614");
set_cmt(0x49D614, "`Monsters\GoatMace\Gray.TRN`", 0);
apply_type (0x49D614, "extern char str_49D614[27];", TINFO_DEFINITE);
cleanup("str_49D630");set_name(0x49D630, "str_49D630");
set_cmt(0x49D630, "\"Fire Clan\"", 0);
apply_type (0x49D630, "extern char str_49D630[10];", TINFO_DEFINITE);
cleanup("str_49D63C");set_name(0x49D63C, "str_49D63C");
set_cmt(0x49D63C, "`Monsters\GoatMace\Red.TRN`", 0);
apply_type (0x49D63C, "extern char str_49D63C[26];", TINFO_DEFINITE);
cleanup("str_49D658");set_name(0x49D658, "str_49D658");
set_cmt(0x49D658, "\"Stone Clan\"", 0);
apply_type (0x49D658, "extern char str_49D658[11];", TINFO_DEFINITE);
cleanup("str_49D664");set_name(0x49D664, "str_49D664");
set_cmt(0x49D664, "`Monsters\GoatMace\Beige.TRN`", 0);
apply_type (0x49D664, "extern char str_49D664[28];", TINFO_DEFINITE);
cleanup("str_49D680");set_name(0x49D680, "str_49D680");
set_cmt(0x49D680, "\"Flesh Clan\"", 0);
apply_type (0x49D680, "extern char str_49D680[11];", TINFO_DEFINITE);
cleanup("str_49D68C");set_name(0x49D68C, "str_49D68C");
set_cmt(0x49D68C, "`Monsters\GoatMace\Goat%c%i.WAV`", 0);
apply_type (0x49D68C, "extern char str_49D68C[31];", TINFO_DEFINITE);
cleanup("str_49D6AC");set_name(0x49D6AC, "str_49D6AC");
set_cmt(0x49D6AC, "`Monsters\GoatMace\Goat%c.CL2`", 0);
apply_type (0x49D6AC, "extern char str_49D6AC[29];", TINFO_DEFINITE);
cleanup("str_49D6CC");set_name(0x49D6CC, "str_49D6CC");
set_cmt(0x49D6CC, "\"Lord Sayter\"", 0);
apply_type (0x49D6CC, "extern char str_49D6CC[12];", TINFO_DEFINITE);
cleanup("str_49D6D8");set_name(0x49D6D8, "str_49D6D8");
set_cmt(0x49D6D8, "`Monsters\GoatLord\Goatl%c%i.WAV`", 0);
apply_type (0x49D6D8, "extern char str_49D6D8[32];", TINFO_DEFINITE);
cleanup("str_49D6F8");set_name(0x49D6F8, "str_49D6F8");
set_cmt(0x49D6F8, "`Monsters\GoatLord\GoatL%c.CL2`", 0);
apply_type (0x49D6F8, "extern char str_49D6F8[30];", TINFO_DEFINITE);
cleanup("str_49D718");set_name(0x49D718, "str_49D718");
set_cmt(0x49D718, "\"Illusion Weaver\"", 0);
apply_type (0x49D718, "extern char str_49D718[16];", TINFO_DEFINITE);
cleanup("str_49D728");set_name(0x49D728, "str_49D728");
set_cmt(0x49D728, "`Monsters\Sneak\Sneakv1.TRN`", 0);
apply_type (0x49D728, "extern char str_49D728[27];", TINFO_DEFINITE);
cleanup("str_49D744");set_name(0x49D744, "str_49D744");
set_cmt(0x49D744, "\"Unseen\"", 0);
apply_type (0x49D744, "extern char str_49D744[7];", TINFO_DEFINITE);
cleanup("str_49D74C");set_name(0x49D74C, "str_49D74C");
set_cmt(0x49D74C, "`Monsters\Sneak\Sneakv3.TRN`", 0);
apply_type (0x49D74C, "extern char str_49D74C[27];", TINFO_DEFINITE);
cleanup("str_49D768");set_name(0x49D768, "str_49D768");
set_cmt(0x49D768, "\"Stalker\"", 0);
apply_type (0x49D768, "extern char str_49D768[8];", TINFO_DEFINITE);
cleanup("str_49D770");set_name(0x49D770, "str_49D770");
set_cmt(0x49D770, "`Monsters\Sneak\Sneakv2.TRN`", 0);
apply_type (0x49D770, "extern char str_49D770[27];", TINFO_DEFINITE);
cleanup("str_49D78C");set_name(0x49D78C, "str_49D78C");
set_cmt(0x49D78C, "\"Hidden\"", 0);
apply_type (0x49D78C, "extern char str_49D78C[7];", TINFO_DEFINITE);
cleanup("str_49D794");set_name(0x49D794, "str_49D794");
set_cmt(0x49D794, "`Monsters\Sneak\Sneak%c%i.WAV`", 0);
apply_type (0x49D794, "extern char str_49D794[29];", TINFO_DEFINITE);
cleanup("str_49D7B4");set_name(0x49D7B4, "str_49D7B4");
set_cmt(0x49D7B4, "`Monsters\Sneak\Sneak%c.CL2`", 0);
apply_type (0x49D7B4, "extern char str_49D7B4[27];", TINFO_DEFINITE);
cleanup("str_49D7D0");set_name(0x49D7D0, "str_49D7D0");
set_cmt(0x49D7D0, "\"Invisible Lord\"", 0);
apply_type (0x49D7D0, "extern char str_49D7D0[15];", TINFO_DEFINITE);
cleanup("str_49D7E0");set_name(0x49D7E0, "str_49D7E0");
set_cmt(0x49D7E0, "`Monsters\TSneak\Sneakl%c%i.WAV`", 0);
apply_type (0x49D7E0, "extern char str_49D7E0[31];", TINFO_DEFINITE);
cleanup("str_49D800");set_name(0x49D800, "str_49D800");
set_cmt(0x49D800, "`Monsters\TSneak\TSneak%c.CL2`", 0);
apply_type (0x49D800, "extern char str_49D800[29];", TINFO_DEFINITE);
cleanup("str_49D820");set_name(0x49D820, "str_49D820");
set_cmt(0x49D820, "\"Horror Captain\"", 0);
apply_type (0x49D820, "extern char str_49D820[15];", TINFO_DEFINITE);
cleanup("str_49D830");set_name(0x49D830, "str_49D830");
set_cmt(0x49D830, "`Monsters\SkelSd\Black.TRN`", 0);
apply_type (0x49D830, "extern char str_49D830[26];", TINFO_DEFINITE);
cleanup("str_49D84C");set_name(0x49D84C, "str_49D84C");
set_cmt(0x49D84C, "\"Burning Dead Captain\"", 0);
apply_type (0x49D84C, "extern char str_49D84C[21];", TINFO_DEFINITE);
cleanup("str_49D864");set_name(0x49D864, "str_49D864");
set_cmt(0x49D864, "\"Corpse Captain\"", 0);
apply_type (0x49D864, "extern char str_49D864[15];", TINFO_DEFINITE);
cleanup("str_49D874");set_name(0x49D874, "str_49D874");
set_cmt(0x49D874, "`Monsters\SkelSd\Skelt.TRN`", 0);
apply_type (0x49D874, "extern char str_49D874[26];", TINFO_DEFINITE);
cleanup("str_49D890");set_name(0x49D890, "str_49D890");
set_cmt(0x49D890, "\"Skeleton Captain\"", 0);
apply_type (0x49D890, "extern char str_49D890[17];", TINFO_DEFINITE);
cleanup("str_49D8A4");set_name(0x49D8A4, "str_49D8A4");
set_cmt(0x49D8A4, "`Monsters\SkelSd\White.TRN`", 0);
apply_type (0x49D8A4, "extern char str_49D8A4[26];", TINFO_DEFINITE);
cleanup("str_49D8C0");set_name(0x49D8C0, "str_49D8C0");
set_cmt(0x49D8C0, "`Monsters\SkelSd\SklSr%c%i.WAV`", 0);
apply_type (0x49D8C0, "extern char str_49D8C0[30];", TINFO_DEFINITE);
cleanup("str_49D8E0");set_name(0x49D8E0, "str_49D8E0");
set_cmt(0x49D8E0, "`Monsters\SkelSd\SklSr%c.CL2`", 0);
apply_type (0x49D8E0, "extern char str_49D8E0[28];", TINFO_DEFINITE);
cleanup("str_49D8FC");set_name(0x49D8FC, "str_49D8FC");
set_cmt(0x49D8FC, "`Monsters\SkelBow\Black.TRN`", 0);
apply_type (0x49D8FC, "extern char str_49D8FC[27];", TINFO_DEFINITE);
cleanup("str_49D918");set_name(0x49D918, "str_49D918");
set_cmt(0x49D918, "\"Corpse Bow\"", 0);
apply_type (0x49D918, "extern char str_49D918[11];", TINFO_DEFINITE);
cleanup("str_49D924");set_name(0x49D924, "str_49D924");
set_cmt(0x49D924, "`Monsters\SkelBow\Skelt.TRN`", 0);
apply_type (0x49D924, "extern char str_49D924[27];", TINFO_DEFINITE);
cleanup("str_49D940");set_name(0x49D940, "str_49D940");
set_cmt(0x49D940, "`Monsters\SkelBow\White.TRN`", 0);
apply_type (0x49D940, "extern char str_49D940[27];", TINFO_DEFINITE);
cleanup("str_49D95C");set_name(0x49D95C, "str_49D95C");
set_cmt(0x49D95C, "`Monsters\SkelBow\SklBw%c%i.WAV`", 0);
apply_type (0x49D95C, "extern char str_49D95C[31];", TINFO_DEFINITE);
cleanup("str_49D97C");set_name(0x49D97C, "str_49D97C");
set_cmt(0x49D97C, "`Monsters\SkelBow\SklBw%c.CL2`", 0);
apply_type (0x49D97C, "extern char str_49D97C[29];", TINFO_DEFINITE);
cleanup("str_49D99C");set_name(0x49D99C, "str_49D99C");
set_cmt(0x49D99C, "\"Bone Gasher\"", 0);
apply_type (0x49D99C, "extern char str_49D99C[12];", TINFO_DEFINITE);
cleanup("str_49D9A8");set_name(0x49D9A8, "str_49D9A8");
set_cmt(0x49D9A8, "`Monsters\Scav\ScavW.TRN`", 0);
apply_type (0x49D9A8, "extern char str_49D9A8[24];", TINFO_DEFINITE);
cleanup("str_49D9C0");set_name(0x49D9C0, "str_49D9C0");
set_cmt(0x49D9C0, "\"Shadow Beast\"", 0);
apply_type (0x49D9C0, "extern char str_49D9C0[13];", TINFO_DEFINITE);
cleanup("str_49D9D0");set_name(0x49D9D0, "str_49D9D0");
set_cmt(0x49D9D0, "`Monsters\Scav\ScavBe.TRN`", 0);
apply_type (0x49D9D0, "extern char str_49D9D0[25];", TINFO_DEFINITE);
cleanup("str_49D9EC");set_name(0x49D9EC, "str_49D9EC");
set_cmt(0x49D9EC, "\"Plague Eater\"", 0);
apply_type (0x49D9EC, "extern char str_49D9EC[13];", TINFO_DEFINITE);
cleanup("str_49D9FC");set_name(0x49D9FC, "str_49D9FC");
set_cmt(0x49D9FC, "`Monsters\Scav\ScavBr.TRN`", 0);
apply_type (0x49D9FC, "extern char str_49D9FC[25];", TINFO_DEFINITE);
cleanup("str_49DA18");set_name(0x49DA18, "str_49DA18");
set_cmt(0x49DA18, "\"Scavenger\"", 0);
apply_type (0x49DA18, "extern char str_49DA18[10];", TINFO_DEFINITE);
cleanup("str_49DA24");set_name(0x49DA24, "str_49DA24");
set_cmt(0x49DA24, "`Monsters\Scav\Scav%c%i.WAV`", 0);
apply_type (0x49DA24, "extern char str_49DA24[27];", TINFO_DEFINITE);
cleanup("str_49DA40");set_name(0x49DA40, "str_49DA40");
set_cmt(0x49DA40, "`Monsters\Scav\Scav%c.CL2`", 0);
apply_type (0x49DA40, "extern char str_49DA40[25];", TINFO_DEFINITE);
cleanup("str_49DA5C");set_name(0x49DA5C, "str_49DA5C");
set_cmt(0x49DA5C, "`Monsters\FalSword\Blue.TRN`", 0);
apply_type (0x49DA5C, "extern char str_49DA5C[27];", TINFO_DEFINITE);
cleanup("str_49DA78");set_name(0x49DA78, "str_49DA78");
set_cmt(0x49DA78, "`Monsters\FalSword\Dark.TRN`", 0);
apply_type (0x49DA78, "extern char str_49DA78[27];", TINFO_DEFINITE);
cleanup("str_49DA94");set_name(0x49DA94, "str_49DA94");
set_cmt(0x49DA94, "`Monsters\FalSword\FallenT.TRN`", 0);
apply_type (0x49DA94, "extern char str_49DA94[30];", TINFO_DEFINITE);
cleanup("str_49DAB4");set_name(0x49DAB4, "str_49DAB4");
set_cmt(0x49DAB4, "`Monsters\FalSword\Fall%c%i.WAV`", 0);
apply_type (0x49DAB4, "extern char str_49DAB4[31];", TINFO_DEFINITE);
cleanup("str_49DAD4");set_name(0x49DAD4, "str_49DAD4");
set_cmt(0x49DAD4, "`Monsters\FalSword\Fall%c.CL2`", 0);
apply_type (0x49DAD4, "extern char str_49DAD4[29];", TINFO_DEFINITE);
cleanup("str_49DAF4");set_name(0x49DAF4, "str_49DAF4");
set_cmt(0x49DAF4, "\"Horror\"", 0);
apply_type (0x49DAF4, "extern char str_49DAF4[7];", TINFO_DEFINITE);
cleanup("str_49DAFC");set_name(0x49DAFC, "str_49DAFC");
set_cmt(0x49DAFC, "`Monsters\SkelAxe\Black.TRN`", 0);
apply_type (0x49DAFC, "extern char str_49DAFC[27];", TINFO_DEFINITE);
cleanup("str_49DB18");set_name(0x49DB18, "str_49DB18");
set_cmt(0x49DB18, "\"Burning Dead\"", 0);
apply_type (0x49DB18, "extern char str_49DB18[13];", TINFO_DEFINITE);
cleanup("str_49DB28");set_name(0x49DB28, "str_49DB28");
set_cmt(0x49DB28, "\"Corpse Axe\"", 0);
apply_type (0x49DB28, "extern char str_49DB28[11];", TINFO_DEFINITE);
cleanup("str_49DB34");set_name(0x49DB34, "str_49DB34");
set_cmt(0x49DB34, "`Monsters\SkelAxe\Skelt.TRN`", 0);
apply_type (0x49DB34, "extern char str_49DB34[27];", TINFO_DEFINITE);
cleanup("str_49DB50");set_name(0x49DB50, "str_49DB50");
set_cmt(0x49DB50, "\"Skeleton\"", 0);
apply_type (0x49DB50, "extern char str_49DB50[9];", TINFO_DEFINITE);
cleanup("str_49DB5C");set_name(0x49DB5C, "str_49DB5C");
set_cmt(0x49DB5C, "`Monsters\SkelAxe\White.TRN`", 0);
apply_type (0x49DB5C, "extern char str_49DB5C[27];", TINFO_DEFINITE);
cleanup("str_49DB78");set_name(0x49DB78, "str_49DB78");
set_cmt(0x49DB78, "`Monsters\SkelAxe\SklAx%c%i.WAV`", 0);
apply_type (0x49DB78, "extern char str_49DB78[31];", TINFO_DEFINITE);
cleanup("str_49DB98");set_name(0x49DB98, "str_49DB98");
set_cmt(0x49DB98, "`Monsters\SkelAxe\SklAx%c.CL2`", 0);
apply_type (0x49DB98, "extern char str_49DB98[29];", TINFO_DEFINITE);
cleanup("str_49DBB8");set_name(0x49DBB8, "str_49DBB8");
set_cmt(0x49DBB8, "\"Dark One\"", 0);
apply_type (0x49DBB8, "extern char str_49DBB8[9];", TINFO_DEFINITE);
cleanup("str_49DBC4");set_name(0x49DBC4, "str_49DBC4");
set_cmt(0x49DBC4, "`Monsters\FalSpear\Blue.TRN`", 0);
apply_type (0x49DBC4, "extern char str_49DBC4[27];", TINFO_DEFINITE);
cleanup("str_49DBE0");set_name(0x49DBE0, "str_49DBE0");
set_cmt(0x49DBE0, "\"Devil Kin\"", 0);
apply_type (0x49DBE0, "extern char str_49DBE0[10];", TINFO_DEFINITE);
cleanup("str_49DBEC");set_name(0x49DBEC, "str_49DBEC");
set_cmt(0x49DBEC, "\"Carver\"", 0);
apply_type (0x49DBEC, "extern char str_49DBEC[7];", TINFO_DEFINITE);
cleanup("str_49DBF4");set_name(0x49DBF4, "str_49DBF4");
set_cmt(0x49DBF4, "`Monsters\FalSpear\Dark.TRN`", 0);
apply_type (0x49DBF4, "extern char str_49DBF4[27];", TINFO_DEFINITE);
cleanup("str_49DC10");set_name(0x49DC10, "str_49DC10");
set_cmt(0x49DC10, "\"Fallen One\"", 0);
apply_type (0x49DC10, "extern char str_49DC10[11];", TINFO_DEFINITE);
cleanup("str_49DC1C");set_name(0x49DC1C, "str_49DC1C");
set_cmt(0x49DC1C, "`Monsters\FalSpear\FallenT.TRN`", 0);
apply_type (0x49DC1C, "extern char str_49DC1C[30];", TINFO_DEFINITE);
cleanup("str_49DC3C");set_name(0x49DC3C, "str_49DC3C");
set_cmt(0x49DC3C, "`Monsters\FalSpear\Phall%c%i.WAV`", 0);
apply_type (0x49DC3C, "extern char str_49DC3C[32];", TINFO_DEFINITE);
cleanup("str_49DC5C");set_name(0x49DC5C, "str_49DC5C");
set_cmt(0x49DC5C, "`Monsters\FalSpear\Phall%c.CL2`", 0);
apply_type (0x49DC5C, "extern char str_49DC5C[30];", TINFO_DEFINITE);
cleanup("str_49DC7C");set_name(0x49DC7C, "str_49DC7C");
set_cmt(0x49DC7C, "\"Black Death\"", 0);
apply_type (0x49DC7C, "extern char str_49DC7C[12];", TINFO_DEFINITE);
cleanup("str_49DC88");set_name(0x49DC88, "str_49DC88");
set_cmt(0x49DC88, "`Monsters\Zombie\Yellow.TRN`", 0);
apply_type (0x49DC88, "extern char str_49DC88[27];", TINFO_DEFINITE);
cleanup("str_49DCA4");set_name(0x49DCA4, "str_49DCA4");
set_cmt(0x49DCA4, "\"Rotting Carcass\"", 0);
apply_type (0x49DCA4, "extern char str_49DCA4[16];", TINFO_DEFINITE);
cleanup("str_49DCB4");set_name(0x49DCB4, "str_49DCB4");
set_cmt(0x49DCB4, "`Monsters\Zombie\Grey.TRN`", 0);
apply_type (0x49DCB4, "extern char str_49DCB4[25];", TINFO_DEFINITE);
cleanup("str_49DCD0");set_name(0x49DCD0, "str_49DCD0");
set_cmt(0x49DCD0, "\"Ghoul\"", 0);
apply_type (0x49DCD0, "extern char str_49DCD0[6];", TINFO_DEFINITE);
cleanup("str_49DCD8");set_name(0x49DCD8, "str_49DCD8");
set_cmt(0x49DCD8, "`Monsters\Zombie\Bluered.TRN`", 0);
apply_type (0x49DCD8, "extern char str_49DCD8[28];", TINFO_DEFINITE);
cleanup("str_49DCF4");set_name(0x49DCF4, "str_49DCF4");
set_cmt(0x49DCF4, "\"Zombie\"", 0);
apply_type (0x49DCF4, "extern char str_49DCF4[7];", TINFO_DEFINITE);
cleanup("str_49DCFC");set_name(0x49DCFC, "str_49DCFC");
set_cmt(0x49DCFC, "`Monsters\Zombie\Zombie%c%i.WAV`", 0);
apply_type (0x49DCFC, "extern char str_49DCFC[31];", TINFO_DEFINITE);
cleanup("str_49DD1C");set_name(0x49DD1C, "str_49DD1C");
set_cmt(0x49DD1C, "`Monsters\Zombie\Zombie%c.CL2`", 0);
apply_type (0x49DD1C, "extern char str_49DD1C[29];", TINFO_DEFINITE);
cleanup("str_49DD3C");set_name(0x49DD3C, "str_49DD3C");
set_cmt(0x49DD3C, "\"Invalid Monster\"", 0);
apply_type (0x49DD3C, "extern char str_49DD3C[16];", TINFO_DEFINITE);
cleanup("str_49DFD4");set_name(0x49DFD4, "str_49DFD4");
set_cmt(0x49DFD4, "`Monsters\Monsters\%s.TRN`", 0);
apply_type (0x49DFD4, "extern char str_49DFD4[25];", TINFO_DEFINITE);
cleanup("str_49DFF0");set_name(0x49DFF0, "str_49DFF0");
set_cmt(0x49DFF0, "`Levels\L3Data\Anvil.DUN`", 0);
apply_type (0x49DFF0, "extern char str_49DFF0[24];", TINFO_DEFINITE);
cleanup("str_49E008");set_name(0x49E008, "str_49E008");
set_cmt(0x49E008, "`Levels\L2Data\Blood2.DUN`", 0);
apply_type (0x49E008, "extern char str_49E008[25];", TINFO_DEFINITE);
cleanup("str_49E024");set_name(0x49E024, "str_49E024");
set_cmt(0x49E024, "`Levels\L1Data\Banner1.DUN`", 0);
apply_type (0x49E024, "extern char str_49E024[26];", TINFO_DEFINITE);
cleanup("str_49E040");set_name(0x49E040, "str_49E040");
set_cmt(0x49E040, "\"Monster %d \"%s\" getting hit by monster: MType NULL\"", 0);
apply_type (0x49E040, "extern char str_49E040[51];", TINFO_DEFINITE);
cleanup("str_49E074");set_name(0x49E074, "str_49E074");
set_cmt(0x49E074, "\"Invalid monster %d getting hit by monster\"", 0);
apply_type (0x49E074, "extern char str_49E074[42];", TINFO_DEFINITE);
cleanup("str_49E0A0");set_name(0x49E0A0, "str_49E0A0");
set_cmt(0x49E0A0, "\"MonstStartKill: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E0A0, "extern char str_49E0A0[43];", TINFO_DEFINITE);
cleanup("str_49E0CC");set_name(0x49E0CC, "str_49E0CC");
set_cmt(0x49E0CC, "\"MonstStartKill: Invalid monster %d\"", 0);
apply_type (0x49E0CC, "extern char str_49E0CC[35];", TINFO_DEFINITE);
cleanup("str_49E0F0");set_name(0x49E0F0, "str_49E0F0");
set_cmt(0x49E0F0, "\"M2MStartKill: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E0F0, "extern char str_49E0F0[41];", TINFO_DEFINITE);
cleanup("str_49E11C");set_name(0x49E11C, "str_49E11C");
set_cmt(0x49E11C, "\"M2MStartKill: Invalid monster (killed) %d\"", 0);
apply_type (0x49E11C, "extern char str_49E11C[42];", TINFO_DEFINITE);
cleanup("str_49E148");set_name(0x49E148, "str_49E148");
set_cmt(0x49E148, "\"M2MStartKill: Invalid monster (attacker) %d\"", 0);
apply_type (0x49E148, "extern char str_49E148[44];", TINFO_DEFINITE);
cleanup("str_49E174");set_name(0x49E174, "str_49E174");
set_cmt(0x49E174, "\"M_StartKill: Invalid monster %d\"", 0);
apply_type (0x49E174, "extern char str_49E174[32];", TINFO_DEFINITE);
cleanup("str_49E194");set_name(0x49E194, "str_49E194");
set_cmt(0x49E194, "\"M_SyncStartKill: Invalid monster %d\"", 0);
apply_type (0x49E194, "extern char str_49E194[36];", TINFO_DEFINITE);
cleanup("str_49E1B8");set_name(0x49E1B8, "str_49E1B8");
set_cmt(0x49E1B8, "\"M_StartFadein: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E1B8, "extern char str_49E1B8[42];", TINFO_DEFINITE);
cleanup("str_49E1E4");set_name(0x49E1E4, "str_49E1E4");
set_cmt(0x49E1E4, "\"M_StartFadein: Invalid monster %d\"", 0);
apply_type (0x49E1E4, "extern char str_49E1E4[34];", TINFO_DEFINITE);
cleanup("str_49E208");set_name(0x49E208, "str_49E208");
set_cmt(0x49E208, "\"M_StartFadeout: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E208, "extern char str_49E208[43];", TINFO_DEFINITE);
cleanup("str_49E234");set_name(0x49E234, "str_49E234");
set_cmt(0x49E234, "\"M_StartFadeout: Invalid monster %d\"", 0);
apply_type (0x49E234, "extern char str_49E234[35];", TINFO_DEFINITE);
cleanup("str_49E258");set_name(0x49E258, "str_49E258");
set_cmt(0x49E258, "\"M_StartHeal: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E258, "extern char str_49E258[40];", TINFO_DEFINITE);
cleanup("str_49E280");set_name(0x49E280, "str_49E280");
set_cmt(0x49E280, "\"M_StartHeal: Invalid monster %d\"", 0);
apply_type (0x49E280, "extern char str_49E280[32];", TINFO_DEFINITE);
cleanup("str_49E2A0");set_name(0x49E2A0, "str_49E2A0");
set_cmt(0x49E2A0, "\"M_ChangeLightOffset: Invalid monster %d\"", 0);
apply_type (0x49E2A0, "extern char str_49E2A0[40];", TINFO_DEFINITE);
cleanup("str_49E2C8");set_name(0x49E2C8, "str_49E2C8");
set_cmt(0x49E2C8, "\"M_DoStand: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E2C8, "extern char str_49E2C8[38];", TINFO_DEFINITE);
cleanup("str_49E2F0");set_name(0x49E2F0, "str_49E2F0");
set_cmt(0x49E2F0, "\"M_DoStand: Invalid monster %d\"", 0);
apply_type (0x49E2F0, "extern char str_49E2F0[30];", TINFO_DEFINITE);
cleanup("str_49E310");set_name(0x49E310, "str_49E310");
set_cmt(0x49E310, "\"M_DoWalk: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E310, "extern char str_49E310[37];", TINFO_DEFINITE);
cleanup("str_49E338");set_name(0x49E338, "str_49E338");
set_cmt(0x49E338, "\"M_DoWalk: Invalid monster %d\"", 0);
apply_type (0x49E338, "extern char str_49E338[29];", TINFO_DEFINITE);
cleanup("str_49E358");set_name(0x49E358, "str_49E358");
set_cmt(0x49E358, "\"M_DoWalk2: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E358, "extern char str_49E358[38];", TINFO_DEFINITE);
cleanup("str_49E380");set_name(0x49E380, "str_49E380");
set_cmt(0x49E380, "\"M_DoWalk2: Invalid monster %d\"", 0);
apply_type (0x49E380, "extern char str_49E380[30];", TINFO_DEFINITE);
cleanup("str_49E3A0");set_name(0x49E3A0, "str_49E3A0");
set_cmt(0x49E3A0, "\"M_DoWalk3: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E3A0, "extern char str_49E3A0[38];", TINFO_DEFINITE);
cleanup("str_49E3C8");set_name(0x49E3C8, "str_49E3C8");
set_cmt(0x49E3C8, "\"M_DoWalk3: Invalid monster %d\"", 0);
apply_type (0x49E3C8, "extern char str_49E3C8[30];", TINFO_DEFINITE);
cleanup("str_49E3E8");set_name(0x49E3E8, "str_49E3E8");
set_cmt(0x49E3E8, "\"M_TryM2MHit: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E3E8, "extern char str_49E3E8[40];", TINFO_DEFINITE);
cleanup("str_49E410");set_name(0x49E410, "str_49E410");
set_cmt(0x49E410, "\"M_TryM2MHit: Invalid monster %d\"", 0);
apply_type (0x49E410, "extern char str_49E410[32];", TINFO_DEFINITE);
cleanup("str_49E430");set_name(0x49E430, "str_49E430");
set_cmt(0x49E430, "\"M_TryH2HHit: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E430, "extern char str_49E430[40];", TINFO_DEFINITE);
cleanup("str_49E458");set_name(0x49E458, "str_49E458");
set_cmt(0x49E458, "\"M_TryH2HHit: Invalid monster %d\"", 0);
apply_type (0x49E458, "extern char str_49E458[32];", TINFO_DEFINITE);
cleanup("str_49E478");set_name(0x49E478, "str_49E478");
set_cmt(0x49E478, "\"M_DoAttack: Monster %d \"%s\" MData NULL\"", 0);
apply_type (0x49E478, "extern char str_49E478[39];", TINFO_DEFINITE);
cleanup("str_49E4A0");set_name(0x49E4A0, "str_49E4A0");
set_cmt(0x49E4A0, "\"M_DoAttack: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E4A0, "extern char str_49E4A0[39];", TINFO_DEFINITE);
cleanup("str_49E4C8");set_name(0x49E4C8, "str_49E4C8");
set_cmt(0x49E4C8, "\"M_DoAttack: Invalid monster %d\"", 0);
apply_type (0x49E4C8, "extern char str_49E4C8[31];", TINFO_DEFINITE);
cleanup("str_49E4E8");set_name(0x49E4E8, "str_49E4E8");
set_cmt(0x49E4E8, "\"M_DoRAttack: Monster %d \"%s\" MData NULL\"", 0);
apply_type (0x49E4E8, "extern char str_49E4E8[40];", TINFO_DEFINITE);
cleanup("str_49E510");set_name(0x49E510, "str_49E510");
set_cmt(0x49E510, "\"M_DoRAttack: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E510, "extern char str_49E510[40];", TINFO_DEFINITE);
cleanup("str_49E538");set_name(0x49E538, "str_49E538");
set_cmt(0x49E538, "\"M_DoRAttack: Invalid monster %d\"", 0);
apply_type (0x49E538, "extern char str_49E538[32];", TINFO_DEFINITE);
cleanup("str_49E558");set_name(0x49E558, "str_49E558");
set_cmt(0x49E558, "\"M_DoRSpAttack: Monster %d \"%s\" MData NULL\"", 0);
apply_type (0x49E558, "extern char str_49E558[42];", TINFO_DEFINITE);
cleanup("str_49E584");set_name(0x49E584, "str_49E584");
set_cmt(0x49E584, "\"M_DoRSpAttack: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E584, "extern char str_49E584[42];", TINFO_DEFINITE);
cleanup("str_49E5B0");set_name(0x49E5B0, "str_49E5B0");
set_cmt(0x49E5B0, "\"M_DoRSpAttack: Invalid monster %d\"", 0);
apply_type (0x49E5B0, "extern char str_49E5B0[34];", TINFO_DEFINITE);
cleanup("str_49E5D4");set_name(0x49E5D4, "str_49E5D4");
set_cmt(0x49E5D4, "\"M_DoSAttack: Monster %d \"%s\" MData NULL\"", 0);
apply_type (0x49E5D4, "extern char str_49E5D4[40];", TINFO_DEFINITE);
cleanup("str_49E5FC");set_name(0x49E5FC, "str_49E5FC");
set_cmt(0x49E5FC, "\"M_DoSAttack: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E5FC, "extern char str_49E5FC[40];", TINFO_DEFINITE);
cleanup("str_49E624");set_name(0x49E624, "str_49E624");
set_cmt(0x49E624, "\"M_DoSAttack: Invalid monster %d\"", 0);
apply_type (0x49E624, "extern char str_49E624[32];", TINFO_DEFINITE);
cleanup("str_49E644");set_name(0x49E644, "str_49E644");
set_cmt(0x49E644, "\"M_DoFadein: Invalid monster %d\"", 0);
apply_type (0x49E644, "extern char str_49E644[31];", TINFO_DEFINITE);
cleanup("str_49E664");set_name(0x49E664, "str_49E664");
set_cmt(0x49E664, "\"M_DoFadeout: Invalid monster %d\"", 0);
apply_type (0x49E664, "extern char str_49E664[32];", TINFO_DEFINITE);
cleanup("str_49E684");set_name(0x49E684, "str_49E684");
set_cmt(0x49E684, "\"M_DoHeal: Invalid monster %d\"", 0);
apply_type (0x49E684, "extern char str_49E684[29];", TINFO_DEFINITE);
cleanup("str_49E6A4");set_name(0x49E6A4, "str_49E6A4");
set_cmt(0x49E6A4, "\"SS Talk = %i, Flags = %i\"", 0);
apply_type (0x49E6A4, "extern char str_49E6A4[25];", TINFO_DEFINITE);
cleanup("str_49E6C0");set_name(0x49E6C0, "str_49E6C0");
set_cmt(0x49E6C0, "\"M_DoTalk: Invalid monster %d\"", 0);
apply_type (0x49E6C0, "extern char str_49E6C0[29];", TINFO_DEFINITE);
cleanup("str_49E6E0");set_name(0x49E6E0, "str_49E6E0");
set_cmt(0x49E6E0, "\"M_Teleport: Invalid monster %d\"", 0);
apply_type (0x49E6E0, "extern char str_49E6E0[31];", TINFO_DEFINITE);
cleanup("str_49E700");set_name(0x49E700, "str_49E700");
set_cmt(0x49E700, "\"M_DoGotHit: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E700, "extern char str_49E700[39];", TINFO_DEFINITE);
cleanup("str_49E728");set_name(0x49E728, "str_49E728");
set_cmt(0x49E728, "\"M_DoGotHit: Invalid monster %d\"", 0);
apply_type (0x49E728, "extern char str_49E728[31];", TINFO_DEFINITE);
cleanup("str_49E748");set_name(0x49E748, "str_49E748");
set_cmt(0x49E748, "\"M_UpdateLeader: Invalid monster %d\"", 0);
apply_type (0x49E748, "extern char str_49E748[35];", TINFO_DEFINITE);
cleanup("str_49E76C");set_name(0x49E76C, "str_49E76C");
set_cmt(0x49E76C, "`gendata\loopdend.smk`", 0);
apply_type (0x49E76C, "extern char str_49E76C[21];", TINFO_DEFINITE);
cleanup("str_49E784");set_name(0x49E784, "str_49E784");
set_cmt(0x49E784, "`gendata\Diabend.smk`", 0);
apply_type (0x49E784, "extern char str_49E784[20];", TINFO_DEFINITE);
cleanup("str_49E798");set_name(0x49E798, "str_49E798");
set_cmt(0x49E798, "`gendata\DiabVic3.smk`", 0);
apply_type (0x49E798, "extern char str_49E798[21];", TINFO_DEFINITE);
cleanup("str_49E7B0");set_name(0x49E7B0, "str_49E7B0");
set_cmt(0x49E7B0, "`gendata\DiabVic1.smk`", 0);
apply_type (0x49E7B0, "extern char str_49E7B0[21];", TINFO_DEFINITE);
cleanup("str_49E7C8");set_name(0x49E7C8, "str_49E7C8");
set_cmt(0x49E7C8, "`gendata\DiabVic2.smk`", 0);
apply_type (0x49E7C8, "extern char str_49E7C8[21];", TINFO_DEFINITE);
cleanup("str_49E7E0");set_name(0x49E7E0, "str_49E7E0");
set_cmt(0x49E7E0, "\"M_DoDeath: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E7E0, "extern char str_49E7E0[38];", TINFO_DEFINITE);
cleanup("str_49E808");set_name(0x49E808, "str_49E808");
set_cmt(0x49E808, "\"M_DoDeath: Invalid monster %d\"", 0);
apply_type (0x49E808, "extern char str_49E808[30];", TINFO_DEFINITE);
cleanup("str_49E828");set_name(0x49E828, "str_49E828");
set_cmt(0x49E828, "\"M_DoSpStand: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E828, "extern char str_49E828[40];", TINFO_DEFINITE);
cleanup("str_49E850");set_name(0x49E850, "str_49E850");
set_cmt(0x49E850, "\"M_DoSpStand: Invalid monster %d\"", 0);
apply_type (0x49E850, "extern char str_49E850[32];", TINFO_DEFINITE);
cleanup("str_49E870");set_name(0x49E870, "str_49E870");
set_cmt(0x49E870, "\"M_DoDelay: Monster %d \"%s\" MType NULL\"", 0);
apply_type (0x49E870, "extern char str_49E870[38];", TINFO_DEFINITE);
cleanup("str_49E898");set_name(0x49E898, "str_49E898");
set_cmt(0x49E898, "\"M_DoDelay: Invalid monster %d\"", 0);
apply_type (0x49E898, "extern char str_49E898[30];", TINFO_DEFINITE);
cleanup("str_49E8B8");set_name(0x49E8B8, "str_49E8B8");
set_cmt(0x49E8B8, "\"M_DoStone: Invalid monster %d\"", 0);
apply_type (0x49E8B8, "extern char str_49E8B8[30];", TINFO_DEFINITE);
cleanup("str_49E8D8");set_name(0x49E8D8, "str_49E8D8");
set_cmt(0x49E8D8, "\"M_WalkDir: Invalid monster %d\"", 0);
apply_type (0x49E8D8, "extern char str_49E8D8[30];", TINFO_DEFINITE);
cleanup("str_49E8F8");set_name(0x49E8F8, "str_49E8F8");
set_cmt(0x49E8F8, "\"GroupUnity: Invalid monster %d\"", 0);
apply_type (0x49E8F8, "extern char str_49E8F8[31];", TINFO_DEFINITE);
cleanup("str_49E918");set_name(0x49E918, "str_49E918");
set_cmt(0x49E918, "\"M_PathWalk: Invalid monster %d\"", 0);
apply_type (0x49E918, "extern char str_49E918[31];", TINFO_DEFINITE);
cleanup("str_49E938");set_name(0x49E938, "str_49E938");
set_cmt(0x49E938, "\"MAI_Zombie: Invalid monster %d\"", 0);
apply_type (0x49E938, "extern char str_49E938[31];", TINFO_DEFINITE);
cleanup("str_49E958");set_name(0x49E958, "str_49E958");
set_cmt(0x49E958, "\"MAI_SkelSd: Invalid monster %d\"", 0);
apply_type (0x49E958, "extern char str_49E958[31];", TINFO_DEFINITE);
cleanup("str_49E978");set_name(0x49E978, "str_49E978");
set_cmt(0x49E978, "\"MAI_Path: Invalid monster %d\"", 0);
apply_type (0x49E978, "extern char str_49E978[29];", TINFO_DEFINITE);
cleanup("str_49E998");set_name(0x49E998, "str_49E998");
set_cmt(0x49E998, "\"MAI_Snake: Invalid monster %d\"", 0);
apply_type (0x49E998, "extern char str_49E998[30];", TINFO_DEFINITE);
cleanup("str_49E9B8");set_name(0x49E9B8, "str_49E9B8");
set_cmt(0x49E9B8, "\"MAI_Bat: Invalid monster %d\"", 0);
apply_type (0x49E9B8, "extern char str_49E9B8[28];", TINFO_DEFINITE);
cleanup("str_49E9D4");set_name(0x49E9D4, "str_49E9D4");
set_cmt(0x49E9D4, "\"MAI_SkelBow: Invalid monster %d\"", 0);
apply_type (0x49E9D4, "extern char str_49E9D4[32];", TINFO_DEFINITE);
cleanup("str_49E9F4");set_name(0x49E9F4, "str_49E9F4");
set_cmt(0x49E9F4, "\"MAI_Fat: Invalid monster %d\"", 0);
apply_type (0x49E9F4, "extern char str_49E9F4[28];", TINFO_DEFINITE);
cleanup("str_49EA10");set_name(0x49EA10, "str_49EA10");
set_cmt(0x49EA10, "\"MAI_Sneak: Invalid monster %d\"", 0);
apply_type (0x49EA10, "extern char str_49EA10[30];", TINFO_DEFINITE);
cleanup("str_49EA30");set_name(0x49EA30, "str_49EA30");
set_cmt(0x49EA30, "\"MAI_Fireman: Invalid monster %d\"", 0);
apply_type (0x49EA30, "extern char str_49EA30[32];", TINFO_DEFINITE);
cleanup("str_49EA50");set_name(0x49EA50, "str_49EA50");
set_cmt(0x49EA50, "\"MAI_Fallen: Invalid monster %d\"", 0);
apply_type (0x49EA50, "extern char str_49EA50[31];", TINFO_DEFINITE);
cleanup("str_49EA70");set_name(0x49EA70, "str_49EA70");
set_cmt(0x49EA70, "\"MAI_Cleaver: Invalid monster %d\"", 0);
apply_type (0x49EA70, "extern char str_49EA70[32];", TINFO_DEFINITE);
cleanup("str_49EA90");set_name(0x49EA90, "str_49EA90");
set_cmt(0x49EA90, "\"MAI_Round: Invalid monster %d\"", 0);
apply_type (0x49EA90, "extern char str_49EA90[30];", TINFO_DEFINITE);
cleanup("str_49EAB0");set_name(0x49EAB0, "str_49EAB0");
set_cmt(0x49EAB0, "\"MAI_Ranged: Invalid monster %d\"", 0);
apply_type (0x49EAB0, "extern char str_49EAB0[31];", TINFO_DEFINITE);
cleanup("str_49EAD0");set_name(0x49EAD0, "str_49EAD0");
set_cmt(0x49EAD0, "\"MAI_Scav: Invalid monster %d\"", 0);
apply_type (0x49EAD0, "extern char str_49EAD0[29];", TINFO_DEFINITE);
cleanup("str_49EAF0");set_name(0x49EAF0, "str_49EAF0");
set_cmt(0x49EAF0, "\"MAI_Garg: Invalid monster %d\"", 0);
apply_type (0x49EAF0, "extern char str_49EAF0[29];", TINFO_DEFINITE);
cleanup("str_49EB10");set_name(0x49EB10, "str_49EB10");
set_cmt(0x49EB10, "\"MAI_RoundRanged: Invalid monster %d\"", 0);
apply_type (0x49EB10, "extern char str_49EB10[36];", TINFO_DEFINITE);
cleanup("str_49EB34");set_name(0x49EB34, "str_49EB34");
set_cmt(0x49EB34, "\"MAI_RR2: Invalid monster %d\"", 0);
apply_type (0x49EB34, "extern char str_49EB34[28];", TINFO_DEFINITE);
cleanup("str_49EB50");set_name(0x49EB50, "str_49EB50");
set_cmt(0x49EB50, "\"MAI_Golum: Invalid monster %d\"", 0);
apply_type (0x49EB50, "extern char str_49EB50[30];", TINFO_DEFINITE);
cleanup("str_49EB70");set_name(0x49EB70, "str_49EB70");
set_cmt(0x49EB70, "\"MAI_SkelKing: Invalid monster %d\"", 0);
apply_type (0x49EB70, "extern char str_49EB70[33];", TINFO_DEFINITE);
cleanup("str_49EB94");set_name(0x49EB94, "str_49EB94");
set_cmt(0x49EB94, "\"MAI_Rhino: Invalid monster %d\"", 0);
apply_type (0x49EB94, "extern char str_49EB94[30];", TINFO_DEFINITE);
cleanup("str_49EBB4");set_name(0x49EBB4, "str_49EBB4");
set_cmt(0x49EBB4, "\"MAI_Counselor: Invalid monster %d\"", 0);
apply_type (0x49EBB4, "extern char str_49EBB4[34];", TINFO_DEFINITE);
cleanup("str_49EBD8");set_name(0x49EBD8, "str_49EBD8");
set_cmt(0x49EBD8, "\"MAI_Garbud: Invalid monster %d\"", 0);
apply_type (0x49EBD8, "extern char str_49EBD8[31];", TINFO_DEFINITE);
cleanup("str_49EBF8");set_name(0x49EBF8, "str_49EBF8");
set_cmt(0x49EBF8, "\"MAI_Zhar: Invalid monster %d\"", 0);
apply_type (0x49EBF8, "extern char str_49EBF8[29];", TINFO_DEFINITE);
cleanup("str_49EC18");set_name(0x49EC18, "str_49EC18");
set_cmt(0x49EC18, "\"MAI_SnotSpil: Invalid monster %d\"", 0);
apply_type (0x49EC18, "extern char str_49EC18[33];", TINFO_DEFINITE);
cleanup("str_49EC3C");set_name(0x49EC3C, "str_49EC3C");
set_cmt(0x49EC3C, "`gendata\fprst3.smk`", 0);
apply_type (0x49EC3C, "extern char str_49EC3C[19];", TINFO_DEFINITE);
cleanup("str_49EC50");set_name(0x49EC50, "str_49EC50");
set_cmt(0x49EC50, "\"MAI_Lazurus: Invalid monster %d\"", 0);
apply_type (0x49EC50, "extern char str_49EC50[32];", TINFO_DEFINITE);
cleanup("str_49EC70");set_name(0x49EC70, "str_49EC70");
set_cmt(0x49EC70, "\"MAI_Lazhelp: Invalid monster %d\"", 0);
apply_type (0x49EC70, "extern char str_49EC70[32];", TINFO_DEFINITE);
cleanup("str_49EC90");set_name(0x49EC90, "str_49EC90");
set_cmt(0x49EC90, "\"MAI_Lachdanan: Invalid monster %d\"", 0);
apply_type (0x49EC90, "extern char str_49EC90[34];", TINFO_DEFINITE);
cleanup("str_49ECB4");set_name(0x49ECB4, "str_49ECB4");
set_cmt(0x49ECB4, "\"MAI_Warlord: Invalid monster %d\"", 0);
apply_type (0x49ECB4, "extern char str_49ECB4[32];", TINFO_DEFINITE);
cleanup("str_49ECD4");set_name(0x49ECD4, "str_49ECD4");
set_cmt(0x49ECD4, "\"Illegal enemy player %d for monster \"%s\"\"", 0);
apply_type (0x49ECD4, "extern char str_49ECD4[41];", TINFO_DEFINITE);
cleanup("str_49ED00");set_name(0x49ED00, "str_49ED00");
set_cmt(0x49ED00, "\"Illegal enemy monster %d for monster \"%s\"\"", 0);
apply_type (0x49ED00, "extern char str_49ED00[42];", TINFO_DEFINITE);
cleanup("str_49ED2C");set_name(0x49ED2C, "str_49ED2C");
set_cmt(0x49ED2C, "\"DirOK: Invalid monster %d\"", 0);
apply_type (0x49ED2C, "extern char str_49ED2C[26];", TINFO_DEFINITE);
cleanup("str_49ED48");set_name(0x49ED48, "str_49ED48");
set_cmt(0x49ED48, "\"SyncMonsterAnim: Invalid monster %d\"", 0);
apply_type (0x49ED48, "extern char str_49ED48[36];", TINFO_DEFINITE);
cleanup("str_49ED6C");set_name(0x49ED6C, "str_49ED6C");
set_cmt(0x49ED6C, "\"Immune : \"", 0);
apply_type (0x49ED6C, "extern char str_49ED6C[10];", TINFO_DEFINITE);
cleanup("str_49ED78");set_name(0x49ED78, "str_49ED78");
set_cmt(0x49ED78, "\"Lightning \"", 0);
apply_type (0x49ED78, "extern char str_49ED78[11];", TINFO_DEFINITE);
cleanup("str_49ED84");set_name(0x49ED84, "str_49ED84");
set_cmt(0x49ED84, "\"Resists : \"", 0);
apply_type (0x49ED84, "extern char str_49ED84[11];", TINFO_DEFINITE);
cleanup("str_49ED90");set_name(0x49ED90, "str_49ED90");
set_cmt(0x49ED90, "\"Fire \"", 0);
apply_type (0x49ED90, "extern char str_49ED90[6];", TINFO_DEFINITE);
cleanup("str_49ED98");set_name(0x49ED98, "str_49ED98");
set_cmt(0x49ED98, "\"Magic \"", 0);
apply_type (0x49ED98, "extern char str_49ED98[7];", TINFO_DEFINITE);
cleanup("str_49EDA0");set_name(0x49EDA0, "str_49EDA0");
set_cmt(0x49EDA0, "\"No magic resistance\"", 0);
apply_type (0x49EDA0, "extern char str_49EDA0[20];", TINFO_DEFINITE);
cleanup("str_49EDB4");set_name(0x49EDB4, "str_49EDB4");
set_cmt(0x49EDB4, "\"Hit Points : %i-%i\"", 0);
apply_type (0x49EDB4, "extern char str_49EDB4[19];", TINFO_DEFINITE);
cleanup("str_49EDC8");set_name(0x49EDC8, "str_49EDC8");
set_cmt(0x49EDC8, "\"Total kills : %i\"", 0);
apply_type (0x49EDC8, "extern char str_49EDC8[17];", TINFO_DEFINITE);
cleanup("str_49EDDC");set_name(0x49EDDC, "str_49EDDC");
set_cmt(0x49EDDC, "\"Some Magic Immunities\"", 0);
apply_type (0x49EDDC, "extern char str_49EDDC[22];", TINFO_DEFINITE);
cleanup("str_49EDF4");set_name(0x49EDF4, "str_49EDF4");
set_cmt(0x49EDF4, "\"Some Magic Resistances\"", 0);
apply_type (0x49EDF4, "extern char str_49EDF4[23];", TINFO_DEFINITE);
cleanup("str_49EE0C");set_name(0x49EE0C, "str_49EE0C");
set_cmt(0x49EE0C, "\"No Immunities\"", 0);
apply_type (0x49EE0C, "extern char str_49EE0C[14];", TINFO_DEFINITE);
cleanup("str_49EE1C");set_name(0x49EE1C, "str_49EE1C");
set_cmt(0x49EE1C, "\"No resistances\"", 0);
apply_type (0x49EE1C, "extern char str_49EE1C[15];", TINFO_DEFINITE);
cleanup("str_49EE2C");set_name(0x49EE2C, "str_49EE2C");
set_cmt(0x49EE2C, "\"MissToMonst: Invalid monster %d\"", 0);
apply_type (0x49EE2C, "extern char str_49EE2C[32];", TINFO_DEFINITE);
cleanup("str_49EE4C");set_name(0x49EE4C, "str_49EE4C");
set_cmt(0x49EE4C, "\"MissToMonst: Invalid missile %d\"", 0);
apply_type (0x49EE4C, "extern char str_49EE4C[32];", TINFO_DEFINITE);
cleanup("str_49EE6C");set_name(0x49EE6C, "str_49EE6C");
set_cmt(0x49EE6C, "\"TalktoMonster: Invalid monster %d\"", 0);
apply_type (0x49EE6C, "extern char str_49EE6C[34];", TINFO_DEFINITE);
cleanup("str_49EE90");set_name(0x49EE90, "str_49EE90");
set_cmt(0x49EE90, "\"SpawnGolum: Invalid monster %d\"", 0);
apply_type (0x49EE90, "extern char str_49EE90[31];", TINFO_DEFINITE);
cleanup("str_49EEB0");set_name(0x49EEB0, "str_49EEB0");
set_cmt(0x49EEB0, "\"CanTalkToMonst: Invalid monster %d\"", 0);
apply_type (0x49EEB0, "extern char str_49EEB0[35];", TINFO_DEFINITE);
cleanup("str_49EED4");set_name(0x49EED4, "str_49EED4");
set_cmt(0x49EED4, "\"CheckMonsterHit: Invalid monster %d\"", 0);
apply_type (0x49EED4, "extern char str_49EED4[36];", TINFO_DEFINITE);
cleanup("inv_start_slot_2x2");set_name(0x48E9A8, "inv_start_slot_2x2");
set_cmt(0x48E9A8, "inv_start_slot_2x2 specifies the starting inventory slots for placement of\n2x2 items.", 0);
apply_type (0x48E9A8, "extern int32_t inv_start_slot_2x2[10];", TINFO_DEFINITE);
cleanup("str_48E9D0");set_name(0x48E9D0, "str_48E9D0");
set_cmt(0x48E9D0, "`Data\Inv\Inv_Sor.CEL`", 0);
apply_type (0x48E9D0, "extern char str_48E9D0[21];", TINFO_DEFINITE);
cleanup("str_48E9E8");set_name(0x48E9E8, "str_48E9E8");
set_cmt(0x48E9E8, "`Data\Inv\Inv_rog.CEL`", 0);
apply_type (0x48E9E8, "extern char str_48E9E8[21];", TINFO_DEFINITE);
cleanup("str_48EA00");set_name(0x48EA00, "str_48EA00");
set_cmt(0x48EA00, "`Data\Inv\Inv.CEL`", 0);
apply_type (0x48EA00, "extern char str_48EA00[17];", TINFO_DEFINITE);
cleanup("str_48EA14");set_name(0x48EA14, "str_48EA14");
set_cmt(0x48EA14, "\"A duplicate item has been detected.  Destroying duplicate...\"", 0);
apply_type (0x48EA14, "extern char str_48EA14[61];", TINFO_DEFINITE);
cleanup("str_48EA54");set_name(0x48EA54, "str_48EA54");
set_cmt(0x48EA54, "\"A duplicate item has been detected from another player.\"", 0);
apply_type (0x48EA54, "extern char str_48EA54[56];", TINFO_DEFINITE);
cleanup("str_4A2BE0");set_name(0x4A2BE0, "str_4A2BE0");
set_cmt(0x4A2BE0, "\"Bone Spirit\"", 0);
apply_type (0x4A2BE0, "extern char str_4A2BE0[12];", TINFO_DEFINITE);
cleanup("str_4A2BEC");set_name(0x4A2BEC, "str_4A2BEC");
set_cmt(0x4A2BEC, "\"Blood Star\"", 0);
apply_type (0x4A2BEC, "extern char str_4A2BEC[11];", TINFO_DEFINITE);
cleanup("str_4A2BF8");set_name(0x4A2BF8, "str_4A2BF8");
set_cmt(0x4A2BF8, "\"Heal Other\"", 0);
apply_type (0x4A2BF8, "extern char str_4A2BF8[11];", TINFO_DEFINITE);
cleanup("str_4A2C04");set_name(0x4A2C04, "str_4A2C04");
set_cmt(0x4A2C04, "\"Telekinesis\"", 0);
apply_type (0x4A2C04, "extern char str_4A2C04[12];", TINFO_DEFINITE);
cleanup("str_4A2C10");set_name(0x4A2C10, "str_4A2C10");
set_cmt(0x4A2C10, "\"Resurrect\"", 0);
apply_type (0x4A2C10, "extern char str_4A2C10[10];", TINFO_DEFINITE);
cleanup("str_4A2C1C");set_name(0x4A2C1C, "str_4A2C1C");
set_cmt(0x4A2C1C, "\"Holy Bolt\"", 0);
apply_type (0x4A2C1C, "extern char str_4A2C1C[10];", TINFO_DEFINITE);
cleanup("str_4A2C28");set_name(0x4A2C28, "str_4A2C28");
set_cmt(0x4A2C28, "\"Charged Bolt\"", 0);
apply_type (0x4A2C28, "extern char str_4A2C28[13];", TINFO_DEFINITE);
cleanup("str_4A2C38");set_name(0x4A2C38, "str_4A2C38");
set_cmt(0x4A2C38, "\"Elemental\"", 0);
apply_type (0x4A2C38, "extern char str_4A2C38[10];", TINFO_DEFINITE);
cleanup("str_4A2C44");set_name(0x4A2C44, "str_4A2C44");
set_cmt(0x4A2C44, "\"Trap Disarm\"", 0);
apply_type (0x4A2C44, "extern char str_4A2C44[12];", TINFO_DEFINITE);
cleanup("str_4A2C50");set_name(0x4A2C50, "str_4A2C50");
set_cmt(0x4A2C50, "\"Staff Recharge\"", 0);
apply_type (0x4A2C50, "extern char str_4A2C50[15];", TINFO_DEFINITE);
cleanup("str_4A2C60");set_name(0x4A2C60, "str_4A2C60");
set_cmt(0x4A2C60, "\"Item Repair\"", 0);
apply_type (0x4A2C60, "extern char str_4A2C60[12];", TINFO_DEFINITE);
cleanup("str_4A2C6C");set_name(0x4A2C6C, "str_4A2C6C");
set_cmt(0x4A2C6C, "\"Etherealize\"", 0);
apply_type (0x4A2C6C, "extern char str_4A2C6C[12];", TINFO_DEFINITE);
cleanup("str_4A2C78");set_name(0x4A2C78, "str_4A2C78");
set_cmt(0x4A2C78, "\"Apocalypse\"", 0);
apply_type (0x4A2C78, "extern char str_4A2C78[11];", TINFO_DEFINITE);
cleanup("str_4A2C84");set_name(0x4A2C84, "str_4A2C84");
set_cmt(0x4A2C84, "\"Teleport\"", 0);
apply_type (0x4A2C84, "extern char str_4A2C84[9];", TINFO_DEFINITE);
cleanup("str_4A2C90");set_name(0x4A2C90, "str_4A2C90");
set_cmt(0x4A2C90, "\"Blood Boil\"", 0);
apply_type (0x4A2C90, "extern char str_4A2C90[11];", TINFO_DEFINITE);
cleanup("str_4A2C9C");set_name(0x4A2C9C, "str_4A2C9C");
set_cmt(0x4A2C9C, "\"Invisibility\"", 0);
apply_type (0x4A2C9C, "extern char str_4A2C9C[13];", TINFO_DEFINITE);
cleanup("str_4A2CAC");set_name(0x4A2CAC, "str_4A2CAC");
set_cmt(0x4A2CAC, "\"Nova\"", 0);
apply_type (0x4A2CAC, "extern char str_4A2CAC[5];", TINFO_DEFINITE);
cleanup("str_4A2CB4");set_name(0x4A2CB4, "str_4A2CB4");
set_cmt(0x4A2CB4, "\"Blood Ritual\"", 0);
apply_type (0x4A2CB4, "extern char str_4A2CB4[13];", TINFO_DEFINITE);
cleanup("str_4A2CC4");set_name(0x4A2CC4, "str_4A2CC4");
set_cmt(0x4A2CC4, "\"Doom Serpents\"", 0);
apply_type (0x4A2CC4, "extern char str_4A2CC4[14];", TINFO_DEFINITE);
cleanup("str_4A2CD4");set_name(0x4A2CD4, "str_4A2CD4");
set_cmt(0x4A2CD4, "\"Flame Wave\"", 0);
apply_type (0x4A2CD4, "extern char str_4A2CD4[11];", TINFO_DEFINITE);
cleanup("str_4A2CE0");set_name(0x4A2CE0, "str_4A2CE0");
set_cmt(0x4A2CE0, "\"Chain Lightning\"", 0);
apply_type (0x4A2CE0, "extern char str_4A2CE0[16];", TINFO_DEFINITE);
cleanup("str_4A2CF0");set_name(0x4A2CF0, "str_4A2CF0");
set_cmt(0x4A2CF0, "\"Fireball\"", 0);
apply_type (0x4A2CF0, "extern char str_4A2CF0[9];", TINFO_DEFINITE);
cleanup("str_4A2CFC");set_name(0x4A2CFC, "str_4A2CFC");
set_cmt(0x4A2CFC, "\"Mana Shield\"", 0);
apply_type (0x4A2CFC, "extern char str_4A2CFC[12];", TINFO_DEFINITE);
cleanup("str_4A2D08");set_name(0x4A2D08, "str_4A2D08");
set_cmt(0x4A2D08, "\"Phasing\"", 0);
apply_type (0x4A2D08, "extern char str_4A2D08[8];", TINFO_DEFINITE);
cleanup("str_4A2D10");set_name(0x4A2D10, "str_4A2D10");
set_cmt(0x4A2D10, "\"Infravision\"", 0);
apply_type (0x4A2D10, "extern char str_4A2D10[12];", TINFO_DEFINITE);
cleanup("str_4A2D1C");set_name(0x4A2D1C, "str_4A2D1C");
set_cmt(0x4A2D1C, "\"Stone Curse\"", 0);
apply_type (0x4A2D1C, "extern char str_4A2D1C[12];", TINFO_DEFINITE);
cleanup("str_4A2D28");set_name(0x4A2D28, "str_4A2D28");
set_cmt(0x4A2D28, "\"Fire Wall\"", 0);
apply_type (0x4A2D28, "extern char str_4A2D28[10];", TINFO_DEFINITE);
cleanup("str_4A2D34");set_name(0x4A2D34, "str_4A2D34");
set_cmt(0x4A2D34, "\"Identify\"", 0);
apply_type (0x4A2D34, "extern char str_4A2D34[9];", TINFO_DEFINITE);
cleanup("str_4A2D40");set_name(0x4A2D40, "str_4A2D40");
set_cmt(0x4A2D40, "\"Flash\"", 0);
apply_type (0x4A2D40, "extern char str_4A2D40[6];", TINFO_DEFINITE);
cleanup("str_4A2D48");set_name(0x4A2D48, "str_4A2D48");
set_cmt(0x4A2D48, "\"Healing\"", 0);
apply_type (0x4A2D48, "extern char str_4A2D48[8];", TINFO_DEFINITE);
cleanup("str_4A2D50");set_name(0x4A2D50, "str_4A2D50");
set_cmt(0x4A2D50, "\"Firebolt\"", 0);
apply_type (0x4A2D50, "extern char str_4A2D50[9];", TINFO_DEFINITE);
cleanup("delta_thread");set_name(0x4862B0, "delta_thread");
set_cmt(0x4862B0, "delta_thread is a handle to the thread sending game state delta information\nto connected peers.", 0);
apply_type (0x4862B0, "extern HANDLE delta_thread;", TINFO_DEFINITE);
cleanup("str_4862B4");set_name(0x4862B4, "str_4862B4");
set_cmt(0x4862B4, "\"dthread2:\n%s\"", 0);
apply_type (0x4862B4, "extern char str_4862B4[13];", TINFO_DEFINITE);
cleanup("str_4862C4");set_name(0x4862C4, "str_4862C4");
set_cmt(0x4862C4, "\"dthread:1\n%s\"", 0);
apply_type (0x4862C4, "extern char str_4862C4[13];", TINFO_DEFINITE);
cleanup("str_4862D4");set_name(0x4862D4, "str_4862D4");
set_cmt(0x4862D4, "\"dthread4:\n%s\"", 0);
apply_type (0x4862D4, "extern char str_4862D4[13];", TINFO_DEFINITE);
cleanup("str_4862E4");set_name(0x4862E4, "str_4862E4");
set_cmt(0x4862E4, "\"dthread3:\n(%s)\"", 0);
apply_type (0x4862E4, "extern char str_4862E4[15];", TINFO_DEFINITE);
cleanup("str_4830B8");set_name(0x4830B8, "str_4830B8");
set_cmt(0x4830B8, "\"unknown error 0x%08x\"", 0);
apply_type (0x4830B8, "extern char str_4830B8[21];", TINFO_DEFINITE);
cleanup("str_4830D0");set_name(0x4830D0, "str_4830D0");
set_cmt(0x4830D0, "\"DDERR_CANTPAGEUNLOCK\"", 0);
apply_type (0x4830D0, "extern char str_4830D0[21];", TINFO_DEFINITE);
cleanup("str_4830E8");set_name(0x4830E8, "str_4830E8");
set_cmt(0x4830E8, "\"DDERR_NOTPAGELOCKED\"", 0);
apply_type (0x4830E8, "extern char str_4830E8[20];", TINFO_DEFINITE);
cleanup("str_4830FC");set_name(0x4830FC, "str_4830FC");
set_cmt(0x4830FC, "\"DD_OK\"", 0);
apply_type (0x4830FC, "extern char str_4830FC[6];", TINFO_DEFINITE);
cleanup("str_483104");set_name(0x483104, "str_483104");
set_cmt(0x483104, "\"DDERR unknown 0x%x\"", 0);
apply_type (0x483104, "extern char str_483104[19];", TINFO_DEFINITE);
cleanup("str_483118");set_name(0x483118, "str_483118");
set_cmt(0x483118, "\"DDERR_CANTPAGELOCK\"", 0);
apply_type (0x483118, "extern char str_483118[19];", TINFO_DEFINITE);
cleanup("str_48312C");set_name(0x48312C, "str_48312C");
set_cmt(0x48312C, "\"DDERR_NOMIPMAPHW\"", 0);
apply_type (0x48312C, "extern char str_48312C[17];", TINFO_DEFINITE);
cleanup("str_483140");set_name(0x483140, "str_483140");
set_cmt(0x483140, "\"DDERR_INVALIDSURFACETYPE\"", 0);
apply_type (0x483140, "extern char str_483140[25];", TINFO_DEFINITE);
cleanup("str_48315C");set_name(0x48315C, "str_48315C");
set_cmt(0x48315C, "\"DDERR_DCALREADYCREATED\"", 0);
apply_type (0x48315C, "extern char str_48315C[23];", TINFO_DEFINITE);
cleanup("str_483174");set_name(0x483174, "str_483174");
set_cmt(0x483174, "\"DDERR_WRONGMODE\"", 0);
apply_type (0x483174, "extern char str_483174[16];", TINFO_DEFINITE);
cleanup("str_483184");set_name(0x483184, "str_483184");
set_cmt(0x483184, "\"DDERR_OVERLAYNOTVISIBLE\"", 0);
apply_type (0x483184, "extern char str_483184[24];", TINFO_DEFINITE);
cleanup("str_48319C");set_name(0x48319C, "str_48319C");
set_cmt(0x48319C, "\"DDERR_NOTPALETTIZED\"", 0);
apply_type (0x48319C, "extern char str_48319C[20];", TINFO_DEFINITE);
cleanup("str_4831B0");set_name(0x4831B0, "str_4831B0");
set_cmt(0x4831B0, "\"DDERR_NOTLOCKED\"", 0);
apply_type (0x4831B0, "extern char str_4831B0[16];", TINFO_DEFINITE);
cleanup("str_4831C0");set_name(0x4831C0, "str_4831C0");
set_cmt(0x4831C0, "\"DDERR_NOTFLIPPABLE\"", 0);
apply_type (0x4831C0, "extern char str_4831C0[19];", TINFO_DEFINITE);
cleanup("str_4831D4");set_name(0x4831D4, "str_4831D4");
set_cmt(0x4831D4, "\"DDERR_NOTAOVERLAYSURFACE\"", 0);
apply_type (0x4831D4, "extern char str_4831D4[25];", TINFO_DEFINITE);
cleanup("str_4831F0");set_name(0x4831F0, "str_4831F0");
set_cmt(0x4831F0, "\"DDERR_NOOVERLAYDEST\"", 0);
apply_type (0x4831F0, "extern char str_4831F0[20];", TINFO_DEFINITE);
cleanup("str_483204");set_name(0x483204, "str_483204");
set_cmt(0x483204, "\"DDERR_NODDROPSHW\"", 0);
apply_type (0x483204, "extern char str_483204[17];", TINFO_DEFINITE);
cleanup("str_483218");set_name(0x483218, "str_483218");
set_cmt(0x483218, "\"DDERR_NODC\"", 0);
apply_type (0x483218, "extern char str_483218[11];", TINFO_DEFINITE);
cleanup("str_483224");set_name(0x483224, "str_483224");
set_cmt(0x483224, "\"DDERR_NOBLTHW\"", 0);
apply_type (0x483224, "extern char str_483224[14];", TINFO_DEFINITE);
cleanup("str_483234");set_name(0x483234, "str_483234");
set_cmt(0x483234, "\"DDERR_INVALIDPOSITION\"", 0);
apply_type (0x483234, "extern char str_483234[22];", TINFO_DEFINITE);
cleanup("str_48324C");set_name(0x48324C, "str_48324C");
set_cmt(0x48324C, "\"DDERR_IMPLICITLYCREATED\"", 0);
apply_type (0x48324C, "extern char str_48324C[24];", TINFO_DEFINITE);
cleanup("str_483264");set_name(0x483264, "str_483264");
set_cmt(0x483264, "\"DDERR_EXCLUSIVEMODEALREADYSET\"", 0);
apply_type (0x483264, "extern char str_483264[30];", TINFO_DEFINITE);
cleanup("str_483284");set_name(0x483284, "str_483284");
set_cmt(0x483284, "\"DDERR_CANTDUPLICATE\"", 0);
apply_type (0x483284, "extern char str_483284[20];", TINFO_DEFINITE);
cleanup("str_483298");set_name(0x483298, "str_483298");
set_cmt(0x483298, "\"DDERR_CANTCREATEDC\"", 0);
apply_type (0x483298, "extern char str_483298[19];", TINFO_DEFINITE);
cleanup("str_4832AC");set_name(0x4832AC, "str_4832AC");
set_cmt(0x4832AC, "\"DDERR_BLTFASTCANTCLIP\"", 0);
apply_type (0x4832AC, "extern char str_4832AC[22];", TINFO_DEFINITE);
cleanup("str_4832C4");set_name(0x4832C4, "str_4832C4");
set_cmt(0x4832C4, "\"DDERR_NOPALETTEHW\"", 0);
apply_type (0x4832C4, "extern char str_4832C4[18];", TINFO_DEFINITE);
cleanup("str_4832D8");set_name(0x4832D8, "str_4832D8");
set_cmt(0x4832D8, "\"DDERR_REGIONTOOSMALL\"", 0);
apply_type (0x4832D8, "extern char str_4832D8[21];", TINFO_DEFINITE);
cleanup("str_4832F0");set_name(0x4832F0, "str_4832F0");
set_cmt(0x4832F0, "\"DDERR_PRIMARYSURFACEALREADYEXISTS\"", 0);
apply_type (0x4832F0, "extern char str_4832F0[34];", TINFO_DEFINITE);
cleanup("str_483314");set_name(0x483314, "str_483314");
set_cmt(0x483314, "\"DDERR_NOPALETTEATTACHED\"", 0);
apply_type (0x483314, "extern char str_483314[24];", TINFO_DEFINITE);
cleanup("str_48332C");set_name(0x48332C, "str_48332C");
set_cmt(0x48332C, "\"DDERR_NOHWND\"", 0);
apply_type (0x48332C, "extern char str_48332C[13];", TINFO_DEFINITE);
cleanup("str_48333C");set_name(0x48333C, "str_48333C");
set_cmt(0x48333C, "\"DDERR_NOEMULATION\"", 0);
apply_type (0x48333C, "extern char str_48333C[18];", TINFO_DEFINITE);
cleanup("str_483350");set_name(0x483350, "str_483350");
set_cmt(0x483350, "\"DDERR_NODIRECTDRAWHW\"", 0);
apply_type (0x483350, "extern char str_483350[21];", TINFO_DEFINITE);
cleanup("str_483368");set_name(0x483368, "str_483368");
set_cmt(0x483368, "\"DDERR_NOCLIPPERATTACHED\"", 0);
apply_type (0x483368, "extern char str_483368[24];", TINFO_DEFINITE);
cleanup("str_483380");set_name(0x483380, "str_483380");
set_cmt(0x483380, "\"DDERR_HWNDSUBCLASSED\"", 0);
apply_type (0x483380, "extern char str_483380[21];", TINFO_DEFINITE);
cleanup("str_483398");set_name(0x483398, "str_483398");
set_cmt(0x483398, "\"DDERR_HWNDALREADYSET\"", 0);
apply_type (0x483398, "extern char str_483398[21];", TINFO_DEFINITE);
cleanup("str_4833B0");set_name(0x4833B0, "str_4833B0");
set_cmt(0x4833B0, "\"DDERR_DIRECTDRAWALREADYCREATED\"", 0);
apply_type (0x4833B0, "extern char str_4833B0[31];", TINFO_DEFINITE);
cleanup("str_4833D0");set_name(0x4833D0, "str_4833D0");
set_cmt(0x4833D0, "\"DDERR_CLIPPERISUSINGHWND\"", 0);
apply_type (0x4833D0, "extern char str_4833D0[25];", TINFO_DEFINITE);
cleanup("str_4833EC");set_name(0x4833EC, "str_4833EC");
set_cmt(0x4833EC, "\"DDERR_INVALIDDIRECTDRAWGUID\"", 0);
apply_type (0x4833EC, "extern char str_4833EC[28];", TINFO_DEFINITE);
cleanup("str_483408");set_name(0x483408, "str_483408");
set_cmt(0x483408, "\"DDERR_UNSUPPORTEDFORMAT\"", 0);
apply_type (0x483408, "extern char str_483408[24];", TINFO_DEFINITE);
cleanup("str_483420");set_name(0x483420, "str_483420");
set_cmt(0x483420, "\"DDERR_UNSUPPORTEDMASK\"", 0);
apply_type (0x483420, "extern char str_483420[22];", TINFO_DEFINITE);
cleanup("str_483438");set_name(0x483438, "str_483438");
set_cmt(0x483438, "\"DDERR_VERTICALBLANKINPROGRESS\"", 0);
apply_type (0x483438, "extern char str_483438[30];", TINFO_DEFINITE);
cleanup("str_483458");set_name(0x483458, "str_483458");
set_cmt(0x483458, "\"DDERR_WASSTILLDRAWING\"", 0);
apply_type (0x483458, "extern char str_483458[22];", TINFO_DEFINITE);
cleanup("str_483470");set_name(0x483470, "str_483470");
set_cmt(0x483470, "\"DDERR_XALIGN\"", 0);
apply_type (0x483470, "extern char str_483470[13];", TINFO_DEFINITE);
cleanup("str_483480");set_name(0x483480, "str_483480");
set_cmt(0x483480, "\"DDERR_TOOBIGWIDTH\"", 0);
apply_type (0x483480, "extern char str_483480[18];", TINFO_DEFINITE);
cleanup("str_483494");set_name(0x483494, "str_483494");
set_cmt(0x483494, "\"DDERR_CANTLOCKSURFACE\"", 0);
apply_type (0x483494, "extern char str_483494[22];", TINFO_DEFINITE);
cleanup("str_4834AC");set_name(0x4834AC, "str_4834AC");
set_cmt(0x4834AC, "\"DDERR_SURFACEISOBSCURED\"", 0);
apply_type (0x4834AC, "extern char str_4834AC[24];", TINFO_DEFINITE);
cleanup("str_4834C4");set_name(0x4834C4, "str_4834C4");
set_cmt(0x4834C4, "\"DDERR_SURFACELOST\"", 0);
apply_type (0x4834C4, "extern char str_4834C4[18];", TINFO_DEFINITE);
cleanup("str_4834D8");set_name(0x4834D8, "str_4834D8");
set_cmt(0x4834D8, "\"DDERR_SURFACENOTATTACHED\"", 0);
apply_type (0x4834D8, "extern char str_4834D8[25];", TINFO_DEFINITE);
cleanup("str_4834F4");set_name(0x4834F4, "str_4834F4");
set_cmt(0x4834F4, "\"DDERR_TOOBIGHEIGHT\"", 0);
apply_type (0x4834F4, "extern char str_4834F4[19];", TINFO_DEFINITE);
cleanup("str_483508");set_name(0x483508, "str_483508");
set_cmt(0x483508, "\"DDERR_TOOBIGSIZE\"", 0);
apply_type (0x483508, "extern char str_483508[17];", TINFO_DEFINITE);
cleanup("str_48351C");set_name(0x48351C, "str_48351C");
set_cmt(0x48351C, "\"DDERR_SURFACEBUSY\"", 0);
apply_type (0x48351C, "extern char str_48351C[18];", TINFO_DEFINITE);
cleanup("str_483530");set_name(0x483530, "str_483530");
set_cmt(0x483530, "\"DDERR_OVERLAYCOLORKEYONLYONEACTIVE\"", 0);
apply_type (0x483530, "extern char str_483530[35];", TINFO_DEFINITE);
cleanup("str_483554");set_name(0x483554, "str_483554");
set_cmt(0x483554, "\"DDERR_PALETTEBUSY\"", 0);
apply_type (0x483554, "extern char str_483554[18];", TINFO_DEFINITE);
cleanup("str_483568");set_name(0x483568, "str_483568");
set_cmt(0x483568, "\"DDERR_COLORKEYNOTSET\"", 0);
apply_type (0x483568, "extern char str_483568[21];", TINFO_DEFINITE);
cleanup("str_483580");set_name(0x483580, "str_483580");
set_cmt(0x483580, "\"DDERR_SURFACEALREADYATTACHED\"", 0);
apply_type (0x483580, "extern char str_483580[29];", TINFO_DEFINITE);
cleanup("str_4835A0");set_name(0x4835A0, "str_4835A0");
set_cmt(0x4835A0, "\"DDERR_SURFACEALREADYDEPENDENT\"", 0);
apply_type (0x4835A0, "extern char str_4835A0[30];", TINFO_DEFINITE);
cleanup("str_4835C0");set_name(0x4835C0, "str_4835C0");
set_cmt(0x4835C0, "\"DDERR_OVERLAYCANTCLIP\"", 0);
apply_type (0x4835C0, "extern char str_4835C0[22];", TINFO_DEFINITE);
cleanup("str_4835D8");set_name(0x4835D8, "str_4835D8");
set_cmt(0x4835D8, "\"DDERR_NOVSYNCHW\"", 0);
apply_type (0x4835D8, "extern char str_4835D8[16];", TINFO_DEFINITE);
cleanup("str_4835E8");set_name(0x4835E8, "str_4835E8");
set_cmt(0x4835E8, "\"DDERR_NOZBUFFERHW\"", 0);
apply_type (0x4835E8, "extern char str_4835E8[18];", TINFO_DEFINITE);
cleanup("str_4835FC");set_name(0x4835FC, "str_4835FC");
set_cmt(0x4835FC, "\"DDERR_NOZOVERLAYHW\"", 0);
apply_type (0x4835FC, "extern char str_4835FC[19];", TINFO_DEFINITE);
cleanup("str_483610");set_name(0x483610, "str_483610");
set_cmt(0x483610, "\"DDERR_OUTOFCAPS\"", 0);
apply_type (0x483610, "extern char str_483610[16];", TINFO_DEFINITE);
cleanup("str_483620");set_name(0x483620, "str_483620");
set_cmt(0x483620, "\"DDERR_OUTOFVIDEOMEMORY\"", 0);
apply_type (0x483620, "extern char str_483620[23];", TINFO_DEFINITE);
cleanup("str_483638");set_name(0x483638, "str_483638");
set_cmt(0x483638, "\"DDERR_NOTEXTUREHW\"", 0);
apply_type (0x483638, "extern char str_483638[18];", TINFO_DEFINITE);
cleanup("str_48364C");set_name(0x48364C, "str_48364C");
set_cmt(0x48364C, "\"DDERR_NOROTATIONHW\"", 0);
apply_type (0x48364C, "extern char str_48364C[19];", TINFO_DEFINITE);
cleanup("str_483660");set_name(0x483660, "str_483660");
set_cmt(0x483660, "\"DDERR_NOSTRETCHHW\"", 0);
apply_type (0x483660, "extern char str_483660[18];", TINFO_DEFINITE);
cleanup("str_483674");set_name(0x483674, "str_483674");
set_cmt(0x483674, "\"DDERR_NOT4BITCOLOR\"", 0);
apply_type (0x483674, "extern char str_483674[19];", TINFO_DEFINITE);
cleanup("str_483688");set_name(0x483688, "str_483688");
set_cmt(0x483688, "\"DDERR_NOT4BITCOLORINDEX\"", 0);
apply_type (0x483688, "extern char str_483688[24];", TINFO_DEFINITE);
cleanup("str_4836A0");set_name(0x4836A0, "str_4836A0");
set_cmt(0x4836A0, "\"DDERR_NOT8BITCOLOR\"", 0);
apply_type (0x4836A0, "extern char str_4836A0[19];", TINFO_DEFINITE);
cleanup("str_4836B4");set_name(0x4836B4, "str_4836B4");
set_cmt(0x4836B4, "\"DDERR_NORASTEROPHW\"", 0);
apply_type (0x4836B4, "extern char str_4836B4[19];", TINFO_DEFINITE);
cleanup("str_4836C8");set_name(0x4836C8, "str_4836C8");
set_cmt(0x4836C8, "\"DDERR_NOEXCLUSIVEMODE\"", 0);
apply_type (0x4836C8, "extern char str_4836C8[22];", TINFO_DEFINITE);
cleanup("str_4836E0");set_name(0x4836E0, "str_4836E0");
set_cmt(0x4836E0, "\"DDERR_NOFLIPHW\"", 0);
apply_type (0x4836E0, "extern char str_4836E0[15];", TINFO_DEFINITE);
cleanup("str_4836F0");set_name(0x4836F0, "str_4836F0");
set_cmt(0x4836F0, "\"DDERR_NOGDI\"", 0);
apply_type (0x4836F0, "extern char str_4836F0[12];", TINFO_DEFINITE);
cleanup("str_4836FC");set_name(0x4836FC, "str_4836FC");
set_cmt(0x4836FC, "\"DDERR_NOMIRRORHW\"", 0);
apply_type (0x4836FC, "extern char str_4836FC[17];", TINFO_DEFINITE);
cleanup("str_483710");set_name(0x483710, "str_483710");
set_cmt(0x483710, "\"DDERR_NOTFOUND\"", 0);
apply_type (0x483710, "extern char str_483710[15];", TINFO_DEFINITE);
cleanup("str_483720");set_name(0x483720, "str_483720");
set_cmt(0x483720, "\"DDERR_NOOVERLAYHW\"", 0);
apply_type (0x483720, "extern char str_483720[18];", TINFO_DEFINITE);
cleanup("str_483734");set_name(0x483734, "str_483734");
set_cmt(0x483734, "\"DDERR_NOCOLORKEYHW\"", 0);
apply_type (0x483734, "extern char str_483734[19];", TINFO_DEFINITE);
cleanup("str_483748");set_name(0x483748, "str_483748");
set_cmt(0x483748, "\"DDERR_NOALPHAHW\"", 0);
apply_type (0x483748, "extern char str_483748[16];", TINFO_DEFINITE);
cleanup("str_483758");set_name(0x483758, "str_483758");
set_cmt(0x483758, "\"DDERR_NOCLIPLIST\"", 0);
apply_type (0x483758, "extern char str_483758[17];", TINFO_DEFINITE);
cleanup("str_48376C");set_name(0x48376C, "str_48376C");
set_cmt(0x48376C, "\"DDERR_NOCOLORCONVHW\"", 0);
apply_type (0x48376C, "extern char str_48376C[20];", TINFO_DEFINITE);
cleanup("str_483780");set_name(0x483780, "str_483780");
set_cmt(0x483780, "\"DDERR_NOCOOPERATIVELEVELSET\"", 0);
apply_type (0x483780, "extern char str_483780[28];", TINFO_DEFINITE);
cleanup("str_48379C");set_name(0x48379C, "str_48379C");
set_cmt(0x48379C, "\"DDERR_NOCOLORKEY\"", 0);
apply_type (0x48379C, "extern char str_48379C[17];", TINFO_DEFINITE);
cleanup("str_4837B0");set_name(0x4837B0, "str_4837B0");
set_cmt(0x4837B0, "\"DDERR_NO3D\"", 0);
apply_type (0x4837B0, "extern char str_4837B0[11];", TINFO_DEFINITE);
cleanup("str_4837BC");set_name(0x4837BC, "str_4837BC");
set_cmt(0x4837BC, "\"DDERR_INVALIDMODE\"", 0);
apply_type (0x4837BC, "extern char str_4837BC[18];", TINFO_DEFINITE);
cleanup("str_4837D0");set_name(0x4837D0, "str_4837D0");
set_cmt(0x4837D0, "\"DDERR_INVALIDOBJECT\"", 0);
apply_type (0x4837D0, "extern char str_4837D0[20];", TINFO_DEFINITE);
cleanup("str_4837E4");set_name(0x4837E4, "str_4837E4");
set_cmt(0x4837E4, "\"DDERR_INVALIDPIXELFORMAT\"", 0);
apply_type (0x4837E4, "extern char str_4837E4[25];", TINFO_DEFINITE);
cleanup("str_483800");set_name(0x483800, "str_483800");
set_cmt(0x483800, "\"DDERR_INVALIDRECT\"", 0);
apply_type (0x483800, "extern char str_483800[18];", TINFO_DEFINITE);
cleanup("str_483814");set_name(0x483814, "str_483814");
set_cmt(0x483814, "\"DDERR_LOCKEDSURFACES\"", 0);
apply_type (0x483814, "extern char str_483814[21];", TINFO_DEFINITE);
cleanup("str_48382C");set_name(0x48382C, "str_48382C");
set_cmt(0x48382C, "\"DDERR_INVALIDCLIPLIST\"", 0);
apply_type (0x48382C, "extern char str_48382C[22];", TINFO_DEFINITE);
cleanup("str_483844");set_name(0x483844, "str_483844");
set_cmt(0x483844, "\"DDERR_CURRENTLYNOTAVAIL\"", 0);
apply_type (0x483844, "extern char str_483844[24];", TINFO_DEFINITE);
cleanup("str_48385C");set_name(0x48385C, "str_48385C");
set_cmt(0x48385C, "\"DDERR_EXCEPTION\"", 0);
apply_type (0x48385C, "extern char str_48385C[16];", TINFO_DEFINITE);
cleanup("str_48386C");set_name(0x48386C, "str_48386C");
set_cmt(0x48386C, "\"DDERR_HEIGHTALIGN\"", 0);
apply_type (0x48386C, "extern char str_48386C[18];", TINFO_DEFINITE);
cleanup("str_483880");set_name(0x483880, "str_483880");
set_cmt(0x483880, "\"DDERR_INCOMPATIBLEPRIMARY\"", 0);
apply_type (0x483880, "extern char str_483880[26];", TINFO_DEFINITE);
cleanup("str_48389C");set_name(0x48389C, "str_48389C");
set_cmt(0x48389C, "\"DDERR_INVALIDCAPS\"", 0);
apply_type (0x48389C, "extern char str_48389C[18];", TINFO_DEFINITE);
cleanup("str_4838B0");set_name(0x4838B0, "str_4838B0");
set_cmt(0x4838B0, "\"DDERR_CANNOTDETACHSURFACE\"", 0);
apply_type (0x4838B0, "extern char str_4838B0[26];", TINFO_DEFINITE);
cleanup("str_4838CC");set_name(0x4838CC, "str_4838CC");
set_cmt(0x4838CC, "\"DDERR_UNSUPPORTED\"", 0);
apply_type (0x4838CC, "extern char str_4838CC[18];", TINFO_DEFINITE);
cleanup("str_4838E0");set_name(0x4838E0, "str_4838E0");
set_cmt(0x4838E0, "\"DDERR_GENERIC\"", 0);
apply_type (0x4838E0, "extern char str_4838E0[14];", TINFO_DEFINITE);
cleanup("str_4838F0");set_name(0x4838F0, "str_4838F0");
set_cmt(0x4838F0, "\"DDERR_OUTOFMEMORY\"", 0);
apply_type (0x4838F0, "extern char str_4838F0[18];", TINFO_DEFINITE);
cleanup("str_483904");set_name(0x483904, "str_483904");
set_cmt(0x483904, "\"DDERR_INVALIDPARAMS\"", 0);
apply_type (0x483904, "extern char str_483904[20];", TINFO_DEFINITE);
cleanup("str_483918");set_name(0x483918, "str_483918");
set_cmt(0x483918, "\"DDERR_ALREADYINITIALIZED\"", 0);
apply_type (0x483918, "extern char str_483918[25];", TINFO_DEFINITE);
cleanup("str_483934");set_name(0x483934, "str_483934");
set_cmt(0x483934, "\"DDERR_CANNOTATTACHSURFACE\"", 0);
apply_type (0x483934, "extern char str_483934[26];", TINFO_DEFINITE);
cleanup("str_483950");set_name(0x483950, "str_483950");
set_cmt(0x483950, "\"DSERR_PRIOLEVELNEEDED\"", 0);
apply_type (0x483950, "extern char str_483950[22];", TINFO_DEFINITE);
cleanup("str_483968");set_name(0x483968, "str_483968");
set_cmt(0x483968, "\"DSERR_BADFORMAT\"", 0);
apply_type (0x483968, "extern char str_483968[16];", TINFO_DEFINITE);
cleanup("str_483978");set_name(0x483978, "str_483978");
set_cmt(0x483978, "\"DSERR_NODRIVER\"", 0);
apply_type (0x483978, "extern char str_483978[15];", TINFO_DEFINITE);
cleanup("str_483988");set_name(0x483988, "str_483988");
set_cmt(0x483988, "\"DSERR_ALREADYINITIALIZED\"", 0);
apply_type (0x483988, "extern char str_483988[25];", TINFO_DEFINITE);
cleanup("str_4839A4");set_name(0x4839A4, "str_4839A4");
set_cmt(0x4839A4, "\"DSERR_BUFFERLOST\"", 0);
apply_type (0x4839A4, "extern char str_4839A4[17];", TINFO_DEFINITE);
cleanup("str_4839B8");set_name(0x4839B8, "str_4839B8");
set_cmt(0x4839B8, "\"DS_OK\"", 0);
apply_type (0x4839B8, "extern char str_4839B8[6];", TINFO_DEFINITE);
cleanup("str_4839C0");set_name(0x4839C0, "str_4839C0");
set_cmt(0x4839C0, "\"DSERR unknown 0x%x\"", 0);
apply_type (0x4839C0, "extern char str_4839C0[19];", TINFO_DEFINITE);
cleanup("str_4839D4");set_name(0x4839D4, "str_4839D4");
set_cmt(0x4839D4, "\"DSERR_INVALIDCALL\"", 0);
apply_type (0x4839D4, "extern char str_4839D4[18];", TINFO_DEFINITE);
cleanup("str_4839E8");set_name(0x4839E8, "str_4839E8");
set_cmt(0x4839E8, "\"E_NOINTERFACE\"", 0);
apply_type (0x4839E8, "extern char str_4839E8[14];", TINFO_DEFINITE);
cleanup("str_4839F8");set_name(0x4839F8, "str_4839F8");
set_cmt(0x4839F8, "\"DSERR_NOAGGREGATION\"", 0);
apply_type (0x4839F8, "extern char str_4839F8[20];", TINFO_DEFINITE);
cleanup("str_483A0C");set_name(0x483A0C, "str_483A0C");
set_cmt(0x483A0C, "\"DSERR_OUTOFMEMORY\"", 0);
apply_type (0x483A0C, "extern char str_483A0C[18];", TINFO_DEFINITE);
cleanup("str_483A20");set_name(0x483A20, "str_483A20");
set_cmt(0x483A20, "\"DSERR_INVALIDPARAM\"", 0);
apply_type (0x483A20, "extern char str_483A20[19];", TINFO_DEFINITE);
cleanup("str_483A34");set_name(0x483A34, "str_483A34");
set_cmt(0x483A34, "\"DSERR_ALLOCATED\"", 0);
apply_type (0x483A34, "extern char str_483A34[16];", TINFO_DEFINITE);
cleanup("str_483A44");set_name(0x483A44, "str_483A44");
set_cmt(0x483A44, "\"DSERR_CONTROLUNAVAIL\"", 0);
apply_type (0x483A44, "extern char str_483A44[21];", TINFO_DEFINITE);
cleanup("str_483A5C");set_name(0x483A5C, "str_483A5C");
set_cmt(0x483A5C, "\"ERROR\"", 0);
apply_type (0x483A5C, "extern char str_483A5C[6];", TINFO_DEFINITE);
cleanup("str_483A64");set_name(0x483A64, "str_483A64");
set_cmt(0x483A64, "\"Diablo\"", 0);
apply_type (0x483A64, "extern char str_483A64[7];", TINFO_DEFINITE);
cleanup("str_483A6C");set_name(0x483A6C, "str_483A6C");
set_cmt(0x483A6C, "\"Direct draw error (%s:%d)\n%s\"", 0);
apply_type (0x483A6C, "extern char str_483A6C[29];", TINFO_DEFINITE);
cleanup("str_483A8C");set_name(0x483A8C, "str_483A8C");
set_cmt(0x483A8C, "\"Direct sound error (%s:%d)\n%s\"", 0);
apply_type (0x483A8C, "extern char str_483A8C[30];", TINFO_DEFINITE);
cleanup("str_483AAC");set_name(0x483AAC, "str_483AAC");
set_cmt(0x483AAC, "\"center_window: %s\"", 0);
apply_type (0x483AAC, "extern char str_483AAC[18];", TINFO_DEFINITE);
cleanup("str_483AC0");set_name(0x483AC0, "str_483AC0");
set_cmt(0x483AC0, "\"ErrDlg: %d\"", 0);
apply_type (0x483AC0, "extern char str_483AC0[11];", TINFO_DEFINITE);
cleanup("str_483ACC");set_name(0x483ACC, "str_483ACC");
set_cmt(0x483ACC, "\"%s\nat: %s line %d\"", 0);
apply_type (0x483ACC, "extern char str_483ACC[18];", TINFO_DEFINITE);
cleanup("str_483AE0");set_name(0x483AE0, "str_483AE0");
set_cmt(0x483AE0, "\"FileErrDlg\"", 0);
apply_type (0x483AE0, "extern char str_483AE0[11];", TINFO_DEFINITE);
cleanup("str_483AEC");set_name(0x483AEC, "str_483AEC");
set_cmt(0x483AEC, "\"DiskFreeDlg\"", 0);
apply_type (0x483AEC, "extern char str_483AEC[12];", TINFO_DEFINITE);
cleanup("str_483AF8");set_name(0x483AF8, "str_483AF8");
set_cmt(0x483AF8, "\"InsertCDDlg\"", 0);
apply_type (0x483AF8, "extern char str_483AF8[12];", TINFO_DEFINITE);
cleanup("str_483B04");set_name(0x483B04, "str_483B04");
set_cmt(0x483B04, "\"DirErrorDlg\"", 0);
apply_type (0x483B04, "extern char str_483B04[12];", TINFO_DEFINITE);
cleanup("l1_tile_id_pattern_lookup");set_name(0x484778, "l1_tile_id_pattern_lookup");
set_cmt(0x484778, "l1_tile_id_pattern_lookup is a lookup table for the 16 possible patterns of a\n2x2 area, where each cell either contains a SW wall or it doesn't.", 0);
apply_type (0x484778, "extern l1_tile_id l1_tile_id_pattern_lookup[16];", TINFO_DEFINITE);
cleanup("str_484788");set_name(0x484788, "str_484788");
set_cmt(0x484788, "`Levels\L1Data\Banner2.DUN`", 0);
apply_type (0x484788, "extern char str_484788[26];", TINFO_DEFINITE);
cleanup("str_4847A4");set_name(0x4847A4, "str_4847A4");
set_cmt(0x4847A4, "`Levels\L1Data\SKngDO.DUN`", 0);
apply_type (0x4847A4, "extern char str_4847A4[25];", TINFO_DEFINITE);
cleanup("str_4847C0");set_name(0x4847C0, "str_4847C0");
set_cmt(0x4847C0, "`Levels\L1Data\rnd6.DUN`", 0);
apply_type (0x4847C0, "extern char str_4847C0[23];", TINFO_DEFINITE);
cleanup("str_48E3E8");set_name(0x48E3E8, "str_48E3E8");
set_cmt(0x48E3E8, "\"Pause\"", 0);
apply_type (0x48E3E8, "extern char str_48E3E8[6];", TINFO_DEFINITE);
cleanup("str_48E3F0");set_name(0x48E3F0, "str_48E3F0");
set_cmt(0x48E3F0, "`Data\optbar.CEL`", 0);
apply_type (0x48E3F0, "extern char str_48E3F0[16];", TINFO_DEFINITE);
cleanup("str_48E400");set_name(0x48E400, "str_48E400");
set_cmt(0x48E400, "`Data\option.CEL`", 0);
apply_type (0x48E400, "extern char str_48E400[16];", TINFO_DEFINITE);
cleanup("str_48E410");set_name(0x48E410, "str_48E410");
set_cmt(0x48E410, "`Data\PentSpin.CEL`", 0);
apply_type (0x48E410, "extern char str_48E410[18];", TINFO_DEFINITE);
cleanup("str_48E424");set_name(0x48E424, "str_48E424");
set_cmt(0x48E424, "`Data\BigTGold.CEL`", 0);
apply_type (0x48E424, "extern char str_48E424[18];", TINFO_DEFINITE);
cleanup("str_48E438");set_name(0x48E438, "str_48E438");
set_cmt(0x48E438, "`Data\Diabsmal.CEL`", 0);
apply_type (0x48E438, "extern char str_48E438[18];", TINFO_DEFINITE);
cleanup("str_4A34F8");set_name(0x4A34F8, "str_4A34F8");
set_cmt(0x4A34F8, "\"bad sync command\"", 0);
apply_type (0x4A34F8, "extern char str_4A34F8[17];", TINFO_DEFINITE);
cleanup("object_id_from_dun_object_id");set_name(0x49F288, "object_id_from_dun_object_id");
set_cmt(0x49F288, "object_id_from_dun_object_id maps from dun_object_id to object_id.", 0);
apply_type (0x49F288, "extern object_id object_id_from_dun_object_id[114];", TINFO_DEFINITE);
cleanup("object_data");set_name(0x49F450, "object_data");
set_cmt(0x49F450, "object_data contains the data related to each object ID.", 0);
apply_type (0x49F450, "extern ObjectData object_data[99];", TINFO_DEFINITE);
cleanup("object_cel_name_from_object_graphic_id");set_name(0x4A0554, "object_cel_name_from_object_graphic_id");
set_cmt(0x4A0554, "object_cel_name_from_object_graphic_id maps from object_graphic_id to object\nCEL name.", 0);
apply_type (0x4A0554, "extern char *object_cel_name_from_object_graphic_id[56];", TINFO_DEFINITE);
cleanup("str_4A0634");set_name(0x4A0634, "str_4A0634");
set_cmt(0x4A0634, "\"LzStand\"", 0);
apply_type (0x4A0634, "extern char str_4A0634[8];", TINFO_DEFINITE);
cleanup("str_4A063C");set_name(0x4A063C, "str_4A063C");
set_cmt(0x4A063C, "\"Mushptch\"", 0);
apply_type (0x4A063C, "extern char str_4A063C[9];", TINFO_DEFINITE);
cleanup("str_4A0648");set_name(0x4A0648, "str_4A0648");
set_cmt(0x4A0648, "\"Bkslbrnt\"", 0);
apply_type (0x4A0648, "extern char str_4A0648[9];", TINFO_DEFINITE);
cleanup("str_4A0654");set_name(0x4A0654, "str_4A0654");
set_cmt(0x4A0654, "\"Mcirl\"", 0);
apply_type (0x4A0654, "extern char str_4A0654[6];", TINFO_DEFINITE);
cleanup("str_4A065C");set_name(0x4A065C, "str_4A065C");
set_cmt(0x4A065C, "\"Altboy\"", 0);
apply_type (0x4A065C, "extern char str_4A065C[7];", TINFO_DEFINITE);
cleanup("str_4A0664");set_name(0x4A0664, "str_4A0664");
set_cmt(0x4A0664, "\"TFountn\"", 0);
apply_type (0x4A0664, "extern char str_4A0664[8];", TINFO_DEFINITE);
cleanup("str_4A066C");set_name(0x4A066C, "str_4A066C");
set_cmt(0x4A066C, "\"MFountn\"", 0);
apply_type (0x4A066C, "extern char str_4A066C[8];", TINFO_DEFINITE);
cleanup("str_4A0674");set_name(0x4A0674, "str_4A0674");
set_cmt(0x4A0674, "\"Cauldren\"", 0);
apply_type (0x4A0674, "extern char str_4A0674[9];", TINFO_DEFINITE);
cleanup("str_4A0680");set_name(0x4A0680, "str_4A0680");
set_cmt(0x4A0680, "\"Goatshrn\"", 0);
apply_type (0x4A0680, "extern char str_4A0680[9];", TINFO_DEFINITE);
cleanup("str_4A068C");set_name(0x4A068C, "str_4A068C");
set_cmt(0x4A068C, "\"Armstand\"", 0);
apply_type (0x4A068C, "extern char str_4A068C[9];", TINFO_DEFINITE);
cleanup("str_4A0698");set_name(0x4A0698, "str_4A0698");
set_cmt(0x4A0698, "\"PFountn\"", 0);
apply_type (0x4A0698, "extern char str_4A0698[8];", TINFO_DEFINITE);
cleanup("str_4A06A0");set_name(0x4A06A0, "str_4A06A0");
set_cmt(0x4A06A0, "\"L3Doors\"", 0);
apply_type (0x4A06A0, "extern char str_4A06A0[8];", TINFO_DEFINITE);
cleanup("str_4A06A8");set_name(0x4A06A8, "str_4A06A8");
set_cmt(0x4A06A8, "\"Pedistl\"", 0);
apply_type (0x4A06A8, "extern char str_4A06A8[8];", TINFO_DEFINITE);
cleanup("str_4A06B0");set_name(0x4A06B0, "str_4A06B0");
set_cmt(0x4A06B0, "\"Decap\"", 0);
apply_type (0x4A06B0, "extern char str_4A06B0[6];", TINFO_DEFINITE);
cleanup("str_4A06B8");set_name(0x4A06B8, "str_4A06B8");
set_cmt(0x4A06B8, "\"Bloodfnt\"", 0);
apply_type (0x4A06B8, "extern char str_4A06B8[9];", TINFO_DEFINITE);
cleanup("str_4A06C4");set_name(0x4A06C4, "str_4A06C4");
set_cmt(0x4A06C4, "\"RShrineG\"", 0);
apply_type (0x4A06C4, "extern char str_4A06C4[9];", TINFO_DEFINITE);
cleanup("str_4A06D0");set_name(0x4A06D0, "str_4A06D0");
set_cmt(0x4A06D0, "\"LShrineG\"", 0);
apply_type (0x4A06D0, "extern char str_4A06D0[9];", TINFO_DEFINITE);
cleanup("str_4A06DC");set_name(0x4A06DC, "str_4A06DC");
set_cmt(0x4A06DC, "\"Barrelex\"", 0);
apply_type (0x4A06DC, "extern char str_4A06DC[9];", TINFO_DEFINITE);
cleanup("str_4A06E8");set_name(0x4A06E8, "str_4A06E8");
set_cmt(0x4A06E8, "\"Barrel\"", 0);
apply_type (0x4A06E8, "extern char str_4A06E8[7];", TINFO_DEFINITE);
cleanup("str_4A06F0");set_name(0x4A06F0, "str_4A06F0");
set_cmt(0x4A06F0, "\"WeapStnd\"", 0);
apply_type (0x4A06F0, "extern char str_4A06F0[9];", TINFO_DEFINITE);
cleanup("str_4A06FC");set_name(0x4A06FC, "str_4A06FC");
set_cmt(0x4A06FC, "\"BShelf\"", 0);
apply_type (0x4A06FC, "extern char str_4A06FC[7];", TINFO_DEFINITE);
cleanup("str_4A0704");set_name(0x4A0704, "str_4A0704");
set_cmt(0x4A0704, "\"BCase\"", 0);
apply_type (0x4A0704, "extern char str_4A0704[6];", TINFO_DEFINITE);
cleanup("str_4A070C");set_name(0x4A070C, "str_4A070C");
set_cmt(0x4A070C, "\"WTorch1\"", 0);
apply_type (0x4A070C, "extern char str_4A070C[8];", TINFO_DEFINITE);
cleanup("str_4A0714");set_name(0x4A0714, "str_4A0714");
set_cmt(0x4A0714, "\"WTorch2\"", 0);
apply_type (0x4A0714, "extern char str_4A0714[8];", TINFO_DEFINITE);
cleanup("str_4A071C");set_name(0x4A071C, "str_4A071C");
set_cmt(0x4A071C, "\"MiniWatr\"", 0);
apply_type (0x4A071C, "extern char str_4A071C[9];", TINFO_DEFINITE);
cleanup("str_4A0728");set_name(0x4A0728, "str_4A0728");
set_cmt(0x4A0728, "\"Traphole\"", 0);
apply_type (0x4A0728, "extern char str_4A0728[9];", TINFO_DEFINITE);
cleanup("str_4A0734");set_name(0x4A0734, "str_4A0734");
set_cmt(0x4A0734, "\"Prsrplt1\"", 0);
apply_type (0x4A0734, "extern char str_4A0734[9];", TINFO_DEFINITE);
cleanup("str_4A0740");set_name(0x4A0740, "str_4A0740");
set_cmt(0x4A0740, "\"Flame1\"", 0);
apply_type (0x4A0740, "extern char str_4A0740[7];", TINFO_DEFINITE);
cleanup("str_4A0748");set_name(0x4A0748, "str_4A0748");
set_cmt(0x4A0748, "\"Sarc\"", 0);
apply_type (0x4A0748, "extern char str_4A0748[5];", TINFO_DEFINITE);
cleanup("str_4A0750");set_name(0x4A0750, "str_4A0750");
set_cmt(0x4A0750, "\"WTorch3\"", 0);
apply_type (0x4A0750, "extern char str_4A0750[8];", TINFO_DEFINITE);
cleanup("str_4A0758");set_name(0x4A0758, "str_4A0758");
set_cmt(0x4A0758, "\"WTorch4\"", 0);
apply_type (0x4A0758, "extern char str_4A0758[8];", TINFO_DEFINITE);
cleanup("str_4A0760");set_name(0x4A0760, "str_4A0760");
set_cmt(0x4A0760, "\"L2Doors\"", 0);
apply_type (0x4A0760, "extern char str_4A0760[8];", TINFO_DEFINITE);
cleanup("str_4A0768");set_name(0x4A0768, "str_4A0768");
set_cmt(0x4A0768, "\"TSoul\"", 0);
apply_type (0x4A0768, "extern char str_4A0768[6];", TINFO_DEFINITE);
cleanup("str_4A0770");set_name(0x4A0770, "str_4A0770");
set_cmt(0x4A0770, "\"TNudeW\"", 0);
apply_type (0x4A0770, "extern char str_4A0770[7];", TINFO_DEFINITE);
cleanup("str_4A0778");set_name(0x4A0778, "str_4A0778");
set_cmt(0x4A0778, "\"TNudeM\"", 0);
apply_type (0x4A0778, "extern char str_4A0778[7];", TINFO_DEFINITE);
cleanup("str_4A0780");set_name(0x4A0780, "str_4A0780");
set_cmt(0x4A0780, "\"Switch4\"", 0);
apply_type (0x4A0780, "extern char str_4A0780[8];", TINFO_DEFINITE);
cleanup("str_4A0788");set_name(0x4A0788, "str_4A0788");
set_cmt(0x4A0788, "\"Nude2\"", 0);
apply_type (0x4A0788, "extern char str_4A0788[6];", TINFO_DEFINITE);
cleanup("str_4A0790");set_name(0x4A0790, "str_4A0790");
set_cmt(0x4A0790, "\"Candle2\"", 0);
apply_type (0x4A0790, "extern char str_4A0790[8];", TINFO_DEFINITE);
cleanup("str_4A0798");set_name(0x4A0798, "str_4A0798");
set_cmt(0x4A0798, "\"Burncros\"", 0);
apply_type (0x4A0798, "extern char str_4A0798[9];", TINFO_DEFINITE);
cleanup("str_4A07A4");set_name(0x4A07A4, "str_4A07A4");
set_cmt(0x4A07A4, "\"Chest3\"", 0);
apply_type (0x4A07A4, "extern char str_4A07A4[7];", TINFO_DEFINITE);
cleanup("str_4A07AC");set_name(0x4A07AC, "str_4A07AC");
set_cmt(0x4A07AC, "\"Angel\"", 0);
apply_type (0x4A07AC, "extern char str_4A07AC[6];", TINFO_DEFINITE);
cleanup("str_4A07B4");set_name(0x4A07B4, "str_4A07B4");
set_cmt(0x4A07B4, "\"Rockstan\"", 0);
apply_type (0x4A07B4, "extern char str_4A07B4[9];", TINFO_DEFINITE);
cleanup("str_4A07C0");set_name(0x4A07C0, "str_4A07C0");
set_cmt(0x4A07C0, "\"Book2\"", 0);
apply_type (0x4A07C0, "extern char str_4A07C0[6];", TINFO_DEFINITE);
cleanup("str_4A07C8");set_name(0x4A07C8, "str_4A07C8");
set_cmt(0x4A07C8, "\"Book1\"", 0);
apply_type (0x4A07C8, "extern char str_4A07C8[6];", TINFO_DEFINITE);
cleanup("str_4A07D0");set_name(0x4A07D0, "str_4A07D0");
set_cmt(0x4A07D0, "\"CruxSk3\"", 0);
apply_type (0x4A07D0, "extern char str_4A07D0[8];", TINFO_DEFINITE);
cleanup("str_4A07D8");set_name(0x4A07D8, "str_4A07D8");
set_cmt(0x4A07D8, "\"CruxSk2\"", 0);
apply_type (0x4A07D8, "extern char str_4A07D8[8];", TINFO_DEFINITE);
cleanup("str_4A07E0");set_name(0x4A07E0, "str_4A07E0");
set_cmt(0x4A07E0, "\"CruxSk1\"", 0);
apply_type (0x4A07E0, "extern char str_4A07E0[8];", TINFO_DEFINITE);
cleanup("str_4A07E8");set_name(0x4A07E8, "str_4A07E8");
set_cmt(0x4A07E8, "\"SkulStik\"", 0);
apply_type (0x4A07E8, "extern char str_4A07E8[9];", TINFO_DEFINITE);
cleanup("str_4A07F4");set_name(0x4A07F4, "str_4A07F4");
set_cmt(0x4A07F4, "\"SkulFire\"", 0);
apply_type (0x4A07F4, "extern char str_4A07F4[9];", TINFO_DEFINITE);
cleanup("str_4A0800");set_name(0x4A0800, "str_4A0800");
set_cmt(0x4A0800, "\"SkulPile\"", 0);
apply_type (0x4A0800, "extern char str_4A0800[9];", TINFO_DEFINITE);
cleanup("str_4A080C");set_name(0x4A080C, "str_4A080C");
set_cmt(0x4A080C, "\"Banner\"", 0);
apply_type (0x4A080C, "extern char str_4A080C[7];", TINFO_DEFINITE);
cleanup("str_4A0814");set_name(0x4A0814, "str_4A0814");
set_cmt(0x4A0814, "\"Chest2\"", 0);
apply_type (0x4A0814, "extern char str_4A0814[7];", TINFO_DEFINITE);
cleanup("str_4A081C");set_name(0x4A081C, "str_4A081C");
set_cmt(0x4A081C, "\"Chest1\"", 0);
apply_type (0x4A081C, "extern char str_4A081C[7];", TINFO_DEFINITE);
cleanup("str_4A0824");set_name(0x4A0824, "str_4A0824");
set_cmt(0x4A0824, "\"Lever\"", 0);
apply_type (0x4A0824, "extern char str_4A0824[6];", TINFO_DEFINITE);
cleanup("str_4A082C");set_name(0x4A082C, "str_4A082C");
set_cmt(0x4A082C, "\"L1Doors\"", 0);
apply_type (0x4A082C, "extern char str_4A082C[8];", TINFO_DEFINITE);
cleanup("str_4A0834");set_name(0x4A0834, "str_4A0834");
set_cmt(0x4A0834, "\"L1Braz\"", 0);
apply_type (0x4A0834, "extern char str_4A0834[7];", TINFO_DEFINITE);
cleanup("barrel_x_delta");set_name(0x4A083C, "barrel_x_delta");
set_cmt(0x4A083C, "barrel_x_delta specifies the X-coordinate delta between barrels.", 0);
apply_type (0x4A083C, "extern int barrel_x_delta[8];", TINFO_DEFINITE);
cleanup("barrel_y_delta");set_name(0x4A085C, "barrel_y_delta");
set_cmt(0x4A085C, "barrel_y_delta specifies the Y-coordinate delta between barrels.", 0);
apply_type (0x4A085C, "extern int barrel_y_delta[8];", TINFO_DEFINITE);
cleanup("shrine_name_from_shrine_id");set_name(0x4A087C, "shrine_name_from_shrine_id");
set_cmt(0x4A087C, "shrine_name_from_shrine_id maps from shrine_id to shrine name.", 0);
apply_type (0x4A087C, "extern char *shrine_name_from_shrine_id[26];", TINFO_DEFINITE);
cleanup("dlvl_min_from_shrine_id");set_name(0x4A08E4, "dlvl_min_from_shrine_id");
set_cmt(0x4A08E4, "dlvl_min_from_shrine_id specifies the minimum dungeon level on which each\nshrine will appear.", 0);
apply_type (0x4A08E4, "extern int8_t dlvl_min_from_shrine_id[26];", TINFO_DEFINITE);
cleanup("dlvl_max_from_shrine_id");set_name(0x4A0900, "dlvl_max_from_shrine_id");
set_cmt(0x4A0900, "dlvl_max_from_shrine_id specifies the maximum dungeon level on which each\nshrine will appear.", 0);
apply_type (0x4A0900, "extern int8_t dlvl_max_from_shrine_id[26];", TINFO_DEFINITE);
cleanup("shrine_game_type_from_shrine_id");set_name(0x4A091C, "shrine_game_type_from_shrine_id");
set_cmt(0x4A091C, "shrine_game_type_from_shrine_id specifies the game type for which each shrine\nmay appear.", 0);
apply_type (0x4A091C, "extern int8_t shrine_game_type_from_shrine_id[26];", TINFO_DEFINITE);
cleanup("book_name_from_book_id");set_name(0x4A0938, "book_name_from_book_id");
set_cmt(0x4A0938, "book_name_from_book_id maps from book_id to book name.", 0);
apply_type (0x4A0938, "extern char *book_name_from_book_id[9];", TINFO_DEFINITE);
cleanup("narrator_book_from_player_class");set_name(0x4A095C, "narrator_book_from_player_class");
set_cmt(0x4A095C, "narrator_book_from_player_class specifies the speech IDs of each dungeon type\nnarrator book, for each player class.", 0);
apply_type (0x4A095C, "extern NarratorBook narrator_book_from_player_class[3];", TINFO_DEFINITE);
cleanup("str_4A0980");set_name(0x4A0980, "str_4A0980");
set_cmt(0x4A0980, "\"The Black King\"", 0);
apply_type (0x4A0980, "extern char str_4A0980[15];", TINFO_DEFINITE);
cleanup("str_4A0990");set_name(0x4A0990, "str_4A0990");
set_cmt(0x4A0990, "\"Tale of the Three\"", 0);
apply_type (0x4A0990, "extern char str_4A0990[18];", TINFO_DEFINITE);
cleanup("str_4A09A4");set_name(0x4A09A4, "str_4A09A4");
set_cmt(0x4A09A4, "\"The Realms Beyond\"", 0);
apply_type (0x4A09A4, "extern char str_4A09A4[18];", TINFO_DEFINITE);
cleanup("str_4A09B8");set_name(0x4A09B8, "str_4A09B8");
set_cmt(0x4A09B8, "\"The Binding of the Three\"", 0);
apply_type (0x4A09B8, "extern char str_4A09B8[25];", TINFO_DEFINITE);
cleanup("str_4A09D4");set_name(0x4A09D4, "str_4A09D4");
set_cmt(0x4A09D4, "\"The Sin War\"", 0);
apply_type (0x4A09D4, "extern char str_4A09D4[12];", TINFO_DEFINITE);
cleanup("str_4A09E0");set_name(0x4A09E0, "str_4A09E0");
set_cmt(0x4A09E0, "\"The Dark Exile\"", 0);
apply_type (0x4A09E0, "extern char str_4A09E0[15];", TINFO_DEFINITE);
cleanup("str_4A09F0");set_name(0x4A09F0, "str_4A09F0");
set_cmt(0x4A09F0, "\"The Tale of the Horadrim\"", 0);
apply_type (0x4A09F0, "extern char str_4A09F0[25];", TINFO_DEFINITE);
cleanup("str_4A0A0C");set_name(0x4A0A0C, "str_4A0A0C");
set_cmt(0x4A0A0C, "\"The Wages of Sin are War\"", 0);
apply_type (0x4A0A0C, "extern char str_4A0A0C[25];", TINFO_DEFINITE);
cleanup("str_4A0A28");set_name(0x4A0A28, "str_4A0A28");
set_cmt(0x4A0A28, "\"The Great Conflict\"", 0);
apply_type (0x4A0A28, "extern char str_4A0A28[19];", TINFO_DEFINITE);
cleanup("str_4A0A3C");set_name(0x4A0A3C, "str_4A0A3C");
set_cmt(0x4A0A3C, "\"Tainted\"", 0);
apply_type (0x4A0A3C, "extern char str_4A0A3C[8];", TINFO_DEFINITE);
cleanup("str_4A0A44");set_name(0x4A0A44, "str_4A0A44");
set_cmt(0x4A0A44, "\"Glimmering\"", 0);
apply_type (0x4A0A44, "extern char str_4A0A44[11];", TINFO_DEFINITE);
cleanup("str_4A0A50");set_name(0x4A0A50, "str_4A0A50");
set_cmt(0x4A0A50, "\"Ornate\"", 0);
apply_type (0x4A0A50, "extern char str_4A0A50[7];", TINFO_DEFINITE);
cleanup("str_4A0A58");set_name(0x4A0A58, "str_4A0A58");
set_cmt(0x4A0A58, "\"Secluded\"", 0);
apply_type (0x4A0A58, "extern char str_4A0A58[9];", TINFO_DEFINITE);
cleanup("str_4A0A64");set_name(0x4A0A64, "str_4A0A64");
set_cmt(0x4A0A64, "\"Quiet\"", 0);
apply_type (0x4A0A64, "extern char str_4A0A64[6];", TINFO_DEFINITE);
cleanup("str_4A0A6C");set_name(0x4A0A6C, "str_4A0A6C");
set_cmt(0x4A0A6C, "\"Creepy\"", 0);
apply_type (0x4A0A6C, "extern char str_4A0A6C[7];", TINFO_DEFINITE);
cleanup("str_4A0A74");set_name(0x4A0A74, "str_4A0A74");
set_cmt(0x4A0A74, "\"Abandoned\"", 0);
apply_type (0x4A0A74, "extern char str_4A0A74[10];", TINFO_DEFINITE);
cleanup("str_4A0A80");set_name(0x4A0A80, "str_4A0A80");
set_cmt(0x4A0A80, "\"Spooky\"", 0);
apply_type (0x4A0A80, "extern char str_4A0A80[7];", TINFO_DEFINITE);
cleanup("str_4A0A88");set_name(0x4A0A88, "str_4A0A88");
set_cmt(0x4A0A88, "\"Spiritual\"", 0);
apply_type (0x4A0A88, "extern char str_4A0A88[10];", TINFO_DEFINITE);
cleanup("str_4A0A94");set_name(0x4A0A94, "str_4A0A94");
set_cmt(0x4A0A94, "\"Sacred\"", 0);
apply_type (0x4A0A94, "extern char str_4A0A94[7];", TINFO_DEFINITE);
cleanup("str_4A0A9C");set_name(0x4A0A9C, "str_4A0A9C");
set_cmt(0x4A0A9C, "\"Divine\"", 0);
apply_type (0x4A0A9C, "extern char str_4A0A9C[7];", TINFO_DEFINITE);
cleanup("str_4A0AA4");set_name(0x4A0AA4, "str_4A0AA4");
set_cmt(0x4A0AA4, "\"Eerie\"", 0);
apply_type (0x4A0AA4, "extern char str_4A0AA4[6];", TINFO_DEFINITE);
cleanup("str_4A0AAC");set_name(0x4A0AAC, "str_4A0AAC");
set_cmt(0x4A0AAC, "\"Eldritch\"", 0);
apply_type (0x4A0AAC, "extern char str_4A0AAC[9];", TINFO_DEFINITE);
cleanup("str_4A0AB8");set_name(0x4A0AB8, "str_4A0AB8");
set_cmt(0x4A0AB8, "\"Cryptic\"", 0);
apply_type (0x4A0AB8, "extern char str_4A0AB8[8];", TINFO_DEFINITE);
cleanup("str_4A0AC0");set_name(0x4A0AC0, "str_4A0AC0");
set_cmt(0x4A0AC0, "\"Fascinating\"", 0);
apply_type (0x4A0AC0, "extern char str_4A0AC0[12];", TINFO_DEFINITE);
cleanup("str_4A0ACC");set_name(0x4A0ACC, "str_4A0ACC");
set_cmt(0x4A0ACC, "\"Thaumaturgic\"", 0);
apply_type (0x4A0ACC, "extern char str_4A0ACC[13];", TINFO_DEFINITE);
cleanup("str_4A0ADC");set_name(0x4A0ADC, "str_4A0ADC");
set_cmt(0x4A0ADC, "\"Enchanted\"", 0);
apply_type (0x4A0ADC, "extern char str_4A0ADC[10];", TINFO_DEFINITE);
cleanup("str_4A0AE8");set_name(0x4A0AE8, "str_4A0AE8");
set_cmt(0x4A0AE8, "\"Religious\"", 0);
apply_type (0x4A0AE8, "extern char str_4A0AE8[10];", TINFO_DEFINITE);
cleanup("str_4A0AF4");set_name(0x4A0AF4, "str_4A0AF4");
set_cmt(0x4A0AF4, "\"Stone\"", 0);
apply_type (0x4A0AF4, "extern char str_4A0AF4[6];", TINFO_DEFINITE);
cleanup("str_4A0AFC");set_name(0x4A0AFC, "str_4A0AFC");
set_cmt(0x4A0AFC, "\"Magical\"", 0);
apply_type (0x4A0AFC, "extern char str_4A0AFC[8];", TINFO_DEFINITE);
cleanup("str_4A0B04");set_name(0x4A0B04, "str_4A0B04");
set_cmt(0x4A0B04, "\"Gloomy\"", 0);
apply_type (0x4A0B04, "extern char str_4A0B04[7];", TINFO_DEFINITE);
cleanup("str_4A0B0C");set_name(0x4A0B0C, "str_4A0B0C");
set_cmt(0x4A0B0C, "\"Mysterious\"", 0);
apply_type (0x4A0B0C, "extern char str_4A0B0C[11];", TINFO_DEFINITE);
cleanup("str_4A0B18");set_name(0x4A0B18, "str_4A0B18");
set_cmt(0x4A0B18, "`Objects\%s.CEL`", 0);
apply_type (0x4A0B18, "extern char str_4A0B18[15];", TINFO_DEFINITE);
cleanup("str_4A0B28");set_name(0x4A0B28, "str_4A0B28");
set_cmt(0x4A0B28, "\"Trapped %s\"", 0);
apply_type (0x4A0B28, "extern char str_4A0B28[11];", TINFO_DEFINITE);
cleanup("str_4A0B34");set_name(0x4A0B34, "str_4A0B34");
set_cmt(0x4A0B34, "\"Slain Hero\"", 0);
apply_type (0x4A0B34, "extern char str_4A0B34[11];", TINFO_DEFINITE);
cleanup("str_4A0B40");set_name(0x4A0B40, "str_4A0B40");
set_cmt(0x4A0B40, "\"Vile Stand\"", 0);
apply_type (0x4A0B40, "extern char str_4A0B40[11];", TINFO_DEFINITE);
cleanup("str_4A0B4C");set_name(0x4A0B4C, "str_4A0B4C");
set_cmt(0x4A0B4C, "\"Mushroom Patch\"", 0);
apply_type (0x4A0B4C, "extern char str_4A0B4C[15];", TINFO_DEFINITE);
cleanup("str_4A0B5C");set_name(0x4A0B5C, "str_4A0B5C");
set_cmt(0x4A0B5C, "\"Weapon Rack\"", 0);
apply_type (0x4A0B5C, "extern char str_4A0B5C[12];", TINFO_DEFINITE);
cleanup("str_4A0B68");set_name(0x4A0B68, "str_4A0B68");
set_cmt(0x4A0B68, "\"Pedestal of Blood\"", 0);
apply_type (0x4A0B68, "extern char str_4A0B68[18];", TINFO_DEFINITE);
cleanup("str_4A0B7C");set_name(0x4A0B7C, "str_4A0B7C");
set_cmt(0x4A0B7C, "\"Fountain of Tears\"", 0);
apply_type (0x4A0B7C, "extern char str_4A0B7C[18];", TINFO_DEFINITE);
cleanup("str_4A0B90");set_name(0x4A0B90, "str_4A0B90");
set_cmt(0x4A0B90, "\"Murky Pool\"", 0);
apply_type (0x4A0B90, "extern char str_4A0B90[11];", TINFO_DEFINITE);
cleanup("str_4A0B9C");set_name(0x4A0B9C, "str_4A0B9C");
set_cmt(0x4A0B9C, "\"Cauldron\"", 0);
apply_type (0x4A0B9C, "extern char str_4A0B9C[9];", TINFO_DEFINITE);
cleanup("str_4A0BA8");set_name(0x4A0BA8, "str_4A0BA8");
set_cmt(0x4A0BA8, "\"Goat Shrine\"", 0);
apply_type (0x4A0BA8, "extern char str_4A0BA8[12];", TINFO_DEFINITE);
cleanup("str_4A0BB4");set_name(0x4A0BB4, "str_4A0BB4");
set_cmt(0x4A0BB4, "\"Purifying Spring\"", 0);
apply_type (0x4A0BB4, "extern char str_4A0BB4[17];", TINFO_DEFINITE);
cleanup("str_4A0BC8");set_name(0x4A0BC8, "str_4A0BC8");
set_cmt(0x4A0BC8, "\"Book of Blood\"", 0);
apply_type (0x4A0BC8, "extern char str_4A0BC8[14];", TINFO_DEFINITE);
cleanup("str_4A0BD8");set_name(0x4A0BD8, "str_4A0BD8");
set_cmt(0x4A0BD8, "\"Steel Tome\"", 0);
apply_type (0x4A0BD8, "extern char str_4A0BD8[11];", TINFO_DEFINITE);
cleanup("str_4A0BE4");set_name(0x4A0BE4, "str_4A0BE4");
set_cmt(0x4A0BE4, "\"Book of the Blind\"", 0);
apply_type (0x4A0BE4, "extern char str_4A0BE4[18];", TINFO_DEFINITE);
cleanup("str_4A0BF8");set_name(0x4A0BF8, "str_4A0BF8");
set_cmt(0x4A0BF8, "\"Decapitated Body\"", 0);
apply_type (0x4A0BF8, "extern char str_4A0BF8[17];", TINFO_DEFINITE);
cleanup("str_4A0C0C");set_name(0x4A0C0C, "str_4A0C0C");
set_cmt(0x4A0C0C, "\"Blood Fountain\"", 0);
apply_type (0x4A0C0C, "extern char str_4A0C0C[15];", TINFO_DEFINITE);
cleanup("str_4A0C1C");set_name(0x4A0C1C, "str_4A0C1C");
set_cmt(0x4A0C1C, "\"Library Book\"", 0);
apply_type (0x4A0C1C, "extern char str_4A0C1C[13];", TINFO_DEFINITE);
cleanup("str_4A0C2C");set_name(0x4A0C2C, "str_4A0C2C");
set_cmt(0x4A0C2C, "\"Skeleton Tome\"", 0);
apply_type (0x4A0C2C, "extern char str_4A0C2C[14];", TINFO_DEFINITE);
cleanup("str_4A0C3C");set_name(0x4A0C3C, "str_4A0C3C");
set_cmt(0x4A0C3C, "\"%s Shrine\"", 0);
apply_type (0x4A0C3C, "extern char str_4A0C3C[10];", TINFO_DEFINITE);
cleanup("str_4A0C48");set_name(0x4A0C48, "str_4A0C48");
set_cmt(0x4A0C48, "\"Bookcase\"", 0);
apply_type (0x4A0C48, "extern char str_4A0C48[9];", TINFO_DEFINITE);
cleanup("str_4A0C54");set_name(0x4A0C54, "str_4A0C54");
set_cmt(0x4A0C54, "\"Bookshelf\"", 0);
apply_type (0x4A0C54, "extern char str_4A0C54[10];", TINFO_DEFINITE);
cleanup("str_4A0C60");set_name(0x4A0C60, "str_4A0C60");
set_cmt(0x4A0C60, "\"Sarcophagus\"", 0);
apply_type (0x4A0C60, "extern char str_4A0C60[12];", TINFO_DEFINITE);
cleanup("str_4A0C6C");set_name(0x4A0C6C, "str_4A0C6C");
set_cmt(0x4A0C6C, "\"Large Chest\"", 0);
apply_type (0x4A0C6C, "extern char str_4A0C6C[12];", TINFO_DEFINITE);
cleanup("str_4A0C78");set_name(0x4A0C78, "str_4A0C78");
set_cmt(0x4A0C78, "\"Chest\"", 0);
apply_type (0x4A0C78, "extern char str_4A0C78[6];", TINFO_DEFINITE);
cleanup("str_4A0C80");set_name(0x4A0C80, "str_4A0C80");
set_cmt(0x4A0C80, "\"Small Chest\"", 0);
apply_type (0x4A0C80, "extern char str_4A0C80[12];", TINFO_DEFINITE);
cleanup("str_4A0C8C");set_name(0x4A0C8C, "str_4A0C8C");
set_cmt(0x4A0C8C, "\"Mythical Book\"", 0);
apply_type (0x4A0C8C, "extern char str_4A0C8C[14];", TINFO_DEFINITE);
cleanup("str_4A0C9C");set_name(0x4A0C9C, "str_4A0C9C");
set_cmt(0x4A0C9C, "\"Skull Lever\"", 0);
apply_type (0x4A0C9C, "extern char str_4A0C9C[12];", TINFO_DEFINITE);
cleanup("str_4A0CA8");set_name(0x4A0CA8, "str_4A0CA8");
set_cmt(0x4A0CA8, "\"Book of Vileness\"", 0);
apply_type (0x4A0CA8, "extern char str_4A0CA8[17];", TINFO_DEFINITE);
cleanup("str_4A0CBC");set_name(0x4A0CBC, "str_4A0CBC");
set_cmt(0x4A0CBC, "\"Ancient Tome\"", 0);
apply_type (0x4A0CBC, "extern char str_4A0CBC[13];", TINFO_DEFINITE);
cleanup("str_4A0CCC");set_name(0x4A0CCC, "str_4A0CCC");
set_cmt(0x4A0CCC, "\"Blocked Door\"", 0);
apply_type (0x4A0CCC, "extern char str_4A0CCC[13];", TINFO_DEFINITE);
cleanup("str_4A0CDC");set_name(0x4A0CDC, "str_4A0CDC");
set_cmt(0x4A0CDC, "\"Closed Door\"", 0);
apply_type (0x4A0CDC, "extern char str_4A0CDC[12];", TINFO_DEFINITE);
cleanup("str_4A0CE8");set_name(0x4A0CE8, "str_4A0CE8");
set_cmt(0x4A0CE8, "\"Open Door\"", 0);
apply_type (0x4A0CE8, "extern char str_4A0CE8[10];", TINFO_DEFINITE);
cleanup("str_4A0CF4");set_name(0x4A0CF4, "str_4A0CF4");
set_cmt(0x4A0CF4, "\"Crucified Skeleton\"", 0);
apply_type (0x4A0CF4, "extern char str_4A0CF4[19];", TINFO_DEFINITE);
cleanup("description_box_text_y_offset");set_name(0x4A2D5C, "description_box_text_y_offset");
set_cmt(0x4A2D5C, "description_box_text_y_offset maps from line number to Y offset in pixels for\ntext drawn in the description box.", 0);
apply_type (0x4A2D5C, "extern int description_box_text_y_offset[24];", TINFO_DEFINITE);
cleanup("towner_names");set_name(0x4A2DBC, "towner_names");
set_cmt(0x4A2DBC, "towner_names maps from towner IDs to NPC names.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/enums.h#towner_id", 0);
apply_type (0x4A2DBC, "extern char *towner_names[9];", TINFO_DEFINITE);
cleanup("str_4A2DE0");set_name(0x4A2DE0, "str_4A2DE0");
set_cmt(0x4A2DE0, "\"Wirt\"", 0);
apply_type (0x4A2DE0, "extern char str_4A2DE0[5];", TINFO_DEFINITE);
cleanup("str_4A2DE8");set_name(0x4A2DE8, "str_4A2DE8");
set_cmt(0x4A2DE8, "\"Gillian\"", 0);
apply_type (0x4A2DE8, "extern char str_4A2DE8[8];", TINFO_DEFINITE);
cleanup("str_4A2DF0");set_name(0x4A2DF0, "str_4A2DF0");
set_cmt(0x4A2DF0, "\"Adria\"", 0);
apply_type (0x4A2DF0, "extern char str_4A2DF0[6];", TINFO_DEFINITE);
cleanup("str_4A2DF8");set_name(0x4A2DF8, "str_4A2DF8");
set_cmt(0x4A2DF8, "\"Farnham\"", 0);
apply_type (0x4A2DF8, "extern char str_4A2DF8[8];", TINFO_DEFINITE);
cleanup("str_4A2E00");set_name(0x4A2E00, "str_4A2E00");
set_cmt(0x4A2E00, "\"Cain\"", 0);
apply_type (0x4A2E00, "extern char str_4A2E00[5];", TINFO_DEFINITE);
cleanup("str_4A2E08");set_name(0x4A2E08, "str_4A2E08");
set_cmt(0x4A2E08, "\"Ogden\"", 0);
apply_type (0x4A2E08, "extern char str_4A2E08[6];", TINFO_DEFINITE);
cleanup("str_4A2E10");set_name(0x4A2E10, "str_4A2E10");
set_cmt(0x4A2E10, "\"Pepin\"", 0);
apply_type (0x4A2E10, "extern char str_4A2E10[6];", TINFO_DEFINITE);
cleanup("str_4A2E18");set_name(0x4A2E18, "str_4A2E18");
set_cmt(0x4A2E18, "\"Griswold\"", 0);
apply_type (0x4A2E18, "extern char str_4A2E18[9];", TINFO_DEFINITE);
cleanup("str_4A2E24");set_name(0x4A2E24, "str_4A2E24");
set_cmt(0x4A2E24, "\"Data\TextSlid.CEL\"", 0);
apply_type (0x4A2E24, "extern char str_4A2E24[18];", TINFO_DEFINITE);
cleanup("str_4A2E38");set_name(0x4A2E38, "str_4A2E38");
set_cmt(0x4A2E38, "\"Data\PentSpn2.CEL\"", 0);
apply_type (0x4A2E38, "extern char str_4A2E38[18];", TINFO_DEFINITE);
cleanup("str_4A2E4C");set_name(0x4A2E4C, "str_4A2E4C");
set_cmt(0x4A2E4C, "\"Data\TextBox2.CEL\"", 0);
apply_type (0x4A2E4C, "extern char str_4A2E4C[18];", TINFO_DEFINITE);
cleanup("str_4A2E60");set_name(0x4A2E60, "str_4A2E60");
set_cmt(0x4A2E60, "\"Leave the shop\"", 0);
apply_type (0x4A2E60, "extern char str_4A2E60[15];", TINFO_DEFINITE);
cleanup("str_4A2E70");set_name(0x4A2E70, "str_4A2E70");
set_cmt(0x4A2E70, "\"Repair items\"", 0);
apply_type (0x4A2E70, "extern char str_4A2E70[13];", TINFO_DEFINITE);
cleanup("str_4A2E80");set_name(0x4A2E80, "str_4A2E80");
set_cmt(0x4A2E80, "\"Sell items\"", 0);
apply_type (0x4A2E80, "extern char str_4A2E80[11];", TINFO_DEFINITE);
cleanup("str_4A2E8C");set_name(0x4A2E8C, "str_4A2E8C");
set_cmt(0x4A2E8C, "\"Buy premium items\"", 0);
apply_type (0x4A2E8C, "extern char str_4A2E8C[18];", TINFO_DEFINITE);
cleanup("str_4A2EA0");set_name(0x4A2EA0, "str_4A2EA0");
set_cmt(0x4A2EA0, "\"Buy basic items\"", 0);
apply_type (0x4A2EA0, "extern char str_4A2EA0[16];", TINFO_DEFINITE);
cleanup("str_4A2EB0");set_name(0x4A2EB0, "str_4A2EB0");
set_cmt(0x4A2EB0, "\"Talk to Griswold\"", 0);
apply_type (0x4A2EB0, "extern char str_4A2EB0[17];", TINFO_DEFINITE);
cleanup("str_4A2EC4");set_name(0x4A2EC4, "str_4A2EC4");
set_cmt(0x4A2EC4, "\"Would you like to:\"", 0);
apply_type (0x4A2EC4, "extern char str_4A2EC4[19];", TINFO_DEFINITE);
cleanup("str_4A2ED8");set_name(0x4A2ED8, "str_4A2ED8");
set_cmt(0x4A2ED8, "\"Blacksmith's shop\"", 0);
apply_type (0x4A2ED8, "extern char str_4A2ED8[18];", TINFO_DEFINITE);
cleanup("str_4A2EEC");set_name(0x4A2EEC, "str_4A2EEC");
set_cmt(0x4A2EEC, "\"Welcome to the\"", 0);
apply_type (0x4A2EEC, "extern char str_4A2EEC[15];", TINFO_DEFINITE);
cleanup("str_4A2EFC");set_name(0x4A2EFC, "str_4A2EFC");
set_cmt(0x4A2EFC, "\"Unique Item\"", 0);
apply_type (0x4A2EFC, "extern char str_4A2EFC[12];", TINFO_DEFINITE);
cleanup("str_4A2F08");set_name(0x4A2F08, "str_4A2F08");
set_cmt(0x4A2F08, "\"No required attributes\"", 0);
apply_type (0x4A2F08, "extern char str_4A2F08[23];", TINFO_DEFINITE);
cleanup("str_4A2F20");set_name(0x4A2F20, "str_4A2F20");
set_cmt(0x4A2F20, "\"Indestructible,  \"", 0);
apply_type (0x4A2F20, "extern char str_4A2F20[18];", TINFO_DEFINITE);
cleanup("str_4A2F34");set_name(0x4A2F34, "str_4A2F34");
set_cmt(0x4A2F34, "\"Dur: %i/%i,  \"", 0);
apply_type (0x4A2F34, "extern char str_4A2F34[14];", TINFO_DEFINITE);
cleanup("str_4A2F44");set_name(0x4A2F44, "str_4A2F44");
set_cmt(0x4A2F44, "\"Armor: %i  \"", 0);
apply_type (0x4A2F44, "extern char str_4A2F44[12];", TINFO_DEFINITE);
cleanup("str_4A2F50");set_name(0x4A2F50, "str_4A2F50");
set_cmt(0x4A2F50, "\"Damage: %i-%i  \"", 0);
apply_type (0x4A2F50, "extern char str_4A2F50[16];", TINFO_DEFINITE);
cleanup("str_4A2F60");set_name(0x4A2F60, "str_4A2F60");
set_cmt(0x4A2F60, " \",  \"", 0);
apply_type (0x4A2F60, "extern char str_4A2F60[4];", TINFO_DEFINITE);
cleanup("str_4A2F64");set_name(0x4A2F64, "str_4A2F64");
set_cmt(0x4A2F64, "\"Back\"", 0);
apply_type (0x4A2F64, "extern char str_4A2F64[5];", TINFO_DEFINITE);
cleanup("str_4A2F6C");set_name(0x4A2F6C, "str_4A2F6C");
set_cmt(0x4A2F6C, "\"I have these items for sale :           Your gold : %i\"", 0);
apply_type (0x4A2F6C, "extern char str_4A2F6C[55];", TINFO_DEFINITE);
cleanup("str_4A2FA4");set_name(0x4A2FA4, "str_4A2FA4");
set_cmt(0x4A2FA4, "\"I have these premium items for sale :   Your gold : %i\"", 0);
apply_type (0x4A2FA4, "extern char str_4A2FA4[55];", TINFO_DEFINITE);
cleanup("str_4A2FDC");set_name(0x4A2FDC, "str_4A2FDC");
set_cmt(0x4A2FDC, "\"Which item is for sale?            Your gold : %i\"", 0);
apply_type (0x4A2FDC, "extern char str_4A2FDC[50];", TINFO_DEFINITE);
cleanup("str_4A3010");set_name(0x4A3010, "str_4A3010");
set_cmt(0x4A3010, "\"You have nothing I want.            Your gold : %i\"", 0);
apply_type (0x4A3010, "extern char str_4A3010[51];", TINFO_DEFINITE);
cleanup("str_4A3044");set_name(0x4A3044, "str_4A3044");
set_cmt(0x4A3044, "\"Repair which item?            Your gold : %i\"", 0);
apply_type (0x4A3044, "extern char str_4A3044[45];", TINFO_DEFINITE);
cleanup("str_4A3074");set_name(0x4A3074, "str_4A3074");
set_cmt(0x4A3074, "\"You have nothing to repair.            Your gold : %i\"", 0);
apply_type (0x4A3074, "extern char str_4A3074[54];", TINFO_DEFINITE);
cleanup("str_4A30AC");set_name(0x4A30AC, "str_4A30AC");
set_cmt(0x4A30AC, "\"Leave the shack\"", 0);
apply_type (0x4A30AC, "extern char str_4A30AC[16];", TINFO_DEFINITE);
cleanup("str_4A30BC");set_name(0x4A30BC, "str_4A30BC");
set_cmt(0x4A30BC, "\"Recharge staves\"", 0);
apply_type (0x4A30BC, "extern char str_4A30BC[16];", TINFO_DEFINITE);
cleanup("str_4A30CC");set_name(0x4A30CC, "str_4A30CC");
set_cmt(0x4A30CC, "\"Buy items\"", 0);
apply_type (0x4A30CC, "extern char str_4A30CC[10];", TINFO_DEFINITE);
cleanup("str_4A30D8");set_name(0x4A30D8, "str_4A30D8");
set_cmt(0x4A30D8, "\"Talk to Adria\"", 0);
apply_type (0x4A30D8, "extern char str_4A30D8[14];", TINFO_DEFINITE);
cleanup("str_4A30E8");set_name(0x4A30E8, "str_4A30E8");
set_cmt(0x4A30E8, "\"Witch's shack\"", 0);
apply_type (0x4A30E8, "extern char str_4A30E8[14];", TINFO_DEFINITE);
cleanup("str_4A30F8");set_name(0x4A30F8, "str_4A30F8");
set_cmt(0x4A30F8, "\"Recharge which item?            Your gold : %i\"", 0);
apply_type (0x4A30F8, "extern char str_4A30F8[47];", TINFO_DEFINITE);
cleanup("str_4A3128");set_name(0x4A3128, "str_4A3128");
set_cmt(0x4A3128, "\"You have nothing to recharge.            Your gold : %i\"", 0);
apply_type (0x4A3128, "extern char str_4A3128[56];", TINFO_DEFINITE);
cleanup("str_4A3160");set_name(0x4A3160, "str_4A3160");
set_cmt(0x4A3160, "\"You do not have enough gold\"", 0);
apply_type (0x4A3160, "extern char str_4A3160[28];", TINFO_DEFINITE);
cleanup("str_4A317C");set_name(0x4A317C, "str_4A317C");
set_cmt(0x4A317C, "\"You do not have enough room in inventory\"", 0);
apply_type (0x4A317C, "extern char str_4A317C[41];", TINFO_DEFINITE);
cleanup("str_4A31A8");set_name(0x4A31A8, "str_4A31A8");
set_cmt(0x4A31A8, "\"No\"", 0);
apply_type (0x4A31A8, "extern char str_4A31A8[3];", TINFO_DEFINITE);
cleanup("str_4A31AC");set_name(0x4A31AC, "str_4A31AC");
set_cmt(0x4A31AC, "\"Yes\"", 0);
apply_type (0x4A31AC, "extern char str_4A31AC[4];", TINFO_DEFINITE);
cleanup("str_4A31B0");set_name(0x4A31B0, "str_4A31B0");
set_cmt(0x4A31B0, "\"Do we have a deal?\"", 0);
apply_type (0x4A31B0, "extern char str_4A31B0[19];", TINFO_DEFINITE);
cleanup("str_4A31C4");set_name(0x4A31C4, "str_4A31C4");
set_cmt(0x4A31C4, "\"Are you sure you want to identify this item?\"", 0);
apply_type (0x4A31C4, "extern char str_4A31C4[45];", TINFO_DEFINITE);
cleanup("str_4A31F4");set_name(0x4A31F4, "str_4A31F4");
set_cmt(0x4A31F4, "\"Are you sure you want to buy this item?\"", 0);
apply_type (0x4A31F4, "extern char str_4A31F4[40];", TINFO_DEFINITE);
cleanup("str_4A321C");set_name(0x4A321C, "str_4A321C");
set_cmt(0x4A321C, "\"Are you sure you want to recharge this item?\"", 0);
apply_type (0x4A321C, "extern char str_4A321C[45];", TINFO_DEFINITE);
cleanup("str_4A324C");set_name(0x4A324C, "str_4A324C");
set_cmt(0x4A324C, "\"Are you sure you want to repair this item?\"", 0);
apply_type (0x4A324C, "extern char str_4A324C[43];", TINFO_DEFINITE);
cleanup("str_4A3278");set_name(0x4A3278, "str_4A3278");
set_cmt(0x4A3278, "\"Are you sure you want to sell this item?\"", 0);
apply_type (0x4A3278, "extern char str_4A3278[41];", TINFO_DEFINITE);
cleanup("str_4A32A4");set_name(0x4A32A4, "str_4A32A4");
set_cmt(0x4A32A4, "\"Say goodbye\"", 0);
apply_type (0x4A32A4, "extern char str_4A32A4[12];", TINFO_DEFINITE);
cleanup("str_4A32B0");set_name(0x4A32B0, "str_4A32B0");
set_cmt(0x4A32B0, "\"What have you got?\"", 0);
apply_type (0x4A32B0, "extern char str_4A32B0[19];", TINFO_DEFINITE);
cleanup("str_4A32C4");set_name(0x4A32C4, "str_4A32C4");
set_cmt(0x4A32C4, "\"just to take a look. \"", 0);
apply_type (0x4A32C4, "extern char str_4A32C4[22];", TINFO_DEFINITE);
cleanup("str_4A32DC");set_name(0x4A32DC, "str_4A32DC");
set_cmt(0x4A32DC, "\"but it will cost 50 gold\"", 0);
apply_type (0x4A32DC, "extern char str_4A32DC[25];", TINFO_DEFINITE);
cleanup("str_4A32F8");set_name(0x4A32F8, "str_4A32F8");
set_cmt(0x4A32F8, "\"I have something for sale,\"", 0);
apply_type (0x4A32F8, "extern char str_4A32F8[27];", TINFO_DEFINITE);
cleanup("str_4A3314");set_name(0x4A3314, "str_4A3314");
set_cmt(0x4A3314, "\"Talk to Wirt\"", 0);
apply_type (0x4A3314, "extern char str_4A3314[13];", TINFO_DEFINITE);
cleanup("str_4A3324");set_name(0x4A3324, "str_4A3324");
set_cmt(0x4A3324, "\"Wirt the Peg-legged boy\"", 0);
apply_type (0x4A3324, "extern char str_4A3324[24];", TINFO_DEFINITE);
cleanup("str_4A333C");set_name(0x4A333C, "str_4A333C");
set_cmt(0x4A333C, "\"Leave\"", 0);
apply_type (0x4A333C, "extern char str_4A333C[6];", TINFO_DEFINITE);
cleanup("str_4A3344");set_name(0x4A3344, "str_4A3344");
set_cmt(0x4A3344, "\"I have this item for sale :           Your gold : %i\"", 0);
apply_type (0x4A3344, "extern char str_4A3344[53];", TINFO_DEFINITE);
cleanup("str_4A337C");set_name(0x4A337C, "str_4A337C");
set_cmt(0x4A337C, "\"Leave Healer's home\"", 0);
apply_type (0x4A337C, "extern char str_4A337C[20];", TINFO_DEFINITE);
cleanup("str_4A3390");set_name(0x4A3390, "str_4A3390");
set_cmt(0x4A3390, "\"Receive healing\"", 0);
apply_type (0x4A3390, "extern char str_4A3390[16];", TINFO_DEFINITE);
cleanup("str_4A33A0");set_name(0x4A33A0, "str_4A33A0");
set_cmt(0x4A33A0, "\"Talk to Pepin\"", 0);
apply_type (0x4A33A0, "extern char str_4A33A0[14];", TINFO_DEFINITE);
cleanup("str_4A33B0");set_name(0x4A33B0, "str_4A33B0");
set_cmt(0x4A33B0, "\"Healer's home\"", 0);
apply_type (0x4A33B0, "extern char str_4A33B0[14];", TINFO_DEFINITE);
cleanup("str_4A33C0");set_name(0x4A33C0, "str_4A33C0");
set_cmt(0x4A33C0, "\"Identify an item\"", 0);
apply_type (0x4A33C0, "extern char str_4A33C0[17];", TINFO_DEFINITE);
cleanup("str_4A33D4");set_name(0x4A33D4, "str_4A33D4");
set_cmt(0x4A33D4, "\"Talk to Cain\"", 0);
apply_type (0x4A33D4, "extern char str_4A33D4[13];", TINFO_DEFINITE);
cleanup("str_4A33E4");set_name(0x4A33E4, "str_4A33E4");
set_cmt(0x4A33E4, "\"The Town Elder\"", 0);
apply_type (0x4A33E4, "extern char str_4A33E4[15];", TINFO_DEFINITE);
cleanup("str_4A33F4");set_name(0x4A33F4, "str_4A33F4");
set_cmt(0x4A33F4, "\"Identify which item?            Your gold : %i\"", 0);
apply_type (0x4A33F4, "extern char str_4A33F4[47];", TINFO_DEFINITE);
cleanup("str_4A3424");set_name(0x4A3424, "str_4A3424");
set_cmt(0x4A3424, "\"You have nothing to identify.            Your gold : %i\"", 0);
apply_type (0x4A3424, "extern char str_4A3424[56];", TINFO_DEFINITE);
cleanup("str_4A345C");set_name(0x4A345C, "str_4A345C");
set_cmt(0x4A345C, "\"Done\"", 0);
apply_type (0x4A345C, "extern char str_4A345C[5];", TINFO_DEFINITE);
cleanup("str_4A3464");set_name(0x4A3464, "str_4A3464");
set_cmt(0x4A3464, "\"This item is:\"", 0);
apply_type (0x4A3464, "extern char str_4A3464[14];", TINFO_DEFINITE);
cleanup("str_4A3474");set_name(0x4A3474, "str_4A3474");
set_cmt(0x4A3474, "\"Gossip\"", 0);
apply_type (0x4A3474, "extern char str_4A3474[7];", TINFO_DEFINITE);
cleanup("str_4A347C");set_name(0x4A347C, "str_4A347C");
set_cmt(0x4A347C, "\"Talk to %s\"", 0);
apply_type (0x4A347C, "extern char str_4A347C[11];", TINFO_DEFINITE);
cleanup("str_4A3488");set_name(0x4A3488, "str_4A3488");
set_cmt(0x4A3488, "\"Leave the tavern\"", 0);
apply_type (0x4A3488, "extern char str_4A3488[17];", TINFO_DEFINITE);
cleanup("str_4A349C");set_name(0x4A349C, "str_4A349C");
set_cmt(0x4A349C, "\"Talk to Ogden\"", 0);
apply_type (0x4A349C, "extern char str_4A349C[14];", TINFO_DEFINITE);
cleanup("str_4A34AC");set_name(0x4A34AC, "str_4A34AC");
set_cmt(0x4A34AC, "\"Rising Sun\"", 0);
apply_type (0x4A34AC, "extern char str_4A34AC[11];", TINFO_DEFINITE);
cleanup("str_4A34B8");set_name(0x4A34B8, "str_4A34B8");
set_cmt(0x4A34B8, "\"Talk to Gillian\"", 0);
apply_type (0x4A34B8, "extern char str_4A34B8[16];", TINFO_DEFINITE);
cleanup("str_4A34C8");set_name(0x4A34C8, "str_4A34C8");
set_cmt(0x4A34C8, "\"Say Goodbye\"", 0);
apply_type (0x4A34C8, "extern char str_4A34C8[12];", TINFO_DEFINITE);
cleanup("str_4A34D4");set_name(0x4A34D4, "str_4A34D4");
set_cmt(0x4A34D4, "\"Talk to Farnham\"", 0);
apply_type (0x4A34D4, "extern char str_4A34D4[16];", TINFO_DEFINITE);
cleanup("str_4A34E4");set_name(0x4A34E4, "str_4A34E4");
set_cmt(0x4A34E4, "\"Farnham the Drunk\"", 0);
apply_type (0x4A34E4, "extern char str_4A34E4[18];", TINFO_DEFINITE);
cleanup("portal_town_y_from_player_num");set_name(0x4A1ABC, "portal_town_y_from_player_num");
set_cmt(0x4A1ABC, "portal_town_y_from_player_num maps from player number to Y-coordinate of the\ntown portal position in Tristram.", 0);
apply_type (0x4A1ABC, "extern int portal_town_y_from_player_num[4];", TINFO_DEFINITE);
cleanup("portal_town_x_from_player_num");set_name(0x4A1ACC, "portal_town_x_from_player_num");
set_cmt(0x4A1ACC, "portal_town_x_from_player_num maps from player number to X-coordinate of the\ntown portal position in Tristram.", 0);
apply_type (0x4A1ACC, "extern int portal_town_x_from_player_num[4];", TINFO_DEFINITE);
cleanup("single_menu");set_name(0x48E1B8, "single_menu");
set_cmt(0x48E1B8, "single_menu contains the game menu items of the single player menu.", 0);
apply_type (0x48E1B8, "extern MenuItem single_menu[6];", TINFO_DEFINITE);
cleanup("multi_menu");set_name(0x48E200, "multi_menu");
set_cmt(0x48E200, "multi_menu contains the game menu items of the multi player menu.", 0);
apply_type (0x48E200, "extern MenuItem multi_menu[5];", TINFO_DEFINITE);
cleanup("options_menu");set_name(0x48E240, "options_menu");
set_cmt(0x48E240, "options_menu contains the game menu items of the options menu.", 0);
apply_type (0x48E240, "extern MenuItem options_menu[6];", TINFO_DEFINITE);
cleanup("music_toggle_names");set_name(0x48E288, "music_toggle_names");
set_cmt(0x48E288, "music_toggle_names specifies the menu names for music enabled and disabled.", 0);
apply_type (0x48E288, "extern char *music_toggle_names[2];", TINFO_DEFINITE);
cleanup("sound_toggle_names");set_name(0x48E290, "sound_toggle_names");
set_cmt(0x48E290, "sound_toggle_names specifies the menu names for sound enabled and disabled.", 0);
apply_type (0x48E290, "extern char *sound_toggle_names[2];", TINFO_DEFINITE);
cleanup("colour_cycling_toggle_names");set_name(0x48E298, "colour_cycling_toggle_names");
set_cmt(0x48E298, "colour_cycling_toggle_names specifies the menu names for colour cycling\nenabled and disabled.", 0);
apply_type (0x48E298, "extern char *colour_cycling_toggle_names[2];", TINFO_DEFINITE);
cleanup("str_48E2A0");set_name(0x48E2A0, "str_48E2A0");
set_cmt(0x48E2A0, "\"Color Cycling On\"", 0);
apply_type (0x48E2A0, "extern char str_48E2A0[17];", TINFO_DEFINITE);
cleanup("str_48E2B4");set_name(0x48E2B4, "str_48E2B4");
set_cmt(0x48E2B4, "\"Color Cycling Off\"", 0);
apply_type (0x48E2B4, "extern char str_48E2B4[18];", TINFO_DEFINITE);
cleanup("str_48E2C8");set_name(0x48E2C8, "str_48E2C8");
set_cmt(0x48E2C8, "\"Sound Disabled\"", 0);
apply_type (0x48E2C8, "extern char str_48E2C8[15];", TINFO_DEFINITE);
cleanup("str_48E2D8");set_name(0x48E2D8, "str_48E2D8");
set_cmt(0x48E2D8, "\"Sound\"", 0);
apply_type (0x48E2D8, "extern char str_48E2D8[6];", TINFO_DEFINITE);
cleanup("str_48E2E0");set_name(0x48E2E0, "str_48E2E0");
set_cmt(0x48E2E0, "\"Music Disabled\"", 0);
apply_type (0x48E2E0, "extern char str_48E2E0[15];", TINFO_DEFINITE);
cleanup("str_48E2F0");set_name(0x48E2F0, "str_48E2F0");
set_cmt(0x48E2F0, "\"Music\"", 0);
apply_type (0x48E2F0, "extern char str_48E2F0[6];", TINFO_DEFINITE);
cleanup("str_48E2F8");set_name(0x48E2F8, "str_48E2F8");
set_cmt(0x48E2F8, "\"Previous Menu\"", 0);
apply_type (0x48E2F8, "extern char str_48E2F8[14];", TINFO_DEFINITE);
cleanup("str_48E308");set_name(0x48E308, "str_48E308");
set_cmt(0x48E308, "\"Gamma\"", 0);
apply_type (0x48E308, "extern char str_48E308[6];", TINFO_DEFINITE);
cleanup("str_48E310");set_name(0x48E310, "str_48E310");
set_cmt(0x48E310, "\"Restart In Town\"", 0);
apply_type (0x48E310, "extern char str_48E310[16];", TINFO_DEFINITE);
cleanup("str_48E320");set_name(0x48E320, "str_48E320");
set_cmt(0x48E320, "\"Quit Diablo\"", 0);
apply_type (0x48E320, "extern char str_48E320[12];", TINFO_DEFINITE);
cleanup("str_48E32C");set_name(0x48E32C, "str_48E32C");
set_cmt(0x48E32C, "\"Load Game\"", 0);
apply_type (0x48E32C, "extern char str_48E32C[10];", TINFO_DEFINITE);
cleanup("str_48E338");set_name(0x48E338, "str_48E338");
set_cmt(0x48E338, "\"New Game\"", 0);
apply_type (0x48E338, "extern char str_48E338[9];", TINFO_DEFINITE);
cleanup("str_48E344");set_name(0x48E344, "str_48E344");
set_cmt(0x48E344, "\"Options\"", 0);
apply_type (0x48E344, "extern char str_48E344[8];", TINFO_DEFINITE);
cleanup("str_48E34C");set_name(0x48E34C, "str_48E34C");
set_cmt(0x48E34C, "\"Save Game\"", 0);
apply_type (0x48E34C, "extern char str_48E34C[10];", TINFO_DEFINITE);
cleanup("str_483B10");set_name(0x483B10, "str_483B10");
set_cmt(0x483B10, "`Levels\L1Data\L1.AMP`", 0);
apply_type (0x483B10, "extern char str_483B10[21];", TINFO_DEFINITE);
cleanup("str_483B28");set_name(0x483B28, "str_483B28");
set_cmt(0x483B28, "`Levels\L2Data\L2.AMP`", 0);
apply_type (0x483B28, "extern char str_483B28[21];", TINFO_DEFINITE);
cleanup("str_483B40");set_name(0x483B40, "str_483B40");
set_cmt(0x483B40, "`Levels\L3Data\L3.AMP`", 0);
apply_type (0x483B40, "extern char str_483B40[21];", TINFO_DEFINITE);
cleanup("str_483B58");set_name(0x483B58, "str_483B58");
set_cmt(0x483B58, "`Levels\L4Data\L4.AMP`", 0);
apply_type (0x483B58, "extern char str_483B58[21];", TINFO_DEFINITE);
cleanup("str_483B70");set_name(0x483B70, "str_483B70");
set_cmt(0x483B70, "\"Level: %i\"", 0);
apply_type (0x483B70, "extern char str_483B70[10];", TINFO_DEFINITE);
cleanup("str_483B7C");set_name(0x483B7C, "str_483B7C");
set_cmt(0x483B7C, "\"password: \"", 0);
apply_type (0x483B7C, "extern char str_483B7C[11];", TINFO_DEFINITE);
cleanup("str_483B88");set_name(0x483B88, "str_483B88");
set_cmt(0x483B88, "\"game: \"", 0);
apply_type (0x483B88, "extern char str_483B88[7];", TINFO_DEFINITE);
cleanup("str_483B90");set_name(0x483B90, "str_483B90");
set_cmt(0x483B90, "\"Invalid encode parameters\"", 0);
apply_type (0x483B90, "extern char str_483B90[26];", TINFO_DEFINITE);
cleanup("str_4A350C");set_name(0x4A350C, "str_4A350C");
set_cmt(0x4A350C, "\" Ahh, the story of our King, is it? The tragic fal\"...", 0);
apply_type (0x4A350C, "extern char str_4A350C[383];", TINFO_DEFINITE);
cleanup("str_4A368C");set_name(0x4A368C, "str_4A368C");
set_cmt(0x4A368C, "\"The village needs your help, good master! Some mon\"...", 0);
apply_type (0x4A368C, "extern char str_4A368C[996];", TINFO_DEFINITE);
cleanup("str_4A3A70");set_name(0x4A3A70, "str_4A3A70");
set_cmt(0x4A3A70, "\"As I told you, good master, the King was entombed \"...", 0);
apply_type (0x4A3A70, "extern char str_4A3A70[159];", TINFO_DEFINITE);
cleanup("str_4A3B10");set_name(0x4A3B10, "str_4A3B10");
set_cmt(0x4A3B10, "\"The curse of our King has passed, but I fear that \"...", 0);
apply_type (0x4A3B10, "extern char str_4A3B10[246];", TINFO_DEFINITE);
cleanup("str_4A3C08");set_name(0x4A3C08, "str_4A3C08");
set_cmt(0x4A3C08, "\"The loss of his son was too much for King Leoric. \"...", 0);
apply_type (0x4A3C08, "extern char str_4A3C08[285];", TINFO_DEFINITE);
cleanup("str_4A3D28");set_name(0x4A3D28, "str_4A3D28");
set_cmt(0x4A3D28, "\"I don't like to think about how the King died. I l\"...", 0);
apply_type (0x4A3D28, "extern char str_4A3D28[166];", TINFO_DEFINITE);
cleanup("str_4A3DD0");set_name(0x4A3DD0, "str_4A3DD0");
set_cmt(0x4A3DD0, "\"I made many of the weapons and most of the armor t\"...", 0);
apply_type (0x4A3DD0, "extern char str_4A3DD0[302];", TINFO_DEFINITE);
cleanup("str_4A3F00");set_name(0x4A3F00, "str_4A3F00");
set_cmt(0x4A3F00, "\"I don't care about that. Listen, no skeleton is go\"...", 0);
apply_type (0x4A3F00, "extern char str_4A3F00[124];", TINFO_DEFINITE);
cleanup("str_4A3F7C");set_name(0x4A3F7C, "str_4A3F7C");
set_cmt(0x4A3F7C, "\"The dead who walk among the living follow the curs\"...", 0);
apply_type (0x4A3F7C, "extern char str_4A3F7C[249];", TINFO_DEFINITE);
cleanup("str_4A4078");set_name(0x4A4078, "str_4A4078");
set_cmt(0x4A4078, "\"Look, I'm running a business here. I don't sell in\"...", 0);
apply_type (0x4A4078, "extern char str_4A4078[231];", TINFO_DEFINITE);
cleanup("str_4A4160");set_name(0x4A4160, "str_4A4160");
set_cmt(0x4A4160, "\"The warmth of life has entered my tomb. Prepare yo\"...", 0);
apply_type (0x4A4160, "extern char str_4A4160[101];", TINFO_DEFINITE);
cleanup("str_4A41C8");set_name(0x4A41C8, "str_4A41C8");
set_cmt(0x4A41C8, "\"I see that this strange behavior puzzles you as we\"...", 0);
apply_type (0x4A41C8, "extern char str_4A41C8[345];", TINFO_DEFINITE);
cleanup("str_4A4324");set_name(0x4A4324, "str_4A4324");
set_cmt(0x4A4324, "\"Master, I have a strange experience to relate. I k\"...", 0);
apply_type (0x4A4324, "extern char str_4A4324[567];", TINFO_DEFINITE);
cleanup("str_4A455C");set_name(0x4A455C, "str_4A455C");
set_cmt(0x4A455C, "\"Oh, you didn't have to bring back my sign, but I s\"...", 0);
apply_type (0x4A455C, "extern char str_4A455C[344];", TINFO_DEFINITE);
cleanup("str_4A46B4");set_name(0x4A46B4, "str_4A46B4");
set_cmt(0x4A46B4, "\"My goodness, demons running about the village at n\"...", 0);
apply_type (0x4A46B4, "extern char str_4A46B4[204];", TINFO_DEFINITE);
cleanup("str_4A4780");set_name(0x4A4780, "str_4A4780");
set_cmt(0x4A4780, "\"Oh my! Is that where the sign went? My Grandmother\"...", 0);
apply_type (0x4A4780, "extern char str_4A4780[165];", TINFO_DEFINITE);
cleanup("str_4A4828");set_name(0x4A4828, "str_4A4828");
set_cmt(0x4A4828, "\"Demons stole Ogden's sign, you say? That doesn't s\"...", 0);
apply_type (0x4A4828, "extern char str_4A4828[179];", TINFO_DEFINITE);
cleanup("str_4A48DC");set_name(0x4A48DC, "str_4A48DC");
set_cmt(0x4A48DC, "\"You know what I think? Somebody took that sign, an\"...", 0);
apply_type (0x4A48DC, "extern char str_4A48DC[243];", TINFO_DEFINITE);
cleanup("str_4A49D0");set_name(0x4A49D0, "str_4A49D0");
set_cmt(0x4A49D0, "\"No mortal can truly understand the mind of the dem\"...", 0);
apply_type (0x4A49D0, "extern char str_4A49D0[135];", TINFO_DEFINITE);
cleanup("str_4A4A58");set_name(0x4A4A58, "str_4A4A58");
set_cmt(0x4A4A58, "\"What - is he saying I took that? I suppose that Gr\"...", 0);
apply_type (0x4A4A58, "extern char str_4A4A58[177];", TINFO_DEFINITE);
cleanup("str_4A4B0C");set_name(0x4A4B0C, "str_4A4B0C");
set_cmt(0x4A4B0C, "\"Hey - You that one that kill all! You get me Magic\"...", 0);
apply_type (0x4A4B0C, "extern char str_4A4B0C[195];", TINFO_DEFINITE);
cleanup("str_4A4BD0");set_name(0x4A4BD0, "str_4A4BD0");
set_cmt(0x4A4BD0, "\"You kill uglies, get banner. You bring to me, or e\"...", 0);
apply_type (0x4A4BD0, "extern char str_4A4BD0[59];", TINFO_DEFINITE);
cleanup("str_4A4C0C");set_name(0x4A4C0C, "str_4A4C0C");
set_cmt(0x4A4C0C, "\"You give! Yes, good! Go now, we strong. We kill al\"...", 0);
apply_type (0x4A4C0C, "extern char str_4A4C0C[70];", TINFO_DEFINITE);
cleanup("str_4A4C54");set_name(0x4A4C54, "str_4A4C54");
set_cmt(0x4A4C54, "\"This does not bode well, for it confirms my darkes\"...", 0);
apply_type (0x4A4C54, "extern char str_4A4C54[1234];", TINFO_DEFINITE);
cleanup("str_4A5128");set_name(0x4A5128, "str_4A5128");
set_cmt(0x4A5128, "\"You must hurry and rescue Albrecht from the hands \"...", 0);
apply_type (0x4A5128, "extern char str_4A5128[127];", TINFO_DEFINITE);
cleanup("str_4A51A8");set_name(0x4A51A8, "str_4A51A8");
set_cmt(0x4A51A8, "\"Your story is quite grim, my friend. Lazarus will \"...", 0);
apply_type (0x4A51A8, "extern char str_4A51A8[623];", TINFO_DEFINITE);
cleanup("str_4A5418");set_name(0x4A5418, "str_4A5418");
set_cmt(0x4A5418, "\"Lazarus was the Archbishop who led many of the tow\"...", 0);
apply_type (0x4A5418, "extern char str_4A5418[287];", TINFO_DEFINITE);
cleanup("str_4A5538");set_name(0x4A5538, "str_4A5538");
set_cmt(0x4A5538, "\"|\"", 0);
apply_type (0x4A5538, "extern char str_4A5538[2];", TINFO_DEFINITE);
cleanup("str_4A553C");set_name(0x4A553C, "str_4A553C");
set_cmt(0x4A553C, "\"|\"", 0);
apply_type (0x4A553C, "extern char str_4A553C[2];", TINFO_DEFINITE);
cleanup("str_4A5540");set_name(0x4A5540, "str_4A5540");
set_cmt(0x4A5540, "\"I was shocked when I heard of what the townspeople\"...", 0);
apply_type (0x4A5540, "extern char str_4A5540[298];", TINFO_DEFINITE);
cleanup("str_4A566C");set_name(0x4A566C, "str_4A566C");
set_cmt(0x4A566C, "\"I remember Lazarus as being a very kind and giving\"...", 0);
apply_type (0x4A566C, "extern char str_4A566C[225];", TINFO_DEFINITE);
cleanup("str_4A5750");set_name(0x4A5750, "str_4A5750");
set_cmt(0x4A5750, "\"I was there when Lazarus led us into the labyrinth\"...", 0);
apply_type (0x4A5750, "extern char str_4A5750[278];", TINFO_DEFINITE);
cleanup("str_4A5868");set_name(0x4A5868, "str_4A5868");
set_cmt(0x4A5868, "\"They stab, then bite, then they're all around you.\"...", 0);
apply_type (0x4A5868, "extern char str_4A5868[207];", TINFO_DEFINITE);
cleanup("str_4A5938");set_name(0x4A5938, "str_4A5938");
set_cmt(0x4A5938, "\"I did not know this Lazarus of whom you speak, but\"...", 0);
apply_type (0x4A5938, "extern char str_4A5938[215];", TINFO_DEFINITE);
cleanup("str_4A5A10");set_name(0x4A5A10, "str_4A5A10");
set_cmt(0x4A5A10, "\"Yes, the righteous Lazarus, who was sooo effective\"...", 0);
apply_type (0x4A5A10, "extern char str_4A5A10[192];", TINFO_DEFINITE);
cleanup("str_4A5AD0");set_name(0x4A5AD0, "str_4A5AD0");
set_cmt(0x4A5AD0, "\"Abandon your foolish quest. All that awaits you is\"...", 0);
apply_type (0x4A5AD0, "extern char str_4A5AD0[144];", TINFO_DEFINITE);
cleanup("str_4A5B60");set_name(0x4A5B60, "str_4A5B60");
set_cmt(0x4A5B60, "\" |\"", 0);
apply_type (0x4A5B60, "extern char str_4A5B60[3];", TINFO_DEFINITE);
cleanup("str_4A5B64");set_name(0x4A5B64, "str_4A5B64");
set_cmt(0x4A5B64, "\"Hmm, I don't know what I can really tell you about\"...", 0);
apply_type (0x4A5B64, "extern char str_4A5B64[316];", TINFO_DEFINITE);
cleanup("str_4A5CA0");set_name(0x4A5CA0, "str_4A5CA0");
set_cmt(0x4A5CA0, "\"I have always tried to keep a large supply of food\"...", 0);
apply_type (0x4A5CA0, "extern char str_4A5CA0[245];", TINFO_DEFINITE);
cleanup("str_4A5D98");set_name(0x4A5D98, "str_4A5D98");
set_cmt(0x4A5D98, "\"I'm glad I caught up to you in time! Our wells hav\"...", 0);
apply_type (0x4A5D98, "extern char str_4A5D98[354];", TINFO_DEFINITE);
cleanup("str_4A5EFC");set_name(0x4A5EFC, "str_4A5EFC");
set_cmt(0x4A5EFC, "\"Please, you must hurry. Every hour that passes bri\"...", 0);
apply_type (0x4A5EFC, "extern char str_4A5EFC[144];", TINFO_DEFINITE);
cleanup("str_4A5F8C");set_name(0x4A5F8C, "str_4A5F8C");
set_cmt(0x4A5F8C, "\"What's that you say - the mere presence of the dem\"...", 0);
apply_type (0x4A5F8C, "extern char str_4A5F8C[283];", TINFO_DEFINITE);
cleanup("str_4A60A8");set_name(0x4A60A8, "str_4A60A8");
set_cmt(0x4A60A8, "\"My grandmother is very weak, and Garda says that w\"...", 0);
apply_type (0x4A60A8, "extern char str_4A60A8[134];", TINFO_DEFINITE);
cleanup("str_4A6130");set_name(0x4A6130, "str_4A6130");
set_cmt(0x4A6130, "\"Pepin has told you the truth. We will need fresh w\"...", 0);
apply_type (0x4A6130, "extern char str_4A6130[196];", TINFO_DEFINITE);
cleanup("str_4A61F4");set_name(0x4A61F4, "str_4A61F4");
set_cmt(0x4A61F4, "\"You drink water? |\"", 0);
apply_type (0x4A61F4, "extern char str_4A61F4[19];", TINFO_DEFINITE);
cleanup("str_4A6208");set_name(0x4A6208, "str_4A6208");
set_cmt(0x4A6208, "\"The people of Tristram will die if you cannot rest\"...", 0);
apply_type (0x4A6208, "extern char str_4A6208[191];", TINFO_DEFINITE);
cleanup("str_4A62C8");set_name(0x4A62C8, "str_4A62C8");
set_cmt(0x4A62C8, "\"For once, I'm with you. My business runs dry - so \"...", 0);
apply_type (0x4A62C8, "extern char str_4A62C8[143];", TINFO_DEFINITE);
cleanup("str_4A6358");set_name(0x4A6358, "str_4A6358");
set_cmt(0x4A6358, "\"A book that speaks of a chamber of human bones? We\"...", 0);
apply_type (0x4A6358, "extern char str_4A6358[416];", TINFO_DEFINITE);
cleanup("str_4A64F8");set_name(0x4A64F8, "str_4A64F8");
set_cmt(0x4A64F8, "\"I am afraid that I don't know anything about that,\"...", 0);
apply_type (0x4A64F8, "extern char str_4A64F8[112];", TINFO_DEFINITE);
cleanup("str_4A6568");set_name(0x4A6568, "str_4A6568");
set_cmt(0x4A6568, "\"This sounds like a very dangerous place. If you ve\"...", 0);
apply_type (0x4A6568, "extern char str_4A6568[89];", TINFO_DEFINITE);
cleanup("str_4A65C4");set_name(0x4A65C4, "str_4A65C4");
set_cmt(0x4A65C4, "\"I am afraid that I haven't heard anything about th\"...", 0);
apply_type (0x4A65C4, "extern char str_4A65C4[108];", TINFO_DEFINITE);
cleanup("str_4A6630");set_name(0x4A6630, "str_4A6630");
set_cmt(0x4A6630, "\"I know nothing of this place, but you may try aski\"...", 0);
apply_type (0x4A6630, "extern char str_4A6630[159];", TINFO_DEFINITE);
cleanup("str_4A66D0");set_name(0x4A66D0, "str_4A66D0");
set_cmt(0x4A66D0, "\"Okay, so listen. There's this chamber of wood, see\"...", 0);
apply_type (0x4A66D0, "extern char str_4A66D0[229];", TINFO_DEFINITE);
cleanup("str_4A67B8");set_name(0x4A67B8, "str_4A67B8");
set_cmt(0x4A67B8, "\"You will become an eternal servant of the dark lor\"...", 0);
apply_type (0x4A67B8, "extern char str_4A67B8[148];", TINFO_DEFINITE);
cleanup("str_4A684C");set_name(0x4A684C, "str_4A684C");
set_cmt(0x4A684C, "\"A vast and mysterious treasure, you say? Maybe I c\"...", 0);
apply_type (0x4A684C, "extern char str_4A684C[205];", TINFO_DEFINITE);
cleanup("str_4A691C");set_name(0x4A691C, "str_4A691C");
set_cmt(0x4A691C, "\"It seems that the Archbishop Lazarus goaded many o\"...", 0);
apply_type (0x4A691C, "extern char str_4A691C[353];", TINFO_DEFINITE);
cleanup("str_4A6A80");set_name(0x4A6A80, "str_4A6A80");
set_cmt(0x4A6A80, "\"Yes, Farnham has mumbled something about a hulking\"...", 0);
apply_type (0x4A6A80, "extern char str_4A6A80[123];", TINFO_DEFINITE);
cleanup("str_4A6AFC");set_name(0x4A6AFC, "str_4A6AFC");
set_cmt(0x4A6AFC, "\"By the Light, I know of this vile demon. There wer\"...", 0);
apply_type (0x4A6AFC, "extern char str_4A6AFC[416];", TINFO_DEFINITE);
cleanup("str_4A6C9C");set_name(0x4A6C9C, "str_4A6C9C");
set_cmt(0x4A6C9C, "\"When Farnham said something about a butcher killin\"...", 0);
apply_type (0x4A6C9C, "extern char str_4A6C9C[138];", TINFO_DEFINITE);
cleanup("str_4A6D28");set_name(0x4A6D28, "str_4A6D28");
set_cmt(0x4A6D28, "\"I saw what Farnham calls the Butcher as it swathed\"...", 0);
apply_type (0x4A6D28, "extern char str_4A6D28[392];", TINFO_DEFINITE);
cleanup("str_4A6EB0");set_name(0x4A6EB0, "str_4A6EB0");
set_cmt(0x4A6EB0, "\"Big! Big cleaver killing all my friends. Couldn't \"...", 0);
apply_type (0x4A6EB0, "extern char str_4A6EB0[172];", TINFO_DEFINITE);
cleanup("str_4A6F5C");set_name(0x4A6F5C, "str_4A6F5C");
set_cmt(0x4A6F5C, "\"The Butcher is a sadistic creature that delights i\"...", 0);
apply_type (0x4A6F5C, "extern char str_4A6F5C[206];", TINFO_DEFINITE);
cleanup("str_4A702C");set_name(0x4A702C, "str_4A702C");
set_cmt(0x4A702C, "\"I know more than you'd think about that grisly fie\"...", 0);
apply_type (0x4A702C, "extern char str_4A702C[256];", TINFO_DEFINITE);
cleanup("str_4A712C");set_name(0x4A712C, "str_4A712C");
set_cmt(0x4A712C, "\"Please, listen to me. The Archbishop Lazarus, he l\"...", 0);
apply_type (0x4A712C, "extern char str_4A712C[269];", TINFO_DEFINITE);
cleanup("str_4A723C");set_name(0x4A723C, "str_4A723C");
set_cmt(0x4A723C, "\" |\"", 0);
apply_type (0x4A723C, "extern char str_4A723C[3];", TINFO_DEFINITE);
cleanup("str_4A7240");set_name(0x4A7240, "str_4A7240");
set_cmt(0x4A7240, "\"You recite an interesting rhyme written in a style\"...", 0);
apply_type (0x4A7240, "extern char str_4A7240[365];", TINFO_DEFINITE);
cleanup("str_4A73B0");set_name(0x4A73B0, "str_4A73B0");
set_cmt(0x4A73B0, "\"I never much cared for poetry. Occasionally, I had\"...", 0);
apply_type (0x4A73B0, "extern char str_4A73B0[231];", TINFO_DEFINITE);
cleanup("str_4A7498");set_name(0x4A7498, "str_4A7498");
set_cmt(0x4A7498, "\"This does seem familiar, somehow. I seem to recall\"...", 0);
apply_type (0x4A7498, "extern char str_4A7498[231];", TINFO_DEFINITE);
cleanup("str_4A7580");set_name(0x4A7580, "str_4A7580");
set_cmt(0x4A7580, "\"If you have questions about blindness, you should \"...", 0);
apply_type (0x4A7580, "extern char str_4A7580[172];", TINFO_DEFINITE);
cleanup("str_4A762C");set_name(0x4A762C, "str_4A762C");
set_cmt(0x4A762C, "\"I am afraid that I have neither heard nor seen a p\"...", 0);
apply_type (0x4A762C, "extern char str_4A762C[157];", TINFO_DEFINITE);
cleanup("str_4A76CC");set_name(0x4A76CC, "str_4A76CC");
set_cmt(0x4A76CC, "\"Look here... that's pretty funny, huh? Get it? Bli\"...", 0);
apply_type (0x4A76CC, "extern char str_4A76CC[68];", TINFO_DEFINITE);
cleanup("str_4A7710");set_name(0x4A7710, "str_4A7710");
set_cmt(0x4A7710, "\"This is a place of great anguish and terror, and s\"...", 0);
apply_type (0x4A7710, "extern char str_4A7710[166];", TINFO_DEFINITE);
cleanup("str_4A77B8");set_name(0x4A77B8, "str_4A77B8");
set_cmt(0x4A77B8, "\"Lets see, am I selling you something? No. Are you \"...", 0);
apply_type (0x4A77B8, "extern char str_4A77B8[192];", TINFO_DEFINITE);
cleanup("str_4A7878");set_name(0x4A7878, "str_4A7878");
set_cmt(0x4A7878, "\"You claim to have spoken with Lachdanan? He was a \"...", 0);
apply_type (0x4A7878, "extern char str_4A7878[476];", TINFO_DEFINITE);
cleanup("str_4A7A54");set_name(0x4A7A54, "str_4A7A54");
set_cmt(0x4A7A54, "\"You speak of a brave warrior long dead! I'll have \"...", 0);
apply_type (0x4A7A54, "extern char str_4A7A54[134];", TINFO_DEFINITE);
cleanup("str_4A7ADC");set_name(0x4A7ADC, "str_4A7ADC");
set_cmt(0x4A7ADC, "\"A golden elixir, you say. I have never concocted a\"...", 0);
apply_type (0x4A7ADC, "extern char str_4A7ADC[276];", TINFO_DEFINITE);
cleanup("str_4A7BF0");set_name(0x4A7BF0, "str_4A7BF0");
set_cmt(0x4A7BF0, "\"I've never heard of a Lachdanan before. I'm sorry,\"...", 0);
apply_type (0x4A7BF0, "extern char str_4A7BF0[106];", TINFO_DEFINITE);
cleanup("str_4A7C5C");set_name(0x4A7C5C, "str_4A7C5C");
set_cmt(0x4A7C5C, "\"If it is actually Lachdanan that you have met, the\"...", 0);
apply_type (0x4A7C5C, "extern char str_4A7C5C[264];", TINFO_DEFINITE);
cleanup("str_4A7D64");set_name(0x4A7D64, "str_4A7D64");
set_cmt(0x4A7D64, "\" Lachdanan is dead. Everybody knows that, and you \"...", 0);
apply_type (0x4A7D64, "extern char str_4A7D64[131];", TINFO_DEFINITE);
cleanup("str_4A7DE8");set_name(0x4A7DE8, "str_4A7DE8");
set_cmt(0x4A7DE8, "\"You may meet people who are trapped within the Lab\"...", 0);
apply_type (0x4A7DE8, "extern char str_4A7DE8[158];", TINFO_DEFINITE);
cleanup("str_4A7E88");set_name(0x4A7E88, "str_4A7E88");
set_cmt(0x4A7E88, "\"Wait, let me guess. Cain was swallowed up in a gig\"...", 0);
apply_type (0x4A7E88, "extern char str_4A7E88[270];", TINFO_DEFINITE);
cleanup("str_4A7F98");set_name(0x4A7F98, "str_4A7F98");
set_cmt(0x4A7F98, "\"Please, don't kill me, just hear me out. I was onc\"...", 0);
apply_type (0x4A7F98, "extern char str_4A7F98[656];", TINFO_DEFINITE);
cleanup("str_4A8228");set_name(0x4A8228, "str_4A8228");
set_cmt(0x4A8228, "\"You have not found the Golden Elixir. I fear that \"...", 0);
apply_type (0x4A8228, "extern char str_4A8228[101];", TINFO_DEFINITE);
cleanup("str_4A8290");set_name(0x4A8290, "str_4A8290");
set_cmt(0x4A8290, "\"You have saved my soul from damnation, and for tha\"...", 0);
apply_type (0x4A8290, "extern char str_4A8290[330];", TINFO_DEFINITE);
cleanup("str_4A83DC");set_name(0x4A83DC, "str_4A83DC");
set_cmt(0x4A83DC, "\"Griswold speaks of The Anvil of Fury - a legendary\"...", 0);
apply_type (0x4A83DC, "extern char str_4A83DC[534];", TINFO_DEFINITE);
cleanup("str_4A85F4");set_name(0x4A85F4, "str_4A85F4");
set_cmt(0x4A85F4, "\"Don't you think that Griswold would be a better pe\"...", 0);
apply_type (0x4A85F4, "extern char str_4A85F4[104];", TINFO_DEFINITE);
cleanup("str_4A865C");set_name(0x4A865C, "str_4A865C");
set_cmt(0x4A865C, "\"If you had been looking for information on the Pes\"...", 0);
apply_type (0x4A865C, "extern char str_4A865C[232];", TINFO_DEFINITE);
cleanup("str_4A8744");set_name(0x4A8744, "str_4A8744");
set_cmt(0x4A8744, "\"Griswold's father used to tell some of us when we \"...", 0);
apply_type (0x4A8744, "extern char str_4A8744[279];", TINFO_DEFINITE);
cleanup("str_4A885C");set_name(0x4A885C, "str_4A885C");
set_cmt(0x4A885C, "\"Greetings! It's always a pleasure to see one of my\"...", 0);
apply_type (0x4A885C, "extern char str_4A885C[884];", TINFO_DEFINITE);
cleanup("str_4A8BD0");set_name(0x4A8BD0, "str_4A8BD0");
set_cmt(0x4A8BD0, "\"Nothing yet, eh? Well, keep searching. A weapon fo\"...", 0);
apply_type (0x4A8BD0, "extern char str_4A8BD0[161];", TINFO_DEFINITE);
cleanup("str_4A8C74");set_name(0x4A8C74, "str_4A8C74");
set_cmt(0x4A8C74, "\"I can hardly believe it! This is the Anvil of Fury\"...", 0);
apply_type (0x4A8C74, "extern char str_4A8C74[214];", TINFO_DEFINITE);
cleanup("str_4A8D4C");set_name(0x4A8D4C, "str_4A8D4C");
set_cmt(0x4A8D4C, "\"Griswold can't sell his anvil. What will he do the\"...", 0);
apply_type (0x4A8D4C, "extern char str_4A8D4C[102];", TINFO_DEFINITE);
cleanup("str_4A8DB4");set_name(0x4A8DB4, "str_4A8DB4");
set_cmt(0x4A8DB4, "\"There are many artifacts within the Labyrinth that\"...", 0);
apply_type (0x4A8DB4, "extern char str_4A8DB4[278];", TINFO_DEFINITE);
cleanup("str_4A8ECC");set_name(0x4A8ECC, "str_4A8ECC");
set_cmt(0x4A8ECC, "\"If you were to find this artifact for Griswold, it\"...", 0);
apply_type (0x4A8ECC, "extern char str_4A8ECC[130];", TINFO_DEFINITE);
cleanup("str_4A8F50");set_name(0x4A8F50, "str_4A8F50");
set_cmt(0x4A8F50, "\"The Gateway of Blood and the Halls of Fire are lan\"...", 0);
apply_type (0x4A8F50, "extern char str_4A8F50[867];", TINFO_DEFINITE);
cleanup("str_4A92B4");set_name(0x4A92B4, "str_4A92B4");
set_cmt(0x4A92B4, "\"Every child hears the story of the warrior Arkaine\"...", 0);
apply_type (0x4A92B4, "extern char str_4A92B4[190];", TINFO_DEFINITE);
cleanup("str_4A9374");set_name(0x4A9374, "str_4A9374");
set_cmt(0x4A9374, "\"Hmm... it sounds like something I should remember,\"...", 0);
apply_type (0x4A9374, "extern char str_4A9374[159];", TINFO_DEFINITE);
cleanup("str_4A9414");set_name(0x4A9414, "str_4A9414");
set_cmt(0x4A9414, "\"The story of the magic armor called Valor is somet\"...", 0);
apply_type (0x4A9414, "extern char str_4A9414[142];", TINFO_DEFINITE);
cleanup("str_4A94A4");set_name(0x4A94A4, "str_4A94A4");
set_cmt(0x4A94A4, "\"The armor known as Valor could be what tips the sc\"...", 0);
apply_type (0x4A94A4, "extern char str_4A94A4[285];", TINFO_DEFINITE);
cleanup("str_4A95C4");set_name(0x4A95C4, "str_4A95C4");
set_cmt(0x4A95C4, "\"Zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz... |\"", 0);
apply_type (0x4A95C4, "extern char str_4A95C4[38];", TINFO_DEFINITE);
cleanup("str_4A95EC");set_name(0x4A95EC, "str_4A95EC");
set_cmt(0x4A95EC, "\"Should you find these Stones of Blood, use them ca\"...", 0);
apply_type (0x4A95EC, "extern char str_4A95EC[144];", TINFO_DEFINITE);
cleanup("str_4A967C");set_name(0x4A967C, "str_4A967C");
set_cmt(0x4A967C, "\"You intend to find the armor known as Valor?    No\"...", 0);
apply_type (0x4A967C, "extern char str_4A967C[188];", TINFO_DEFINITE);
cleanup("str_4A9738");set_name(0x4A9738, "str_4A9738");
set_cmt(0x4A9738, "\"I know of only one legend that speaks of such a wa\"...", 0);
apply_type (0x4A9738, "extern char str_4A9738[570];", TINFO_DEFINITE);
cleanup("str_4A9974");set_name(0x4A9974, "str_4A9974");
set_cmt(0x4A9974, "\"I am afraid that I haven't heard anything about su\"...", 0);
apply_type (0x4A9974, "extern char str_4A9974[164];", TINFO_DEFINITE);
cleanup("str_4A9A18");set_name(0x4A9A18, "str_4A9A18");
set_cmt(0x4A9A18, "\"Cain would be able to tell you much more about som\"...", 0);
apply_type (0x4A9A18, "extern char str_4A9A18[101];", TINFO_DEFINITE);
cleanup("str_4A9A80");set_name(0x4A9A80, "str_4A9A80");
set_cmt(0x4A9A80, "\"If you are to battle such a fierce opponent, may L\"...", 0);
apply_type (0x4A9A80, "extern char str_4A9A80[122];", TINFO_DEFINITE);
cleanup("str_4A9AFC");set_name(0x4A9AFC, "str_4A9AFC");
set_cmt(0x4A9AFC, "\"Dark and wicked legends surrounds the one Warlord \"...", 0);
apply_type (0x4A9AFC, "extern char str_4A9AFC[125];", TINFO_DEFINITE);
cleanup("str_4A9B7C");set_name(0x4A9B7C, "str_4A9B7C");
set_cmt(0x4A9B7C, "\"Always you gotta talk about Blood? What about flow\"...", 0);
apply_type (0x4A9B7C, "extern char str_4A9B7C[171];", TINFO_DEFINITE);
cleanup("str_4A9C28");set_name(0x4A9C28, "str_4A9C28");
set_cmt(0x4A9C28, "\"His prowess with the blade is awesome, and he has \"...", 0);
apply_type (0x4A9C28, "extern char str_4A9C28[155];", TINFO_DEFINITE);
cleanup("str_4A9CC4");set_name(0x4A9CC4, "str_4A9CC4");
set_cmt(0x4A9CC4, "\"I haven't ever dealt with this Warlord you speak o\"...", 0);
apply_type (0x4A9CC4, "extern char str_4A9CC4[148];", TINFO_DEFINITE);
cleanup("str_4A9D58");set_name(0x4A9D58, "str_4A9D58");
set_cmt(0x4A9D58, "\"My blade sings for your blood, mortal, and by my d\"...", 0);
apply_type (0x4A9D58, "extern char str_4A9D58[88];", TINFO_DEFINITE);
cleanup("str_4A9DB0");set_name(0x4A9DB0, "str_4A9DB0");
set_cmt(0x4A9DB0, "\"Griswold speaks of the Heaven Stone that was desti\"...", 0);
apply_type (0x4A9DB0, "extern char str_4A9DB0[352];", TINFO_DEFINITE);
cleanup("str_4A9F10");set_name(0x4A9F10, "str_4A9F10");
set_cmt(0x4A9F10, "\"The caravan stopped here to take on some supplies \"...", 0);
apply_type (0x4A9F10, "extern char str_4A9F10[225];", TINFO_DEFINITE);
cleanup("str_4A9FF4");set_name(0x4A9FF4, "str_4A9FF4");
set_cmt(0x4A9FF4, "\"I don't know what it is that they thought they cou\"...", 0);
apply_type (0x4A9FF4, "extern char str_4A9FF4[158];", TINFO_DEFINITE);
cleanup("str_4AA094");set_name(0x4AA094, "str_4AA094");
set_cmt(0x4AA094, "\"Well, a caravan of some very important people did \"...", 0);
apply_type (0x4AA094, "extern char str_4AA094[257];", TINFO_DEFINITE);
cleanup("str_4AA198");set_name(0x4AA198, "str_4AA198");
set_cmt(0x4AA198, "\"Stay for a moment - I have a story you might find \"...", 0);
apply_type (0x4AA198, "extern char str_4AA198[460];", TINFO_DEFINITE);
cleanup("str_4AA364");set_name(0x4AA364, "str_4AA364");
set_cmt(0x4AA364, "\"I am still waiting for you to bring me that stone \"...", 0);
apply_type (0x4AA364, "extern char str_4AA364[123];", TINFO_DEFINITE);
cleanup("str_4AA3E0");set_name(0x4AA3E0, "str_4AA3E0");
set_cmt(0x4AA3E0, "\"Let me see that - aye... aye, it is as I believed.\"...", 0);
apply_type (0x4AA3E0, "extern char str_4AA3E0[196];", TINFO_DEFINITE);
cleanup("str_4AA4A4");set_name(0x4AA4A4, "str_4AA4A4");
set_cmt(0x4AA4A4, "\"I used to have a nice ring; it was a really expens\"...", 0);
apply_type (0x4AA4A4, "extern char str_4AA4A4[172];", TINFO_DEFINITE);
cleanup("str_4AA550");set_name(0x4AA550, "str_4AA550");
set_cmt(0x4AA550, "\"The Heaven Stone is very powerful, and were it any\"...", 0);
apply_type (0x4AA550, "extern char str_4AA550[178];", TINFO_DEFINITE);
cleanup("str_4AA604");set_name(0x4AA604, "str_4AA604");
set_cmt(0x4AA604, "\"If anyone can make something out of that rock, Gri\"...", 0);
apply_type (0x4AA604, "extern char str_4AA604[170];", TINFO_DEFINITE);
cleanup("str_4AA6B0");set_name(0x4AA6B0, "str_4AA6B0");
set_cmt(0x4AA6B0, "\"The witch Adria seeks a black mushroom? I know as \"...", 0);
apply_type (0x4AA6B0, "extern char str_4AA6B0[227];", TINFO_DEFINITE);
cleanup("str_4AA794");set_name(0x4AA794, "str_4AA794");
set_cmt(0x4AA794, "\"Let me just say this. Both Garda and I would never\"...", 0);
apply_type (0x4AA794, "extern char str_4AA794[236];", TINFO_DEFINITE);
cleanup("str_4AA880");set_name(0x4AA880, "str_4AA880");
set_cmt(0x4AA880, "\"The witch told me that you were searching for the \"...", 0);
apply_type (0x4AA880, "extern char str_4AA880[356];", TINFO_DEFINITE);
cleanup("str_4AA9E4");set_name(0x4AA9E4, "str_4AA9E4");
set_cmt(0x4AA9E4, "\"Excellent, this is just what I had in mind. I was \"...", 0);
apply_type (0x4AA9E4, "extern char str_4AA9E4[211];", TINFO_DEFINITE);
cleanup("str_4AAAB8");set_name(0x4AAAB8, "str_4AAAB8");
set_cmt(0x4AAAB8, "\"I think Ogden might have some mushrooms in the sto\"...", 0);
apply_type (0x4AAAB8, "extern char str_4AAAB8[88];", TINFO_DEFINITE);
cleanup("str_4AAB10");set_name(0x4AAB10, "str_4AAB10");
set_cmt(0x4AAB10, "\"If Adria doesn't have one of these, you can bet th\"...", 0);
apply_type (0x4AAB10, "extern char str_4AAB10[218];", TINFO_DEFINITE);
cleanup("str_4AABEC");set_name(0x4AABEC, "str_4AABEC");
set_cmt(0x4AABEC, "\"Ogden mixes a MEAN black mushroom, but I get sick \"...", 0);
apply_type (0x4AABEC, "extern char str_4AABEC[130];", TINFO_DEFINITE);
cleanup("str_4AAC70");set_name(0x4AAC70, "str_4AAC70");
set_cmt(0x4AAC70, "\"What do we have here? Interesting, it looks like a\"...", 0);
apply_type (0x4AAC70, "extern char str_4AAC70[204];", TINFO_DEFINITE);
cleanup("str_4AAD3C");set_name(0x4AAD3C, "str_4AAD3C");
set_cmt(0x4AAD3C, "\"It's a big, black mushroom that I need. Now run of\"...", 0);
apply_type (0x4AAD3C, "extern char str_4AAD3C[140];", TINFO_DEFINITE);
cleanup("str_4AADC8");set_name(0x4AADC8, "str_4AADC8");
set_cmt(0x4AADC8, "\"Yes, this will be perfect for a brew that I am cre\"...", 0);
apply_type (0x4AADC8, "extern char str_4AADC8[350];", TINFO_DEFINITE);
cleanup("str_4AAF28");set_name(0x4AAF28, "str_4AAF28");
set_cmt(0x4AAF28, "\"Why have you brought that here? I have no need for\"...", 0);
apply_type (0x4AAF28, "extern char str_4AAF28[267];", TINFO_DEFINITE);
cleanup("str_4AB034");set_name(0x4AB034, "str_4AB034");
set_cmt(0x4AB034, "\"What? Now you bring me that elixir from the healer\"...", 0);
apply_type (0x4AB034, "extern char str_4AB034[125];", TINFO_DEFINITE);
cleanup("str_4AB0B4");set_name(0x4AB0B4, "str_4AB0B4");
set_cmt(0x4AB0B4, "\"I don't have any mushrooms of any size or color fo\"...", 0);
apply_type (0x4AB0B4, "extern char str_4AB0B4[99];", TINFO_DEFINITE);
cleanup("str_4AB118");set_name(0x4AB118, "str_4AB118");
set_cmt(0x4AB118, "\"So, the legend of the Map is real. Even I never tr\"...", 0);
apply_type (0x4AB118, "extern char str_4AB118[978];", TINFO_DEFINITE);
cleanup("str_4AB4EC");set_name(0x4AB4EC, "str_4AB4EC");
set_cmt(0x4AB4EC, "\"Our time is running short! I sense his dark power \"...", 0);
apply_type (0x4AB4EC, "extern char str_4AB4EC[118];", TINFO_DEFINITE);
cleanup("str_4AB564");set_name(0x4AB564, "str_4AB564");
set_cmt(0x4AB564, "\"I am sure that you tried your best, but I fear tha\"...", 0);
apply_type (0x4AB564, "extern char str_4AB564[301];", TINFO_DEFINITE);
cleanup("str_4AB694");set_name(0x4AB694, "str_4AB694");
set_cmt(0x4AB694, "\"If the witch can't help you and suggests you see C\"...", 0);
apply_type (0x4AB694, "extern char str_4AB694[218];", TINFO_DEFINITE);
cleanup("str_4AB770");set_name(0x4AB770, "str_4AB770");
set_cmt(0x4AB770, "\"I can't make much of the writing on this map, but \"...", 0);
apply_type (0x4AB770, "extern char str_4AB770[219];", TINFO_DEFINITE);
cleanup("str_4AB84C");set_name(0x4AB84C, "str_4AB84C");
set_cmt(0x4AB84C, "\"The best person to ask about that sort of thing wo\"...", 0);
apply_type (0x4AB84C, "extern char str_4AB84C[206];", TINFO_DEFINITE);
cleanup("str_4AB91C");set_name(0x4AB91C, "str_4AB91C");
set_cmt(0x4AB91C, "\"I have never seen a map of this sort before. Where\"...", 0);
apply_type (0x4AB91C, "extern char str_4AB91C[173];", TINFO_DEFINITE);
cleanup("str_4AB9CC");set_name(0x4AB9CC, "str_4AB9CC");
set_cmt(0x4AB9CC, "\"Listen here, come close. I don't know if you know \"...", 0);
apply_type (0x4AB9CC, "extern char str_4AB9CC[119];", TINFO_DEFINITE);
cleanup("str_4ABA44");set_name(0x4ABA44, "str_4ABA44");
set_cmt(0x4ABA44, "\"Oh, I'm afraid this does not bode well at all. Thi\"...", 0);
apply_type (0x4ABA44, "extern char str_4ABA44[220];", TINFO_DEFINITE);
cleanup("str_4ABB20");set_name(0x4ABB20, "str_4ABB20");
set_cmt(0x4ABB20, "\"I've been looking for a map, but that certainly is\"...", 0);
apply_type (0x4ABB20, "extern char str_4ABB20[196];", TINFO_DEFINITE);
cleanup("str_4ABBE4");set_name(0x4ABBE4, "str_4ABBE4");
set_cmt(0x4ABBE4, "\"Pleeeease, no hurt. No Kill. Keep alive and next t\"...", 0);
apply_type (0x4ABBE4, "extern char str_4ABBE4[75];", TINFO_DEFINITE);
cleanup("str_4ABC30");set_name(0x4ABC30, "str_4ABC30");
set_cmt(0x4ABC30, "\"Something for you I am making. Again, not kill Gha\"...", 0);
apply_type (0x4ABC30, "extern char str_4ABC30[119];", TINFO_DEFINITE);
cleanup("str_4ABCA8");set_name(0x4ABCA8, "str_4ABCA8");
set_cmt(0x4ABCA8, "\"Nothing yet! Almost done.    Very powerful, very s\"...", 0);
apply_type (0x4ABCA8, "extern char str_4ABCA8[102];", TINFO_DEFINITE);
cleanup("str_4ABD10");set_name(0x4ABD10, "str_4ABD10");
set_cmt(0x4ABD10, "\"This too good for you. Very Powerful! You want - y\"...", 0);
apply_type (0x4ABD10, "extern char str_4ABD10[61];", TINFO_DEFINITE);
cleanup("str_4ABD50");set_name(0x4ABD50, "str_4ABD50");
set_cmt(0x4ABD50, "\"What?! Why are you here? All these interruptions a\"...", 0);
apply_type (0x4ABD50, "extern char str_4ABD50[143];", TINFO_DEFINITE);
cleanup("str_4ABDE0");set_name(0x4ABDE0, "str_4ABDE0");
set_cmt(0x4ABDE0, "\"Arrrrgh! Your curiosity will be the death of you!!\"...", 0);
apply_type (0x4ABDE0, "extern char str_4ABDE0[54];", TINFO_DEFINITE);
cleanup("str_4ABE18");set_name(0x4ABE18, "str_4ABE18");
set_cmt(0x4ABE18, "\"Hello, my friend. Stay awhile and listen... |\"", 0);
apply_type (0x4ABE18, "extern char str_4ABE18[46];", TINFO_DEFINITE);
cleanup("str_4ABE48");set_name(0x4ABE48, "str_4ABE48");
set_cmt(0x4ABE48, "\"While you are venturing deeper into the Labyrinth \"...", 0);
apply_type (0x4ABE48, "extern char str_4ABE48[176];", TINFO_DEFINITE);
cleanup("str_4ABEF8");set_name(0x4ABEF8, "str_4ABEF8");
set_cmt(0x4ABEF8, "\"I know of many myths and legends that may contain \"...", 0);
apply_type (0x4ABEF8, "extern char str_4ABEF8[242];", TINFO_DEFINITE);
cleanup("str_4ABFEC");set_name(0x4ABFEC, "str_4ABFEC");
set_cmt(0x4ABFEC, "\"Griswold - a man of great action and great courage\"...", 0);
apply_type (0x4ABFEC, "extern char str_4ABFEC[351];", TINFO_DEFINITE);
cleanup("str_4AC14C");set_name(0x4AC14C, "str_4AC14C");
set_cmt(0x4AC14C, "\"Ogden has owned and run the Rising Sun Inn and Tav\"...", 0);
apply_type (0x4AC14C, "extern char str_4AC14C[335];", TINFO_DEFINITE);
cleanup("str_4AC29C");set_name(0x4AC29C, "str_4AC29C");
set_cmt(0x4AC29C, "\"Poor Farnham. He is a disquieting reminder of the \"...", 0);
apply_type (0x4AC29C, "extern char str_4AC29C[362];", TINFO_DEFINITE);
cleanup("str_4AC408");set_name(0x4AC408, "str_4AC408");
set_cmt(0x4AC408, "\"The witch, Adria, is an anomaly here in Tristram. \"...", 0);
apply_type (0x4AC408, "extern char str_4AC408[330];", TINFO_DEFINITE);
cleanup("str_4AC554");set_name(0x4AC554, "str_4AC554");
set_cmt(0x4AC554, "\"The story of Wirt is a frightening and tragic one.\"...", 0);
apply_type (0x4AC554, "extern char str_4AC554[432];", TINFO_DEFINITE);
cleanup("str_4AC704");set_name(0x4AC704, "str_4AC704");
set_cmt(0x4AC704, "\"Ah, Pepin. I count him as a true friend - perhaps \"...", 0);
apply_type (0x4AC704, "extern char str_4AC704[237];", TINFO_DEFINITE);
cleanup("str_4AC7F4");set_name(0x4AC7F4, "str_4AC7F4");
set_cmt(0x4AC7F4, "\"Gillian is a fine woman. Much adored for her high \"...", 0);
apply_type (0x4AC7F4, "extern char str_4AC7F4[319];", TINFO_DEFINITE);
cleanup("str_4AC934");set_name(0x4AC934, "str_4AC934");
set_cmt(0x4AC934, "\"Greetings, good master. Welcome to the Tavern of t\"...", 0);
apply_type (0x4AC934, "extern char str_4AC934[67];", TINFO_DEFINITE);
cleanup("str_4AC978");set_name(0x4AC978, "str_4AC978");
set_cmt(0x4AC978, "\"Many adventurers have graced the tables of my tave\"...", 0);
apply_type (0x4AC978, "extern char str_4AC978[271];", TINFO_DEFINITE);
cleanup("str_4ACA88");set_name(0x4ACA88, "str_4ACA88");
set_cmt(0x4ACA88, "\"Griswold the blacksmith is extremely knowledgeable\"...", 0);
apply_type (0x4ACA88, "extern char str_4ACA88[152];", TINFO_DEFINITE);
cleanup("str_4ACB20");set_name(0x4ACB20, "str_4ACB20");
set_cmt(0x4ACB20, "\"Farnham spends far too much time here, drowning hi\"...", 0);
apply_type (0x4ACB20, "extern char str_4ACB20[155];", TINFO_DEFINITE);
cleanup("str_4ACBBC");set_name(0x4ACBBC, "str_4ACBBC");
set_cmt(0x4ACBBC, "\"Adria is wise beyond her years, but I must admit -\"...", 0);
apply_type (0x4ACBBC, "extern char str_4ACBBC[218];", TINFO_DEFINITE);
cleanup("str_4ACC98");set_name(0x4ACC98, "str_4ACC98");
set_cmt(0x4ACC98, "\"If you want to know more about the history of our \"...", 0);
apply_type (0x4ACC98, "extern char str_4ACC98[116];", TINFO_DEFINITE);
cleanup("str_4ACD0C");set_name(0x4ACD0C, "str_4ACD0C");
set_cmt(0x4ACD0C, "\"Wirt is a rapscallion and a little scoundrel. He w\"...", 0);
apply_type (0x4ACD0C, "extern char str_4ACD0C[271];", TINFO_DEFINITE);
cleanup("str_4ACE1C");set_name(0x4ACE1C, "str_4ACE1C");
set_cmt(0x4ACE1C, "\"Pepin is a good man - and certainly the most gener\"...", 0);
apply_type (0x4ACE1C, "extern char str_4ACE1C[199];", TINFO_DEFINITE);
cleanup("str_4ACEE4");set_name(0x4ACEE4, "str_4ACEE4");
set_cmt(0x4ACEE4, "\"Gillian, my Barmaid? If it were not for her sense \"...", 0);
apply_type (0x4ACEE4, "extern char str_4ACEE4[260];", TINFO_DEFINITE);
cleanup("str_4ACFE8");set_name(0x4ACFE8, "str_4ACFE8");
set_cmt(0x4ACFE8, "\"What ails you, my friend? |\"", 0);
apply_type (0x4ACFE8, "extern char str_4ACFE8[28];", TINFO_DEFINITE);
cleanup("str_4AD004");set_name(0x4AD004, "str_4AD004");
set_cmt(0x4AD004, "\"I have made a very interesting discovery. Unlike u\"...", 0);
apply_type (0x4AD004, "extern char str_4AD004[236];", TINFO_DEFINITE);
cleanup("str_4AD0F0");set_name(0x4AD0F0, "str_4AD0F0");
set_cmt(0x4AD0F0, "\"Before it was taken over by, well, whatever lurks \"...", 0);
apply_type (0x4AD0F0, "extern char str_4AD0F0[247];", TINFO_DEFINITE);
cleanup("str_4AD1E8");set_name(0x4AD1E8, "str_4AD1E8");
set_cmt(0x4AD1E8, "\"Griswold knows as much about the art of war as I d\"...", 0);
apply_type (0x4AD1E8, "extern char str_4AD1E8[208];", TINFO_DEFINITE);
cleanup("str_4AD2B8");set_name(0x4AD2B8, "str_4AD2B8");
set_cmt(0x4AD2B8, "\"Cain is a true friend and a wise sage. He maintain\"...", 0);
apply_type (0x4AD2B8, "extern char str_4AD2B8[197];", TINFO_DEFINITE);
cleanup("str_4AD380");set_name(0x4AD380, "str_4AD380");
set_cmt(0x4AD380, "\"Even my skills have been unable to fully heal Farn\"...", 0);
apply_type (0x4AD380, "extern char str_4AD380[150];", TINFO_DEFINITE);
cleanup("str_4AD418");set_name(0x4AD418, "str_4AD418");
set_cmt(0x4AD418, "\"While I use some limited forms of magic to create \"...", 0);
apply_type (0x4AD418, "extern char str_4AD418[319];", TINFO_DEFINITE);
cleanup("str_4AD558");set_name(0x4AD558, "str_4AD558");
set_cmt(0x4AD558, "\"Poor Wirt. I did all that was possible for the chi\"...", 0);
apply_type (0x4AD558, "extern char str_4AD558[243];", TINFO_DEFINITE);
cleanup("str_4AD64C");set_name(0x4AD64C, "str_4AD64C");
set_cmt(0x4AD64C, "\"I really don't understand why Ogden stays here in \"...", 0);
apply_type (0x4AD64C, "extern char str_4AD64C[364];", TINFO_DEFINITE);
cleanup("str_4AD7B8");set_name(0x4AD7B8, "str_4AD7B8");
set_cmt(0x4AD7B8, "\"Ogden's barmaid is a sweet girl. Her grandmother i\"...", 0);
apply_type (0x4AD7B8, "extern char str_4AD7B8[180];", TINFO_DEFINITE);
cleanup("str_4AD86C");set_name(0x4AD86C, "str_4AD86C");
set_cmt(0x4AD86C, "\"Good day! How may I serve you? |\"", 0);
apply_type (0x4AD86C, "extern char str_4AD86C[33];", TINFO_DEFINITE);
cleanup("str_4AD890");set_name(0x4AD890, "str_4AD890");
set_cmt(0x4AD890, "\"My grandmother had a dream that you would come and\"...", 0);
apply_type (0x4AD890, "extern char str_4AD890[120];", TINFO_DEFINITE);
cleanup("str_4AD908");set_name(0x4AD908, "str_4AD908");
set_cmt(0x4AD908, "\"The woman at the edge of town is a witch! She seem\"...", 0);
apply_type (0x4AD908, "extern char str_4AD908[230];", TINFO_DEFINITE);
cleanup("str_4AD9F0");set_name(0x4AD9F0, "str_4AD9F0");
set_cmt(0x4AD9F0, "\"Our Blacksmith is a point of pride to the people o\"...", 0);
apply_type (0x4AD9F0, "extern char str_4AD9F0[271];", TINFO_DEFINITE);
cleanup("str_4ADB00");set_name(0x4ADB00, "str_4ADB00");
set_cmt(0x4ADB00, "\"Cain has been the storyteller of Tristram for as l\"...", 0);
apply_type (0x4ADB00, "extern char str_4ADB00[155];", TINFO_DEFINITE);
cleanup("str_4ADB9C");set_name(0x4ADB9C, "str_4ADB9C");
set_cmt(0x4ADB9C, "\"Farnham is a drunkard who fills his belly with ale\"...", 0);
apply_type (0x4ADB9C, "extern char str_4ADB9C[251];", TINFO_DEFINITE);
cleanup("str_4ADC98");set_name(0x4ADC98, "str_4ADC98");
set_cmt(0x4ADC98, "\"Pepin saved my grandmother's life, and I know that\"...", 0);
apply_type (0x4ADC98, "extern char str_4ADC98[265];", TINFO_DEFINITE);
cleanup("str_4ADDA4");set_name(0x4ADDA4, "str_4ADDA4");
set_cmt(0x4ADDA4, "\"I grew up with Wirt's mother, Canace. Although she\"...", 0);
apply_type (0x4ADDA4, "extern char str_4ADDA4[386];", TINFO_DEFINITE);
cleanup("str_4ADF28");set_name(0x4ADF28, "str_4ADF28");
set_cmt(0x4ADF28, "\"Ogden and his wife have taken me and my grandmothe\"...", 0);
apply_type (0x4ADF28, "extern char str_4ADF28[244];", TINFO_DEFINITE);
cleanup("str_4AE01C");set_name(0x4AE01C, "str_4AE01C");
set_cmt(0x4AE01C, "\"Well, what can I do for ya? |\"", 0);
apply_type (0x4AE01C, "extern char str_4AE01C[30];", TINFO_DEFINITE);
cleanup("str_4AE03C");set_name(0x4AE03C, "str_4AE03C");
set_cmt(0x4AE03C, "\"If you're looking for a good weapon, let me show t\"...", 0);
apply_type (0x4AE03C, "extern char str_4AE03C[242];", TINFO_DEFINITE);
cleanup("str_4AE130");set_name(0x4AE130, "str_4AE130");
set_cmt(0x4AE130, "\"The axe? Aye, that's a good weapon, balanced again\"...", 0);
apply_type (0x4AE130, "extern char str_4AE130[232];", TINFO_DEFINITE);
cleanup("str_4AE218");set_name(0x4AE218, "str_4AE218");
set_cmt(0x4AE218, "\"Look at that edge, that balance. A sword in the ri\"...", 0);
apply_type (0x4AE218, "extern char str_4AE218[259];", TINFO_DEFINITE);
cleanup("str_4AE31C");set_name(0x4AE31C, "str_4AE31C");
set_cmt(0x4AE31C, "\"Your weapons and armor will show the signs of your\"...", 0);
apply_type (0x4AE31C, "extern char str_4AE31C[187];", TINFO_DEFINITE);
cleanup("str_4AE3D8");set_name(0x4AE3D8, "str_4AE3D8");
set_cmt(0x4AE3D8, "\"While I have to practically smuggle in the metals \"...", 0);
apply_type (0x4AE3D8, "extern char str_4AE3D8[297];", TINFO_DEFINITE);
cleanup("str_4AE504");set_name(0x4AE504, "str_4AE504");
set_cmt(0x4AE504, "\"Gillian is a nice lass. Shame that her gammer is i\"...", 0);
apply_type (0x4AE504, "extern char str_4AE504[154];", TINFO_DEFINITE);
cleanup("str_4AE5A0");set_name(0x4AE5A0, "str_4AE5A0");
set_cmt(0x4AE5A0, "\"Sometimes I think that Cain talks too much, but I \"...", 0);
apply_type (0x4AE5A0, "extern char str_4AE5A0[205];", TINFO_DEFINITE);
cleanup("str_4AE670");set_name(0x4AE670, "str_4AE670");
set_cmt(0x4AE670, "\"I was with Farnham that night that Lazarus led us \"...", 0);
apply_type (0x4AE670, "extern char str_4AE670[304];", TINFO_DEFINITE);
cleanup("str_4AE7A0");set_name(0x4AE7A0, "str_4AE7A0");
set_cmt(0x4AE7A0, "\"A good man who puts the needs of others above his \"...", 0);
apply_type (0x4AE7A0, "extern char str_4AE7A0[178];", TINFO_DEFINITE);
cleanup("str_4AE854");set_name(0x4AE854, "str_4AE854");
set_cmt(0x4AE854, "\"That lad is going to get himself into serious trou\"...", 0);
apply_type (0x4AE854, "extern char str_4AE854[338];", TINFO_DEFINITE);
cleanup("str_4AE9A8");set_name(0x4AE9A8, "str_4AE9A8");
set_cmt(0x4AE9A8, "\"The Innkeeper has little business and no real way \"...", 0);
apply_type (0x4AE9A8, "extern char str_4AE9A8[448];", TINFO_DEFINITE);
cleanup("str_4AEB68");set_name(0x4AEB68, "str_4AEB68");
set_cmt(0x4AEB68, "\"Can't a fella drink in peace? |\"", 0);
apply_type (0x4AEB68, "extern char str_4AEB68[32];", TINFO_DEFINITE);
cleanup("str_4AEB88");set_name(0x4AEB88, "str_4AEB88");
set_cmt(0x4AEB88, "\"The gal who brings the drinks? Oh, yeah, what a pr\"...", 0);
apply_type (0x4AEB88, "extern char str_4AEB88[77];", TINFO_DEFINITE);
cleanup("str_4AEBD8");set_name(0x4AEBD8, "str_4AEBD8");
set_cmt(0x4AEBD8, "\"Why don't that old crone do somethin' for a change\"...", 0);
apply_type (0x4AEBD8, "extern char str_4AEBD8[228];", TINFO_DEFINITE);
cleanup("str_4AECBC");set_name(0x4AECBC, "str_4AECBC");
set_cmt(0x4AECBC, "\"Cain isn't what he says he is. Sure, sure, he talk\"...", 0);
apply_type (0x4AECBC, "extern char str_4AECBC[159];", TINFO_DEFINITE);
cleanup("str_4AED5C");set_name(0x4AED5C, "str_4AED5C");
set_cmt(0x4AED5C, "\"Griswold? Good old Griswold. I love him like a bro\"...", 0);
apply_type (0x4AED5C, "extern char str_4AED5C[141];", TINFO_DEFINITE);
cleanup("str_4AEDEC");set_name(0x4AEDEC, "str_4AEDEC");
set_cmt(0x4AEDEC, "\"Hehehe, I like Pepin. He really tries, you know. L\"...", 0);
apply_type (0x4AEDEC, "extern char str_4AEDEC[233];", TINFO_DEFINITE);
cleanup("str_4AEED8");set_name(0x4AEED8, "str_4AEED8");
set_cmt(0x4AEED8, "\"Wirt is a kid with more problems than even me, and\"...", 0);
apply_type (0x4AEED8, "extern char str_4AEED8[223];", TINFO_DEFINITE);
cleanup("str_4AEFB8");set_name(0x4AEFB8, "str_4AEFB8");
set_cmt(0x4AEFB8, "\"Ogden is the best man in town. I don't think his w\"...", 0);
apply_type (0x4AEFB8, "extern char str_4AEFB8[220];", TINFO_DEFINITE);
cleanup("str_4AF094");set_name(0x4AF094, "str_4AF094");
set_cmt(0x4AF094, "\"I wanna tell ya sumthin', 'cause I know all about \"...", 0);
apply_type (0x4AF094, "extern char str_4AF094[178];", TINFO_DEFINITE);
cleanup("str_4AF148");set_name(0x4AF148, "str_4AF148");
set_cmt(0x4AF148, "\"No one ever lis... listens to me. Somewhere - I ai\"...", 0);
apply_type (0x4AF148, "extern char str_4AF148[184];", TINFO_DEFINITE);
cleanup("str_4AF200");set_name(0x4AF200, "str_4AF200");
set_cmt(0x4AF200, "\"I know you gots your own ideas, and I know you're \"...", 0);
apply_type (0x4AF200, "extern char str_4AF200[255];", TINFO_DEFINITE);
cleanup("str_4AF300");set_name(0x4AF300, "str_4AF300");
set_cmt(0x4AF300, "\"If I was you... and I ain't... but if I was, I'd s\"...", 0);
apply_type (0x4AF300, "extern char str_4AF300[227];", TINFO_DEFINITE);
cleanup("str_4AF3E4");set_name(0x4AF3E4, "str_4AF3E4");
set_cmt(0x4AF3E4, "\"I sense a soul in search of answers... |\"", 0);
apply_type (0x4AF3E4, "extern char str_4AF3E4[41];", TINFO_DEFINITE);
cleanup("str_4AF410");set_name(0x4AF410, "str_4AF410");
set_cmt(0x4AF410, "\"Wisdom is earned, not given. If you discover a tom\"...", 0);
apply_type (0x4AF410, "extern char str_4AF410[221];", TINFO_DEFINITE);
cleanup("str_4AF4F0");set_name(0x4AF4F0, "str_4AF4F0");
set_cmt(0x4AF4F0, "\"The greatest power is often the shortest lived. Yo\"...", 0);
apply_type (0x4AF4F0, "extern char str_4AF4F0[410];", TINFO_DEFINITE);
cleanup("str_4AF68C");set_name(0x4AF68C, "str_4AF68C");
set_cmt(0x4AF68C, "\"Though the heat of the sun is beyond measure, the \"...", 0);
apply_type (0x4AF68C, "extern char str_4AF68C[350];", TINFO_DEFINITE);
cleanup("str_4AF7EC");set_name(0x4AF7EC, "str_4AF7EC");
set_cmt(0x4AF7EC, "\"The sum of our knowledge is in the sum of its peop\"...", 0);
apply_type (0x4AF7EC, "extern char str_4AF7EC[202];", TINFO_DEFINITE);
cleanup("str_4AF8B8");set_name(0x4AF8B8, "str_4AF8B8");
set_cmt(0x4AF8B8, "\"To a man who only knows Iron, there is no greater \"...", 0);
apply_type (0x4AF8B8, "extern char str_4AF8B8[193];", TINFO_DEFINITE);
cleanup("str_4AF97C");set_name(0x4AF97C, "str_4AF97C");
set_cmt(0x4AF97C, "\"Corruption has the strength of deceit, but innocen\"...", 0);
apply_type (0x4AF97C, "extern char str_4AF97C[238];", TINFO_DEFINITE);
cleanup("str_4AFA6C");set_name(0x4AFA6C, "str_4AFA6C");
set_cmt(0x4AFA6C, "\"A chest opened in darkness holds no greater treasu\"...", 0);
apply_type (0x4AFA6C, "extern char str_4AFA6C[266];", TINFO_DEFINITE);
cleanup("str_4AFB78");set_name(0x4AFB78, "str_4AFB78");
set_cmt(0x4AFB78, "\"The higher you place your faith in one man, the fa\"...", 0);
apply_type (0x4AFB78, "extern char str_4AFB78[279];", TINFO_DEFINITE);
cleanup("str_4AFC90");set_name(0x4AFC90, "str_4AFC90");
set_cmt(0x4AFC90, "\"The hand, the heart and the mind can perform mirac\"...", 0);
apply_type (0x4AFC90, "extern char str_4AFC90[321];", TINFO_DEFINITE);
cleanup("str_4AFDD4");set_name(0x4AFDD4, "str_4AFDD4");
set_cmt(0x4AFDD4, "\"There is much about the future we cannot see, but \"...", 0);
apply_type (0x4AFDD4, "extern char str_4AFDD4[463];", TINFO_DEFINITE);
cleanup("str_4AFFA4");set_name(0x4AFFA4, "str_4AFFA4");
set_cmt(0x4AFFA4, "\"Earthen walls and thatched canopy do not a home cr\"...", 0);
apply_type (0x4AFFA4, "extern char str_4AFFA4[515];", TINFO_DEFINITE);
cleanup("str_4B01A8");set_name(0x4B01A8, "str_4B01A8");
set_cmt(0x4B01A8, "\"Pssst... over here... |\"", 0);
apply_type (0x4B01A8, "extern char str_4B01A8[24];", TINFO_DEFINITE);
cleanup("str_4B01C0");set_name(0x4B01C0, "str_4B01C0");
set_cmt(0x4B01C0, "\"Not everyone in Tristram has a use - or a market -\"...", 0);
apply_type (0x4B01C0, "extern char str_4B01C0[215];", TINFO_DEFINITE);
cleanup("str_4B0298");set_name(0x4B0298, "str_4B0298");
set_cmt(0x4B0298, "\"Don't trust everything the drunk says. Too many al\"...", 0);
apply_type (0x4B0298, "extern char str_4B0298[98];", TINFO_DEFINITE);
cleanup("str_4B02FC");set_name(0x4B02FC, "str_4B02FC");
set_cmt(0x4B02FC, "\"In case you haven't noticed, I don't buy anything \"...", 0);
apply_type (0x4B02FC, "extern char str_4B02FC[250];", TINFO_DEFINITE);
cleanup("str_4B03F8");set_name(0x4B03F8, "str_4B03F8");
set_cmt(0x4B03F8, "\"I guess I owe the blacksmith my life - what there \"...", 0);
apply_type (0x4B03F8, "extern char str_4B03F8[273];", TINFO_DEFINITE);
cleanup("str_4B050C");set_name(0x4B050C, "str_4B050C");
set_cmt(0x4B050C, "\"If I were a few years older, I would shower her wi\"...", 0);
apply_type (0x4B050C, "extern char str_4B050C[284];", TINFO_DEFINITE);
cleanup("str_4B0628");set_name(0x4B0628, "str_4B0628");
set_cmt(0x4B0628, "\"Cain knows too much. He scares the life out of me \"...", 0);
apply_type (0x4B0628, "extern char str_4B0628[220];", TINFO_DEFINITE);
cleanup("str_4B0704");set_name(0x4B0704, "str_4B0704");
set_cmt(0x4B0704, "\"Farnham - now there is a man with serious problems\"...", 0);
apply_type (0x4B0704, "extern char str_4B0704[363];", TINFO_DEFINITE);
cleanup("str_4B0870");set_name(0x4B0870, "str_4B0870");
set_cmt(0x4B0870, "\"As long as you don't need anything reattached, old\"...", 0);
apply_type (0x4B0870, "extern char str_4B0870[164];", TINFO_DEFINITE);
cleanup("str_4B0914");set_name(0x4B0914, "str_4B0914");
set_cmt(0x4B0914, "\"Adria truly bothers me. Sure, Cain is creepy in wh\"...", 0);
apply_type (0x4B0914, "extern char str_4B0914[304];", TINFO_DEFINITE);
cleanup("str_4B0A44");set_name(0x4B0A44, "str_4B0A44");
set_cmt(0x4B0A44, "\"Ogden is a fool for staying here. I could get him \"...", 0);
apply_type (0x4B0A44, "extern char str_4B0A44[273];", TINFO_DEFINITE);
cleanup("str_4B0B58");set_name(0x4B0B58, "str_4B0B58");
set_cmt(0x4B0B58, "\" |\"", 0);
apply_type (0x4B0B58, "extern char str_4B0B58[3];", TINFO_DEFINITE);
cleanup("str_4B0B5C");set_name(0x4B0B5C, "str_4B0B5C");
set_cmt(0x4B0B5C, "\"Beyond the Hall of Heroes lies the Chamber of Bone\"...", 0);
apply_type (0x4B0B5C, "extern char str_4B0B5C[195];", TINFO_DEFINITE);
cleanup("str_4B0C20");set_name(0x4B0C20, "str_4B0C20");
set_cmt(0x4B0C20, "\"...and so, locked beyond the Gateway of Blood and \"...", 0);
apply_type (0x4B0C20, "extern char str_4B0C20[123];", TINFO_DEFINITE);
cleanup("str_4B0C9C");set_name(0x4B0C9C, "str_4B0C9C");
set_cmt(0x4B0C9C, "\"I can see what you see not. Vision milky then eyes\"...", 0);
apply_type (0x4B0C9C, "extern char str_4B0C9C[256];", TINFO_DEFINITE);
cleanup("str_4B0D9C");set_name(0x4B0D9C, "str_4B0D9C");
set_cmt(0x4B0D9C, "\"The armories of Hell are home to the Warlord of Bl\"...", 0);
apply_type (0x4B0D9C, "extern char str_4B0D9C[233];", TINFO_DEFINITE);
cleanup("str_4B0E88");set_name(0x4B0E88, "str_4B0E88");
set_cmt(0x4B0E88, "\"Take heed and bear witness to the truths that lie \"...", 0);
apply_type (0x4B0E88, "extern char str_4B0E88[500];", TINFO_DEFINITE);
cleanup("str_4B107C");set_name(0x4B107C, "str_4B107C");
set_cmt(0x4B107C, "\"Take heed and bear witness to the truths that lie \"...", 0);
apply_type (0x4B107C, "extern char str_4B107C[465];", TINFO_DEFINITE);
cleanup("str_4B1250");set_name(0x4B1250, "str_4B1250");
set_cmt(0x4B1250, "\"Take heed and bear witness to the truths that lie \"...", 0);
apply_type (0x4B1250, "extern char str_4B1250[1098];", TINFO_DEFINITE);
cleanup("str_4B169C");set_name(0x4B169C, "str_4B169C");
set_cmt(0x4B169C, "\"So it came to be that there was a great revolution\"...", 0);
apply_type (0x4B169C, "extern char str_4B169C[500];", TINFO_DEFINITE);
cleanup("str_4B1890");set_name(0x4B1890, "str_4B1890");
set_cmt(0x4B1890, "\"Many demons traveled to the mortal realm in search\"...", 0);
apply_type (0x4B1890, "extern char str_4B1890[373];", TINFO_DEFINITE);
cleanup("str_4B1A08");set_name(0x4B1A08, "str_4B1A08");
set_cmt(0x4B1A08, "\"So it came to be that the Three Prime Evils were b\"...", 0);
apply_type (0x4B1A08, "extern char str_4B1A08[823];", TINFO_DEFINITE);
cleanup("str_4B1D40");set_name(0x4B1D40, "str_4B1D40");
set_cmt(0x4B1D40, "\"All praises to Diablo - Lord of Terror and Survivo\"...", 0);
apply_type (0x4B1D40, "extern char str_4B1D40[438];", TINFO_DEFINITE);
cleanup("str_4B1EF8");set_name(0x4B1EF8, "str_4B1EF8");
set_cmt(0x4B1EF8, "\"Glory and Approbation to Diablo - Lord of Terror a\"...", 0);
apply_type (0x4B1EF8, "extern char str_4B1EF8[421];", TINFO_DEFINITE);
cleanup("str_4B20A0");set_name(0x4B20A0, "str_4B20A0");
set_cmt(0x4B20A0, "\"Hail and Sacrifice to Diablo - Lord of Terror and \"...", 0);
apply_type (0x4B20A0, "extern char str_4B20A0[627];", TINFO_DEFINITE);
cleanup("str_4B2314");set_name(0x4B2314, "str_4B2314");
set_cmt(0x4B2314, "\"Thank goodness you've returned! Much has changed s\"...", 0);
apply_type (0x4B2314, "extern char str_4B2314[622];", TINFO_DEFINITE);
cleanup("str_49EEF8");set_name(0x49EEF8, "str_49EEF8");
set_cmt(0x49EEF8, "\"Diablo\"", 0);
apply_type (0x49EEF8, "extern char str_49EEF8[7];", TINFO_DEFINITE);
cleanup("hArchive");set_name(0x49EF00, "hArchive");
set_cmt(0x49EF00, "hArchive is a handle to the opened MPQ archive.", 0);
apply_type (0x49EF00, "extern HANDLE hArchive;", TINFO_DEFINITE);
cleanup("str_49EF04");set_name(0x49EF04, "str_49EF04");
set_cmt(0x49EF04, "\"Video Player \"", 0);
apply_type (0x49EF04, "extern char str_49EF04[14];", TINFO_DEFINITE);
cleanup("str_49EF14");set_name(0x49EF14, "str_49EF14");
set_cmt(0x49EF14, "\"MPQ free list error\"", 0);
apply_type (0x49EF14, "extern char str_49EF14[20];", TINFO_DEFINITE);
cleanup("str_49EF28");set_name(0x49EF28, "str_49EF28");
set_cmt(0x49EF28, "\"Out of free block entries\"", 0);
apply_type (0x49EF28, "extern char str_49EF28[26];", TINFO_DEFINITE);
cleanup("str_49EF44");set_name(0x49EF44, "str_49EF44");
set_cmt(0x49EF44, "\"Out of hash space\"", 0);
apply_type (0x49EF44, "extern char str_49EF44[18];", TINFO_DEFINITE);
cleanup("str_49EF58");set_name(0x49EF58, "str_49EF58");
set_cmt(0x49EF58, "\"Hash collision between \"%s\" and existing file\n\"", 0);
apply_type (0x49EF58, "extern char str_49EF58[47];", TINFO_DEFINITE);
cleanup("str_49EF88");set_name(0x49EF88, "str_49EF88");
set_cmt(0x49EF88, "\"(hash table)\"", 0);
apply_type (0x49EF88, "extern char str_49EF88[13];", TINFO_DEFINITE);
cleanup("str_49EF98");set_name(0x49EF98, "str_49EF98");
set_cmt(0x49EF98, "\"(block table)\"", 0);
apply_type (0x49EF98, "extern char str_49EF98[14];", TINFO_DEFINITE);
cleanup("str_48E488");set_name(0x48E488, "str_48E488");
set_cmt(0x48E488, "\"internal version unknown\"", 0);
apply_type (0x48E488, "extern char str_48E488[25];", TINFO_DEFINITE);
cleanup("str_48E58C");set_name(0x48E58C, "str_48E58C");
set_cmt(0x48E58C, "\"Diablo v1.09\"", 0);
apply_type (0x48E58C, "extern char str_48E58C[13];", TINFO_DEFINITE);
cleanup("str_48E690");set_name(0x48E690, "str_48E690");
set_cmt(0x48E690, "\"open\"", 0);
apply_type (0x48E690, "extern char str_48E690[5];", TINFO_DEFINITE);
cleanup("str_48E698");set_name(0x48E698, "str_48E698");
set_cmt(0x48E698, "\"Microsoft Office Shortcut Bar.lnk\"", 0);
apply_type (0x48E698, "extern char str_48E698[34];", TINFO_DEFINITE);
cleanup("str_48E6BC");set_name(0x48E6BC, "str_48E6BC");
set_cmt(0x48E6BC, "`%s\%s\`", 0);
apply_type (0x48E6BC, "extern char str_48E6BC[7];", TINFO_DEFINITE);
cleanup("str_48E6C4");set_name(0x48E6C4, "str_48E6C4");
set_cmt(0x48E6C4, "`%s%s\`", 0);
apply_type (0x48E6C4, "extern char str_48E6C4[6];", TINFO_DEFINITE);
cleanup("str_48E6CC");set_name(0x48E6CC, "str_48E6CC");
set_cmt(0x48E6CC, "\"..\"", 0);
apply_type (0x48E6CC, "extern char str_48E6CC[3];", TINFO_DEFINITE);
cleanup("str_48E6D0");set_name(0x48E6D0, "str_48E6D0");
set_cmt(0x48E6D0, "\".\"", 0);
apply_type (0x48E6D0, "extern char str_48E6D0[2];", TINFO_DEFINITE);
cleanup("str_48E6D4");set_name(0x48E6D4, "str_48E6D4");
set_cmt(0x48E6D4, "`\*`", 0);
apply_type (0x48E6D4, "extern char str_48E6D4[3];", TINFO_DEFINITE);
cleanup("str_48E6D8");set_name(0x48E6D8, "str_48E6D8");
set_cmt(0x48E6D8, "\"*\"", 0);
apply_type (0x48E6D8, "extern char str_48E6D8[2];", TINFO_DEFINITE);
cleanup("str_48E6DC");set_name(0x48E6DC, "str_48E6DC");
set_cmt(0x48E6DC, "`Control Panel\Desktop`", 0);
apply_type (0x48E6DC, "extern char str_48E6DC[22];", TINFO_DEFINITE);
cleanup("str_48E6F4");set_name(0x48E6F4, "str_48E6F4");
set_cmt(0x48E6F4, "\"Unable to create main window\"", 0);
apply_type (0x48E6F4, "extern char str_48E6F4[29];", TINFO_DEFINITE);
cleanup("str_48E714");set_name(0x48E714, "str_48E714");
set_cmt(0x48E714, "\"Unable to register window class\"", 0);
apply_type (0x48E714, "extern char str_48E714[32];", TINFO_DEFINITE);
cleanup("str_48E734");set_name(0x48E734, "str_48E734");
set_cmt(0x48E734, "\"MOM Parent\"", 0);
apply_type (0x48E734, "extern char str_48E734[11];", TINFO_DEFINITE);
cleanup("str_48E740");set_name(0x48E740, "str_48E740");
set_cmt(0x48E740, "\"DiabloInstall\"", 0);
apply_type (0x48E740, "extern char str_48E740[14];", TINFO_DEFINITE);
cleanup("str_48E750");set_name(0x48E750, "str_48E750");
set_cmt(0x48E750, "`\patch_rt.mpq`", 0);
apply_type (0x48E750, "extern char str_48E750[14];", TINFO_DEFINITE);
cleanup("str_48E760");set_name(0x48E760, "str_48E760");
set_cmt(0x48E760, "\"Main program archive: diabdat.mpq\"", 0);
apply_type (0x48E760, "extern char str_48E760[34];", TINFO_DEFINITE);
cleanup("str_48E784");set_name(0x48E784, "str_48E784");
set_cmt(0x48E784, "`ui_art\title.pcx`", 0);
apply_type (0x48E784, "extern char str_48E784[17];", TINFO_DEFINITE);
cleanup("str_48E798");set_name(0x48E798, "str_48E798");
set_cmt(0x48E798, "\"diabdat.mpq\"", 0);
apply_type (0x48E798, "extern char str_48E798[12];", TINFO_DEFINITE);
cleanup("str_48E7A4");set_name(0x48E7A4, "str_48E7A4");
set_cmt(0x48E7A4, "`\diabdat.mpq`", 0);
apply_type (0x48E7A4, "extern char str_48E7A4[13];", TINFO_DEFINITE);
cleanup("str_48E7B4");set_name(0x48E7B4, "str_48E7B4");
set_cmt(0x48E7B4, "\"DiabloCD\"", 0);
apply_type (0x48E7B4, "extern char str_48E7B4[9];", TINFO_DEFINITE);
cleanup("str_48E7C0");set_name(0x48E7C0, "str_48E7C0");
set_cmt(0x48E7C0, "\"Archives\"", 0);
apply_type (0x48E7C0, "extern char str_48E7C0[9];", TINFO_DEFINITE);
cleanup("str_48E7CC");set_name(0x48E7CC, "str_48E7CC");
set_cmt(0x48E7CC, "\"SFileSetBasePath\"", 0);
apply_type (0x48E7CC, "extern char str_48E7CC[17];", TINFO_DEFINITE);
cleanup("str_48E7E0");set_name(0x48E7E0, "str_48E7E0");
set_cmt(0x48E7E0, "\"Can't get program path\"", 0);
apply_type (0x48E7E0, "extern char str_48E7E0[23];", TINFO_DEFINITE);
cleanup("str_48E7F8");set_name(0x48E7F8, "str_48E7F8");
set_cmt(0x48E7F8, "\"version %d.%d.%d.%d\"", 0);
apply_type (0x48E7F8, "extern char str_48E7F8[20];", TINFO_DEFINITE);
cleanup("str_48E80C");set_name(0x48E80C, "str_48E80C");
set_cmt(0x48E80C, "`\`", 0);
apply_type (0x48E80C, "extern char str_48E80C[2];", TINFO_DEFINITE);
cleanup("str_4B31B0");set_name(0x4B31B0, "str_4B31B0");
set_cmt(0x4B31B0, "\"Down to hell\"", 0);
apply_type (0x4B31B0, "extern char str_4B31B0[13];", TINFO_DEFINITE);
cleanup("str_4B31C0");set_name(0x4B31C0, "str_4B31C0");
set_cmt(0x4B31C0, "\"Down to caves\"", 0);
apply_type (0x4B31C0, "extern char str_4B31C0[14];", TINFO_DEFINITE);
cleanup("str_4B31D0");set_name(0x4B31D0, "str_4B31D0");
set_cmt(0x4B31D0, "\"Down to catacombs\"", 0);
apply_type (0x4B31D0, "extern char str_4B31D0[18];", TINFO_DEFINITE);
cleanup("str_4B31E4");set_name(0x4B31E4, "str_4B31E4");
set_cmt(0x4B31E4, "\"Down to dungeon\"", 0);
apply_type (0x4B31E4, "extern char str_4B31E4[16];", TINFO_DEFINITE);
cleanup("str_4B31F4");set_name(0x4B31F4, "str_4B31F4");
set_cmt(0x4B31F4, "\"Down to level %i\"", 0);
apply_type (0x4B31F4, "extern char str_4B31F4[17];", TINFO_DEFINITE);
cleanup("str_4B3208");set_name(0x4B3208, "str_4B3208");
set_cmt(0x4B3208, "\"Up to town\"", 0);
apply_type (0x4B3208, "extern char str_4B3208[11];", TINFO_DEFINITE);
cleanup("str_4B3214");set_name(0x4B3214, "str_4B3214");
set_cmt(0x4B3214, "\"Up to level %i\"", 0);
apply_type (0x4B3214, "extern char str_4B3214[15];", TINFO_DEFINITE);
cleanup("str_4B3224");set_name(0x4B3224, "str_4B3224");
set_cmt(0x4B3224, "\"Down to Diablo\"", 0);
apply_type (0x4B3224, "extern char str_4B3224[15];", TINFO_DEFINITE);
cleanup("str_4B3234");set_name(0x4B3234, "str_4B3234");
set_cmt(0x4B3234, "\"Back to Level %i\"", 0);
apply_type (0x4B3234, "extern char str_4B3234[17];", TINFO_DEFINITE);
cleanup("str_4B3248");set_name(0x4B3248, "str_4B3248");
set_cmt(0x4B3248, "\"Unknown trigger msg\"", 0);
apply_type (0x4B3248, "extern char str_4B3248[20];", TINFO_DEFINITE);
cleanup("network_thread");set_name(0x49F204, "network_thread");
set_cmt(0x49F204, "network_thread is a handle to the network thread.", 0);
apply_type (0x49F204, "extern HANDLE network_thread;", TINFO_DEFINITE);
cleanup("str_49F208");set_name(0x49F208, "str_49F208");
set_cmt(0x49F208, "\"%s:\n%s\"", 0);
apply_type (0x49F208, "extern char str_49F208[7];", TINFO_DEFINITE);
cleanup("str_49F210");set_name(0x49F210, "str_49F210");
set_cmt(0x49F210, "\"SNetSendTurn\"", 0);
apply_type (0x49F210, "extern char str_49F210[13];", TINFO_DEFINITE);
cleanup("str_49F220");set_name(0x49F220, "str_49F220");
set_cmt(0x49F220, "\"SNetGetTurnsInTransit\"", 0);
apply_type (0x49F220, "extern char str_49F220[22];", TINFO_DEFINITE);
cleanup("str_49F238");set_name(0x49F238, "str_49F238");
set_cmt(0x49F238, "\"SNetReceiveTurns\"", 0);
apply_type (0x49F238, "extern char str_49F238[17];", TINFO_DEFINITE);
cleanup("str_49F24C");set_name(0x49F24C, "str_49F24C");
set_cmt(0x49F24C, "\"nthread2:\n%s\"", 0);
apply_type (0x49F24C, "extern char str_49F24C[13];", TINFO_DEFINITE);
cleanup("str_49F25C");set_name(0x49F25C, "str_49F25C");
set_cmt(0x49F25C, "\"SNetGetProviderCaps:\n%s\"", 0);
apply_type (0x49F25C, "extern char str_49F25C[24];", TINFO_DEFINITE);
cleanup("str_49F274");set_name(0x49F274, "str_49F274");
set_cmt(0x49F274, "\"nthread3:\n(%s)\"", 0);
apply_type (0x49F274, "extern char str_49F274[15];", TINFO_DEFINITE);
cleanup("music_enabled");set_name(0x4A22D4, "music_enabled");
set_cmt(0x4A22D4, "music_enabled specifies whether background music is enabled.", 0);
apply_type (0x4A22D4, "extern bool8_t music_enabled;", TINFO_DEFINITE);
cleanup("sound_enabled");set_name(0x4A22D5, "sound_enabled");
set_cmt(0x4A22D5, "sound_enabled specifies whether sound effects are enabled.", 0);
apply_type (0x4A22D5, "extern bool8_t sound_enabled;", TINFO_DEFINITE);
cleanup("flag_ds_noduplicates");set_name(0x4A22D6, "flag_ds_noduplicates");
set_cmt(0x4A22D6, "flag_ds_noduplicates specifies that no duplicate audio channel should be\nused.", 0);
apply_type (0x4A22D6, "extern bool8_t flag_ds_noduplicates;", TINFO_DEFINITE);
cleanup("music_track_id");set_name(0x4A22D8, "music_track_id");
set_cmt(0x4A22D8, "music_track_id specifies the active background music track id.", 0);
apply_type (0x4A22D8, "extern track_id music_track_id;", TINFO_DEFINITE);
cleanup("track_names");set_name(0x4A22DC, "track_names");
set_cmt(0x4A22DC, "track_names maps from track ID to track name.", 0);
apply_type (0x4A22DC, "extern char *track_names[6];", TINFO_DEFINITE);
cleanup("track_unused");set_name(0x4A22F4, "track_unused");
set_cmt(0x4A22F4, "track_unused is unused.", 0);
apply_type (0x4A22F4, "extern int8_t track_unused[8];", TINFO_DEFINITE);
cleanup("str_4A22FC");set_name(0x4A22FC, "str_4A22FC");
set_cmt(0x4A22FC, "`Music\Dintro.wav`", 0);
apply_type (0x4A22FC, "extern char str_4A22FC[17];", TINFO_DEFINITE);
cleanup("str_4A2310");set_name(0x4A2310, "str_4A2310");
set_cmt(0x4A2310, "`Music\DLvlD.wav`", 0);
apply_type (0x4A2310, "extern char str_4A2310[16];", TINFO_DEFINITE);
cleanup("str_4A2320");set_name(0x4A2320, "str_4A2320");
set_cmt(0x4A2320, "`Music\DLvlC.wav`", 0);
apply_type (0x4A2320, "extern char str_4A2320[16];", TINFO_DEFINITE);
cleanup("str_4A2330");set_name(0x4A2330, "str_4A2330");
set_cmt(0x4A2330, "`Music\DLvlB.wav`", 0);
apply_type (0x4A2330, "extern char str_4A2330[16];", TINFO_DEFINITE);
cleanup("str_4A2340");set_name(0x4A2340, "str_4A2340");
set_cmt(0x4A2340, "`Music\DLvlA.wav`", 0);
apply_type (0x4A2340, "extern char str_4A2340[16];", TINFO_DEFINITE);
cleanup("str_4A2350");set_name(0x4A2350, "str_4A2350");
set_cmt(0x4A2350, "`Music\DTowne.wav`", 0);
apply_type (0x4A2350, "extern char str_4A2350[17];", TINFO_DEFINITE);
cleanup("str_4A2364");set_name(0x4A2364, "str_4A2364");
set_cmt(0x4A2364, "`C:\Src\Diablo\Source\SOUND.CPP`", 0);
apply_type (0x4A2364, "extern char str_4A2364[31];", TINFO_DEFINITE);
cleanup("str_4A2384");set_name(0x4A2384, "str_4A2384");
set_cmt(0x4A2384, "\"Invalid sound format on file %s\"", 0);
apply_type (0x4A2384, "extern char str_4A2384[32];", TINFO_DEFINITE);
cleanup("str_4A23A4");set_name(0x4A23A4, "str_4A23A4");
set_cmt(0x4A23A4, "\"DirectSoundCreate\"", 0);
apply_type (0x4A23A4, "extern char str_4A23A4[18];", TINFO_DEFINITE);
cleanup("str_4A23B8");set_name(0x4A23B8, "str_4A23B8");
set_cmt(0x4A23B8, "\"dsound.dll\"", 0);
apply_type (0x4A23B8, "extern char str_4A23B8[11];", TINFO_DEFINITE);
cleanup("str_4A1E08");set_name(0x4A1E08, "str_4A1E08");
set_cmt(0x4A1E08, "\"wt\"", 0);
apply_type (0x4A1E08, "extern char str_4A1E08[3];", TINFO_DEFINITE);
cleanup("str_4A1E0C");set_name(0x4A1E0C, "str_4A1E0C");
set_cmt(0x4A1E0C, "`\Diablo1RestrictedTest.foo`", 0);
apply_type (0x4A1E0C, "extern char str_4A1E0C[27];", TINFO_DEFINITE);
cleanup("str_4A1E28");set_name(0x4A1E28, "str_4A1E28");
set_cmt(0x4A1E28, "\"Diablo1ReadOnlyTest.foo\"", 0);
apply_type (0x4A1E28, "extern char str_4A1E28[24];", TINFO_DEFINITE);
cleanup("monster_modes");set_name(0x4A1EC0, "monster_modes");
set_cmt(0x4A1EC0, "monster_modes maps from monster mode to monster mode name.", 0);
apply_type (0x4A1EC0, "extern char *monster_modes[18];", TINFO_DEFINITE);
cleanup("player_modes");set_name(0x4A1F08, "player_modes");
set_cmt(0x4A1F08, "player_modes maps from player mode to player mode name.", 0);
apply_type (0x4A1F08, "extern char *player_modes[12];", TINFO_DEFINITE);
cleanup("str_4A1F38");set_name(0x4A1F38, "str_4A1F38");
set_cmt(0x4A1F38, "\"quitting\"", 0);
apply_type (0x4A1F38, "extern char str_4A1F38[9];", TINFO_DEFINITE);
cleanup("str_4A1F44");set_name(0x4A1F44, "str_4A1F44");
set_cmt(0x4A1F44, "\"changing levels\"", 0);
apply_type (0x4A1F44, "extern char str_4A1F44[16];", TINFO_DEFINITE);
cleanup("str_4A1F54");set_name(0x4A1F54, "str_4A1F54");
set_cmt(0x4A1F54, "\"casting a spell\"", 0);
apply_type (0x4A1F54, "extern char str_4A1F54[16];", TINFO_DEFINITE);
cleanup("str_4A1F64");set_name(0x4A1F64, "str_4A1F64");
set_cmt(0x4A1F64, "\"attacking (melee)\"", 0);
apply_type (0x4A1F64, "extern char str_4A1F64[18];", TINFO_DEFINITE);
cleanup("str_4A1F78");set_name(0x4A1F78, "str_4A1F78");
set_cmt(0x4A1F78, "\"talking\"", 0);
apply_type (0x4A1F78, "extern char str_4A1F78[8];", TINFO_DEFINITE);
cleanup("str_4A1F80");set_name(0x4A1F80, "str_4A1F80");
set_cmt(0x4A1F80, "\"healing\"", 0);
apply_type (0x4A1F80, "extern char str_4A1F80[8];", TINFO_DEFINITE);
cleanup("str_4A1F88");set_name(0x4A1F88, "str_4A1F88");
set_cmt(0x4A1F88, "\"stoned\"", 0);
apply_type (0x4A1F88, "extern char str_4A1F88[7];", TINFO_DEFINITE);
cleanup("str_4A1F90");set_name(0x4A1F90, "str_4A1F90");
set_cmt(0x4A1F90, "\"charging\"", 0);
apply_type (0x4A1F90, "extern char str_4A1F90[9];", TINFO_DEFINITE);
cleanup("str_4A1F9C");set_name(0x4A1F9C, "str_4A1F9C");
set_cmt(0x4A1F9C, "\"delaying\"", 0);
apply_type (0x4A1F9C, "extern char str_4A1F9C[9];", TINFO_DEFINITE);
cleanup("str_4A1FA8");set_name(0x4A1FA8, "str_4A1FA8");
set_cmt(0x4A1FA8, "\"attacking (special ranged)\"", 0);
apply_type (0x4A1FA8, "extern char str_4A1FA8[27];", TINFO_DEFINITE);
cleanup("str_4A1FC4");set_name(0x4A1FC4, "str_4A1FC4");
set_cmt(0x4A1FC4, "\"standing (special)\"", 0);
apply_type (0x4A1FC4, "extern char str_4A1FC4[19];", TINFO_DEFINITE);
cleanup("str_4A1FD8");set_name(0x4A1FD8, "str_4A1FD8");
set_cmt(0x4A1FD8, "\"attacking (ranged)\"", 0);
apply_type (0x4A1FD8, "extern char str_4A1FD8[19];", TINFO_DEFINITE);
cleanup("str_4A1FEC");set_name(0x4A1FEC, "str_4A1FEC");
set_cmt(0x4A1FEC, "\"fading out\"", 0);
apply_type (0x4A1FEC, "extern char str_4A1FEC[11];", TINFO_DEFINITE);
cleanup("str_4A1FF8");set_name(0x4A1FF8, "str_4A1FF8");
set_cmt(0x4A1FF8, "\"fading in\"", 0);
apply_type (0x4A1FF8, "extern char str_4A1FF8[10];", TINFO_DEFINITE);
cleanup("str_4A2004");set_name(0x4A2004, "str_4A2004");
set_cmt(0x4A2004, "\"attacking (special)\"", 0);
apply_type (0x4A2004, "extern char str_4A2004[20];", TINFO_DEFINITE);
cleanup("str_4A2018");set_name(0x4A2018, "str_4A2018");
set_cmt(0x4A2018, "\"dying\"", 0);
apply_type (0x4A2018, "extern char str_4A2018[6];", TINFO_DEFINITE);
cleanup("str_4A2020");set_name(0x4A2020, "str_4A2020");
set_cmt(0x4A2020, "\"getting hit\"", 0);
apply_type (0x4A2020, "extern char str_4A2020[12];", TINFO_DEFINITE);
cleanup("str_4A202C");set_name(0x4A202C, "str_4A202C");
set_cmt(0x4A202C, "\"attacking\"", 0);
apply_type (0x4A202C, "extern char str_4A202C[10];", TINFO_DEFINITE);
cleanup("str_4A2038");set_name(0x4A2038, "str_4A2038");
set_cmt(0x4A2038, "\"walking (3)\"", 0);
apply_type (0x4A2038, "extern char str_4A2038[12];", TINFO_DEFINITE);
cleanup("str_4A2044");set_name(0x4A2044, "str_4A2044");
set_cmt(0x4A2044, "\"walking (2)\"", 0);
apply_type (0x4A2044, "extern char str_4A2044[12];", TINFO_DEFINITE);
cleanup("str_4A2050");set_name(0x4A2050, "str_4A2050");
set_cmt(0x4A2050, "\"walking (1)\"", 0);
apply_type (0x4A2050, "extern char str_4A2050[12];", TINFO_DEFINITE);
cleanup("str_4A205C");set_name(0x4A205C, "str_4A205C");
set_cmt(0x4A205C, "\"standing\"", 0);
apply_type (0x4A205C, "extern char str_4A205C[9];", TINFO_DEFINITE);
cleanup("str_4A2068");set_name(0x4A2068, "str_4A2068");
set_cmt(0x4A2068, "`C:\Src\Diablo\Source\SCROLLRT.CPP`", 0);
apply_type (0x4A2068, "extern char str_4A2068[34];", TINFO_DEFINITE);
cleanup("str_48EA8C");set_name(0x48EA8C, "str_48EA8C");
set_cmt(0x48EA8C, "\"Ring of Engagement\"", 0);
apply_type (0x48EA8C, "extern char str_48EA8C[19];", TINFO_DEFINITE);
cleanup("str_48EAA0");set_name(0x48EAA0, "str_48EAA0");
set_cmt(0x48EAA0, "\"Constricting Ring\"", 0);
apply_type (0x48EAA0, "extern char str_48EAA0[18];", TINFO_DEFINITE);
cleanup("str_48EAB4");set_name(0x48EAB4, "str_48EAB4");
set_cmt(0x48EAB4, "\"The Bleeder\"", 0);
apply_type (0x48EAB4, "extern char str_48EAB4[12];", TINFO_DEFINITE);
cleanup("str_48EAC0");set_name(0x48EAC0, "str_48EAC0");
set_cmt(0x48EAC0, "\"Ring of Regha\"", 0);
apply_type (0x48EAC0, "extern char str_48EAC0[14];", TINFO_DEFINITE);
cleanup("str_48EAD0");set_name(0x48EAD0, "str_48EAD0");
set_cmt(0x48EAD0, "\"Bramble\"", 0);
apply_type (0x48EAD0, "extern char str_48EAD0[8];", TINFO_DEFINITE);
cleanup("str_48EAD8");set_name(0x48EAD8, "str_48EAD8");
set_cmt(0x48EAD8, "\"Stormshield\"", 0);
apply_type (0x48EAD8, "extern char str_48EAD8[12];", TINFO_DEFINITE);
cleanup("str_48EAE4");set_name(0x48EAE4, "str_48EAE4");
set_cmt(0x48EAE4, "\"Holy Defender\"", 0);
apply_type (0x48EAE4, "extern char str_48EAE4[14];", TINFO_DEFINITE);
cleanup("str_48EAF4");set_name(0x48EAF4, "str_48EAF4");
set_cmt(0x48EAF4, "\"Blackoak Shield\"", 0);
apply_type (0x48EAF4, "extern char str_48EAF4[16];", TINFO_DEFINITE);
cleanup("str_48EB04");set_name(0x48EB04, "str_48EB04");
set_cmt(0x48EB04, "\"Dragon's Breach\"", 0);
apply_type (0x48EB04, "extern char str_48EB04[16];", TINFO_DEFINITE);
cleanup("str_48EB14");set_name(0x48EB14, "str_48EB14");
set_cmt(0x48EB14, "\"Split Skull Shield\"", 0);
apply_type (0x48EB14, "extern char str_48EB14[19];", TINFO_DEFINITE);
cleanup("str_48EB28");set_name(0x48EB28, "str_48EB28");
set_cmt(0x48EB28, "\"The Deflector\"", 0);
apply_type (0x48EB28, "extern char str_48EB28[14];", TINFO_DEFINITE);
cleanup("str_48EB38");set_name(0x48EB38, "str_48EB38");
set_cmt(0x48EB38, "\"Demonspike Coat\"", 0);
apply_type (0x48EB38, "extern char str_48EB38[16];", TINFO_DEFINITE);
cleanup("str_48EB48");set_name(0x48EB48, "str_48EB48");
set_cmt(0x48EB48, "\"Naj's Light Plate\"", 0);
apply_type (0x48EB48, "extern char str_48EB48[18];", TINFO_DEFINITE);
cleanup("str_48EB5C");set_name(0x48EB5C, "str_48EB5C");
set_cmt(0x48EB5C, "\"Nightscape\"", 0);
apply_type (0x48EB5C, "extern char str_48EB5C[11];", TINFO_DEFINITE);
cleanup("str_48EB68");set_name(0x48EB68, "str_48EB68");
set_cmt(0x48EB68, "\"Scavenger Carapace\"", 0);
apply_type (0x48EB68, "extern char str_48EB68[19];", TINFO_DEFINITE);
cleanup("str_48EB7C");set_name(0x48EB7C, "str_48EB7C");
set_cmt(0x48EB7C, "\"Sparking Mail\"", 0);
apply_type (0x48EB7C, "extern char str_48EB7C[14];", TINFO_DEFINITE);
cleanup("str_48EB8C");set_name(0x48EB8C, "str_48EB8C");
set_cmt(0x48EB8C, "\"Wisdom's Wrap\"", 0);
apply_type (0x48EB8C, "extern char str_48EB8C[14];", TINFO_DEFINITE);
cleanup("str_48EB9C");set_name(0x48EB9C, "str_48EB9C");
set_cmt(0x48EB9C, "\"Leather of Aut\"", 0);
apply_type (0x48EB9C, "extern char str_48EB9C[15];", TINFO_DEFINITE);
cleanup("str_48EBAC");set_name(0x48EBAC, "str_48EBAC");
set_cmt(0x48EBAC, "\"The Rainbow Cloak\"", 0);
apply_type (0x48EBAC, "extern char str_48EBAC[18];", TINFO_DEFINITE);
cleanup("str_48EBC0");set_name(0x48EBC0, "str_48EBC0");
set_cmt(0x48EBC0, "\"The Gladiator's Bane\"", 0);
apply_type (0x48EBC0, "extern char str_48EBC0[21];", TINFO_DEFINITE);
cleanup("str_48EBD8");set_name(0x48EBD8, "str_48EBD8");
set_cmt(0x48EBD8, "\"Torn Flesh of Souls\"", 0);
apply_type (0x48EBD8, "extern char str_48EBD8[20];", TINFO_DEFINITE);
cleanup("str_48EBEC");set_name(0x48EBEC, "str_48EBEC");
set_cmt(0x48EBEC, "\"Royal Circlet\"", 0);
apply_type (0x48EBEC, "extern char str_48EBEC[14];", TINFO_DEFINITE);
cleanup("str_48EBFC");set_name(0x48EBFC, "str_48EBFC");
set_cmt(0x48EBFC, "\"Gotterdamerung\"", 0);
apply_type (0x48EBFC, "extern char str_48EBFC[15];", TINFO_DEFINITE);
cleanup("str_48EC0C");set_name(0x48EC0C, "str_48EC0C");
set_cmt(0x48EC0C, "\"Fool's Crest\"", 0);
apply_type (0x48EC0C, "extern char str_48EC0C[13];", TINFO_DEFINITE);
cleanup("str_48EC1C");set_name(0x48EC1C, "str_48EC1C");
set_cmt(0x48EC1C, "\"OverLord's Helm\"", 0);
apply_type (0x48EC1C, "extern char str_48EC1C[16];", TINFO_DEFINITE);
cleanup("str_48EC2C");set_name(0x48EC2C, "str_48EC2C");
set_cmt(0x48EC2C, "\"Thinking Cap\"", 0);
apply_type (0x48EC2C, "extern char str_48EC2C[13];", TINFO_DEFINITE);
cleanup("str_48EC3C");set_name(0x48EC3C, "str_48EC3C");
set_cmt(0x48EC3C, "\"Helm of Sprits\"\nNOTE: \"Sprits\" is an assumed typo of \"Spirits\" [1].\n   [1]: http://diablo.wikia.com/wiki/Helm_of_Spirits", 0);
apply_type (0x48EC3C, "extern char str_48EC3C[15];", TINFO_DEFINITE);
cleanup("str_48EC4C");set_name(0x48EC4C, "str_48EC4C");
set_cmt(0x48EC4C, "\"Rod of Onan\"", 0);
apply_type (0x48EC4C, "extern char str_48EC4C[12];", TINFO_DEFINITE);
cleanup("str_48EC58");set_name(0x48EC58, "str_48EC58");
set_cmt(0x48EC58, "\"Mindcry\"", 0);
apply_type (0x48EC58, "extern char str_48EC58[8];", TINFO_DEFINITE);
cleanup("str_48EC60");set_name(0x48EC60, "str_48EC60");
set_cmt(0x48EC60, "\"Naj's Puzzler\"", 0);
apply_type (0x48EC60, "extern char str_48EC60[14];", TINFO_DEFINITE);
cleanup("str_48EC70");set_name(0x48EC70, "str_48EC70");
set_cmt(0x48EC70, "\"The Protector\"", 0);
apply_type (0x48EC70, "extern char str_48EC70[14];", TINFO_DEFINITE);
cleanup("str_48EC80");set_name(0x48EC80, "str_48EC80");
set_cmt(0x48EC80, "\"Thundercall\"", 0);
apply_type (0x48EC80, "extern char str_48EC80[12];", TINFO_DEFINITE);
cleanup("str_48EC8C");set_name(0x48EC8C, "str_48EC8C");
set_cmt(0x48EC8C, "\"Gleamsong\"", 0);
apply_type (0x48EC8C, "extern char str_48EC8C[10];", TINFO_DEFINITE);
cleanup("str_48EC98");set_name(0x48EC98, "str_48EC98");
set_cmt(0x48EC98, "\"Storm Spire\"", 0);
apply_type (0x48EC98, "extern char str_48EC98[12];", TINFO_DEFINITE);
cleanup("str_48ECA4");set_name(0x48ECA4, "str_48ECA4");
set_cmt(0x48ECA4, "\"Immolator\"", 0);
apply_type (0x48ECA4, "extern char str_48ECA4[10];", TINFO_DEFINITE);
cleanup("str_48ECB0");set_name(0x48ECB0, "str_48ECB0");
set_cmt(0x48ECB0, "\"Staff of Shadows\"", 0);
apply_type (0x48ECB0, "extern char str_48ECB0[17];", TINFO_DEFINITE);
cleanup("str_48ECC4");set_name(0x48ECC4, "str_48ECC4");
set_cmt(0x48ECC4, "\"Dreamflange\"", 0);
apply_type (0x48ECC4, "extern char str_48ECC4[12];", TINFO_DEFINITE);
cleanup("str_48ECD0");set_name(0x48ECD0, "str_48ECD0");
set_cmt(0x48ECD0, "\"Schaefer's Hammer\"", 0);
apply_type (0x48ECD0, "extern char str_48ECD0[18];", TINFO_DEFINITE);
cleanup("str_48ECE4");set_name(0x48ECE4, "str_48ECE4");
set_cmt(0x48ECE4, "\"The Cranium Basher\"", 0);
apply_type (0x48ECE4, "extern char str_48ECE4[19];", TINFO_DEFINITE);
cleanup("str_48ECF8");set_name(0x48ECF8, "str_48ECF8");
set_cmt(0x48ECF8, "\"Gnarled Root\"", 0);
apply_type (0x48ECF8, "extern char str_48ECF8[13];", TINFO_DEFINITE);
cleanup("str_48ED08");set_name(0x48ED08, "str_48ED08");
set_cmt(0x48ED08, "\"Baranar's Star\"", 0);
apply_type (0x48ED08, "extern char str_48ED08[15];", TINFO_DEFINITE);
cleanup("str_48ED18");set_name(0x48ED18, "str_48ED18");
set_cmt(0x48ED18, "\"The Celestial Star\"", 0);
apply_type (0x48ED18, "extern char str_48ED18[19];", TINFO_DEFINITE);
cleanup("str_48ED2C");set_name(0x48ED2C, "str_48ED2C");
set_cmt(0x48ED2C, "\"Civerb's Cudgel\"", 0);
apply_type (0x48ED2C, "extern char str_48ED2C[16];", TINFO_DEFINITE);
cleanup("str_48ED3C");set_name(0x48ED3C, "str_48ED3C");
set_cmt(0x48ED3C, "\"Hammer of Jholm\"", 0);
apply_type (0x48ED3C, "extern char str_48ED3C[16];", TINFO_DEFINITE);
cleanup("str_48ED4C");set_name(0x48ED4C, "str_48ED4C");
set_cmt(0x48ED4C, "\"Crackrust\"", 0);
apply_type (0x48ED4C, "extern char str_48ED4C[10];", TINFO_DEFINITE);
cleanup("str_48ED58");set_name(0x48ED58, "str_48ED58");
set_cmt(0x48ED58, "\"Messerschmidt's Reaver\"", 0);
apply_type (0x48ED58, "extern char str_48ED58[23];", TINFO_DEFINITE);
cleanup("str_48ED70");set_name(0x48ED70, "str_48ED70");
set_cmt(0x48ED70, "\"Hellslayer\"", 0);
apply_type (0x48ED70, "extern char str_48ED70[11];", TINFO_DEFINITE);
cleanup("str_48ED7C");set_name(0x48ED7C, "str_48ED7C");
set_cmt(0x48ED7C, "\"Aguinara's Hatchet\"", 0);
apply_type (0x48ED7C, "extern char str_48ED7C[19];", TINFO_DEFINITE);
cleanup("str_48ED90");set_name(0x48ED90, "str_48ED90");
set_cmt(0x48ED90, "\"Stonecleaver\"", 0);
apply_type (0x48ED90, "extern char str_48ED90[13];", TINFO_DEFINITE);
cleanup("str_48EDA0");set_name(0x48EDA0, "str_48EDA0");
set_cmt(0x48EDA0, "\"Wicked Axe\"", 0);
apply_type (0x48EDA0, "extern char str_48EDA0[11];", TINFO_DEFINITE);
cleanup("str_48EDAC");set_name(0x48EDAC, "str_48EDAC");
set_cmt(0x48EDAC, "\"The Celestial Axe\"", 0);
apply_type (0x48EDAC, "extern char str_48EDAC[18];", TINFO_DEFINITE);
cleanup("str_48EDC0");set_name(0x48EDC0, "str_48EDC0");
set_cmt(0x48EDC0, "\"BloodSlayer\"", 0);
apply_type (0x48EDC0, "extern char str_48EDC0[12];", TINFO_DEFINITE);
cleanup("str_48EDCC");set_name(0x48EDCC, "str_48EDCC");
set_cmt(0x48EDCC, "\"Sharp Beak\"", 0);
apply_type (0x48EDCC, "extern char str_48EDCC[11];", TINFO_DEFINITE);
cleanup("str_48EDD8");set_name(0x48EDD8, "str_48EDD8");
set_cmt(0x48EDD8, "\"The Mangler\"", 0);
apply_type (0x48EDD8, "extern char str_48EDD8[12];", TINFO_DEFINITE);
cleanup("str_48EDE4");set_name(0x48EDE4, "str_48EDE4");
set_cmt(0x48EDE4, "\"The Grandfather\"", 0);
apply_type (0x48EDE4, "extern char str_48EDE4[16];", TINFO_DEFINITE);
cleanup("str_48EDF4");set_name(0x48EDF4, "str_48EDF4");
set_cmt(0x48EDF4, "\"The Grizzly\"", 0);
apply_type (0x48EDF4, "extern char str_48EDF4[12];", TINFO_DEFINITE);
cleanup("str_48EE00");set_name(0x48EE00, "str_48EE00");
set_cmt(0x48EE00, "\"Doombringer\"", 0);
apply_type (0x48EE00, "extern char str_48EE00[12];", TINFO_DEFINITE);
cleanup("str_48EE0C");set_name(0x48EE0C, "str_48EE0C");
set_cmt(0x48EE0C, "\"Inferno\"", 0);
apply_type (0x48EE0C, "extern char str_48EE0C[8];", TINFO_DEFINITE);
cleanup("str_48EE14");set_name(0x48EE14, "str_48EE14");
set_cmt(0x48EE14, "\"The Falcon's Talon\"", 0);
apply_type (0x48EE14, "extern char str_48EE14[19];", TINFO_DEFINITE);
cleanup("str_48EE28");set_name(0x48EE28, "str_48EE28");
set_cmt(0x48EE28, "\"Lightsabre\"", 0);
apply_type (0x48EE28, "extern char str_48EE28[11];", TINFO_DEFINITE);
cleanup("str_48EE34");set_name(0x48EE34, "str_48EE34");
set_cmt(0x48EE34, "\"Wizardspike\"", 0);
apply_type (0x48EE34, "extern char str_48EE34[12];", TINFO_DEFINITE);
cleanup("str_48EE40");set_name(0x48EE40, "str_48EE40");
set_cmt(0x48EE40, "\"Shadowhawk\"", 0);
apply_type (0x48EE40, "extern char str_48EE40[11];", TINFO_DEFINITE);
cleanup("str_48EE4C");set_name(0x48EE4C, "str_48EE4C");
set_cmt(0x48EE4C, "\"The Bonesaw\"", 0);
apply_type (0x48EE4C, "extern char str_48EE4C[12];", TINFO_DEFINITE);
cleanup("str_48EE58");set_name(0x48EE58, "str_48EE58");
set_cmt(0x48EE58, "\"The Executioner's Blade\"", 0);
apply_type (0x48EE58, "extern char str_48EE58[24];", TINFO_DEFINITE);
cleanup("str_48EE70");set_name(0x48EE70, "str_48EE70");
set_cmt(0x48EE70, "\"Ice Shank\"", 0);
apply_type (0x48EE70, "extern char str_48EE70[10];", TINFO_DEFINITE);
cleanup("str_48EE7C");set_name(0x48EE7C, "str_48EE7C");
set_cmt(0x48EE7C, "\"Gibbous Moon\"", 0);
apply_type (0x48EE7C, "extern char str_48EE7C[13];", TINFO_DEFINITE);
cleanup("str_48EE8C");set_name(0x48EE8C, "str_48EE8C");
set_cmt(0x48EE8C, "\"Black Razor\"", 0);
apply_type (0x48EE8C, "extern char str_48EE8C[12];", TINFO_DEFINITE);
cleanup("str_48EE98");set_name(0x48EE98, "str_48EE98");
set_cmt(0x48EE98, "\"Gryphons Claw\"", 0);
apply_type (0x48EE98, "extern char str_48EE98[14];", TINFO_DEFINITE);
cleanup("str_48EEA8");set_name(0x48EEA8, "str_48EEA8");
set_cmt(0x48EEA8, "\"The Defender\"", 0);
apply_type (0x48EEA8, "extern char str_48EEA8[13];", TINFO_DEFINITE);
cleanup("str_48EEB8");set_name(0x48EEB8, "str_48EEB8");
set_cmt(0x48EEB8, "\"Gonnagal's Dirk\"", 0);
apply_type (0x48EEB8, "extern char str_48EEB8[16];", TINFO_DEFINITE);
cleanup("str_48EEC8");set_name(0x48EEC8, "str_48EEC8");
set_cmt(0x48EEC8, "\"Eaglehorn\"", 0);
apply_type (0x48EEC8, "extern char str_48EEC8[10];", TINFO_DEFINITE);
cleanup("str_48EED4");set_name(0x48EED4, "str_48EED4");
set_cmt(0x48EED4, "\"Windforce\"", 0);
apply_type (0x48EED4, "extern char str_48EED4[10];", TINFO_DEFINITE);
cleanup("str_48EEE0");set_name(0x48EEE0, "str_48EEE0");
set_cmt(0x48EEE0, "\"Fleshstinger\"", 0);
apply_type (0x48EEE0, "extern char str_48EEE0[13];", TINFO_DEFINITE);
cleanup("str_48EEF0");set_name(0x48EEF0, "str_48EEF0");
set_cmt(0x48EEF0, "\"Flamedart\"", 0);
apply_type (0x48EEF0, "extern char str_48EEF0[10];", TINFO_DEFINITE);
cleanup("str_48EEFC");set_name(0x48EEFC, "str_48EEFC");
set_cmt(0x48EEFC, "\"The Blackoak Bow\"", 0);
apply_type (0x48EEFC, "extern char str_48EEFC[17];", TINFO_DEFINITE);
cleanup("str_48EF10");set_name(0x48EF10, "str_48EF10");
set_cmt(0x48EF10, "\"Bow of the Dead\"", 0);
apply_type (0x48EF10, "extern char str_48EF10[16];", TINFO_DEFINITE);
cleanup("str_48EF20");set_name(0x48EF20, "str_48EF20");
set_cmt(0x48EF20, "\"Deadly Hunter\"", 0);
apply_type (0x48EF20, "extern char str_48EF20[14];", TINFO_DEFINITE);
cleanup("str_48EF30");set_name(0x48EF30, "str_48EF30");
set_cmt(0x48EF30, "\"The Celestial Bow\"", 0);
apply_type (0x48EF30, "extern char str_48EF30[18];", TINFO_DEFINITE);
cleanup("str_48EF44");set_name(0x48EF44, "str_48EF44");
set_cmt(0x48EF44, "\"The Needler\"", 0);
apply_type (0x48EF44, "extern char str_48EF44[12];", TINFO_DEFINITE);
cleanup("str_48EF50");set_name(0x48EF50, "str_48EF50");
set_cmt(0x48EF50, "\"The Rift Bow\"", 0);
apply_type (0x48EF50, "extern char str_48EF50[13];", TINFO_DEFINITE);
cleanup("str_48EF60");set_name(0x48EF60, "str_48EF60");
set_cmt(0x48EF60, "\"The Butcher's Cleaver\"", 0);
apply_type (0x48EF60, "extern char str_48EF60[22];", TINFO_DEFINITE);
cleanup("str_48EF78");set_name(0x48EF78, "str_48EF78");
set_cmt(0x48EF78, "\"blocking\"", 0);
apply_type (0x48EF78, "extern char str_48EF78[9];", TINFO_DEFINITE);
cleanup("str_48EF84");set_name(0x48EF84, "str_48EF84");
set_cmt(0x48EF84, "\"harmony\"", 0);
apply_type (0x48EF84, "extern char str_48EF84[8];", TINFO_DEFINITE);
cleanup("str_48EF8C");set_name(0x48EF8C, "str_48EF8C");
set_cmt(0x48EF8C, "\"stability\"", 0);
apply_type (0x48EF8C, "extern char str_48EF8C[10];", TINFO_DEFINITE);
cleanup("str_48EF98");set_name(0x48EF98, "str_48EF98");
set_cmt(0x48EF98, "\"balance\"", 0);
apply_type (0x48EF98, "extern char str_48EF98[8];", TINFO_DEFINITE);
cleanup("str_48EFA0");set_name(0x48EFA0, "str_48EFA0");
set_cmt(0x48EFA0, "\"haste\"", 0);
apply_type (0x48EFA0, "extern char str_48EFA0[6];", TINFO_DEFINITE);
cleanup("str_48EFA8");set_name(0x48EFA8, "str_48EFA8");
set_cmt(0x48EFA8, "\"speed\"", 0);
apply_type (0x48EFA8, "extern char str_48EFA8[6];", TINFO_DEFINITE);
cleanup("str_48EFB0");set_name(0x48EFB0, "str_48EFB0");
set_cmt(0x48EFB0, "\"swiftness\"", 0);
apply_type (0x48EFB0, "extern char str_48EFB0[10];", TINFO_DEFINITE);
cleanup("str_48EFBC");set_name(0x48EFBC, "str_48EFBC");
set_cmt(0x48EFBC, "\"readiness\"", 0);
apply_type (0x48EFBC, "extern char str_48EFBC[10];", TINFO_DEFINITE);
cleanup("str_48EFC8");set_name(0x48EFC8, "str_48EFC8");
set_cmt(0x48EFC8, "\"bashing\"", 0);
apply_type (0x48EFC8, "extern char str_48EFC8[8];", TINFO_DEFINITE);
cleanup("str_48EFD0");set_name(0x48EFD0, "str_48EFD0");
set_cmt(0x48EFD0, "\"puncturing\"", 0);
apply_type (0x48EFD0, "extern char str_48EFD0[11];", TINFO_DEFINITE);
cleanup("str_48EFDC");set_name(0x48EFDC, "str_48EFDC");
set_cmt(0x48EFDC, "\"piercing\"", 0);
apply_type (0x48EFDC, "extern char str_48EFDC[9];", TINFO_DEFINITE);
cleanup("str_48EFE8");set_name(0x48EFE8, "str_48EFE8");
set_cmt(0x48EFE8, "\"blood\"", 0);
apply_type (0x48EFE8, "extern char str_48EFE8[6];", TINFO_DEFINITE);
cleanup("str_48EFF0");set_name(0x48EFF0, "str_48EFF0");
set_cmt(0x48EFF0, "\"the leech\"", 0);
apply_type (0x48EFF0, "extern char str_48EFF0[10];", TINFO_DEFINITE);
cleanup("str_48EFFC");set_name(0x48EFFC, "str_48EFFC");
set_cmt(0x48EFFC, "\"vampires\"", 0);
apply_type (0x48EFFC, "extern char str_48EFFC[9];", TINFO_DEFINITE);
cleanup("str_48F008");set_name(0x48F008, "str_48F008");
set_cmt(0x48F008, "\"the bat\"", 0);
apply_type (0x48F008, "extern char str_48F008[8];", TINFO_DEFINITE);
cleanup("str_48F010");set_name(0x48F010, "str_48F010");
set_cmt(0x48F010, "\"the bear\"", 0);
apply_type (0x48F010, "extern char str_48F010[9];", TINFO_DEFINITE);
cleanup("str_48F01C");set_name(0x48F01C, "str_48F01C");
set_cmt(0x48F01C, "\"thieves\"", 0);
apply_type (0x48F01C, "extern char str_48F01C[8];", TINFO_DEFINITE);
cleanup("str_48F024");set_name(0x48F024, "str_48F024");
set_cmt(0x48F024, "\"corruption\"", 0);
apply_type (0x48F024, "extern char str_48F024[11];", TINFO_DEFINITE);
cleanup("str_48F030");set_name(0x48F030, "str_48F030");
set_cmt(0x48F030, "\"thorns\"", 0);
apply_type (0x48F030, "extern char str_48F030[7];", TINFO_DEFINITE);
cleanup("str_48F038");set_name(0x48F038, "str_48F038");
set_cmt(0x48F038, "\"plenty\"", 0);
apply_type (0x48F038, "extern char str_48F038[7];", TINFO_DEFINITE);
cleanup("str_48F040");set_name(0x48F040, "str_48F040");
set_cmt(0x48F040, "\"many\"", 0);
apply_type (0x48F040, "extern char str_48F040[5];", TINFO_DEFINITE);
cleanup("str_48F048");set_name(0x48F048, "str_48F048");
set_cmt(0x48F048, "\"thunder\"", 0);
apply_type (0x48F048, "extern char str_48F048[8];", TINFO_DEFINITE);
cleanup("str_48F050");set_name(0x48F050, "str_48F050");
set_cmt(0x48F050, "\"lightning\"", 0);
apply_type (0x48F050, "extern char str_48F050[10];", TINFO_DEFINITE);
cleanup("str_48F05C");set_name(0x48F05C, "str_48F05C");
set_cmt(0x48F05C, "\"shock\"", 0);
apply_type (0x48F05C, "extern char str_48F05C[6];", TINFO_DEFINITE);
cleanup("str_48F064");set_name(0x48F064, "str_48F064");
set_cmt(0x48F064, "\"burning\"", 0);
apply_type (0x48F064, "extern char str_48F064[8];", TINFO_DEFINITE);
cleanup("str_48F06C");set_name(0x48F06C, "str_48F06C");
set_cmt(0x48F06C, "\"fire\"", 0);
apply_type (0x48F06C, "extern char str_48F06C[5];", TINFO_DEFINITE);
cleanup("str_48F074");set_name(0x48F074, "str_48F074");
set_cmt(0x48F074, "\"flame\"", 0);
apply_type (0x48F074, "extern char str_48F074[6];", TINFO_DEFINITE);
cleanup("str_48F07C");set_name(0x48F07C, "str_48F07C");
set_cmt(0x48F07C, "\"radiance\"", 0);
apply_type (0x48F07C, "extern char str_48F07C[9];", TINFO_DEFINITE);
cleanup("str_48F088");set_name(0x48F088, "str_48F088");
set_cmt(0x48F088, "\"light\"", 0);
apply_type (0x48F088, "extern char str_48F088[6];", TINFO_DEFINITE);
cleanup("str_48F090");set_name(0x48F090, "str_48F090");
set_cmt(0x48F090, "\"the night\"", 0);
apply_type (0x48F090, "extern char str_48F090[10];", TINFO_DEFINITE);
cleanup("str_48F09C");set_name(0x48F09C, "str_48F09C");
set_cmt(0x48F09C, "\"the dark\"", 0);
apply_type (0x48F09C, "extern char str_48F09C[9];", TINFO_DEFINITE);
cleanup("str_48F0A8");set_name(0x48F0A8, "str_48F0A8");
set_cmt(0x48F0A8, "\"the ages\"", 0);
apply_type (0x48F0A8, "extern char str_48F0A8[9];", TINFO_DEFINITE);
cleanup("str_48F0B4");set_name(0x48F0B4, "str_48F0B4");
set_cmt(0x48F0B4, "\"structure\"", 0);
apply_type (0x48F0B4, "extern char str_48F0B4[10];", TINFO_DEFINITE);
cleanup("str_48F0C0");set_name(0x48F0C0, "str_48F0C0");
set_cmt(0x48F0C0, "\"craftsmanship\"", 0);
apply_type (0x48F0C0, "extern char str_48F0C0[14];", TINFO_DEFINITE);
cleanup("str_48F0D0");set_name(0x48F0D0, "str_48F0D0");
set_cmt(0x48F0D0, "\"sturdiness\"", 0);
apply_type (0x48F0D0, "extern char str_48F0D0[11];", TINFO_DEFINITE);
cleanup("str_48F0DC");set_name(0x48F0DC, "str_48F0DC");
set_cmt(0x48F0DC, "\"brittleness\"", 0);
apply_type (0x48F0DC, "extern char str_48F0DC[12];", TINFO_DEFINITE);
cleanup("str_48F0E8");set_name(0x48F0E8, "str_48F0E8");
set_cmt(0x48F0E8, "\"fragility\"", 0);
apply_type (0x48F0E8, "extern char str_48F0E8[10];", TINFO_DEFINITE);
cleanup("str_48F0F4");set_name(0x48F0F4, "str_48F0F4");
set_cmt(0x48F0F4, "\"the whale\"", 0);
apply_type (0x48F0F4, "extern char str_48F0F4[10];", TINFO_DEFINITE);
cleanup("str_48F100");set_name(0x48F100, "str_48F100");
set_cmt(0x48F100, "\"the mammoth\"", 0);
apply_type (0x48F100, "extern char str_48F100[12];", TINFO_DEFINITE);
cleanup("str_48F10C");set_name(0x48F10C, "str_48F10C");
set_cmt(0x48F10C, "\"the lion\"", 0);
apply_type (0x48F10C, "extern char str_48F10C[9];", TINFO_DEFINITE);
cleanup("str_48F118");set_name(0x48F118, "str_48F118");
set_cmt(0x48F118, "\"the tiger\"", 0);
apply_type (0x48F118, "extern char str_48F118[10];", TINFO_DEFINITE);
cleanup("str_48F124");set_name(0x48F124, "str_48F124");
set_cmt(0x48F124, "\"the wolf\"", 0);
apply_type (0x48F124, "extern char str_48F124[9];", TINFO_DEFINITE);
cleanup("str_48F130");set_name(0x48F130, "str_48F130");
set_cmt(0x48F130, "\"the eagle\"", 0);
apply_type (0x48F130, "extern char str_48F130[10];", TINFO_DEFINITE);
cleanup("str_48F13C");set_name(0x48F13C, "str_48F13C");
set_cmt(0x48F13C, "\"the jaguar\"", 0);
apply_type (0x48F13C, "extern char str_48F13C[11];", TINFO_DEFINITE);
cleanup("str_48F148");set_name(0x48F148, "str_48F148");
set_cmt(0x48F148, "\"the fox\"", 0);
apply_type (0x48F148, "extern char str_48F148[8];", TINFO_DEFINITE);
cleanup("str_48F150");set_name(0x48F150, "str_48F150");
set_cmt(0x48F150, "\"the jackal\"", 0);
apply_type (0x48F150, "extern char str_48F150[11];", TINFO_DEFINITE);
cleanup("str_48F15C");set_name(0x48F15C, "str_48F15C");
set_cmt(0x48F15C, "\"the vulture\"", 0);
apply_type (0x48F15C, "extern char str_48F15C[12];", TINFO_DEFINITE);
cleanup("str_48F168");set_name(0x48F168, "str_48F168");
set_cmt(0x48F168, "\"the zodiac\"", 0);
apply_type (0x48F168, "extern char str_48F168[11];", TINFO_DEFINITE);
cleanup("str_48F174");set_name(0x48F174, "str_48F174");
set_cmt(0x48F174, "\"the heavens\"", 0);
apply_type (0x48F174, "extern char str_48F174[12];", TINFO_DEFINITE);
cleanup("str_48F180");set_name(0x48F180, "str_48F180");
set_cmt(0x48F180, "\"the stars\"", 0);
apply_type (0x48F180, "extern char str_48F180[10];", TINFO_DEFINITE);
cleanup("str_48F18C");set_name(0x48F18C, "str_48F18C");
set_cmt(0x48F18C, "\"the moon\"", 0);
apply_type (0x48F18C, "extern char str_48F18C[9];", TINFO_DEFINITE);
cleanup("str_48F198");set_name(0x48F198, "str_48F198");
set_cmt(0x48F198, "\"the sky\"", 0);
apply_type (0x48F198, "extern char str_48F198[8];", TINFO_DEFINITE);
cleanup("str_48F1A0");set_name(0x48F1A0, "str_48F1A0");
set_cmt(0x48F1A0, "\"the pit\"", 0);
apply_type (0x48F1A0, "extern char str_48F1A0[8];", TINFO_DEFINITE);
cleanup("str_48F1A8");set_name(0x48F1A8, "str_48F1A8");
set_cmt(0x48F1A8, "\"trouble\"", 0);
apply_type (0x48F1A8, "extern char str_48F1A8[8];", TINFO_DEFINITE);
cleanup("str_48F1B0");set_name(0x48F1B0, "str_48F1B0");
set_cmt(0x48F1B0, "\"life\"", 0);
apply_type (0x48F1B0, "extern char str_48F1B0[5];", TINFO_DEFINITE);
cleanup("str_48F1B8");set_name(0x48F1B8, "str_48F1B8");
set_cmt(0x48F1B8, "\"vigor\"", 0);
apply_type (0x48F1B8, "extern char str_48F1B8[6];", TINFO_DEFINITE);
cleanup("str_48F1C0");set_name(0x48F1C0, "str_48F1C0");
set_cmt(0x48F1C0, "\"vim\"", 0);
apply_type (0x48F1C0, "extern char str_48F1C0[4];", TINFO_DEFINITE);
cleanup("str_48F1C4");set_name(0x48F1C4, "str_48F1C4");
set_cmt(0x48F1C4, "\"zest\"", 0);
apply_type (0x48F1C4, "extern char str_48F1C4[5];", TINFO_DEFINITE);
cleanup("str_48F1CC");set_name(0x48F1CC, "str_48F1CC");
set_cmt(0x48F1CC, "\"vitality\"", 0);
apply_type (0x48F1CC, "extern char str_48F1CC[9];", TINFO_DEFINITE);
cleanup("str_48F1D8");set_name(0x48F1D8, "str_48F1D8");
set_cmt(0x48F1D8, "\"disease\"", 0);
apply_type (0x48F1D8, "extern char str_48F1D8[8];", TINFO_DEFINITE);
cleanup("str_48F1E0");set_name(0x48F1E0, "str_48F1E0");
set_cmt(0x48F1E0, "\"illness\"", 0);
apply_type (0x48F1E0, "extern char str_48F1E0[8];", TINFO_DEFINITE);
cleanup("str_48F1E8");set_name(0x48F1E8, "str_48F1E8");
set_cmt(0x48F1E8, "\"wizardry\"", 0);
apply_type (0x48F1E8, "extern char str_48F1E8[9];", TINFO_DEFINITE);
cleanup("str_48F1F4");set_name(0x48F1F4, "str_48F1F4");
set_cmt(0x48F1F4, "\"sorcery\"", 0);
apply_type (0x48F1F4, "extern char str_48F1F4[8];", TINFO_DEFINITE);
cleanup("str_48F1FC");set_name(0x48F1FC, "str_48F1FC");
set_cmt(0x48F1FC, "\"brilliance\"", 0);
apply_type (0x48F1FC, "extern char str_48F1FC[11];", TINFO_DEFINITE);
cleanup("str_48F208");set_name(0x48F208, "str_48F208");
set_cmt(0x48F208, "\"the mind\"", 0);
apply_type (0x48F208, "extern char str_48F208[9];", TINFO_DEFINITE);
cleanup("str_48F214");set_name(0x48F214, "str_48F214");
set_cmt(0x48F214, "\"magic\"", 0);
apply_type (0x48F214, "extern char str_48F214[6];", TINFO_DEFINITE);
cleanup("str_48F21C");set_name(0x48F21C, "str_48F21C");
set_cmt(0x48F21C, "\"dyslexia\"", 0);
apply_type (0x48F21C, "extern char str_48F21C[9];", TINFO_DEFINITE);
cleanup("str_48F228");set_name(0x48F228, "str_48F228");
set_cmt(0x48F228, "\"the fool\"", 0);
apply_type (0x48F228, "extern char str_48F228[9];", TINFO_DEFINITE);
cleanup("str_48F234");set_name(0x48F234, "str_48F234");
set_cmt(0x48F234, "\"perfection\"", 0);
apply_type (0x48F234, "extern char str_48F234[11];", TINFO_DEFINITE);
cleanup("str_48F240");set_name(0x48F240, "str_48F240");
set_cmt(0x48F240, "\"precision\"", 0);
apply_type (0x48F240, "extern char str_48F240[10];", TINFO_DEFINITE);
cleanup("str_48F24C");set_name(0x48F24C, "str_48F24C");
set_cmt(0x48F24C, "\"accuracy\"", 0);
apply_type (0x48F24C, "extern char str_48F24C[9];", TINFO_DEFINITE);
cleanup("str_48F258");set_name(0x48F258, "str_48F258");
set_cmt(0x48F258, "\"skill\"", 0);
apply_type (0x48F258, "extern char str_48F258[6];", TINFO_DEFINITE);
cleanup("str_48F260");set_name(0x48F260, "str_48F260");
set_cmt(0x48F260, "\"dexterity\"", 0);
apply_type (0x48F260, "extern char str_48F260[10];", TINFO_DEFINITE);
cleanup("str_48F26C");set_name(0x48F26C, "str_48F26C");
set_cmt(0x48F26C, "\"atrophy\"", 0);
apply_type (0x48F26C, "extern char str_48F26C[8];", TINFO_DEFINITE);
cleanup("str_48F274");set_name(0x48F274, "str_48F274");
set_cmt(0x48F274, "\"paralysis\"", 0);
apply_type (0x48F274, "extern char str_48F274[10];", TINFO_DEFINITE);
cleanup("str_48F280");set_name(0x48F280, "str_48F280");
set_cmt(0x48F280, "\"titans\"", 0);
apply_type (0x48F280, "extern char str_48F280[7];", TINFO_DEFINITE);
cleanup("str_48F288");set_name(0x48F288, "str_48F288");
set_cmt(0x48F288, "\"giants\"", 0);
apply_type (0x48F288, "extern char str_48F288[7];", TINFO_DEFINITE);
cleanup("str_48F290");set_name(0x48F290, "str_48F290");
set_cmt(0x48F290, "\"power\"", 0);
apply_type (0x48F290, "extern char str_48F290[6];", TINFO_DEFINITE);
cleanup("str_48F298");set_name(0x48F298, "str_48F298");
set_cmt(0x48F298, "\"might\"", 0);
apply_type (0x48F298, "extern char str_48F298[6];", TINFO_DEFINITE);
cleanup("str_48F2A0");set_name(0x48F2A0, "str_48F2A0");
set_cmt(0x48F2A0, "\"strength\"", 0);
apply_type (0x48F2A0, "extern char str_48F2A0[9];", TINFO_DEFINITE);
cleanup("str_48F2AC");set_name(0x48F2AC, "str_48F2AC");
set_cmt(0x48F2AC, "\"weakness\"", 0);
apply_type (0x48F2AC, "extern char str_48F2AC[9];", TINFO_DEFINITE);
cleanup("str_48F2B8");set_name(0x48F2B8, "str_48F2B8");
set_cmt(0x48F2B8, "\"frailty\"", 0);
apply_type (0x48F2B8, "extern char str_48F2B8[8];", TINFO_DEFINITE);
cleanup("str_48F2C0");set_name(0x48F2C0, "str_48F2C0");
set_cmt(0x48F2C0, "\"osmosis\"", 0);
apply_type (0x48F2C0, "extern char str_48F2C0[8];", TINFO_DEFINITE);
cleanup("str_48F2C8");set_name(0x48F2C8, "str_48F2C8");
set_cmt(0x48F2C8, "\"deflection\"", 0);
apply_type (0x48F2C8, "extern char str_48F2C8[11];", TINFO_DEFINITE);
cleanup("str_48F2D4");set_name(0x48F2D4, "str_48F2D4");
set_cmt(0x48F2D4, "\"absorption\"", 0);
apply_type (0x48F2D4, "extern char str_48F2D4[11];", TINFO_DEFINITE);
cleanup("str_48F2E0");set_name(0x48F2E0, "str_48F2E0");
set_cmt(0x48F2E0, "\"protection\"", 0);
apply_type (0x48F2E0, "extern char str_48F2E0[11];", TINFO_DEFINITE);
cleanup("str_48F2EC");set_name(0x48F2EC, "str_48F2EC");
set_cmt(0x48F2EC, "\"health\"", 0);
apply_type (0x48F2EC, "extern char str_48F2EC[7];", TINFO_DEFINITE);
cleanup("str_48F2F4");set_name(0x48F2F4, "str_48F2F4");
set_cmt(0x48F2F4, "\"tears\"", 0);
apply_type (0x48F2F4, "extern char str_48F2F4[6];", TINFO_DEFINITE);
cleanup("str_48F2FC");set_name(0x48F2FC, "str_48F2FC");
set_cmt(0x48F2FC, "\"pain\"", 0);
apply_type (0x48F2FC, "extern char str_48F2FC[5];", TINFO_DEFINITE);
cleanup("str_48F304");set_name(0x48F304, "str_48F304");
set_cmt(0x48F304, "\"slaughter\"", 0);
apply_type (0x48F304, "extern char str_48F304[10];", TINFO_DEFINITE);
cleanup("str_48F310");set_name(0x48F310, "str_48F310");
set_cmt(0x48F310, "\"carnage\"", 0);
apply_type (0x48F310, "extern char str_48F310[8];", TINFO_DEFINITE);
cleanup("str_48F318");set_name(0x48F318, "str_48F318");
set_cmt(0x48F318, "\"gore\"", 0);
apply_type (0x48F318, "extern char str_48F318[5];", TINFO_DEFINITE);
cleanup("str_48F320");set_name(0x48F320, "str_48F320");
set_cmt(0x48F320, "\"slaying\"", 0);
apply_type (0x48F320, "extern char str_48F320[8];", TINFO_DEFINITE);
cleanup("str_48F328");set_name(0x48F328, "str_48F328");
set_cmt(0x48F328, "\"maiming\"", 0);
apply_type (0x48F328, "extern char str_48F328[8];", TINFO_DEFINITE);
cleanup("str_48F330");set_name(0x48F330, "str_48F330");
set_cmt(0x48F330, "\"quality\"", 0);
apply_type (0x48F330, "extern char str_48F330[8];", TINFO_DEFINITE);
cleanup("str_48F338");set_name(0x48F338, "str_48F338");
set_cmt(0x48F338, "\"Lightning\"", 0);
apply_type (0x48F338, "extern char str_48F338[10];", TINFO_DEFINITE);
cleanup("str_48F344");set_name(0x48F344, "str_48F344");
set_cmt(0x48F344, "\"Flaming\"", 0);
apply_type (0x48F344, "extern char str_48F344[8];", TINFO_DEFINITE);
cleanup("str_48F34C");set_name(0x48F34C, "str_48F34C");
set_cmt(0x48F34C, "\"Bountiful\"", 0);
apply_type (0x48F34C, "extern char str_48F34C[10];", TINFO_DEFINITE);
cleanup("str_48F358");set_name(0x48F358, "str_48F358");
set_cmt(0x48F358, "\"Plentiful\"", 0);
apply_type (0x48F358, "extern char str_48F358[10];", TINFO_DEFINITE);
cleanup("str_48F364");set_name(0x48F364, "str_48F364");
set_cmt(0x48F364, "\"Arch-Angel's\"", 0);
apply_type (0x48F364, "extern char str_48F364[13];", TINFO_DEFINITE);
cleanup("str_48F374");set_name(0x48F374, "str_48F374");
set_cmt(0x48F374, "\"Angel's\"", 0);
apply_type (0x48F374, "extern char str_48F374[8];", TINFO_DEFINITE);
cleanup("str_48F37C");set_name(0x48F37C, "str_48F37C");
set_cmt(0x48F37C, "\"Hydra's\"", 0);
apply_type (0x48F37C, "extern char str_48F37C[8];", TINFO_DEFINITE);
cleanup("str_48F384");set_name(0x48F384, "str_48F384");
set_cmt(0x48F384, "\"Wyrm's\"", 0);
apply_type (0x48F384, "extern char str_48F384[7];", TINFO_DEFINITE);
cleanup("str_48F38C");set_name(0x48F38C, "str_48F38C");
set_cmt(0x48F38C, "\"Dragon's\"", 0);
apply_type (0x48F38C, "extern char str_48F38C[9];", TINFO_DEFINITE);
cleanup("str_48F398");set_name(0x48F398, "str_48F398");
set_cmt(0x48F398, "\"Drake's\"", 0);
apply_type (0x48F398, "extern char str_48F398[8];", TINFO_DEFINITE);
cleanup("str_48F3A0");set_name(0x48F3A0, "str_48F3A0");
set_cmt(0x48F3A0, "\"Serpent's\"", 0);
apply_type (0x48F3A0, "extern char str_48F3A0[10];", TINFO_DEFINITE);
cleanup("str_48F3AC");set_name(0x48F3AC, "str_48F3AC");
set_cmt(0x48F3AC, "\"Snake's\"", 0);
apply_type (0x48F3AC, "extern char str_48F3AC[8];", TINFO_DEFINITE);
cleanup("str_48F3B4");set_name(0x48F3B4, "str_48F3B4");
set_cmt(0x48F3B4, "\"Raven's\"", 0);
apply_type (0x48F3B4, "extern char str_48F3B4[8];", TINFO_DEFINITE);
cleanup("str_48F3BC");set_name(0x48F3BC, "str_48F3BC");
set_cmt(0x48F3BC, "\"Spider's\"", 0);
apply_type (0x48F3BC, "extern char str_48F3BC[9];", TINFO_DEFINITE);
cleanup("str_48F3C8");set_name(0x48F3C8, "str_48F3C8");
set_cmt(0x48F3C8, "\"Frog's\"", 0);
apply_type (0x48F3C8, "extern char str_48F3C8[7];", TINFO_DEFINITE);
cleanup("str_48F3D0");set_name(0x48F3D0, "str_48F3D0");
set_cmt(0x48F3D0, "\"Hyena's\"", 0);
apply_type (0x48F3D0, "extern char str_48F3D0[8];", TINFO_DEFINITE);
cleanup("str_48F3D8");set_name(0x48F3D8, "str_48F3D8");
set_cmt(0x48F3D8, "\"Emerald\"", 0);
apply_type (0x48F3D8, "extern char str_48F3D8[8];", TINFO_DEFINITE);
cleanup("str_48F3E0");set_name(0x48F3E0, "str_48F3E0");
set_cmt(0x48F3E0, "\"Obsidian\"", 0);
apply_type (0x48F3E0, "extern char str_48F3E0[9];", TINFO_DEFINITE);
cleanup("str_48F3EC");set_name(0x48F3EC, "str_48F3EC");
set_cmt(0x48F3EC, "\"Jade\"", 0);
apply_type (0x48F3EC, "extern char str_48F3EC[5];", TINFO_DEFINITE);
cleanup("str_48F3F4");set_name(0x48F3F4, "str_48F3F4");
set_cmt(0x48F3F4, "\"Amber\"", 0);
apply_type (0x48F3F4, "extern char str_48F3F4[6];", TINFO_DEFINITE);
cleanup("str_48F3FC");set_name(0x48F3FC, "str_48F3FC");
set_cmt(0x48F3FC, "\"Topaz\"", 0);
apply_type (0x48F3FC, "extern char str_48F3FC[6];", TINFO_DEFINITE);
cleanup("str_48F404");set_name(0x48F404, "str_48F404");
set_cmt(0x48F404, "\"Diamond\"", 0);
apply_type (0x48F404, "extern char str_48F404[8];", TINFO_DEFINITE);
cleanup("str_48F40C");set_name(0x48F40C, "str_48F40C");
set_cmt(0x48F40C, "\"Crystal\"", 0);
apply_type (0x48F40C, "extern char str_48F40C[8];", TINFO_DEFINITE);
cleanup("str_48F414");set_name(0x48F414, "str_48F414");
set_cmt(0x48F414, "\"Ivory\"", 0);
apply_type (0x48F414, "extern char str_48F414[6];", TINFO_DEFINITE);
cleanup("str_48F41C");set_name(0x48F41C, "str_48F41C");
set_cmt(0x48F41C, "\"Pearl\"", 0);
apply_type (0x48F41C, "extern char str_48F41C[6];", TINFO_DEFINITE);
cleanup("str_48F424");set_name(0x48F424, "str_48F424");
set_cmt(0x48F424, "\"White\"", 0);
apply_type (0x48F424, "extern char str_48F424[6];", TINFO_DEFINITE);
cleanup("str_48F42C");set_name(0x48F42C, "str_48F42C");
set_cmt(0x48F42C, "\"Sapphire\"", 0);
apply_type (0x48F42C, "extern char str_48F42C[9];", TINFO_DEFINITE);
cleanup("str_48F438");set_name(0x48F438, "str_48F438");
set_cmt(0x48F438, "\"Cobalt\"", 0);
apply_type (0x48F438, "extern char str_48F438[7];", TINFO_DEFINITE);
cleanup("str_48F440");set_name(0x48F440, "str_48F440");
set_cmt(0x48F440, "\"Lapis\"", 0);
apply_type (0x48F440, "extern char str_48F440[6];", TINFO_DEFINITE);
cleanup("str_48F448");set_name(0x48F448, "str_48F448");
set_cmt(0x48F448, "\"Azure\"", 0);
apply_type (0x48F448, "extern char str_48F448[6];", TINFO_DEFINITE);
cleanup("str_48F450");set_name(0x48F450, "str_48F450");
set_cmt(0x48F450, "\"Blue\"", 0);
apply_type (0x48F450, "extern char str_48F450[5];", TINFO_DEFINITE);
cleanup("str_48F458");set_name(0x48F458, "str_48F458");
set_cmt(0x48F458, "\"Ruby\"", 0);
apply_type (0x48F458, "extern char str_48F458[5];", TINFO_DEFINITE);
cleanup("str_48F460");set_name(0x48F460, "str_48F460");
set_cmt(0x48F460, "\"Garnet\"", 0);
apply_type (0x48F460, "extern char str_48F460[7];", TINFO_DEFINITE);
cleanup("str_48F468");set_name(0x48F468, "str_48F468");
set_cmt(0x48F468, "\"Crimson\"", 0);
apply_type (0x48F468, "extern char str_48F468[8];", TINFO_DEFINITE);
cleanup("str_48F470");set_name(0x48F470, "str_48F470");
set_cmt(0x48F470, "\"Red\"", 0);
apply_type (0x48F470, "extern char str_48F470[4];", TINFO_DEFINITE);
cleanup("str_48F474");set_name(0x48F474, "str_48F474");
set_cmt(0x48F474, "\"Godly\"", 0);
apply_type (0x48F474, "extern char str_48F474[6];", TINFO_DEFINITE);
cleanup("str_48F47C");set_name(0x48F47C, "str_48F47C");
set_cmt(0x48F47C, "\"Holy\"", 0);
apply_type (0x48F47C, "extern char str_48F47C[5];", TINFO_DEFINITE);
cleanup("str_48F484");set_name(0x48F484, "str_48F484");
set_cmt(0x48F484, "\"Awesome\"", 0);
apply_type (0x48F484, "extern char str_48F484[8];", TINFO_DEFINITE);
cleanup("str_48F48C");set_name(0x48F48C, "str_48F48C");
set_cmt(0x48F48C, "\"Saintly\"", 0);
apply_type (0x48F48C, "extern char str_48F48C[8];", TINFO_DEFINITE);
cleanup("str_48F494");set_name(0x48F494, "str_48F494");
set_cmt(0x48F494, "\"Blessed\"", 0);
apply_type (0x48F494, "extern char str_48F494[8];", TINFO_DEFINITE);
cleanup("str_48F49C");set_name(0x48F49C, "str_48F49C");
set_cmt(0x48F49C, "\"Glorious\"", 0);
apply_type (0x48F49C, "extern char str_48F49C[9];", TINFO_DEFINITE);
cleanup("str_48F4A8");set_name(0x48F4A8, "str_48F4A8");
set_cmt(0x48F4A8, "\"Valiant\"", 0);
apply_type (0x48F4A8, "extern char str_48F4A8[8];", TINFO_DEFINITE);
cleanup("str_48F4B0");set_name(0x48F4B0, "str_48F4B0");
set_cmt(0x48F4B0, "\"Grand\"", 0);
apply_type (0x48F4B0, "extern char str_48F4B0[6];", TINFO_DEFINITE);
cleanup("str_48F4B8");set_name(0x48F4B8, "str_48F4B8");
set_cmt(0x48F4B8, "\"Strong\"", 0);
apply_type (0x48F4B8, "extern char str_48F4B8[7];", TINFO_DEFINITE);
cleanup("str_48F4C0");set_name(0x48F4C0, "str_48F4C0");
set_cmt(0x48F4C0, "\"Rusted\"", 0);
apply_type (0x48F4C0, "extern char str_48F4C0[7];", TINFO_DEFINITE);
cleanup("str_48F4C8");set_name(0x48F4C8, "str_48F4C8");
set_cmt(0x48F4C8, "\"Vulnerable\"", 0);
apply_type (0x48F4C8, "extern char str_48F4C8[11];", TINFO_DEFINITE);
cleanup("str_48F4D4");set_name(0x48F4D4, "str_48F4D4");
set_cmt(0x48F4D4, "\"King's\"", 0);
apply_type (0x48F4D4, "extern char str_48F4D4[7];", TINFO_DEFINITE);
cleanup("str_48F4DC");set_name(0x48F4DC, "str_48F4DC");
set_cmt(0x48F4DC, "\"Champion's\"", 0);
apply_type (0x48F4DC, "extern char str_48F4DC[11];", TINFO_DEFINITE);
cleanup("str_48F4E8");set_name(0x48F4E8, "str_48F4E8");
set_cmt(0x48F4E8, "\"Master's\"", 0);
apply_type (0x48F4E8, "extern char str_48F4E8[9];", TINFO_DEFINITE);
cleanup("str_48F4F4");set_name(0x48F4F4, "str_48F4F4");
set_cmt(0x48F4F4, "\"Knight's\"", 0);
apply_type (0x48F4F4, "extern char str_48F4F4[9];", TINFO_DEFINITE);
cleanup("str_48F500");set_name(0x48F500, "str_48F500");
set_cmt(0x48F500, "\"Lord's\"", 0);
apply_type (0x48F500, "extern char str_48F500[7];", TINFO_DEFINITE);
cleanup("str_48F508");set_name(0x48F508, "str_48F508");
set_cmt(0x48F508, "\"Soldier's\"", 0);
apply_type (0x48F508, "extern char str_48F508[10];", TINFO_DEFINITE);
cleanup("str_48F514");set_name(0x48F514, "str_48F514");
set_cmt(0x48F514, "\"Warrior's\"", 0);
apply_type (0x48F514, "extern char str_48F514[10];", TINFO_DEFINITE);
cleanup("str_48F520");set_name(0x48F520, "str_48F520");
set_cmt(0x48F520, "\"Fine\"", 0);
apply_type (0x48F520, "extern char str_48F520[5];", TINFO_DEFINITE);
cleanup("str_48F528");set_name(0x48F528, "str_48F528");
set_cmt(0x48F528, "\"Sharp\"", 0);
apply_type (0x48F528, "extern char str_48F528[6];", TINFO_DEFINITE);
cleanup("str_48F530");set_name(0x48F530, "str_48F530");
set_cmt(0x48F530, "\"Dull\"", 0);
apply_type (0x48F530, "extern char str_48F530[5];", TINFO_DEFINITE);
cleanup("str_48F538");set_name(0x48F538, "str_48F538");
set_cmt(0x48F538, "\"Clumsy\"", 0);
apply_type (0x48F538, "extern char str_48F538[7];", TINFO_DEFINITE);
cleanup("str_48F540");set_name(0x48F540, "str_48F540");
set_cmt(0x48F540, "\"Merciless\"", 0);
apply_type (0x48F540, "extern char str_48F540[10];", TINFO_DEFINITE);
cleanup("str_48F54C");set_name(0x48F54C, "str_48F54C");
set_cmt(0x48F54C, "\"Ruthless\"", 0);
apply_type (0x48F54C, "extern char str_48F54C[9];", TINFO_DEFINITE);
cleanup("str_48F558");set_name(0x48F558, "str_48F558");
set_cmt(0x48F558, "\"Savage\"", 0);
apply_type (0x48F558, "extern char str_48F558[7];", TINFO_DEFINITE);
cleanup("str_48F560");set_name(0x48F560, "str_48F560");
set_cmt(0x48F560, "\"Massive\"", 0);
apply_type (0x48F560, "extern char str_48F560[8];", TINFO_DEFINITE);
cleanup("str_48F568");set_name(0x48F568, "str_48F568");
set_cmt(0x48F568, "\"Brutal\"", 0);
apply_type (0x48F568, "extern char str_48F568[7];", TINFO_DEFINITE);
cleanup("str_48F570");set_name(0x48F570, "str_48F570");
set_cmt(0x48F570, "\"Vicious\"", 0);
apply_type (0x48F570, "extern char str_48F570[8];", TINFO_DEFINITE);
cleanup("str_48F578");set_name(0x48F578, "str_48F578");
set_cmt(0x48F578, "\"Heavy\"", 0);
apply_type (0x48F578, "extern char str_48F578[6];", TINFO_DEFINITE);
cleanup("str_48F580");set_name(0x48F580, "str_48F580");
set_cmt(0x48F580, "\"Deadly\"", 0);
apply_type (0x48F580, "extern char str_48F580[7];", TINFO_DEFINITE);
cleanup("str_48F588");set_name(0x48F588, "str_48F588");
set_cmt(0x48F588, "\"Jagged\"", 0);
apply_type (0x48F588, "extern char str_48F588[7];", TINFO_DEFINITE);
cleanup("str_48F590");set_name(0x48F590, "str_48F590");
set_cmt(0x48F590, "\"Weak\"", 0);
apply_type (0x48F590, "extern char str_48F590[5];", TINFO_DEFINITE);
cleanup("str_48F598");set_name(0x48F598, "str_48F598");
set_cmt(0x48F598, "\"Bent\"", 0);
apply_type (0x48F598, "extern char str_48F598[5];", TINFO_DEFINITE);
cleanup("str_48F5A0");set_name(0x48F5A0, "str_48F5A0");
set_cmt(0x48F5A0, "\"Useless\"", 0);
apply_type (0x48F5A0, "extern char str_48F5A0[8];", TINFO_DEFINITE);
cleanup("str_48F5A8");set_name(0x48F5A8, "str_48F5A8");
set_cmt(0x48F5A8, "\"Strange\"", 0);
apply_type (0x48F5A8, "extern char str_48F5A8[8];", TINFO_DEFINITE);
cleanup("str_48F5B0");set_name(0x48F5B0, "str_48F5B0");
set_cmt(0x48F5B0, "\"Weird\"", 0);
apply_type (0x48F5B0, "extern char str_48F5B0[6];", TINFO_DEFINITE);
cleanup("str_48F5B8");set_name(0x48F5B8, "str_48F5B8");
set_cmt(0x48F5B8, "\"Meteoric\"", 0);
apply_type (0x48F5B8, "extern char str_48F5B8[9];", TINFO_DEFINITE);
cleanup("str_48F5C4");set_name(0x48F5C4, "str_48F5C4");
set_cmt(0x48F5C4, "\"Mithril\"", 0);
apply_type (0x48F5C4, "extern char str_48F5C4[8];", TINFO_DEFINITE);
cleanup("str_48F5CC");set_name(0x48F5CC, "str_48F5CC");
set_cmt(0x48F5CC, "\"Platinum\"", 0);
apply_type (0x48F5CC, "extern char str_48F5CC[9];", TINFO_DEFINITE);
cleanup("str_48F5D8");set_name(0x48F5D8, "str_48F5D8");
set_cmt(0x48F5D8, "\"Silver\"", 0);
apply_type (0x48F5D8, "extern char str_48F5D8[7];", TINFO_DEFINITE);
cleanup("str_48F5E0");set_name(0x48F5E0, "str_48F5E0");
set_cmt(0x48F5E0, "\"Steel\"", 0);
apply_type (0x48F5E0, "extern char str_48F5E0[6];", TINFO_DEFINITE);
cleanup("str_48F5E8");set_name(0x48F5E8, "str_48F5E8");
set_cmt(0x48F5E8, "\"Iron\"", 0);
apply_type (0x48F5E8, "extern char str_48F5E8[5];", TINFO_DEFINITE);
cleanup("str_48F5F0");set_name(0x48F5F0, "str_48F5F0");
set_cmt(0x48F5F0, "\"Bronze\"", 0);
apply_type (0x48F5F0, "extern char str_48F5F0[7];", TINFO_DEFINITE);
cleanup("str_48F5F8");set_name(0x48F5F8, "str_48F5F8");
set_cmt(0x48F5F8, "\"Brass\"", 0);
apply_type (0x48F5F8, "extern char str_48F5F8[6];", TINFO_DEFINITE);
cleanup("str_48F600");set_name(0x48F600, "str_48F600");
set_cmt(0x48F600, "\"Tin\"", 0);
apply_type (0x48F600, "extern char str_48F600[4];", TINFO_DEFINITE);
cleanup("item_data");set_name(0x48F608, "item_data");
set_cmt(0x48F608, "item_data contains the data related to each item ID.", 0);
apply_type (0x48F608, "extern ItemData item_data[157];", TINFO_DEFINITE);
cleanup("str_4924A4");set_name(0x4924A4, "str_4924A4");
set_cmt(0x4924A4, "\"Amulet\"", 0);
apply_type (0x4924A4, "extern char str_4924A4[7];", TINFO_DEFINITE);
cleanup("str_4924AC");set_name(0x4924AC, "str_4924AC");
set_cmt(0x4924AC, "\"Ring\"", 0);
apply_type (0x4924AC, "extern char str_4924AC[5];", TINFO_DEFINITE);
cleanup("str_4924B4");set_name(0x4924B4, "str_4924B4");
set_cmt(0x4924B4, "\"War Staff\"", 0);
apply_type (0x4924B4, "extern char str_4924B4[10];", TINFO_DEFINITE);
cleanup("str_4924C0");set_name(0x4924C0, "str_4924C0");
set_cmt(0x4924C0, "\"Quarter Staff\"", 0);
apply_type (0x4924C0, "extern char str_4924C0[14];", TINFO_DEFINITE);
cleanup("str_4924D0");set_name(0x4924D0, "str_4924D0");
set_cmt(0x4924D0, "\"Composite Staff\"", 0);
apply_type (0x4924D0, "extern char str_4924D0[16];", TINFO_DEFINITE);
cleanup("str_4924E0");set_name(0x4924E0, "str_4924E0");
set_cmt(0x4924E0, "\"Long Staff\"", 0);
apply_type (0x4924E0, "extern char str_4924E0[11];", TINFO_DEFINITE);
cleanup("str_4924EC");set_name(0x4924EC, "str_4924EC");
set_cmt(0x4924EC, "\"Staff\"", 0);
apply_type (0x4924EC, "extern char str_4924EC[6];", TINFO_DEFINITE);
cleanup("str_4924F4");set_name(0x4924F4, "str_4924F4");
set_cmt(0x4924F4, "\"Short Staff\"", 0);
apply_type (0x4924F4, "extern char str_4924F4[12];", TINFO_DEFINITE);
cleanup("str_492500");set_name(0x492500, "str_492500");
set_cmt(0x492500, "\"Long War Bow\"", 0);
apply_type (0x492500, "extern char str_492500[13];", TINFO_DEFINITE);
cleanup("str_492510");set_name(0x492510, "str_492510");
set_cmt(0x492510, "\"Short War Bow\"", 0);
apply_type (0x492510, "extern char str_492510[14];", TINFO_DEFINITE);
cleanup("str_492520");set_name(0x492520, "str_492520");
set_cmt(0x492520, "\"Long Battle Bow\"", 0);
apply_type (0x492520, "extern char str_492520[16];", TINFO_DEFINITE);
cleanup("str_492530");set_name(0x492530, "str_492530");
set_cmt(0x492530, "\"Short Battle Bow\"", 0);
apply_type (0x492530, "extern char str_492530[17];", TINFO_DEFINITE);
cleanup("str_492544");set_name(0x492544, "str_492544");
set_cmt(0x492544, "\"Composite Bow\"", 0);
apply_type (0x492544, "extern char str_492544[14];", TINFO_DEFINITE);
cleanup("str_492554");set_name(0x492554, "str_492554");
set_cmt(0x492554, "\"Long Bow\"", 0);
apply_type (0x492554, "extern char str_492554[9];", TINFO_DEFINITE);
cleanup("str_492560");set_name(0x492560, "str_492560");
set_cmt(0x492560, "\"Hunter's Bow\"", 0);
apply_type (0x492560, "extern char str_492560[13];", TINFO_DEFINITE);
cleanup("str_492570");set_name(0x492570, "str_492570");
set_cmt(0x492570, "\"Bow\"", 0);
apply_type (0x492570, "extern char str_492570[4];", TINFO_DEFINITE);
cleanup("str_492574");set_name(0x492574, "str_492574");
set_cmt(0x492574, "\"Maul\"", 0);
apply_type (0x492574, "extern char str_492574[5];", TINFO_DEFINITE);
cleanup("str_49257C");set_name(0x49257C, "str_49257C");
set_cmt(0x49257C, "\"Flail\"", 0);
apply_type (0x49257C, "extern char str_49257C[6];", TINFO_DEFINITE);
cleanup("str_492584");set_name(0x492584, "str_492584");
set_cmt(0x492584, "\"Spiked Club\"", 0);
apply_type (0x492584, "extern char str_492584[12];", TINFO_DEFINITE);
cleanup("str_492590");set_name(0x492590, "str_492590");
set_cmt(0x492590, "\"Hammer\"", 0);
apply_type (0x492590, "extern char str_492590[7];", TINFO_DEFINITE);
cleanup("str_492598");set_name(0x492598, "str_492598");
set_cmt(0x492598, "\"War Hammer\"", 0);
apply_type (0x492598, "extern char str_492598[11];", TINFO_DEFINITE);
cleanup("str_4925A4");set_name(0x4925A4, "str_4925A4");
set_cmt(0x4925A4, "\"Morning Star\"", 0);
apply_type (0x4925A4, "extern char str_4925A4[13];", TINFO_DEFINITE);
cleanup("str_4925B4");set_name(0x4925B4, "str_4925B4");
set_cmt(0x4925B4, "\"Mace\"", 0);
apply_type (0x4925B4, "extern char str_4925B4[5];", TINFO_DEFINITE);
cleanup("str_4925BC");set_name(0x4925BC, "str_4925BC");
set_cmt(0x4925BC, "\"Great Axe\"", 0);
apply_type (0x4925BC, "extern char str_4925BC[10];", TINFO_DEFINITE);
cleanup("str_4925C8");set_name(0x4925C8, "str_4925C8");
set_cmt(0x4925C8, "\"Battle Axe\"", 0);
apply_type (0x4925C8, "extern char str_4925C8[11];", TINFO_DEFINITE);
cleanup("str_4925D4");set_name(0x4925D4, "str_4925D4");
set_cmt(0x4925D4, "\"Broad Axe\"", 0);
apply_type (0x4925D4, "extern char str_4925D4[10];", TINFO_DEFINITE);
cleanup("str_4925E0");set_name(0x4925E0, "str_4925E0");
set_cmt(0x4925E0, "\"Large Axe\"", 0);
apply_type (0x4925E0, "extern char str_4925E0[10];", TINFO_DEFINITE);
cleanup("str_4925EC");set_name(0x4925EC, "str_4925EC");
set_cmt(0x4925EC, "\"Axe\"", 0);
apply_type (0x4925EC, "extern char str_4925EC[4];", TINFO_DEFINITE);
cleanup("str_4925F0");set_name(0x4925F0, "str_4925F0");
set_cmt(0x4925F0, "\"Small Axe\"", 0);
apply_type (0x4925F0, "extern char str_4925F0[10];", TINFO_DEFINITE);
cleanup("str_4925FC");set_name(0x4925FC, "str_4925FC");
set_cmt(0x4925FC, "\"Great Sword\"", 0);
apply_type (0x4925FC, "extern char str_4925FC[12];", TINFO_DEFINITE);
cleanup("str_492608");set_name(0x492608, "str_492608");
set_cmt(0x492608, "\"Two-Handed Sword\"", 0);
apply_type (0x492608, "extern char str_492608[17];", TINFO_DEFINITE);
cleanup("str_49261C");set_name(0x49261C, "str_49261C");
set_cmt(0x49261C, "\"Bastard Sword\"", 0);
apply_type (0x49261C, "extern char str_49261C[14];", TINFO_DEFINITE);
cleanup("str_49262C");set_name(0x49262C, "str_49262C");
set_cmt(0x49262C, "\"Broad Sword\"", 0);
apply_type (0x49262C, "extern char str_49262C[12];", TINFO_DEFINITE);
cleanup("str_492638");set_name(0x492638, "str_492638");
set_cmt(0x492638, "\"Long Sword\"", 0);
apply_type (0x492638, "extern char str_492638[11];", TINFO_DEFINITE);
cleanup("str_492644");set_name(0x492644, "str_492644");
set_cmt(0x492644, "\"Sabre\"", 0);
apply_type (0x492644, "extern char str_492644[6];", TINFO_DEFINITE);
cleanup("str_49264C");set_name(0x49264C, "str_49264C");
set_cmt(0x49264C, "\"Blade\"", 0);
apply_type (0x49264C, "extern char str_49264C[6];", TINFO_DEFINITE);
cleanup("str_492654");set_name(0x492654, "str_492654");
set_cmt(0x492654, "\"Claymore\"", 0);
apply_type (0x492654, "extern char str_492654[9];", TINFO_DEFINITE);
cleanup("str_492660");set_name(0x492660, "str_492660");
set_cmt(0x492660, "\"Scimitar\"", 0);
apply_type (0x492660, "extern char str_492660[9];", TINFO_DEFINITE);
cleanup("str_49266C");set_name(0x49266C, "str_49266C");
set_cmt(0x49266C, "\"Falchion\"", 0);
apply_type (0x49266C, "extern char str_49266C[9];", TINFO_DEFINITE);
cleanup("str_492678");set_name(0x492678, "str_492678");
set_cmt(0x492678, "\"Sword\"", 0);
apply_type (0x492678, "extern char str_492678[6];", TINFO_DEFINITE);
cleanup("str_492680");set_name(0x492680, "str_492680");
set_cmt(0x492680, "\"Dagger\"", 0);
apply_type (0x492680, "extern char str_492680[7];", TINFO_DEFINITE);
cleanup("str_492688");set_name(0x492688, "str_492688");
set_cmt(0x492688, "\"Book of \"", 0);
apply_type (0x492688, "extern char str_492688[9];", TINFO_DEFINITE);
cleanup("str_492694");set_name(0x492694, "str_492694");
set_cmt(0x492694, "\"Scroll of Apocalypse\"", 0);
apply_type (0x492694, "extern char str_492694[21];", TINFO_DEFINITE);
cleanup("str_4926AC");set_name(0x4926AC, "str_4926AC");
set_cmt(0x4926AC, "\"Scroll of Teleport\"", 0);
apply_type (0x4926AC, "extern char str_4926AC[19];", TINFO_DEFINITE);
cleanup("str_4926C0");set_name(0x4926C0, "str_4926C0");
set_cmt(0x4926C0, "\"Scroll of None\"", 0);
apply_type (0x4926C0, "extern char str_4926C0[15];", TINFO_DEFINITE);
cleanup("str_4926D0");set_name(0x4926D0, "str_4926D0");
set_cmt(0x4926D0, "\"Scroll of Golem\"", 0);
apply_type (0x4926D0, "extern char str_4926D0[16];", TINFO_DEFINITE);
cleanup("str_4926E0");set_name(0x4926E0, "str_4926E0");
set_cmt(0x4926E0, "\"Scroll of Nova\"", 0);
apply_type (0x4926E0, "extern char str_4926E0[15];", TINFO_DEFINITE);
cleanup("str_4926F0");set_name(0x4926F0, "str_4926F0");
set_cmt(0x4926F0, "\"Non Item\"", 0);
apply_type (0x4926F0, "extern char str_4926F0[9];", TINFO_DEFINITE);
cleanup("str_4926FC");set_name(0x4926FC, "str_4926FC");
set_cmt(0x4926FC, "\"Scroll of Guardian\"", 0);
apply_type (0x4926FC, "extern char str_4926FC[19];", TINFO_DEFINITE);
cleanup("str_492710");set_name(0x492710, "str_492710");
set_cmt(0x492710, "\"Scroll of Chain Lightning\"", 0);
apply_type (0x492710, "extern char str_492710[26];", TINFO_DEFINITE);
cleanup("str_49272C");set_name(0x49272C, "str_49272C");
set_cmt(0x49272C, "\"Scroll of Stone Curse\"", 0);
apply_type (0x49272C, "extern char str_49272C[22];", TINFO_DEFINITE);
cleanup("str_492744");set_name(0x492744, "str_492744");
set_cmt(0x492744, "\"Scroll of Fireball\"", 0);
apply_type (0x492744, "extern char str_492744[19];", TINFO_DEFINITE);
cleanup("str_492758");set_name(0x492758, "str_492758");
set_cmt(0x492758, "\"Scroll of Flame Wave\"", 0);
apply_type (0x492758, "extern char str_492758[21];", TINFO_DEFINITE);
cleanup("str_492770");set_name(0x492770, "str_492770");
set_cmt(0x492770, "\"Scroll of Mana Shield\"", 0);
apply_type (0x492770, "extern char str_492770[22];", TINFO_DEFINITE);
cleanup("str_492788");set_name(0x492788, "str_492788");
set_cmt(0x492788, "\"Scroll of Phasing\"", 0);
apply_type (0x492788, "extern char str_492788[18];", TINFO_DEFINITE);
cleanup("str_49279C");set_name(0x49279C, "str_49279C");
set_cmt(0x49279C, "\"Scroll of Infravision\"", 0);
apply_type (0x49279C, "extern char str_49279C[22];", TINFO_DEFINITE);
cleanup("str_4927B4");set_name(0x4927B4, "str_4927B4");
set_cmt(0x4927B4, "\"Scroll of Flash\"", 0);
apply_type (0x4927B4, "extern char str_4927B4[16];", TINFO_DEFINITE);
cleanup("str_4927C4");set_name(0x4927C4, "str_4927C4");
set_cmt(0x4927C4, "\"Scroll of Inferno\"", 0);
apply_type (0x4927C4, "extern char str_4927C4[18];", TINFO_DEFINITE);
cleanup("str_4927D8");set_name(0x4927D8, "str_4927D8");
set_cmt(0x4927D8, "\"Scroll of Fire Wall\"", 0);
apply_type (0x4927D8, "extern char str_4927D8[20];", TINFO_DEFINITE);
cleanup("str_4927EC");set_name(0x4927EC, "str_4927EC");
set_cmt(0x4927EC, "\"Scroll of Lightning\"", 0);
apply_type (0x4927EC, "extern char str_4927EC[20];", TINFO_DEFINITE);
cleanup("str_492800");set_name(0x492800, "str_492800");
set_cmt(0x492800, "\"Scroll of Healing\"", 0);
apply_type (0x492800, "extern char str_492800[18];", TINFO_DEFINITE);
cleanup("str_492814");set_name(0x492814, "str_492814");
set_cmt(0x492814, "\"Elixir of Vitality\"", 0);
apply_type (0x492814, "extern char str_492814[19];", TINFO_DEFINITE);
cleanup("str_492828");set_name(0x492828, "str_492828");
set_cmt(0x492828, "\"Elixir of Dexterity\"", 0);
apply_type (0x492828, "extern char str_492828[20];", TINFO_DEFINITE);
cleanup("str_49283C");set_name(0x49283C, "str_49283C");
set_cmt(0x49283C, "\"Elixir of Magic\"", 0);
apply_type (0x49283C, "extern char str_49283C[16];", TINFO_DEFINITE);
cleanup("str_49284C");set_name(0x49284C, "str_49284C");
set_cmt(0x49284C, "\"Elixir of Strength\"", 0);
apply_type (0x49284C, "extern char str_49284C[19];", TINFO_DEFINITE);
cleanup("str_492860");set_name(0x492860, "str_492860");
set_cmt(0x492860, "\"Potion of Full Rejuvenation\"", 0);
apply_type (0x492860, "extern char str_492860[28];", TINFO_DEFINITE);
cleanup("str_49287C");set_name(0x49287C, "str_49287C");
set_cmt(0x49287C, "\"Potion of Rejuvenation\"", 0);
apply_type (0x49287C, "extern char str_49287C[23];", TINFO_DEFINITE);
cleanup("str_492894");set_name(0x492894, "str_492894");
set_cmt(0x492894, "\"Gothic Shield\"", 0);
apply_type (0x492894, "extern char str_492894[14];", TINFO_DEFINITE);
cleanup("str_4928A4");set_name(0x4928A4, "str_4928A4");
set_cmt(0x4928A4, "\"Tower Shield\"", 0);
apply_type (0x4928A4, "extern char str_4928A4[13];", TINFO_DEFINITE);
cleanup("str_4928B4");set_name(0x4928B4, "str_4928B4");
set_cmt(0x4928B4, "\"Kite Shield\"", 0);
apply_type (0x4928B4, "extern char str_4928B4[12];", TINFO_DEFINITE);
cleanup("str_4928C0");set_name(0x4928C0, "str_4928C0");
set_cmt(0x4928C0, "\"Large Shield\"", 0);
apply_type (0x4928C0, "extern char str_4928C0[13];", TINFO_DEFINITE);
cleanup("str_4928D0");set_name(0x4928D0, "str_4928D0");
set_cmt(0x4928D0, "\"Small Shield\"", 0);
apply_type (0x4928D0, "extern char str_4928D0[13];", TINFO_DEFINITE);
cleanup("str_4928E0");set_name(0x4928E0, "str_4928E0");
set_cmt(0x4928E0, "\"Shield\"", 0);
apply_type (0x4928E0, "extern char str_4928E0[7];", TINFO_DEFINITE);
cleanup("str_4928E8");set_name(0x4928E8, "str_4928E8");
set_cmt(0x4928E8, "\"Full Plate Mail\"", 0);
apply_type (0x4928E8, "extern char str_4928E8[16];", TINFO_DEFINITE);
cleanup("str_4928F8");set_name(0x4928F8, "str_4928F8");
set_cmt(0x4928F8, "\"Gothic Plate\"", 0);
apply_type (0x4928F8, "extern char str_4928F8[13];", TINFO_DEFINITE);
cleanup("str_492908");set_name(0x492908, "str_492908");
set_cmt(0x492908, "\"Field Plate\"", 0);
apply_type (0x492908, "extern char str_492908[12];", TINFO_DEFINITE);
cleanup("str_492914");set_name(0x492914, "str_492914");
set_cmt(0x492914, "\"Plate Mail\"", 0);
apply_type (0x492914, "extern char str_492914[11];", TINFO_DEFINITE);
cleanup("str_492920");set_name(0x492920, "str_492920");
set_cmt(0x492920, "\"Splint Mail\"", 0);
apply_type (0x492920, "extern char str_492920[12];", TINFO_DEFINITE);
cleanup("str_49292C");set_name(0x49292C, "str_49292C");
set_cmt(0x49292C, "\"Plate\"", 0);
apply_type (0x49292C, "extern char str_49292C[6];", TINFO_DEFINITE);
cleanup("str_492934");set_name(0x492934, "str_492934");
set_cmt(0x492934, "\"Breast Plate\"", 0);
apply_type (0x492934, "extern char str_492934[13];", TINFO_DEFINITE);
cleanup("str_492944");set_name(0x492944, "str_492944");
set_cmt(0x492944, "\"Scale Mail\"", 0);
apply_type (0x492944, "extern char str_492944[11];", TINFO_DEFINITE);
cleanup("str_492950");set_name(0x492950, "str_492950");
set_cmt(0x492950, "\"Chain Mail\"", 0);
apply_type (0x492950, "extern char str_492950[11];", TINFO_DEFINITE);
cleanup("str_49295C");set_name(0x49295C, "str_49295C");
set_cmt(0x49295C, "\"Mail\"", 0);
apply_type (0x49295C, "extern char str_49295C[5];", TINFO_DEFINITE);
cleanup("str_492964");set_name(0x492964, "str_492964");
set_cmt(0x492964, "\"Ring Mail\"", 0);
apply_type (0x492964, "extern char str_492964[10];", TINFO_DEFINITE);
cleanup("str_492970");set_name(0x492970, "str_492970");
set_cmt(0x492970, "\"Studded Leather Armor\"", 0);
apply_type (0x492970, "extern char str_492970[22];", TINFO_DEFINITE);
cleanup("str_492988");set_name(0x492988, "str_492988");
set_cmt(0x492988, "\"Hard Leather Armor\"", 0);
apply_type (0x492988, "extern char str_492988[19];", TINFO_DEFINITE);
cleanup("str_49299C");set_name(0x49299C, "str_49299C");
set_cmt(0x49299C, "\"Leather Armor\"", 0);
apply_type (0x49299C, "extern char str_49299C[14];", TINFO_DEFINITE);
cleanup("str_4929AC");set_name(0x4929AC, "str_4929AC");
set_cmt(0x4929AC, "\"Armor\"", 0);
apply_type (0x4929AC, "extern char str_4929AC[6];", TINFO_DEFINITE);
cleanup("str_4929B4");set_name(0x4929B4, "str_4929B4");
set_cmt(0x4929B4, "\"Quilted Armor\"", 0);
apply_type (0x4929B4, "extern char str_4929B4[14];", TINFO_DEFINITE);
cleanup("str_4929C4");set_name(0x4929C4, "str_4929C4");
set_cmt(0x4929C4, "\"Robe\"", 0);
apply_type (0x4929C4, "extern char str_4929C4[5];", TINFO_DEFINITE);
cleanup("str_4929CC");set_name(0x4929CC, "str_4929CC");
set_cmt(0x4929CC, "\"Cloak\"", 0);
apply_type (0x4929CC, "extern char str_4929CC[6];", TINFO_DEFINITE);
cleanup("str_4929D4");set_name(0x4929D4, "str_4929D4");
set_cmt(0x4929D4, "\"Rags\"", 0);
apply_type (0x4929D4, "extern char str_4929D4[5];", TINFO_DEFINITE);
cleanup("str_4929DC");set_name(0x4929DC, "str_4929DC");
set_cmt(0x4929DC, "\"Cape\"", 0);
apply_type (0x4929DC, "extern char str_4929DC[5];", TINFO_DEFINITE);
cleanup("str_4929E4");set_name(0x4929E4, "str_4929E4");
set_cmt(0x4929E4, "\"Great Helm\"", 0);
apply_type (0x4929E4, "extern char str_4929E4[11];", TINFO_DEFINITE);
cleanup("str_4929F0");set_name(0x4929F0, "str_4929F0");
set_cmt(0x4929F0, "\"Crown\"", 0);
apply_type (0x4929F0, "extern char str_4929F0[6];", TINFO_DEFINITE);
cleanup("str_4929F8");set_name(0x4929F8, "str_4929F8");
set_cmt(0x4929F8, "\"Full Helm\"", 0);
apply_type (0x4929F8, "extern char str_4929F8[10];", TINFO_DEFINITE);
cleanup("str_492A04");set_name(0x492A04, "str_492A04");
set_cmt(0x492A04, "\"Helm\"", 0);
apply_type (0x492A04, "extern char str_492A04[5];", TINFO_DEFINITE);
cleanup("str_492A0C");set_name(0x492A0C, "str_492A0C");
set_cmt(0x492A0C, "\"Skull Cap\"", 0);
apply_type (0x492A0C, "extern char str_492A0C[10];", TINFO_DEFINITE);
cleanup("str_492A18");set_name(0x492A18, "str_492A18");
set_cmt(0x492A18, "\"Cap\"", 0);
apply_type (0x492A18, "extern char str_492A18[4];", TINFO_DEFINITE);
cleanup("str_492A1C");set_name(0x492A1C, "str_492A1C");
set_cmt(0x492A1C, "\"Scroll of Resurrect\"", 0);
apply_type (0x492A1C, "extern char str_492A1C[20];", TINFO_DEFINITE);
cleanup("str_492A30");set_name(0x492A30, "str_492A30");
set_cmt(0x492A30, "\"Staff of Lazarus\"", 0);
apply_type (0x492A30, "extern char str_492A30[17];", TINFO_DEFINITE);
cleanup("str_492A44");set_name(0x492A44, "str_492A44");
set_cmt(0x492A44, "\"Lightforge\"", 0);
apply_type (0x492A44, "extern char str_492A44[11];", TINFO_DEFINITE);
cleanup("str_492A50");set_name(0x492A50, "str_492A50");
set_cmt(0x492A50, "\"Griswold's Edge\"", 0);
apply_type (0x492A50, "extern char str_492A50[16];", TINFO_DEFINITE);
cleanup("str_492A60");set_name(0x492A60, "str_492A60");
set_cmt(0x492A60, "\"Potion of Full Mana\"", 0);
apply_type (0x492A60, "extern char str_492A60[20];", TINFO_DEFINITE);
cleanup("str_492A74");set_name(0x492A74, "str_492A74");
set_cmt(0x492A74, "\"Potion of Full Healing\"", 0);
apply_type (0x492A74, "extern char str_492A74[23];", TINFO_DEFINITE);
cleanup("str_492A8C");set_name(0x492A8C, "str_492A8C");
set_cmt(0x492A8C, "\"Arkaine's Valor\"", 0);
apply_type (0x492A8C, "extern char str_492A8C[16];", TINFO_DEFINITE);
cleanup("str_492A9C");set_name(0x492A9C, "str_492A9C");
set_cmt(0x492A9C, "\"Scroll of Town Portal\"", 0);
apply_type (0x492A9C, "extern char str_492A9C[22];", TINFO_DEFINITE);
cleanup("str_492AB4");set_name(0x492AB4, "str_492AB4");
set_cmt(0x492AB4, "\"Scroll of Identify\"", 0);
apply_type (0x492AB4, "extern char str_492AB4[19];", TINFO_DEFINITE);
cleanup("str_492AC8");set_name(0x492AC8, "str_492AC8");
set_cmt(0x492AC8, "\"Potion of Mana\"", 0);
apply_type (0x492AC8, "extern char str_492AC8[15];", TINFO_DEFINITE);
cleanup("str_492AD8");set_name(0x492AD8, "str_492AD8");
set_cmt(0x492AD8, "\"Potion of Healing\"", 0);
apply_type (0x492AD8, "extern char str_492AD8[18];", TINFO_DEFINITE);
cleanup("str_492AEC");set_name(0x492AEC, "str_492AEC");
set_cmt(0x492AEC, "\"Heart\"", 0);
apply_type (0x492AEC, "extern char str_492AEC[6];", TINFO_DEFINITE);
cleanup("str_492AF4");set_name(0x492AF4, "str_492AF4");
set_cmt(0x492AF4, "\"Map of the Stars\"", 0);
apply_type (0x492AF4, "extern char str_492AF4[17];", TINFO_DEFINITE);
cleanup("str_492B08");set_name(0x492B08, "str_492B08");
set_cmt(0x492B08, "\"Blood Stone\"", 0);
apply_type (0x492B08, "extern char str_492B08[12];", TINFO_DEFINITE);
cleanup("str_492B14");set_name(0x492B14, "str_492B14");
set_cmt(0x492B14, "\"Spectral Elixir\"", 0);
apply_type (0x492B14, "extern char str_492B14[16];", TINFO_DEFINITE);
cleanup("str_492B24");set_name(0x492B24, "str_492B24");
set_cmt(0x492B24, "\"Fungal Tome\"", 0);
apply_type (0x492B24, "extern char str_492B24[12];", TINFO_DEFINITE);
cleanup("str_492B30");set_name(0x492B30, "str_492B30");
set_cmt(0x492B30, "\"Brain\"", 0);
apply_type (0x492B30, "extern char str_492B30[6];", TINFO_DEFINITE);
cleanup("str_492B38");set_name(0x492B38, "str_492B38");
set_cmt(0x492B38, "\"Black Mushroom\"", 0);
apply_type (0x492B38, "extern char str_492B38[15];", TINFO_DEFINITE);
cleanup("str_492B48");set_name(0x492B48, "str_492B48");
set_cmt(0x492B48, "\"Anvil of Fury\"", 0);
apply_type (0x492B48, "extern char str_492B48[14];", TINFO_DEFINITE);
cleanup("str_492B58");set_name(0x492B58, "str_492B58");
set_cmt(0x492B58, "\"Golden Elixir\"", 0);
apply_type (0x492B58, "extern char str_492B58[14];", TINFO_DEFINITE);
cleanup("str_492B68");set_name(0x492B68, "str_492B68");
set_cmt(0x492B68, "\"Veil of Steel\"", 0);
apply_type (0x492B68, "extern char str_492B68[14];", TINFO_DEFINITE);
cleanup("str_492B78");set_name(0x492B78, "str_492B78");
set_cmt(0x492B78, "\"Harlequin Crest\"", 0);
apply_type (0x492B78, "extern char str_492B78[16];", TINFO_DEFINITE);
cleanup("str_492B88");set_name(0x492B88, "str_492B88");
set_cmt(0x492B88, "\"Tavern Sign\"", 0);
apply_type (0x492B88, "extern char str_492B88[12];", TINFO_DEFINITE);
cleanup("str_492B94");set_name(0x492B94, "str_492B94");
set_cmt(0x492B94, "\"Ring of Truth\"", 0);
apply_type (0x492B94, "extern char str_492B94[14];", TINFO_DEFINITE);
cleanup("str_492BA4");set_name(0x492BA4, "str_492BA4");
set_cmt(0x492BA4, "\"Optic Amulet\"", 0);
apply_type (0x492BA4, "extern char str_492BA4[13];", TINFO_DEFINITE);
cleanup("str_492BB4");set_name(0x492BB4, "str_492BB4");
set_cmt(0x492BB4, "\"Magic Rock\"", 0);
apply_type (0x492BB4, "extern char str_492BB4[11];", TINFO_DEFINITE);
cleanup("str_492BC0");set_name(0x492BC0, "str_492BC0");
set_cmt(0x492BC0, "\"Empyrean Band\"", 0);
apply_type (0x492BC0, "extern char str_492BC0[14];", TINFO_DEFINITE);
cleanup("str_492BD0");set_name(0x492BD0, "str_492BD0");
set_cmt(0x492BD0, "\"The Undead Crown\"", 0);
apply_type (0x492BD0, "extern char str_492BD0[17];", TINFO_DEFINITE);
cleanup("str_492BE4");set_name(0x492BE4, "str_492BE4");
set_cmt(0x492BE4, "\"Cleaver\"", 0);
apply_type (0x492BE4, "extern char str_492BE4[8];", TINFO_DEFINITE);
cleanup("str_492BEC");set_name(0x492BEC, "str_492BEC");
set_cmt(0x492BEC, "\"Short Staff of Charged Bolt\"", 0);
apply_type (0x492BEC, "extern char str_492BEC[28];", TINFO_DEFINITE);
cleanup("str_492C08");set_name(0x492C08, "str_492C08");
set_cmt(0x492C08, "\"Short Bow\"", 0);
apply_type (0x492C08, "extern char str_492C08[10];", TINFO_DEFINITE);
cleanup("str_492C14");set_name(0x492C14, "str_492C14");
set_cmt(0x492C14, "\"Club\"", 0);
apply_type (0x492C14, "extern char str_492C14[5];", TINFO_DEFINITE);
cleanup("str_492C1C");set_name(0x492C1C, "str_492C1C");
set_cmt(0x492C1C, "\"Buckler\"", 0);
apply_type (0x492C1C, "extern char str_492C1C[8];", TINFO_DEFINITE);
cleanup("str_492C24");set_name(0x492C24, "str_492C24");
set_cmt(0x492C24, "\"Short Sword\"", 0);
apply_type (0x492C24, "extern char str_492C24[12];", TINFO_DEFINITE);
cleanup("str_492C30");set_name(0x492C30, "str_492C30");
set_cmt(0x492C30, "\"Gold\"", 0);
apply_type (0x492C30, "extern char str_492C30[5];", TINFO_DEFINITE);
cleanup("item_drop_id_from_item_graphic_id");set_name(0x492C38, "item_drop_id_from_item_graphic_id");
set_cmt(0x492C38, "item_drop_id_from_item_graphic_id maps from item_graphic_id to item_drop_id.", 0);
apply_type (0x492C38, "extern item_drop_id item_drop_id_from_item_graphic_id[169];", TINFO_DEFINITE);
cleanup("item_drop_name_from_item_drop_id");set_name(0x492CE4, "item_drop_name_from_item_drop_id");
set_cmt(0x492CE4, "item_drop_name_from_item_drop_id maps from item_drop_id to the name of the\nitem drop graphics.", 0);
apply_type (0x492CE4, "extern char *item_drop_name_from_item_drop_id[35];", TINFO_DEFINITE);
cleanup("nitem_drop_frames_from_item_drop_id");set_name(0x492D70, "nitem_drop_frames_from_item_drop_id");
set_cmt(0x492D70, "nitem_drop_frames_from_item_drop_id maps from item_drop_id to the number of\nframes used by the item drop animation.", 0);
apply_type (0x492D70, "extern int8_t nitem_drop_frames_from_item_drop_id[35];", TINFO_DEFINITE);
cleanup("item_drop_sfx_id_from_item_drop_id");set_name(0x492D94, "item_drop_sfx_id_from_item_drop_id");
set_cmt(0x492D94, "item_drop_sfx_id_from_item_drop_id maps from item_drop_id to the sound effect\nof dropping the item on ground.", 0);
apply_type (0x492D94, "extern sfx_id item_drop_sfx_id_from_item_drop_id[35];", TINFO_DEFINITE);
cleanup("item_place_sfx_id_from_item_drop_id");set_name(0x492E20, "item_place_sfx_id_from_item_drop_id");
set_cmt(0x492E20, "item_place_sfx_id_from_item_drop_id maps from item_drop_id to the sound\neffect of playing the item in the inventory.", 0);
apply_type (0x492E20, "extern sfx_id item_place_sfx_id_from_item_drop_id[35];", TINFO_DEFINITE);
cleanup("item_y");set_name(0x492EAC, "item_y");
set_cmt(0x492EAC, "item_y specifies the current Y-coordinate used for validation of items on\nground.", 0);
apply_type (0x492EAC, "extern int item_y;", TINFO_DEFINITE);
cleanup("griswold_premium_item_quality_lvl_delta");set_name(0x492EB0, "griswold_premium_item_quality_lvl_delta");
set_cmt(0x492EB0, "griswold_premium_item_quality_lvl_delta maps from Griswold premium item\nnumber to a quality level delta as added to the base quality level.", 0);
apply_type (0x492EB0, "extern int griswold_premium_item_quality_lvl_delta[6];", TINFO_DEFINITE);
cleanup("str_492EC8");set_name(0x492EC8, "str_492EC8");
set_cmt(0x492EC8, "\"FLazStaf\"", 0);
apply_type (0x492EC8, "extern char str_492EC8[9];", TINFO_DEFINITE);
cleanup("str_492ED4");set_name(0x492ED4, "str_492ED4");
set_cmt(0x492ED4, "\"Fanvil\"", 0);
apply_type (0x492ED4, "extern char str_492ED4[7];", TINFO_DEFINITE);
cleanup("str_492EDC");set_name(0x492EDC, "str_492EDC");
set_cmt(0x492EDC, "\"Bldstn\"", 0);
apply_type (0x492EDC, "extern char str_492EDC[7];", TINFO_DEFINITE);
cleanup("str_492EE4");set_name(0x492EE4, "str_492EE4");
set_cmt(0x492EE4, "\"Innsign\"", 0);
apply_type (0x492EE4, "extern char str_492EE4[8];", TINFO_DEFINITE);
cleanup("str_492EEC");set_name(0x492EEC, "str_492EEC");
set_cmt(0x492EEC, "\"FMush\"", 0);
apply_type (0x492EEC, "extern char str_492EEC[6];", TINFO_DEFINITE);
cleanup("str_492EF4");set_name(0x492EF4, "str_492EF4");
set_cmt(0x492EF4, "\"FBrain\"", 0);
apply_type (0x492EF4, "extern char str_492EF4[7];", TINFO_DEFINITE);
cleanup("str_492EFC");set_name(0x492EFC, "str_492EFC");
set_cmt(0x492EFC, "\"FEar\"", 0);
apply_type (0x492EFC, "extern char str_492EFC[5];", TINFO_DEFINITE);
cleanup("str_492F04");set_name(0x492F04, "str_492F04");
set_cmt(0x492F04, "\"FBttleDB\"", 0);
apply_type (0x492F04, "extern char str_492F04[9];", TINFO_DEFINITE);
cleanup("str_492F10");set_name(0x492F10, "str_492F10");
set_cmt(0x492F10, "\"FBttleWH\"", 0);
apply_type (0x492F10, "extern char str_492F10[9];", TINFO_DEFINITE);
cleanup("str_492F1C");set_name(0x492F1C, "str_492F1C");
set_cmt(0x492F1C, "\"FBttleBY\"", 0);
apply_type (0x492F1C, "extern char str_492F1C[9];", TINFO_DEFINITE);
cleanup("str_492F28");set_name(0x492F28, "str_492F28");
set_cmt(0x492F28, "\"FBttleBL\"", 0);
apply_type (0x492F28, "extern char str_492F28[9];", TINFO_DEFINITE);
cleanup("str_492F34");set_name(0x492F34, "str_492F34");
set_cmt(0x492F34, "\"FBttleBR\"", 0);
apply_type (0x492F34, "extern char str_492F34[9];", TINFO_DEFINITE);
cleanup("str_492F40");set_name(0x492F40, "str_492F40");
set_cmt(0x492F40, "\"FBttleOR\"", 0);
apply_type (0x492F40, "extern char str_492F40[9];", TINFO_DEFINITE);
cleanup("str_492F4C");set_name(0x492F4C, "str_492F4C");
set_cmt(0x492F4C, "\"FBttleDY\"", 0);
apply_type (0x492F4C, "extern char str_492F4C[9];", TINFO_DEFINITE);
cleanup("str_492F58");set_name(0x492F58, "str_492F58");
set_cmt(0x492F58, "\"FBttleBB\"", 0);
apply_type (0x492F58, "extern char str_492F58[9];", TINFO_DEFINITE);
cleanup("str_492F64");set_name(0x492F64, "str_492F64");
set_cmt(0x492F64, "\"Food\"", 0);
apply_type (0x492F64, "extern char str_492F64[5];", TINFO_DEFINITE);
cleanup("str_492F6C");set_name(0x492F6C, "str_492F6C");
set_cmt(0x492F6C, "\"FBook\"", 0);
apply_type (0x492F6C, "extern char str_492F6C[6];", TINFO_DEFINITE);
cleanup("str_492F74");set_name(0x492F74, "str_492F74");
set_cmt(0x492F74, "\"FPlateAr\"", 0);
apply_type (0x492F74, "extern char str_492F74[9];", TINFO_DEFINITE);
cleanup("str_492F80");set_name(0x492F80, "str_492F80");
set_cmt(0x492F80, "\"Scroll\"", 0);
apply_type (0x492F80, "extern char str_492F80[7];", TINFO_DEFINITE);
cleanup("str_492F88");set_name(0x492F88, "str_492F88");
set_cmt(0x492F88, "\"WShield\"", 0);
apply_type (0x492F88, "extern char str_492F88[8];", TINFO_DEFINITE);
cleanup("str_492F90");set_name(0x492F90, "str_492F90");
set_cmt(0x492F90, "\"LArmor\"", 0);
apply_type (0x492F90, "extern char str_492F90[7];", TINFO_DEFINITE);
cleanup("str_492F98");set_name(0x492F98, "str_492F98");
set_cmt(0x492F98, "\"CrownF\"", 0);
apply_type (0x492F98, "extern char str_492F98[7];", TINFO_DEFINITE);
cleanup("str_492FA0");set_name(0x492FA0, "str_492FA0");
set_cmt(0x492FA0, "\"Rock\"", 0);
apply_type (0x492FA0, "extern char str_492FA0[5];", TINFO_DEFINITE);
cleanup("str_492FA8");set_name(0x492FA8, "str_492FA8");
set_cmt(0x492FA8, "\"SwrdFlip\"", 0);
apply_type (0x492FA8, "extern char str_492FA8[9];", TINFO_DEFINITE);
cleanup("str_492FB4");set_name(0x492FB4, "str_492FB4");
set_cmt(0x492FB4, "\"Helmut\"", 0);
apply_type (0x492FB4, "extern char str_492FB4[7];", TINFO_DEFINITE);
cleanup("str_492FBC");set_name(0x492FBC, "str_492FBC");
set_cmt(0x492FBC, "\"GoldFlip\"", 0);
apply_type (0x492FBC, "extern char str_492FBC[9];", TINFO_DEFINITE);
cleanup("str_492FC8");set_name(0x492FC8, "str_492FC8");
set_cmt(0x492FC8, "\"FBttle\"", 0);
apply_type (0x492FC8, "extern char str_492FC8[7];", TINFO_DEFINITE);
cleanup("str_492FD0");set_name(0x492FD0, "str_492FD0");
set_cmt(0x492FD0, "\"Armor2\"", 0);
apply_type (0x492FD0, "extern char str_492FD0[7];", TINFO_DEFINITE);
cleanup("str_492FD8");set_name(0x492FD8, "str_492FD8");
set_cmt(0x492FD8, "`Items\%s.CEL`", 0);
apply_type (0x492FD8, "extern char str_492FD8[13];", TINFO_DEFINITE);
cleanup("str_492FE8");set_name(0x492FE8, "str_492FE8");
set_cmt(0x492FE8, "\"%s of %s\"", 0);
apply_type (0x492FE8, "extern char str_492FE8[9];", TINFO_DEFINITE);
cleanup("str_492FF4");set_name(0x492FF4, "str_492FF4");
set_cmt(0x492FF4, "\"%s %s\"", 0);
apply_type (0x492FF4, "extern char str_492FF4[6];", TINFO_DEFINITE);
cleanup("str_492FFC");set_name(0x492FFC, "str_492FFC");
set_cmt(0x492FFC, "\"Ear of %s\"", 0);
apply_type (0x492FFC, "extern char str_492FFC[10];", TINFO_DEFINITE);
cleanup("str_493008");set_name(0x493008, "str_493008");
set_cmt(0x493008, "\"fully recover life and mana\"", 0);
apply_type (0x493008, "extern char str_493008[28];", TINFO_DEFINITE);
cleanup("str_493024");set_name(0x493024, "str_493024");
set_cmt(0x493024, "\"recover life and mana\"", 0);
apply_type (0x493024, "extern char str_493024[22];", TINFO_DEFINITE);
cleanup("str_49303C");set_name(0x49303C, "str_49303C");
set_cmt(0x49303C, "\"decrease vitality\"", 0);
apply_type (0x49303C, "extern char str_49303C[18];", TINFO_DEFINITE);
cleanup("str_493050");set_name(0x493050, "str_493050");
set_cmt(0x493050, "\"decrease dexterity\"", 0);
apply_type (0x493050, "extern char str_493050[19];", TINFO_DEFINITE);
cleanup("str_493064");set_name(0x493064, "str_493064");
set_cmt(0x493064, "\"decrease strength\"", 0);
apply_type (0x493064, "extern char str_493064[18];", TINFO_DEFINITE);
cleanup("str_493078");set_name(0x493078, "str_493078");
set_cmt(0x493078, "\"increase vitality\"", 0);
apply_type (0x493078, "extern char str_493078[18];", TINFO_DEFINITE);
cleanup("str_49308C");set_name(0x49308C, "str_49308C");
set_cmt(0x49308C, "\"increase dexterity\"", 0);
apply_type (0x49308C, "extern char str_49308C[19];", TINFO_DEFINITE);
cleanup("str_4930A0");set_name(0x4930A0, "str_4930A0");
set_cmt(0x4930A0, "\"increase magic\"", 0);
apply_type (0x4930A0, "extern char str_4930A0[15];", TINFO_DEFINITE);
cleanup("str_4930B0");set_name(0x4930B0, "str_4930B0");
set_cmt(0x4930B0, "\"increase strength\"", 0);
apply_type (0x4930B0, "extern char str_4930B0[18];", TINFO_DEFINITE);
cleanup("str_4930C4");set_name(0x4930C4, "str_4930C4");
set_cmt(0x4930C4, "\"fully recover mana\"", 0);
apply_type (0x4930C4, "extern char str_4930C4[19];", TINFO_DEFINITE);
cleanup("str_4930D8");set_name(0x4930D8, "str_4930D8");
set_cmt(0x4930D8, "\"recover mana\"", 0);
apply_type (0x4930D8, "extern char str_4930D8[13];", TINFO_DEFINITE);
cleanup("str_4930E8");set_name(0x4930E8, "str_4930E8");
set_cmt(0x4930E8, "\"deadly heal\"", 0);
apply_type (0x4930E8, "extern char str_4930E8[12];", TINFO_DEFINITE);
cleanup("str_4930F4");set_name(0x4930F4, "str_4930F4");
set_cmt(0x4930F4, "\"recover life\"", 0);
apply_type (0x4930F4, "extern char str_4930F4[13];", TINFO_DEFINITE);
cleanup("str_493104");set_name(0x493104, "str_493104");
set_cmt(0x493104, "\"recover partial life\"", 0);
apply_type (0x493104, "extern char str_493104[21];", TINFO_DEFINITE);
cleanup("str_49311C");set_name(0x49311C, "str_49311C");
set_cmt(0x49311C, "\"fully recover life\"", 0);
apply_type (0x49311C, "extern char str_49311C[19];", TINFO_DEFINITE);
cleanup("str_493130");set_name(0x493130, "str_493130");
set_cmt(0x493130, "\"Another ability (NW)\"", 0);
apply_type (0x493130, "extern char str_493130[21];", TINFO_DEFINITE);
cleanup("str_493148");set_name(0x493148, "str_493148");
set_cmt(0x493148, "\"10% of mana added to armor\"", 0);
apply_type (0x493148, "extern char str_493148[27];", TINFO_DEFINITE);
cleanup("str_493164");set_name(0x493164, "str_493164");
set_cmt(0x493164, "\"Armor class added to life\"", 0);
apply_type (0x493164, "extern char str_493164[26];", TINFO_DEFINITE);
cleanup("str_493180");set_name(0x493180, "str_493180");
set_cmt(0x493180, "\"see with infravision\"", 0);
apply_type (0x493180, "extern char str_493180[21];", TINFO_DEFINITE);
cleanup("str_493198");set_name(0x493198, "str_493198");
set_cmt(0x493198, "\"no strength requirement\"", 0);
apply_type (0x493198, "extern char str_493198[24];", TINFO_DEFINITE);
cleanup("str_4931B0");set_name(0x4931B0, "str_4931B0");
set_cmt(0x4931B0, "\"life stealing\"", 0);
apply_type (0x4931B0, "extern char str_4931B0[14];", TINFO_DEFINITE);
cleanup("str_4931C0");set_name(0x4931C0, "str_4931C0");
set_cmt(0x4931C0, "\"constantly lose hit points\"", 0);
apply_type (0x4931C0, "extern char str_4931C0[27];", TINFO_DEFINITE);
cleanup("str_4931DC");set_name(0x4931DC, "str_4931DC");
set_cmt(0x4931DC, "\"one handed sword\"", 0);
apply_type (0x4931DC, "extern char str_4931DC[17];", TINFO_DEFINITE);
cleanup("str_4931F0");set_name(0x4931F0, "str_4931F0");
set_cmt(0x4931F0, "\"Faster attack swing\"", 0);
apply_type (0x4931F0, "extern char str_4931F0[20];", TINFO_DEFINITE);
cleanup("str_493204");set_name(0x493204, "str_493204");
set_cmt(0x493204, "\"altered durability\"", 0);
apply_type (0x493204, "extern char str_493204[19];", TINFO_DEFINITE);
cleanup("str_493218");set_name(0x493218, "str_493218");
set_cmt(0x493218, "\"unusual item damage\"", 0);
apply_type (0x493218, "extern char str_493218[20];", TINFO_DEFINITE);
cleanup("str_49322C");set_name(0x49322C, "str_49322C");
set_cmt(0x49322C, "\"fires random speed arrows\"", 0);
apply_type (0x49322C, "extern char str_49322C[26];", TINFO_DEFINITE);
cleanup("str_493248");set_name(0x493248, "str_493248");
set_cmt(0x493248, "\"adds %i points to damage\"", 0);
apply_type (0x493248, "extern char str_493248[25];", TINFO_DEFINITE);
cleanup("str_493264");set_name(0x493264, "str_493264");
set_cmt(0x493264, "\"fast block\"", 0);
apply_type (0x493264, "extern char str_493264[11];", TINFO_DEFINITE);
cleanup("str_493270");set_name(0x493270, "str_493270");
set_cmt(0x493270, "\"fastest hit recovery\"", 0);
apply_type (0x493270, "extern char str_493270[21];", TINFO_DEFINITE);
cleanup("str_493288");set_name(0x493288, "str_493288");
set_cmt(0x493288, "\"faster hit recovery\"", 0);
apply_type (0x493288, "extern char str_493288[20];", TINFO_DEFINITE);
cleanup("str_49329C");set_name(0x49329C, "str_49329C");
set_cmt(0x49329C, "\"fast hit recovery\"", 0);
apply_type (0x49329C, "extern char str_49329C[18];", TINFO_DEFINITE);
cleanup("str_4932B0");set_name(0x4932B0, "str_4932B0");
set_cmt(0x4932B0, "\"fastest attack\"", 0);
apply_type (0x4932B0, "extern char str_4932B0[15];", TINFO_DEFINITE);
cleanup("str_4932C0");set_name(0x4932C0, "str_4932C0");
set_cmt(0x4932C0, "\"faster attack\"", 0);
apply_type (0x4932C0, "extern char str_4932C0[14];", TINFO_DEFINITE);
cleanup("str_4932D0");set_name(0x4932D0, "str_4932D0");
set_cmt(0x4932D0, "\"fast attack\"", 0);
apply_type (0x4932D0, "extern char str_4932D0[12];", TINFO_DEFINITE);
cleanup("str_4932DC");set_name(0x4932DC, "str_4932DC");
set_cmt(0x4932DC, "\"quick attack\"", 0);
apply_type (0x4932DC, "extern char str_4932DC[13];", TINFO_DEFINITE);
cleanup("str_4932EC");set_name(0x4932EC, "str_4932EC");
set_cmt(0x4932EC, "\"damages target's armor\"", 0);
apply_type (0x4932EC, "extern char str_4932EC[23];", TINFO_DEFINITE);
cleanup("str_493304");set_name(0x493304, "str_493304");
set_cmt(0x493304, "\"hit steals 5% life\"", 0);
apply_type (0x493304, "extern char str_493304[19];", TINFO_DEFINITE);
cleanup("str_493318");set_name(0x493318, "str_493318");
set_cmt(0x493318, "\"hit steals 3% life\"", 0);
apply_type (0x493318, "extern char str_493318[19];", TINFO_DEFINITE);
cleanup("str_49332C");set_name(0x49332C, "str_49332C");
set_cmt(0x49332C, "\"hit steals 5% mana\"", 0);
apply_type (0x49332C, "extern char str_49332C[19];", TINFO_DEFINITE);
cleanup("str_493340");set_name(0x493340, "str_493340");
set_cmt(0x493340, "\"hit steals 3% mana\"", 0);
apply_type (0x493340, "extern char str_493340[19];", TINFO_DEFINITE);
cleanup("str_493354");set_name(0x493354, "str_493354");
set_cmt(0x493354, "\"hit monster doesn't heal\"", 0);
apply_type (0x493354, "extern char str_493354[25];", TINFO_DEFINITE);
cleanup("str_493370");set_name(0x493370, "str_493370");
set_cmt(0x493370, "\"All Resistance equals 0\"", 0);
apply_type (0x493370, "extern char str_493370[24];", TINFO_DEFINITE);
cleanup("str_493388");set_name(0x493388, "str_493388");
set_cmt(0x493388, "\"+200% damage vs. demons\"", 0);
apply_type (0x493388, "extern char str_493388[24];", TINFO_DEFINITE);
cleanup("str_4933A0");set_name(0x4933A0, "str_4933A0");
set_cmt(0x4933A0, "\"knocks target back\"", 0);
apply_type (0x4933A0, "extern char str_4933A0[19];", TINFO_DEFINITE);
cleanup("str_4933B4");set_name(0x4933B4, "str_4933B4");
set_cmt(0x4933B4, "\"absorbs half of trap damage\"", 0);
apply_type (0x4933B4, "extern char str_4933B4[28];", TINFO_DEFINITE);
cleanup("str_4933D0");set_name(0x4933D0, "str_4933D0");
set_cmt(0x4933D0, "\"you can't heal\"", 0);
apply_type (0x4933D0, "extern char str_4933D0[15];", TINFO_DEFINITE);
cleanup("str_4933E0");set_name(0x4933E0, "str_4933E0");
set_cmt(0x4933E0, "\"user loses all mana\"", 0);
apply_type (0x4933E0, "extern char str_4933E0[20];", TINFO_DEFINITE);
cleanup("str_4933F4");set_name(0x4933F4, "str_4933F4");
set_cmt(0x4933F4, "\"attacker takes 1-3 damage\"", 0);
apply_type (0x4933F4, "extern char str_4933F4[26];", TINFO_DEFINITE);
cleanup("str_493410");set_name(0x493410, "str_493410");
set_cmt(0x493410, "\"lightning arrows damage %i-%i\"", 0);
apply_type (0x493410, "extern char str_493410[30];", TINFO_DEFINITE);
cleanup("str_493430");set_name(0x493430, "str_493430");
set_cmt(0x493430, "\"fire arrows damage: %i-%i\"", 0);
apply_type (0x493430, "extern char str_493430[26];", TINFO_DEFINITE);
cleanup("str_49344C");set_name(0x49344C, "str_49344C");
set_cmt(0x49344C, "\"-%i%% light radius\"", 0);
apply_type (0x49344C, "extern char str_49344C[19];", TINFO_DEFINITE);
cleanup("str_493460");set_name(0x493460, "str_493460");
set_cmt(0x493460, "\"+%i%% light radius\"", 0);
apply_type (0x493460, "extern char str_493460[19];", TINFO_DEFINITE);
cleanup("str_493474");set_name(0x493474, "str_493474");
set_cmt(0x493474, "\"indestructible\"", 0);
apply_type (0x493474, "extern char str_493474[15];", TINFO_DEFINITE);
cleanup("str_493484");set_name(0x493484, "str_493484");
set_cmt(0x493484, "\"decreased durability\"", 0);
apply_type (0x493484, "extern char str_493484[21];", TINFO_DEFINITE);
cleanup("str_49349C");set_name(0x49349C, "str_49349C");
set_cmt(0x49349C, "\"high durability\"", 0);
apply_type (0x49349C, "extern char str_49349C[16];", TINFO_DEFINITE);
cleanup("str_4934AC");set_name(0x4934AC, "str_4934AC");
set_cmt(0x4934AC, "\"Mana : %+i\"", 0);
apply_type (0x4934AC, "extern char str_4934AC[11];", TINFO_DEFINITE);
cleanup("str_4934B8");set_name(0x4934B8, "str_4934B8");
set_cmt(0x4934B8, "\"Hit Points : %+i\"", 0);
apply_type (0x4934B8, "extern char str_4934B8[17];", TINFO_DEFINITE);
cleanup("str_4934CC");set_name(0x4934CC, "str_4934CC");
set_cmt(0x4934CC, "\"%+i damage from enemies\"", 0);
apply_type (0x4934CC, "extern char str_4934CC[24];", TINFO_DEFINITE);
cleanup("str_4934E4");set_name(0x4934E4, "str_4934E4");
set_cmt(0x4934E4, "\"%+i to all attributes\"", 0);
apply_type (0x4934E4, "extern char str_4934E4[22];", TINFO_DEFINITE);
cleanup("str_4934FC");set_name(0x4934FC, "str_4934FC");
set_cmt(0x4934FC, "\"%+i to vitality\"", 0);
apply_type (0x4934FC, "extern char str_4934FC[16];", TINFO_DEFINITE);
cleanup("str_49350C");set_name(0x49350C, "str_49350C");
set_cmt(0x49350C, "\"%+i to dexterity\"", 0);
apply_type (0x49350C, "extern char str_49350C[17];", TINFO_DEFINITE);
cleanup("str_493520");set_name(0x493520, "str_493520");
set_cmt(0x493520, "\"%+i to magic\"", 0);
apply_type (0x493520, "extern char str_493520[13];", TINFO_DEFINITE);
cleanup("str_493530");set_name(0x493530, "str_493530");
set_cmt(0x493530, "\"%+i to strength\"", 0);
apply_type (0x493530, "extern char str_493530[16];", TINFO_DEFINITE);
cleanup("str_493540");set_name(0x493540, "str_493540");
set_cmt(0x493540, "\"Lightning hit damage: %i-%i\"", 0);
apply_type (0x493540, "extern char str_493540[28];", TINFO_DEFINITE);
cleanup("str_49355C");set_name(0x49355C, "str_49355C");
set_cmt(0x49355C, "\"Fire hit damage: %i-%i\"", 0);
apply_type (0x49355C, "extern char str_49355C[23];", TINFO_DEFINITE);
cleanup("str_493574");set_name(0x493574, "str_493574");
set_cmt(0x493574, "\"%i %s charges\"", 0);
apply_type (0x493574, "extern char str_493574[14];", TINFO_DEFINITE);
cleanup("str_493584");set_name(0x493584, "str_493584");
set_cmt(0x493584, "\"Extra charges\"", 0);
apply_type (0x493584, "extern char str_493584[14];", TINFO_DEFINITE);
cleanup("str_493594");set_name(0x493594, "str_493594");
set_cmt(0x493594, "\"spells are decreased 1 level\"", 0);
apply_type (0x493594, "extern char str_493594[29];", TINFO_DEFINITE);
cleanup("str_4935B4");set_name(0x4935B4, "str_4935B4");
set_cmt(0x4935B4, "\"spells are increased 2 levels\"", 0);
apply_type (0x4935B4, "extern char str_4935B4[30];", TINFO_DEFINITE);
cleanup("str_4935D4");set_name(0x4935D4, "str_4935D4");
set_cmt(0x4935D4, "\"spells are increased 1 level\"", 0);
apply_type (0x4935D4, "extern char str_4935D4[29];", TINFO_DEFINITE);
cleanup("str_4935F4");set_name(0x4935F4, "str_4935F4");
set_cmt(0x4935F4, "\"Resist All : 75%% MAX\"", 0);
apply_type (0x4935F4, "extern char str_4935F4[22];", TINFO_DEFINITE);
cleanup("str_49360C");set_name(0x49360C, "str_49360C");
set_cmt(0x49360C, "\"Resist All : %+i%%\"", 0);
apply_type (0x49360C, "extern char str_49360C[19];", TINFO_DEFINITE);
cleanup("str_493620");set_name(0x493620, "str_493620");
set_cmt(0x493620, "\"Resist Magic : 75%% MAX\"", 0);
apply_type (0x493620, "extern char str_493620[24];", TINFO_DEFINITE);
cleanup("str_493638");set_name(0x493638, "str_493638");
set_cmt(0x493638, "\"Resist Magic : %+i%%\"", 0);
apply_type (0x493638, "extern char str_493638[21];", TINFO_DEFINITE);
cleanup("str_493650");set_name(0x493650, "str_493650");
set_cmt(0x493650, "\"Resist Lightning : 75%% MAX\"", 0);
apply_type (0x493650, "extern char str_493650[28];", TINFO_DEFINITE);
cleanup("str_49366C");set_name(0x49366C, "str_49366C");
set_cmt(0x49366C, "\"Resist Lightning : %+i%%\"", 0);
apply_type (0x49366C, "extern char str_49366C[25];", TINFO_DEFINITE);
cleanup("str_493688");set_name(0x493688, "str_493688");
set_cmt(0x493688, "\"Resist Fire : 75%% MAX\"", 0);
apply_type (0x493688, "extern char str_493688[23];", TINFO_DEFINITE);
cleanup("str_4936A0");set_name(0x4936A0, "str_4936A0");
set_cmt(0x4936A0, "\"Resist Fire : %+i%%\"", 0);
apply_type (0x4936A0, "extern char str_4936A0[20];", TINFO_DEFINITE);
cleanup("str_4936B4");set_name(0x4936B4, "str_4936B4");
set_cmt(0x4936B4, "\"armor class: %i\"", 0);
apply_type (0x4936B4, "extern char str_4936B4[16];", TINFO_DEFINITE);
cleanup("str_4936C4");set_name(0x4936C4, "str_4936C4");
set_cmt(0x4936C4, "\"%+i%% armor\"", 0);
apply_type (0x4936C4, "extern char str_4936C4[12];", TINFO_DEFINITE);
cleanup("str_4936D0");set_name(0x4936D0, "str_4936D0");
set_cmt(0x4936D0, "\"to hit: %+i%%, %+i%% damage\"", 0);
apply_type (0x4936D0, "extern char str_4936D0[28];", TINFO_DEFINITE);
cleanup("str_4936EC");set_name(0x4936EC, "str_4936EC");
set_cmt(0x4936EC, "\"%+i%% damage\"", 0);
apply_type (0x4936EC, "extern char str_4936EC[13];", TINFO_DEFINITE);
cleanup("str_4936FC");set_name(0x4936FC, "str_4936FC");
set_cmt(0x4936FC, "\"chance to hit : %+i%%\"", 0);
apply_type (0x4936FC, "extern char str_4936FC[22];", TINFO_DEFINITE);
cleanup("str_493714");set_name(0x493714, "str_493714");
set_cmt(0x493714, "\"Right click to view\"", 0);
apply_type (0x493714, "extern char str_493714[20];", TINFO_DEFINITE);
cleanup("str_493728");set_name(0x493728, "str_493728");
set_cmt(0x493728, "\"Right click to read\"", 0);
apply_type (0x493728, "extern char str_493728[20];", TINFO_DEFINITE);
cleanup("str_49373C");set_name(0x49373C, "str_49373C");
set_cmt(0x49373C, "\"Right click to use\"", 0);
apply_type (0x49373C, "extern char str_49373C[19];", TINFO_DEFINITE);
cleanup("str_493750");set_name(0x493750, "str_493750");
set_cmt(0x493750, "\"left-click to target\"", 0);
apply_type (0x493750, "extern char str_493750[21];", TINFO_DEFINITE);
cleanup("str_493768");set_name(0x493768, "str_493768");
set_cmt(0x493768, "\"Right-click to read, then\"", 0);
apply_type (0x493768, "extern char str_493768[26];", TINFO_DEFINITE);
cleanup("str_493784");set_name(0x493784, "str_493784");
set_cmt(0x493784, "\"Right-click to read\"", 0);
apply_type (0x493784, "extern char str_493784[20];", TINFO_DEFINITE);
cleanup("str_493798");set_name(0x493798, "str_493798");
set_cmt(0x493798, "\"%s %i Dex\"", 0);
apply_type (0x493798, "extern char str_493798[10];", TINFO_DEFINITE);
cleanup("str_4937A4");set_name(0x4937A4, "str_4937A4");
set_cmt(0x4937A4, "\"%s %i Mag\"", 0);
apply_type (0x4937A4, "extern char str_4937A4[10];", TINFO_DEFINITE);
cleanup("str_4937B0");set_name(0x4937B0, "str_4937B0");
set_cmt(0x4937B0, "\"%s %i Str\"", 0);
apply_type (0x4937B0, "extern char str_4937B0[10];", TINFO_DEFINITE);
cleanup("str_4937BC");set_name(0x4937BC, "str_4937BC");
set_cmt(0x4937BC, "\"Required:\"", 0);
apply_type (0x4937BC, "extern char str_4937BC[10];", TINFO_DEFINITE);
cleanup("str_4937C8");set_name(0x4937C8, "str_4937C8");
set_cmt(0x4937C8, "\"unique item\"", 0);
apply_type (0x4937C8, "extern char str_4937C8[12];", TINFO_DEFINITE);
cleanup("str_4937D4");set_name(0x4937D4, "str_4937D4");
set_cmt(0x4937D4, "\"Charges: %i/%i\"", 0);
apply_type (0x4937D4, "extern char str_4937D4[15];", TINFO_DEFINITE);
cleanup("str_4937E4");set_name(0x4937E4, "str_4937E4");
set_cmt(0x4937E4, "\"dam: %i-%i  Dur: %i/%i\"", 0);
apply_type (0x4937E4, "extern char str_4937E4[23];", TINFO_DEFINITE);
cleanup("str_4937FC");set_name(0x4937FC, "str_4937FC");
set_cmt(0x4937FC, "\"armor: %i  Dur: %i/%i\"", 0);
apply_type (0x4937FC, "extern char str_4937FC[22];", TINFO_DEFINITE);
cleanup("str_493814");set_name(0x493814, "str_493814");
set_cmt(0x493814, "\"armor: %i  Indestructible\"", 0);
apply_type (0x493814, "extern char str_493814[26];", TINFO_DEFINITE);
cleanup("str_493830");set_name(0x493830, "str_493830");
set_cmt(0x493830, "\"damage: %i-%i  Dur: %i/%i\"", 0);
apply_type (0x493830, "extern char str_493830[26];", TINFO_DEFINITE);
cleanup("str_49384C");set_name(0x49384C, "str_49384C");
set_cmt(0x49384C, "\"damage: %i-%i  Indestructible\"", 0);
apply_type (0x49384C, "extern char str_49384C[30];", TINFO_DEFINITE);
cleanup("str_49386C");set_name(0x49386C, "str_49386C");
set_cmt(0x49386C, "\"Not Identified\"", 0);
apply_type (0x49386C, "extern char str_49386C[15];", TINFO_DEFINITE);
cleanup("mainmenu_cpp_init_value");set_name(0x646CE0, "mainmenu_cpp_init_value");
set_cmt(0x646CE0, "+Infinity after initialization of mainmenu.cpp.", 0);
apply_type (0x646CE0, "extern float mainmenu_cpp_init_value;", TINFO_DEFINITE);
cleanup("movie_cpp_init_value");set_name(0x659AF4, "movie_cpp_init_value");
set_cmt(0x659AF4, "+Infinity after initialization of movie.cpp.", 0);
apply_type (0x659AF4, "extern float movie_cpp_init_value;", TINFO_DEFINITE);
cleanup("movie_playing");set_name(0x659AF8, "movie_playing");
set_cmt(0x659AF8, "movie_playing specifies whether a movie is currently playing.", 0);
apply_type (0x659AF8, "extern bool8_t movie_playing;", TINFO_DEFINITE);
cleanup("loop_movie");set_name(0x659AFC, "loop_movie");
set_cmt(0x659AFC, "loop_movie specifies whether to loop the playback of the movie.", 0);
apply_type (0x659AFC, "extern bool32_t loop_movie;", TINFO_DEFINITE);
cleanup("player_cpp_init_value");set_name(0x68643C, "player_cpp_init_value");
set_cmt(0x68643C, "+Infinity after initialization of player.cpp.", 0);
apply_type (0x68643C, "extern float player_cpp_init_value;", TINFO_DEFINITE);
cleanup("players");set_name(0x686448, "players");
set_cmt(0x686448, "players contains the player characters of the current game.", 0);
apply_type (0x686448, "extern Player players[4];", TINFO_DEFINITE);
cleanup("pack_cpp_init_value");set_name(0x67D7C8, "pack_cpp_init_value");
set_cmt(0x67D7C8, "+Infinity after initialization of pack.cpp.", 0);
apply_type (0x67D7C8, "extern float pack_cpp_init_value;", TINFO_DEFINITE);
cleanup("dx_cpp_init_value");set_name(0x52A514, "dx_cpp_init_value");
set_cmt(0x52A514, "+Infinity after initialization of dx.cpp.", 0);
apply_type (0x52A514, "extern float dx_cpp_init_value;", TINFO_DEFINITE);
cleanup("screen_buf");set_name(0x52A524, "screen_buf");
set_cmt(0x52A524, "screen_buf is the display buffer, containing the pixels of the screen.", 0);
apply_type (0x52A524, "extern Screen *screen_buf;", TINFO_DEFINITE);
cleanup("path_nodes");set_name(0x67E3D8, "path_nodes");
set_cmt(0x67E3D8, "path_nodes records the nodes of the path constructed by the path finding\nalgorithm.", 0);
apply_type (0x67E3D8, "extern PathNode path_nodes[300];", TINFO_DEFINITE);
cleanup("engine_cpp_init_value");set_name(0x52B968, "engine_cpp_init_value");
set_cmt(0x52B968, "+Infinity after initialization of engine.cpp.", 0);
apply_type (0x52B968, "extern float engine_cpp_init_value;", TINFO_DEFINITE);
cleanup("initial_seed");set_name(0x52B974, "initial_seed");
set_cmt(0x52B974, "initial_seed represents the initial global seed of the game.", 0);
apply_type (0x52B974, "extern int32_t initial_seed;", TINFO_DEFINITE);
cleanup("seed");set_name(0x52B97C, "seed");
set_cmt(0x52B97C, "seed represents the global seed of the game.", 0);
apply_type (0x52B97C, "extern int32_t seed;", TINFO_DEFINITE);
cleanup("seed_count");set_name(0x52B998, "seed_count");
set_cmt(0x52B998, "seed_count specifies the number of invokations to engine_rand.", 0);
apply_type (0x52B998, "extern int32_t seed_count;", TINFO_DEFINITE);
cleanup("objcurs_cel");set_name(0x4B8CB0, "objcurs_cel");
set_cmt(0x4B8CB0, "objcurs_cel points to the contents of \"data/inv/objcurs.cel\".", 0);
apply_type (0x4B8CB0, "extern void *objcurs_cel;", TINFO_DEFINITE);
cleanup("square_cel");set_name(0x4BD2FC, "square_cel");
set_cmt(0x4BD2FC, "square_cel points to the contents of \"data/quest.cel\".", 0);
apply_type (0x4BD2FC, "extern void *square_cel;", TINFO_DEFINITE);
cleanup("debug_active_monster_map");set_name(0x4BD300, "debug_active_monster_map");
set_cmt(0x4BD300, "debug_active_monster_map tracks the active monsters on each dlvl of the map.", 0);
apply_type (0x4BD300, "extern int8_t debug_active_monster_map[17][112][112];", TINFO_DEFINITE);
cleanup("debug_dflag_map");set_name(0x4F1400, "debug_dflag_map");
set_cmt(0x4F1400, "debug_dflag_map tracks the dungeon flag DFLAG_08 on each dlvl of the map.", 0);
apply_type (0x4F1400, "extern int8_t debug_dflag_map[17][112][112];", TINFO_DEFINITE);
cleanup("quest_cel");set_name(0x69BD08, "quest_cel");
set_cmt(0x69BD08, "quest_cel points to the contents of \"data/quest.cel\".", 0);
apply_type (0x69BD08, "extern void *quest_cel;", TINFO_DEFINITE);
cleanup("quests");set_name(0x69BD10, "quests");
set_cmt(0x69BD10, "quests contains the quests of the current game.", 0);
apply_type (0x69BD10, "extern Quest quests[16];", TINFO_DEFINITE);
cleanup("save_ptr");set_name(0x646A2C, "save_ptr");
set_cmt(0x646A2C, "save_ptr holds a pointer into the contents of the save file, used for loading\nsaves.", 0);
apply_type (0x646A2C, "extern uint8_t *save_ptr;", TINFO_DEFINITE);
cleanup("log_cpp_init_value");set_name(0x646A30, "log_cpp_init_value");
set_cmt(0x646A30, "+Infinity after initialization of log.cpp.", 0);
apply_type (0x646A30, "extern float log_cpp_init_value;", TINFO_DEFINITE);
cleanup("cut_scene_cel");set_name(0x634CA8, "cut_scene_cel");
set_cmt(0x634CA8, "cut_scene_cel points to the contents of the active cut scene CEL\n\"gendata/cut*.cel\".", 0);
apply_type (0x634CA8, "extern uint8_t *cut_scene_cel;", TINFO_DEFINITE);
cleanup("interfac_cpp_init_value");set_name(0x634CAC, "interfac_cpp_init_value");
set_cmt(0x634CAC, "+Infinity after initialization of interfac.cpp.", 0);
apply_type (0x634CAC, "extern float interfac_cpp_init_value;", TINFO_DEFINITE);
cleanup("duricons_cel");set_name(0x4B84D0, "duricons_cel");
set_cmt(0x4B84D0, "duricons_cel points to the contents of \"items/duricons.cel\".", 0);
apply_type (0x4B84D0, "extern void *duricons_cel;", TINFO_DEFINITE);
cleanup("charbut_cel");set_name(0x4B84D4, "charbut_cel");
set_cmt(0x4B84D4, "charbut_cel points to the contents of \"data/charbut.cel\".", 0);
apply_type (0x4B84D4, "extern void *charbut_cel;", TINFO_DEFINITE);
cleanup("p8but2_cel");set_name(0x4B8510, "p8but2_cel");
set_cmt(0x4B8510, "p8but2_cel points to the contents of \"ctrlpan/p8but2.cel\".", 0);
apply_type (0x4B8510, "extern void *p8but2_cel;", TINFO_DEFINITE);
cleanup("panel8bu_cel");set_name(0x4B8514, "panel8bu_cel");
set_cmt(0x4B8514, "panel8bu_cel points to the contents of \"ctrlpan/panel8bu.cel\".", 0);
apply_type (0x4B8514, "extern void *panel8bu_cel;", TINFO_DEFINITE);
cleanup("char_cel");set_name(0x4B8518, "char_cel");
set_cmt(0x4B8518, "char_cel points to the contents of \"data/char.cel\".", 0);
apply_type (0x4B8518, "extern void *char_cel;", TINFO_DEFINITE);
cleanup("smaltext_cel");set_name(0x4B87FC, "smaltext_cel");
set_cmt(0x4B87FC, "smaltext_cel points to the contents of \"ctrlpan/smaltext.cel\".", 0);
apply_type (0x4B87FC, "extern void *smaltext_cel;", TINFO_DEFINITE);
cleanup("talkbutt_cel");set_name(0x4B880C, "talkbutt_cel");
set_cmt(0x4B880C, "talkbutt_cel points to the contents of \"ctrlpan/talkbutt.cel\".", 0);
apply_type (0x4B880C, "extern void *talkbutt_cel;", TINFO_DEFINITE);
cleanup("golddrop_cel");set_name(0x4B8844, "golddrop_cel");
set_cmt(0x4B8844, "golddrop_cel points to the contents of \"ctrlpan/golddrop.cel\".", 0);
apply_type (0x4B8844, "extern void *golddrop_cel;", TINFO_DEFINITE);
cleanup("spellbkb_cel");set_name(0x4B8848, "spellbkb_cel");
set_cmt(0x4B8848, "spellbkb_cel points to the contents of \"data/spellbkb.cel\".", 0);
apply_type (0x4B8848, "extern void *spellbkb_cel;", TINFO_DEFINITE);
cleanup("spelli2_cel");set_name(0x4B8964, "spelli2_cel");
set_cmt(0x4B8964, "spelli2_cel points to the contents of \"data/spelli2.cel\".", 0);
apply_type (0x4B8964, "extern void *spelli2_cel;", TINFO_DEFINITE);
cleanup("spellbk_cel");set_name(0x4B8974, "spellbk_cel");
set_cmt(0x4B8974, "spellbk_cel points to the contents of \"data/spellbk.cel\".", 0);
apply_type (0x4B8974, "extern void *spellbk_cel;", TINFO_DEFINITE);
cleanup("cel_ptr");set_name(0x4B8A80, "cel_ptr");
set_cmt(0x4B8A80, "cel_ptr temporarily points to the contents of \"ctrlpan/panel8.cel\" and\n\"ctrlpan/p8bulbs.cel\".", 0);
apply_type (0x4B8A80, "extern void *cel_ptr;", TINFO_DEFINITE);
cleanup("spelicon_cel");set_name(0x4B8C8C, "spelicon_cel");
set_cmt(0x4B8C8C, "spelicon_cel points to the contents of \"ctrlpan/spelicon.cel\".", 0);
apply_type (0x4B8C8C, "extern void *spelicon_cel;", TINFO_DEFINITE);
cleanup("talkpanl_cel");set_name(0x4B8C94, "talkpanl_cel");
set_cmt(0x4B8C94, "talkpanl_cel points to the contents of \"ctrlpan/talkpanl.cel\".", 0);
apply_type (0x4B8C94, "extern void *talkpanl_cel;", TINFO_DEFINITE);
cleanup("wave_cpp_init_value");set_name(0x6ABB34, "wave_cpp_init_value");
set_cmt(0x6ABB34, "+Infinity after initialization of wave.cpp.", 0);
apply_type (0x6ABB34, "extern float wave_cpp_init_value;", TINFO_DEFINITE);
cleanup("game_pass");set_name(0x6771C4, "game_pass");
set_cmt(0x6771C4, "game_pass specifies the password of the network game.", 0);
apply_type (0x6771C4, "extern char game_pass[128];", TINFO_DEFINITE);
cleanup("heroes");set_name(0x677250, "heroes");
set_cmt(0x677250, "heroes specifies the essential information about a player, as used in save\nfiles.", 0);
apply_type (0x677250, "extern Hero heroes[4];", TINFO_DEFINITE);
cleanup("multi_cpp_init_value");set_name(0x678620, "multi_cpp_init_value");
set_cmt(0x678620, "+Infinity after initialization of multi.cpp.", 0);
apply_type (0x678620, "extern float multi_cpp_init_value;", TINFO_DEFINITE);
cleanup("max_players");set_name(0x679660, "max_players");
set_cmt(0x679660, "max_players specifies the maximum number of players in a game, where 1\nrepresents a single player game and 4 represents a multi player game.", 0);
apply_type (0x679660, "extern int8_t max_players;", TINFO_DEFINITE);
cleanup("game_name");set_name(0x679664, "game_name");
set_cmt(0x679664, "game_name specifies the name of the network game.", 0);
apply_type (0x679664, "extern char game_name[128];", TINFO_DEFINITE);
cleanup("tmsg_queue");set_name(0x6AAC14, "tmsg_queue");
set_cmt(0x6AAC14, "tmsg_queue is a queue of timed messages.", 0);
apply_type (0x6AAC14, "extern TMsg *tmsg_queue;", TINFO_DEFINITE);
cleanup("has_greeted");set_name(0x6AAC18, "has_greeted");
set_cmt(0x6AAC18, "has_greeted specifies whether an NPC has recently greeted the player.", 0);
apply_type (0x6AAC18, "extern bool32_t has_greeted;", TINFO_DEFINITE);
cleanup("cow_active_sfx_index");set_name(0x6AAC1C, "cow_active_sfx_index");
set_cmt(0x6AAC1C, "cow_active_sfx_index specifies the active index (between 0 and 2) into\ncow_sfx_id_from_class.", 0);
apply_type (0x6AAC1C, "extern int cow_active_sfx_index;", TINFO_DEFINITE);
cleanup("ntowners");set_name(0x6AAC20, "ntowners");
set_cmt(0x6AAC20, "ntowners specifies the number of active NPCs in Tristram.", 0);
apply_type (0x6AAC20, "extern int ntowners;", TINFO_DEFINITE);
cleanup("ncow_clicks");set_name(0x6AAC24, "ncow_clicks");
set_cmt(0x6AAC24, "ncow_clicks specifies the number of consequtive times the player has\ninteracted with a cow.", 0);
apply_type (0x6AAC24, "extern int ncow_clicks;", TINFO_DEFINITE);
cleanup("unused_6AAC28");set_name(0x6AAC28, "unused_6AAC28");
set_cmt(0x6AAC28, "NOTE: unused.", 0);
apply_type (0x6AAC28, "extern int unused_6AAC28;", TINFO_DEFINITE);
cleanup("has_initialized_wirt");set_name(0x6AAC2C, "has_initialized_wirt");
set_cmt(0x6AAC2C, "has_initialized_wirt specifies whether Wirt has been initialized.", 0);
apply_type (0x6AAC2C, "extern bool32_t has_initialized_wirt;", TINFO_DEFINITE);
cleanup("cow_cel");set_name(0x6AAC30, "cow_cel");
set_cmt(0x6AAC30, "cow_cel points to the contents of \"towners/animals/cow.cel\".", 0);
apply_type (0x6AAC30, "extern void *cow_cel;", TINFO_DEFINITE);
cleanup("diablo_cpp_init_value");set_name(0x525514, "diablo_cpp_init_value");
set_cmt(0x525514, "+Infinity after initialization of diablo.cpp.", 0);
apply_type (0x525514, "extern float diablo_cpp_init_value;", TINFO_DEFINITE);
cleanup("hWndParent");set_name(0x525518, "hWndParent");
set_cmt(0x525518, "hWndParent is the window handle of the game.", 0);
apply_type (0x525518, "extern HWND hWndParent;", TINFO_DEFINITE);
cleanup("mouse_y");set_name(0x525600, "mouse_y");
set_cmt(0x525600, "mouse_y specifies the current Y-coordinate of the mouse cursor.", 0);
apply_type (0x525600, "extern int mouse_y;", TINFO_DEFINITE);
cleanup("mouse_x");set_name(0x525604, "mouse_x");
set_cmt(0x525604, "mouse_x specifies the current X-coordinate of the mouse cursor.", 0);
apply_type (0x525604, "extern int mouse_x;", TINFO_DEFINITE);
cleanup("hInstance");set_name(0x5256EC, "hInstance");
set_cmt(0x5256EC, "hInstance is the instance of the main process.", 0);
apply_type (0x5256EC, "extern HINSTANCE hInstance;", TINFO_DEFINITE);
cleanup("visible_tile_squares");set_name(0x525720, "visible_tile_squares");
set_cmt(0x525720, "visible_tile_squares specifies whether tile squares are visible. In the\ndebug release of Diablo 1, this setting was configurable through the command\nline flag \"-v\".\nReferences:\n   * http://diablo1.se/notes/debug.html", 0);
apply_type (0x525720, "extern bool32_t visible_tile_squares;", TINFO_DEFINITE);
cleanup("lighting_flag4");set_name(0x525728, "lighting_flag4");
set_cmt(0x525728, "lighting_flag4 specifies flags used for light effects.", 0);
apply_type (0x525728, "extern uint32_t lighting_flag4;", TINFO_DEFINITE);
cleanup("flag_r_seed");set_name(0x525738, "flag_r_seed");
set_cmt(0x525738, "flag_r_seed specifies the seed used for dungeon generation through the -r\ncommand line flag.", 0);
apply_type (0x525738, "extern int32_t flag_r_seed;", TINFO_DEFINITE);
cleanup("effects_cpp_init_value");set_name(0x52A550, "effects_cpp_init_value");
set_cmt(0x52A550, "+Infinity after initialization of effects.cpp.", 0);
apply_type (0x52A550, "extern float effects_cpp_init_value;", TINFO_DEFINITE);
cleanup("dungeon_message_ticks");set_name(0x52A554, "dungeon_message_ticks");
set_cmt(0x52A554, "dungeon_message_ticks specifies the number of game ticks to player the\ndungeon message sound.", 0);
apply_type (0x52A554, "extern int dungeon_message_ticks;", TINFO_DEFINITE);
cleanup("dungeon_message_sfx_id");set_name(0x52A558, "dungeon_message_sfx_id");
set_cmt(0x52A558, "dungeon_message_sfx_id specifies a dungeon message sound to play.", 0);
apply_type (0x52A558, "extern sfx_id dungeon_message_sfx_id;", TINFO_DEFINITE);
cleanup("sfx_stream");set_name(0x52A55C, "sfx_stream");
set_cmt(0x52A55C, "sfx_stream is a handle to the current sound effect playing.", 0);
apply_type (0x52A55C, "extern void *sfx_stream;", TINFO_DEFINITE);
cleanup("sfx_data_cur");set_name(0x52A560, "sfx_data_cur");
set_cmt(0x52A560, "sfx_data_cur specifies the sound file and the playback state of the current\nsound effect.", 0);
apply_type (0x52A560, "extern SfxData *sfx_data_cur;", TINFO_DEFINITE);
cleanup("level_frame_types");set_name(0x52BA00, "level_frame_types");
set_cmt(0x52BA00, "level_frame_types specifies the CEL frame decoder type for each frame of the\nlevel CEL (e.g. \"levels/l1data/l1.cel\").\nThe decoder type may be one of the following.\n    0x0000 // cel.decodeType0\n    0x1000 // cel.decodeType1\n    0x2000 // cel.decodeType2\n    0x3000 // cel.decodeType3\n    0x4000 // cel.decodeType4\n    0x5000 // cel.decodeType5\n    0x6000 // cel.decodeType6\nReferences:\n   * https://github.com/sanctuary/formats/tree/master/image/cel", 0);
apply_type (0x52BA00, "extern int16_t level_frame_types[2048];", TINFO_DEFINITE);
cleanup("npc_num_map");set_name(0x52D208, "npc_num_map");
set_cmt(0x52D208, "npc_num_map contains the NPC numbers of the map. The NPC number represents a\ntowner number (towners array index) in Tristram and a monster number\n(monsters array index) in the dungeon.\nTODO: Figure out how to fix broken links. Requires graphics files, which may\nnot be put online. Perhaps, add a script to view locally.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/bss/towners.cpp#towners\n   * https://github.com/sanctuary/notes/blob/master/bss/monsters.cpp#monsters", 0);
apply_type (0x52D208, "extern int32_t npc_num_map[112][112];", TINFO_DEFINITE);
cleanup("tile_id_map");set_name(0x539608, "tile_id_map");
set_cmt(0x539608, "tile_id_map contains the tile IDs of the map.\nReferences:\n   * https://github.com/sanctuary/graphics/blob/master/l1/tiles/README.md#tileset-of-dungeon-layout-1", 0);
apply_type (0x539608, "extern uint8_t tile_id_map[40][40];", TINFO_DEFINITE);
cleanup("object_num_map");set_name(0x539C48, "object_num_map");
set_cmt(0x539C48, "object_num_map contains the object numbers (objects array indices) of the\nmap.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/bss/objects.cpp#objects", 0);
apply_type (0x539C48, "extern int8_t object_num_map[112][112];", TINFO_DEFINITE);
cleanup("nlevel_frames");set_name(0x53CD4C, "nlevel_frames");
set_cmt(0x53CD4C, "nlevel_frames specifies the number of frames in the level cel (e.g.\n\"levels/l1data/l1.cel\").", 0);
apply_type (0x53CD4C, "extern int32_t nlevel_frames;", TINFO_DEFINITE);
cleanup("tile_id_map_backup");set_name(0x53CD50, "tile_id_map_backup");
set_cmt(0x53CD50, "tile_id_map_backup contains a backup of the tile IDs of the map.", 0);
apply_type (0x53CD50, "extern uint8_t tile_id_map_backup[40][40];", TINFO_DEFINITE);
cleanup("dead_map");set_name(0x53D390, "dead_map");
set_cmt(0x53D390, "dead_map contains the dead numbers (deads array indices) and dead direction\nof the map, encoded as specified by the pseudo-code below.\n   dead_num  = dead_map[x][y]&0x1F\n   direction = dead_map[x][y]>>5\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/bss/dead.cpp#deads\n   * https://github.com/sanctuary/notes/blob/master/enums.h#direction", 0);
apply_type (0x53D390, "extern int8_t dead_map[112][112];", TINFO_DEFINITE);
cleanup("dpiece_defs_map_1");set_name(0x540490, "dpiece_defs_map_1");
set_cmt(0x540490, "dpiece_defs_map_1 specifies the dungeon piece information for a given\ncoordinate and block number.", 0);
apply_type (0x540490, "extern int16_t dpiece_defs_map_1[16][112][112];", TINFO_DEFINITE);
cleanup("transparency_index");set_name(0x5A5590, "transparency_index");
set_cmt(0x5A5590, "transparency_index specifies the current transparency category.", 0);
apply_type (0x5A5590, "extern int8_t transparency_index;", TINFO_DEFINITE);
cleanup("piece_id_map");set_name(0x5A5BD8, "piece_id_map");
set_cmt(0x5A5BD8, "piece_id_map contains the piece IDs of each tile on the map.", 0);
apply_type (0x5A5BD8, "extern int32_t piece_id_map[112][112];", TINFO_DEFINITE);
cleanup("tile_defs");set_name(0x5B70DC, "tile_defs");
set_cmt(0x5B70DC, "tile_defs specifies the tile definitions of the active dungeon type; (e.g.\nlevels/l1data/l1.til).", 0);
apply_type (0x5B70DC, "extern Tile *tile_defs;", TINFO_DEFINITE);
cleanup("dpiece_defs");set_name(0x5B70E0, "dpiece_defs");
set_cmt(0x5B70E0, "dpiece_defs specifies the dungeon piece definitions (a.k.a. miniture tiles)\nof the active dungeon type; (e.g. levels/l1data/l1.min).", 0);
apply_type (0x5B70E0, "extern DPiece *dpiece_defs;", TINFO_DEFINITE);
cleanup("transparency_map");set_name(0x5B78EC, "transparency_map");
set_cmt(0x5B78EC, "transparency_map specifies the transparency at each coordinate of the map.", 0);
apply_type (0x5B78EC, "extern int8_t transparency_map[112][112];", TINFO_DEFINITE);
cleanup("dtype");set_name(0x5BB1ED, "dtype");
set_cmt(0x5BB1ED, "dtype specifies the active dungeon type of the current game.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/enums.h#dungeon_type", 0);
apply_type (0x5BB1ED, "extern dungeon_type dtype;", TINFO_DEFINITE);
cleanup("dlvl");set_name(0x5BB1EE, "dlvl");
set_cmt(0x5BB1EE, "dlvl specifies the active dungeon level of the current game.", 0);
apply_type (0x5BB1EE, "extern int8_t dlvl;", TINFO_DEFINITE);
cleanup("transparency_active");set_name(0x5BB1F0, "transparency_active");
set_cmt(0x5BB1F0, "transparency_active specifies the active transparency indices.", 0);
apply_type (0x5BB1F0, "extern bool8_t transparency_active[256];", TINFO_DEFINITE);
cleanup("level_frame_count");set_name(0x5BBAF4, "level_frame_count");
set_cmt(0x5BBAF4, "level_frame_count specifies the CEL frame occurrence for each frame of the\nlevel CEL (e.g. \"levels/l1data/l1.cel\").", 0);
apply_type (0x5BBAF4, "extern int32_t level_frame_count[2048];", TINFO_DEFINITE);
cleanup("level_cel");set_name(0x5BDB0C, "level_cel");
set_cmt(0x5BDB0C, "level_cel points to the contents of the active tileset, which is one of\n\"levels/towndata/town.cel\", \"levels/l1data/l1.cel\", \"levels/l2data/l2.cel\",\n\"levels/l3data/l3.cel\" or \"levels/l4data/l4.cel\".", 0);
apply_type (0x5BDB0C, "extern void *level_cel;", TINFO_DEFINITE);
cleanup("speed_cel_frame_num_from_light_index_frame_num");set_name(0x5BDB10, "speed_cel_frame_num_from_light_index_frame_num");
set_cmt(0x5BDB10, "speed_cel_frame_num_from_light_index_frame_num returns the frame number of\nthe speed CEL, an in memory decoding of level CEL frames, based on original\nframe number and light index.\nNote, given light index 0, the original frame number is returned.", 0);
apply_type (0x5BDB10, "extern int speed_cel_frame_num_from_light_index_frame_num[16][128];", TINFO_DEFINITE);
cleanup("player_num_map");set_name(0x5BFEF8, "player_num_map");
set_cmt(0x5BFEF8, "player_num_map contains the player numbers (players array indices) of the\nmap.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/bss/player.cpp#players", 0);
apply_type (0x5BFEF8, "extern int8_t player_num_map[112][112];", TINFO_DEFINITE);
cleanup("arch_num_map");set_name(0x5C3008, "arch_num_map");
set_cmt(0x5C3008, "arch_num_map contains the arch frame numbers of the map from the special\ntileset (e.g. \"levels/l1data/l1s.cel\"). Note, the special tileset of\nTristram (i.e. \"levels/towndata/towns.cel\") contains trees rather than\narches.", 0);
apply_type (0x5C3008, "extern int8_t arch_num_map[112][112];", TINFO_DEFINITE);
cleanup("level_special_cel");set_name(0x5C690C, "level_special_cel");
set_cmt(0x5C690C, "level_special_cel points to the contents of the active special tileset, which\nis one of \"levels/towndata/towns.cel\", \"levels/l1data/l1s.cel\" or\n\"levels/l2data/l2s.cel\".", 0);
apply_type (0x5C690C, "extern void *level_special_cel;", TINFO_DEFINITE);
cleanup("item_num_map");set_name(0x5C9A10, "item_num_map");
set_cmt(0x5C9A10, "item_num_map contains the item numbers (items array indices) of the map.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/bss/items.cpp#items", 0);
apply_type (0x5C9A10, "extern int8_t item_num_map[112][112];", TINFO_DEFINITE);
cleanup("quest_lvl");set_name(0x5CCB10, "quest_lvl");
set_cmt(0x5CCB10, "quest_lvl specifies the active quest level of the current game.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/enums.h#quest_level", 0);
apply_type (0x5CCB10, "extern quest_level quest_lvl;", TINFO_DEFINITE);
cleanup("level_frame_sizes");set_name(0x5CCB14, "level_frame_sizes");
set_cmt(0x5CCB14, "level_frame_sizes specifies the size of each frame of the level cel (e.g.\n\"levels/l1data/l1.cel\"). Indexed by frame numbers starting at 1.", 0);
apply_type (0x5CCB14, "extern int32_t level_frame_sizes[2048];", TINFO_DEFINITE);
cleanup("set_height");set_name(0x5CF330, "set_height");
set_cmt(0x5CF330, "set_height specifies the height of the active miniset of the map.", 0);
apply_type (0x5CF330, "extern int32_t set_height;", TINFO_DEFINITE);
cleanup("set_width");set_name(0x5CF334, "set_width");
set_cmt(0x5CF334, "set_width specifies the width of the active miniset of the map.", 0);
apply_type (0x5CF334, "extern int32_t set_width;", TINFO_DEFINITE);
cleanup("set_xx");set_name(0x5CF338, "set_xx");
set_cmt(0x5CF338, "set_xx specifies the active miniset x-coordinate of the map.", 0);
apply_type (0x5CF338, "extern int32_t set_xx;", TINFO_DEFINITE);
cleanup("lvl_view_y");set_name(0x5CF320, "lvl_view_y");
set_cmt(0x5CF320, "lvl_view_y specifies the level viewpoint y-coordinate of the map.", 0);
apply_type (0x5CF320, "extern int32_t lvl_view_y;", TINFO_DEFINITE);
cleanup("lvl_view_x");set_name(0x5CF324, "lvl_view_x");
set_cmt(0x5CF324, "lvl_view_x specifies the level viewpoint x-coordinate of the map.", 0);
apply_type (0x5CF324, "extern int32_t lvl_view_x;", TINFO_DEFINITE);
cleanup("view_x");set_name(0x5CF33C, "view_x");
set_cmt(0x5CF33C, "view_x specifies the player viewpoint x-coordinate of the map.", 0);
apply_type (0x5CF33C, "extern int32_t view_x;", TINFO_DEFINITE);
cleanup("view_y");set_name(0x5CF340, "view_y");
set_cmt(0x5CF340, "view_y specifies the player viewpoint y-coordinate of the map.", 0);
apply_type (0x5CF340, "extern int32_t view_y;", TINFO_DEFINITE);
cleanup("set_yy");set_name(0x5CF344, "set_yy");
set_cmt(0x5CF344, "set_yy specifies the active miniset y-coordinate of the map.", 0);
apply_type (0x5CF344, "extern int32_t set_yy;", TINFO_DEFINITE);
cleanup("missile_num_map");set_name(0x5CF350, "missile_num_map");
set_cmt(0x5CF350, "missile_num_map contains the missile numbers (missiles array indices) of the\nmap.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/bss/missiles.cpp#missiles", 0);
apply_type (0x5CF350, "extern int8_t missile_num_map[112][112];", TINFO_DEFINITE);
cleanup("dpiece_defs_map_2");set_name(0x5D2460, "dpiece_defs_map_2");
set_cmt(0x5D2460, "dpiece_defs_map_2 specifies the dungeon piece information for a given\ncoordinate and block number.", 0);
apply_type (0x5D2460, "extern int16_t dpiece_defs_map_2[16][112][112];", TINFO_DEFINITE);
cleanup("sha1_contexts");set_name(0x69EFB0, "sha1_contexts");
set_cmt(0x69EFB0, "sha1_contexts specifies the global SHA-1 contexts, which are used to\ngenerate the codec key for save file encoding and decoding.", 0);
apply_type (0x69EFB0, "extern SHA1Context sha1_contexts[3];", TINFO_DEFINITE);
cleanup("unused_4B8CD8");set_name(0x4B8CD8, "unused_4B8CD8");
set_cmt(0x4B8CD8, "NOTE: unused.", 0);
apply_type (0x4B8CD8, "extern int unused_4B8CD8;", TINFO_DEFINITE);
cleanup("dead_num_stone_curse");set_name(0x4B92B0, "dead_num_stone_curse");
set_cmt(0x4B92B0, "dead_num_stone_curse specifies the dead number (deads array index) of the\nstone cursed animation.", 0);
apply_type (0x4B92B0, "extern int dead_num_stone_curse;", TINFO_DEFINITE);
cleanup("msg_cpp_init_value");set_name(0x65AB1C, "msg_cpp_init_value");
set_cmt(0x65AB1C, "+Infinity after initialization of msg.cpp.", 0);
apply_type (0x65AB1C, "extern float msg_cpp_init_value;", TINFO_DEFINITE);
cleanup("delta_levels");set_name(0x65AB28, "delta_levels");
set_cmt(0x65AB28, "delta_levels contains delta information about items, objects and monsters for\neach dungeon level to be synchronized with connected peers.", 0);
apply_type (0x65AB28, "extern DeltaLevel delta_levels[17];", TINFO_DEFINITE);
cleanup("msg_recv_buf");set_name(0x66E4B0, "msg_recv_buf");
set_cmt(0x66E4B0, "msg_buf is a pre-allocated buffer for receiving network messages.", 0);
apply_type (0x66E4B0, "extern uint8_t msg_recv_buf[4722];", TINFO_DEFINITE);
cleanup("automap_discovered_from_dlvl");set_name(0x66F728, "automap_discovered_from_dlvl");
set_cmt(0x66F728, "automap_discovered_from_dlvl maps tracks the explored areas of the map for\neach dungeon level.", 0);
apply_type (0x66F728, "extern bool8_t automap_discovered_from_dlvl[17][40][40];", TINFO_DEFINITE);
cleanup("portals");set_name(0x676168, "portals");
set_cmt(0x676168, "portals contains the town portals of the current game.", 0);
apply_type (0x676168, "extern Portal portals[4];", TINFO_DEFINITE);
cleanup("pfile_cpp_init_value");set_name(0x6862E0, "pfile_cpp_init_value");
set_cmt(0x6862E0, "+Infinity after initialization of pfile.cpp.", 0);
apply_type (0x6862E0, "extern float pfile_cpp_init_value;", TINFO_DEFINITE);
cleanup("hero_names");set_name(0x6862E4, "hero_names");
set_cmt(0x6862E4, "hero_names contains a list of character names for the character selection\nscreen.", 0);
apply_type (0x6862E4, "extern char hero_names[10][32];", TINFO_DEFINITE);
cleanup("valid_save");set_name(0x686424, "valid_save");
set_cmt(0x686424, "valid_save specifies whether the save file is valid.", 0);
apply_type (0x686424, "extern bool32_t valid_save;", TINFO_DEFINITE);
cleanup("save_prev_tc");set_name(0x686428, "save_prev_tc");
set_cmt(0x686428, "save_prev_tc stores the tick count of the previous hero save.", 0);
apply_type (0x686428, "extern uint32_t save_prev_tc;", TINFO_DEFINITE);
cleanup("logical_palette");set_name(0x67D7CC, "logical_palette");
set_cmt(0x67D7CC, "logical_palette is an in-memory palette to which gamma corrections are\napplied.", 0);
apply_type (0x67D7CC, "extern PALETTEENTRY logical_palette[256];", TINFO_DEFINITE);
cleanup("palette_cpp_init_value");set_name(0x67DBCC, "palette_cpp_init_value");
set_cmt(0x67DBCC, "+Infinity after initialization of palette.cpp.", 0);
apply_type (0x67DBCC, "extern float palette_cpp_init_value;", TINFO_DEFINITE);
cleanup("system_palette");set_name(0x67DBD0, "system_palette");
set_cmt(0x67DBD0, "system_palette is the active palette of the system.", 0);
apply_type (0x67DBD0, "extern PALETTEENTRY system_palette[256];", TINFO_DEFINITE);
cleanup("orig_palette");set_name(0x67DFD0, "orig_palette");
set_cmt(0x67DFD0, "orig_palette is the original palette as loaded from file.", 0);
apply_type (0x67DFD0, "extern PALETTEENTRY orig_palette[256];", TINFO_DEFINITE);
cleanup("nsystem_reserve_palette_entries");set_name(0x67E3D0, "nsystem_reserve_palette_entries");
set_cmt(0x67E3D0, "nsystem_reserve_palette_entries specifies the number of reserved palette\nentries.", 0);
apply_type (0x67E3D0, "extern int nsystem_reserve_palette_entries;", TINFO_DEFINITE);
cleanup("visions");set_name(0x6414E8, "visions");
set_cmt(0x6414E8, "visions contains the visions of the current game.", 0);
apply_type (0x6414E8, "extern Lighting visions[32];", TINFO_DEFINITE);
cleanup("lightings");set_name(0x641B88, "lightings");
set_cmt(0x641B88, "lightings contains the light sources of the current game.", 0);
apply_type (0x641B88, "extern Lighting lightings[32];", TINFO_DEFINITE);
cleanup("lighting_disabled");set_name(0x646A28, "lighting_disabled");
set_cmt(0x646A28, "lighting_disabled specifies whether light effects are disabled.", 0);
apply_type (0x646A28, "extern bool32_t lighting_disabled;", TINFO_DEFINITE);
cleanup("lighting_max");set_name(0x642A14, "lighting_max");
set_cmt(0x642A14, "lighting_max specifies the maximum number of light effects.", 0);
apply_type (0x642A14, "extern int8_t lighting_max;", TINFO_DEFINITE);
cleanup("monster_cpp_init_value");set_name(0x64CCE4, "monster_cpp_init_value");
set_cmt(0x64CCE4, "+Infinity after initialization of monster.cpp.", 0);
apply_type (0x64CCE4, "extern float monster_cpp_init_value;", TINFO_DEFINITE);
cleanup("monster_total_kills_from_monster_id");set_name(0x64CCE8, "monster_total_kills_from_monster_id");
set_cmt(0x64CCE8, "monster_total_kills_from_monster_id tracks the total number of monsters\nkilled per monster_id.", 0);
apply_type (0x64CCE8, "extern int monster_total_kills_from_monster_id[200];", TINFO_DEFINITE);
cleanup("active_monster_nums");set_name(0x64D008, "active_monster_nums");
set_cmt(0x64D008, "active_monster_nums keeps track of the monster_num of active monsters.", 0);
apply_type (0x64D008, "extern int active_monster_nums[200];", TINFO_DEFINITE);
cleanup("nmonster_types");set_name(0x659AF0, "nmonster_types");
set_cmt(0x659AF0, "nmonster_types specifies the number of active monster types.", 0);
apply_type (0x659AF0, "extern int nmonster_types;", TINFO_DEFINITE);
cleanup("inv_is_open");set_name(0x634CB8, "inv_is_open");
set_cmt(0x634CB8, "inv_is_open specifies whether the inventory is open.", 0);
apply_type (0x634CB8, "extern bool32_t inv_is_open;", TINFO_DEFINITE);
cleanup("inv_graphics");set_name(0x634CBC, "inv_graphics");
set_cmt(0x634CBC, "inv_graphics points to the contents of the inventory graphics CEL file (e.g.\n\"data/inv/inv.cel\", \"data/inv/inv_rog.cel\" or \"data/inv/inv_sor.cel\").", 0);
apply_type (0x634CBC, "extern uint8_t *inv_graphics;", TINFO_DEFINITE);
cleanup("update_belt");set_name(0x634CC0, "update_belt");
set_cmt(0x634CC0, "update_belt specifies whether the belt should be re-rendered.", 0);
apply_type (0x634CC0, "extern bool32_t update_belt;", TINFO_DEFINITE);
cleanup("dthread_cpp_init_value");set_name(0x52A4E0, "dthread_cpp_init_value");
set_cmt(0x52A4E0, "+Infinity after initialization of dthread.cpp.", 0);
apply_type (0x52A4E0, "extern float dthread_cpp_init_value;", TINFO_DEFINITE);
cleanup("error_buf");set_name(0x4B7934, "error_buf");
set_cmt(0x4B7934, "error_buf is a temporary buffer for formatted error messages.", 0);
apply_type (0x4B7934, "extern char error_buf[256];", TINFO_DEFINITE);
cleanup("terminating");set_name(0x4B7A34, "terminating");
set_cmt(0x4B7A34, "terminating specifies whether the game is terminating after a fatal\napplication error.", 0);
apply_type (0x4B7A34, "extern bool32_t terminating;", TINFO_DEFINITE);
cleanup("cleanup_thread_id");set_name(0x4B7A38, "cleanup_thread_id");
set_cmt(0x4B7A38, "cleanup_thread_id stores the thread id of the last callee to appfat_cleanup.", 0);
apply_type (0x4B7A38, "extern int32_t cleanup_thread_id;", TINFO_DEFINITE);
cleanup("empty_string");set_name(0x4B7A3C, "empty_string");
set_cmt(0x4B7A3C, "empty_string is a NULL-terminated empty string.", 0);
apply_type (0x4B7A3C, "extern char *empty_string;", TINFO_DEFINITE);
cleanup("l1_tile_bit_map");set_name(0x525764, "l1_tile_bit_map");
set_cmt(0x525764, "l1_tile_bit_map represents a tile ID map of twice the size, repeating each\ntile of the original map in blocks of 4.", 0);
apply_type (0x525764, "extern l1_tile_id l1_tile_bit_map[80][80];", TINFO_DEFINITE);
cleanup("l1_flag_map");set_name(0x527064, "l1_flag_map");
set_cmt(0x527064, "l1_flag_map contains flags used for dungeon generation of the Cathedral.", 0);
apply_type (0x527064, "extern uint8_t l1_flag_map[40][40];", TINFO_DEFINITE);
cleanup("l1_single_player_quest_dun_loaded");set_name(0x5276A4, "l1_single_player_quest_dun_loaded");
set_cmt(0x5276A4, "l1_single_player_quest_dun_loaded specifies whether a single player quest DUN\nhas been loaded.", 0);
apply_type (0x5276A4, "extern bool32_t l1_single_player_quest_dun_loaded;", TINFO_DEFINITE);
cleanup("l1_horiz_room1");set_name(0x5276A8, "l1_horiz_room1");
set_cmt(0x5276A8, "l1_horiz_room1 specifies whether to generate a horizontal room at position 1\nin the Cathedral.", 0);
apply_type (0x5276A8, "extern bool32_t l1_horiz_room1;", TINFO_DEFINITE);
cleanup("l1_horiz_room2");set_name(0x5276AC, "l1_horiz_room2");
set_cmt(0x5276AC, "l1_horiz_room2 specifies whether to generate a horizontal room at position 2\nin the Cathedral.", 0);
apply_type (0x5276AC, "extern bool32_t l1_horiz_room2;", TINFO_DEFINITE);
cleanup("l1_horiz_room3");set_name(0x5276B0, "l1_horiz_room3");
set_cmt(0x5276B0, "l1_horiz_room3 specifies whether to generate a horizontal room at position 3\nin the Cathedral.", 0);
apply_type (0x5276B0, "extern bool32_t l1_horiz_room3;", TINFO_DEFINITE);
cleanup("l1_vert_room1");set_name(0x5276B4, "l1_vert_room1");
set_cmt(0x5276B4, "l1_vert_room1 specifies whether to generate a vertical room at position 1 in\nthe Cathedral.", 0);
apply_type (0x5276B4, "extern bool32_t l1_vert_room1;", TINFO_DEFINITE);
cleanup("l1_vert_room2");set_name(0x5276B8, "l1_vert_room2");
set_cmt(0x5276B8, "l1_vert_room2 specifies whether to generate a vertical room at position 2 in\nthe Cathedral.", 0);
apply_type (0x5276B8, "extern bool32_t l1_vert_room2;", TINFO_DEFINITE);
cleanup("l1_vert_room3");set_name(0x5276BC, "l1_vert_room3");
set_cmt(0x5276BC, "l1_vert_room3 specifies whether to generate a vertical room at position 3 in\nthe Cathedral.", 0);
apply_type (0x5276BC, "extern bool32_t l1_vert_room3;", TINFO_DEFINITE);
cleanup("l1_single_player_quest_dun");set_name(0x5276C0, "l1_single_player_quest_dun");
set_cmt(0x5276C0, "l1_single_player_quest_dun contains the contents of the single player quest\nDUN file.", 0);
apply_type (0x5276C0, "extern void *l1_single_player_quest_dun;", TINFO_DEFINITE);
cleanup("object_graphic_id_from_object_cel_num");set_name(0x679810, "object_graphic_id_from_object_cel_num");
set_cmt(0x679810, "object_graphic_id_from_object_cel_num maps from object_cel_num to\nobject_graphic_id.", 0);
apply_type (0x679810, "extern object_graphic_id object_graphic_id_from_object_cel_num[40];", TINFO_DEFINITE);
cleanup("active_object_nums");set_name(0x679838, "active_object_nums");
set_cmt(0x679838, "active_object_nums tracks active object numbers.", 0);
apply_type (0x679838, "extern int active_object_nums[127];", TINFO_DEFINITE);
cleanup("nobjects");set_name(0x679A34, "nobjects");
set_cmt(0x679A34, "nobjects specifies the number of active objects.", 0);
apply_type (0x679A34, "extern int nobjects;", TINFO_DEFINITE);
cleanup("available_object_nums");set_name(0x679A3C, "available_object_nums");
set_cmt(0x679A3C, "available_object_nums tracks available object numbers.", 0);
apply_type (0x679A3C, "extern int available_object_nums[127];", TINFO_DEFINITE);
cleanup("ndialogue_lines");set_name(0x69F10C, "ndialogue_lines");
set_cmt(0x69F10C, "ndialogue_lines specifies the number of lines in the active store owner\ndialogue.", 0);
apply_type (0x69F10C, "extern int ndialogue_lines;", TINFO_DEFINITE);
cleanup("wirt_item");set_name(0x69F118, "wirt_item");
set_cmt(0x69F118, "wirt_item contains the item for sale by Wirt.", 0);
apply_type (0x69F118, "extern Item wirt_item;", TINFO_DEFINITE);
cleanup("griswold_premium_items");set_name(0x69F290, "griswold_premium_items");
set_cmt(0x69F290, "griswold_premium_items contains the premium items for sale by Griswold.", 0);
apply_type (0x69F290, "extern Item griswold_premium_items[6];", TINFO_DEFINITE);
cleanup("player_items");set_name(0x6A09F0, "player_items");
set_cmt(0x6A09F0, "player_items contains copies of player items for use by store owners in\ndialogues.", 0);
apply_type (0x6A09F0, "extern Item player_items[48];", TINFO_DEFINITE);
cleanup("adria_items");set_name(0x6A4EF8, "adria_items");
set_cmt(0x6A4EF8, "adria_items contains the items for sale by Adria.", 0);
apply_type (0x6A4EF8, "extern Item adria_items[20];", TINFO_DEFINITE);
cleanup("ngriswold_premium_items");set_name(0x6A6BBC, "ngriswold_premium_items");
set_cmt(0x6A6BBC, "ngriswold_premium_items specifies the number of premium items sold by\nGriswold.", 0);
apply_type (0x6A6BBC, "extern int ngriswold_premium_items;", TINFO_DEFINITE);
cleanup("pepin_items");set_name(0x6A6BC0, "pepin_items");
set_cmt(0x6A6BC0, "pepin_items contains the items for sale by Pepin.", 0);
apply_type (0x6A6BC0, "extern Item pepin_items[20];", TINFO_DEFINITE);
cleanup("item_base_gold");set_name(0x6A8880, "item_base_gold");
set_cmt(0x6A8880, "item_base_gold represents the base gold item.", 0);
apply_type (0x6A8880, "extern Item item_base_gold;", TINFO_DEFINITE);
cleanup("griswold_basic_items");set_name(0x6A8A40, "griswold_basic_items");
set_cmt(0x6A8A40, "griswold_basic_items contains the basic items for sale by Griswold.", 0);
apply_type (0x6A8A40, "extern Item griswold_basic_items[20];", TINFO_DEFINITE);
cleanup("automaptype");set_name(0x4B7A40, "automaptype");
set_cmt(0x4B7A40, "automaptype maps from tile_id to automap type.", 0);
apply_type (0x4B7A40, "extern uint16_t automaptype[512];", TINFO_DEFINITE);
cleanup("automapflag");set_name(0x4B7E48, "automapflag");
set_cmt(0x4B7E48, "automapflag specifies whether the automap is enabled.", 0);
apply_type (0x4B7E48, "extern bool32_t automapflag;", TINFO_DEFINITE);
cleanup("automap_discovered");set_name(0x4B7E6C, "automap_discovered");
set_cmt(0x4B7E6C, "automap_discovered tracks the explored areas of the map.", 0);
apply_type (0x4B7E6C, "extern bool8_t automap_discovered[40][40];", TINFO_DEFINITE);
cleanup("automap_zoom_level");set_name(0x4B84AC, "automap_zoom_level");
set_cmt(0x4B84AC, "automap_zoom_level specifies the scale of the automap.", 0);
apply_type (0x4B84AC, "extern int automap_zoom_level;", TINFO_DEFINITE);
cleanup("mpqapi_cpp_init_value");set_name(0x659B00, "mpqapi_cpp_init_value");
set_cmt(0x659B00, "+Infinity after initialization of mpqapi.cpp.", 0);
apply_type (0x659B00, "extern float mpqapi_cpp_init_value;", TINFO_DEFINITE);
cleanup("mpq_offset");set_name(0x659B04, "mpq_offset");
set_cmt(0x659B04, "mpq_offset specifies the offset into the open MPQ archive.", 0);
apply_type (0x659B04, "extern int32_t mpq_offset;", TINFO_DEFINITE);
cleanup("mpqapi_buf");set_name(0x659B08, "mpqapi_buf");
set_cmt(0x659B08, "mpqapi_buf is a pre-allocated buffer for handling file contents written to MPQ archives.", 0);
apply_type (0x659B08, "extern char mpqapi_buf[4096];", TINFO_DEFINITE);
cleanup("mpq_hash_table");set_name(0x65AB08, "mpq_hash_table");
set_cmt(0x65AB08, "mpq_hash_table contains the MPQ hash table entries.", 0);
apply_type (0x65AB08, "extern HashEntry *mpq_hash_table;", TINFO_DEFINITE);
cleanup("save_archive_modified");set_name(0x65AB0C, "save_archive_modified");
set_cmt(0x65AB0C, "save_archive_modified specifies whether the save MPQ archive has been modified.", 0);
apply_type (0x65AB0C, "extern bool32_t save_archive_modified;", TINFO_DEFINITE);
cleanup("mpq_block_table");set_name(0x65AB10, "mpq_block_table");
set_cmt(0x65AB10, "mpq_block_table contains the MPQ block table entries.", 0);
apply_type (0x65AB10, "extern BlockEntry *mpq_block_table;", TINFO_DEFINITE);
cleanup("save_archive_open");set_name(0x65AB14, "save_archive_open");
set_cmt(0x65AB14, "save_archive_open specifies whether the save MPQ archive is open.", 0);
apply_type (0x65AB14, "extern bool8_t save_archive_open;", TINFO_DEFINITE);
cleanup("file_info");set_name(0x634968, "file_info");
set_cmt(0x634968, "file_info contains information about the game executable and asset archives.", 0);
apply_type (0x634968, "extern FileInfo file_info;", TINFO_DEFINITE);
cleanup("init_cpp_init_value");set_name(0x63497C, "init_cpp_init_value");
set_cmt(0x63497C, "+Infinity after initialization of init.cpp.", 0);
apply_type (0x63497C, "extern float init_cpp_init_value;", TINFO_DEFINITE);
cleanup("window_activated");set_name(0x634980, "window_activated");
set_cmt(0x634980, "window_activated indicates whether the window is being activated.", 0);
apply_type (0x634980, "extern bool32_t window_activated;", TINFO_DEFINITE);
cleanup("diablo_exe_path");set_name(0x634984, "diablo_exe_path");
set_cmt(0x634984, "diablo_exe_path specifies the path to diablo.exe.", 0);
apply_type (0x634984, "extern char diablo_exe_path[260];", TINFO_DEFINITE);
cleanup("unused_mpq");set_name(0x634A88, "unused_mpq");
set_cmt(0x634A88, "unused_mpq is a handle to an unused MPQ archive.", 0);
apply_type (0x634A88, "extern void *unused_mpq;", TINFO_DEFINITE);
cleanup("patch_rt_mpq_path");set_name(0x634A8C, "patch_rt_mpq_path");
set_cmt(0x634A8C, "patch_rt_mpq_path specifies the path to patch_rt.mpq.", 0);
apply_type (0x634A8C, "extern char patch_rt_mpq_path[260];", TINFO_DEFINITE);
cleanup("fnWindow_proc");set_name(0x634B90, "fnWindow_proc");
set_cmt(0x634B90, "fnWindow_proc points to a user-defined function which processes messages sent\nto the window.", 0);
apply_type (0x634B90, "extern LRESULT (__stdcall *fnWindow_proc)", TINFO_DEFINITE);
cleanup("diabdat_mpq");set_name(0x634B94, "diabdat_mpq");
set_cmt(0x634B94, "diabdat_mpq is a handle to the diabdat.mpq archive.", 0);
apply_type (0x634B94, "extern void *diabdat_mpq;", TINFO_DEFINITE);
cleanup("diabdat_mpq_path");set_name(0x634B98, "diabdat_mpq_path");
set_cmt(0x634B98, "diabdat_mpq_path specifies the path to diabdat.mpq.", 0);
apply_type (0x634B98, "extern char diabdat_mpq_path[260];", TINFO_DEFINITE);
cleanup("patch_rt_mpq");set_name(0x634C9C, "patch_rt_mpq");
set_cmt(0x634C9C, "patch_rt_mpq is a handle to the patch_rt.mpq archive.", 0);
apply_type (0x634C9C, "extern void *patch_rt_mpq;", TINFO_DEFINITE);
cleanup("killed_mom_parent");set_name(0x634CA0, "killed_mom_parent");
set_cmt(0x634CA0, "killed_mom_parent specifies whether a process with the \"MOM Parent\" class has\nbeen identified and killed.", 0);
apply_type (0x634CA0, "extern bool32_t killed_mom_parent;", TINFO_DEFINITE);
cleanup("screensaver_enabled_prev");set_name(0x634CA4, "screensaver_enabled_prev");
set_cmt(0x634CA4, "screensaver_enabled_prev stores the previous state of the screensaver.", 0);
apply_type (0x634CA4, "extern bool8_t screensaver_enabled_prev;", TINFO_DEFINITE);
cleanup("msgcmd_cpp_init_value");set_name(0x6761A0, "msgcmd_cpp_init_value");
set_cmt(0x6761A0, "+Infinity after initialization of msgcmd.cpp.", 0);
apply_type (0x6761A0, "extern float msgcmd_cpp_init_value;", TINFO_DEFINITE);
cleanup("warps");set_name(0x6ABAE0, "warps");
set_cmt(0x6ABAE0, "warps holds the opened entrance which connects two levels of the map.", 0);
apply_type (0x6ABAE0, "extern Warp warps[4];", TINFO_DEFINITE);
cleanup("nthread_cpp_init_value");set_name(0x679700, "nthread_cpp_init_value");
set_cmt(0x679700, "+Infinity after initialization of nthread.cpp.", 0);
apply_type (0x679700, "extern float nthread_cpp_init_value;", TINFO_DEFINITE);
cleanup("sound_cpp_init_value");set_name(0x69F0C4, "sound_cpp_init_value");
set_cmt(0x69F0C4, "+Infinity after initialization of sound.cpp.", 0);
apply_type (0x69F0C4, "extern float sound_cpp_init_value;", TINFO_DEFINITE);
cleanup("DSBs");set_name(0x69F0C8, "DSBs");
set_cmt(0x69F0C8, "DSBs contains the audio channels used for playback of sounds.", 0);
apply_type (0x69F0C8, "extern IDirectSoundBuffer *DSBs[8];", TINFO_DEFINITE);
cleanup("DS");set_name(0x69F0E8, "DS");
set_cmt(0x69F0E8, "DS is the sound system used for audio playback.", 0);
apply_type (0x69F0E8, "extern IDirectSound *DS;", TINFO_DEFINITE);
cleanup("DS_inited");set_name(0x69F0EC, "DS_inited");
set_cmt(0x69F0EC, "DS_inited specifies whether the sound system has been initialized.", 0);
apply_type (0x69F0EC, "extern bool8_t DS_inited;", TINFO_DEFINITE);
cleanup("music_volume");set_name(0x69F0F0, "music_volume");
set_cmt(0x69F0F0, "music_volume specifies the music volume in range [-1600, 0].", 0);
apply_type (0x69F0F0, "extern int music_volume;", TINFO_DEFINITE);
cleanup("sound_volume");set_name(0x69F0F4, "sound_volume");
set_cmt(0x69F0F4, "sound_volume specifies the sound volume in range [-1600, 0].", 0);
apply_type (0x69F0F4, "extern int sound_volume;", TINFO_DEFINITE);
cleanup("hDsound_dll");set_name(0x69F0F8, "hDsound_dll");
set_cmt(0x69F0F8, "hDsound_dll provides a handle to the dynamic library dsound.dll.", 0);
apply_type (0x69F0F8, "extern HMODULE hDsound_dll;", TINFO_DEFINITE);
cleanup("music_track");set_name(0x69F0FC, "music_track");
set_cmt(0x69F0FC, "music_track specifies the current music track playing.", 0);
apply_type (0x69F0FC, "extern void *music_track;", TINFO_DEFINITE);
cleanup("DSB");set_name(0x457278, "DSB");
set_cmt(0x457278, "DSB is a audio channel used for playback of sounds.", 0);
apply_type (0x457278, "extern IDirectSoundBuffer *DSB;", TINFO_DEFINITE);
cleanup("walk_tracking_active");set_name(0x6ABAB8, "walk_tracking_active");
set_cmt(0x6ABAB8, "walk_tracking_active specifies whether continued walk actions are tracked\n(i.e. when the left mouse button is held down).", 0);
apply_type (0x6ABAB8, "extern bool8_t walk_tracking_active;", TINFO_DEFINITE);
cleanup("track_cpp_init_value");set_name(0x6ABABC, "track_cpp_init_value");
set_cmt(0x6ABABC, "+Infinity after initialization of track.cpp.", 0);
apply_type (0x6ABABC, "extern float track_cpp_init_value;", TINFO_DEFINITE);
cleanup("track_tc");set_name(0x6ABAC0, "track_tc");
set_cmt(0x6ABAC0, "track_tc specifies the tick count when walk tracking was activated.", 0);
apply_type (0x6ABAC0, "extern uint32_t track_tc;", TINFO_DEFINITE);
cleanup("prev_active");set_name(0x6ABAC4, "prev_active");
set_cmt(0x6ABAC4, "prev_active specifies whether walk tracking was active in the previous game\nstep.", 0);
apply_type (0x6ABAC4, "extern bool32_t prev_active;", TINFO_DEFINITE);
cleanup("light_table_index");set_name(0x69BEF8, "light_table_index");
set_cmt(0x69BEF8, "light_table_index specifies the current light entry.", 0);
apply_type (0x69BEF8, "extern int32_t light_table_index;", TINFO_DEFINITE);
cleanup("screen_y_times_768");set_name(0x69BEFC, "screen_y_times_768");
set_cmt(0x69BEFC, "screen_y_times_768 is a pre-computed table for y*768; 0, 768, 1536, ...", 0);
apply_type (0x69BEFC, "extern int screen_y_times_768[1024];", TINFO_DEFINITE);
cleanup("scrollrt_cpp_init_value");set_name(0x69CEFC, "scrollrt_cpp_init_value");
set_cmt(0x69CEFC, "+Infinity after initialization of scrollrt.cpp.", 0);
apply_type (0x69CEFC, "extern float scrollrt_cpp_init_value;", TINFO_DEFINITE);
cleanup("cursor_draw_width_prev");set_name(0x69CF00, "cursor_draw_width_prev");
set_cmt(0x69CF00, "cursor_draw_width_prev specifies the width of the cursor being rendered on\nthe previous frame.", 0);
apply_type (0x69CF00, "extern int cursor_draw_width_prev;", TINFO_DEFINITE);
cleanup("cursor_draw_x");set_name(0x69CF04, "cursor_draw_x");
set_cmt(0x69CF04, "cursor_draw_x specifies the X-coordinate of the cursor being rendered.", 0);
apply_type (0x69CF04, "extern int cursor_draw_x;", TINFO_DEFINITE);
cleanup("cursor_draw_y");set_name(0x69CF08, "cursor_draw_y");
set_cmt(0x69CF08, "cursor_draw_y specifies the Y-coordinate of the cursor being rendered.", 0);
apply_type (0x69CF08, "extern int cursor_draw_y;", TINFO_DEFINITE);
cleanup("screen_buf_end");set_name(0x69CF0C, "screen_buf_end");
set_cmt(0x69CF0C, "screen_buf_end point to the end of the screen buffer used for rendering.", 0);
apply_type (0x69CF0C, "extern void *screen_buf_end;", TINFO_DEFINITE);
cleanup("cursor_draw_height");set_name(0x69CF10, "cursor_draw_height");
set_cmt(0x69CF10, "cursor_draw_height specifies the height of the cursor being rendered.", 0);
apply_type (0x69CF10, "extern int cursor_draw_height;", TINFO_DEFINITE);
cleanup("level_cel_block");set_name(0x69CF14, "level_cel_block");
set_cmt(0x69CF14, "level_cel_block specifies the current MIN block of the level CEL file, as\nused during rendering of the level tiles.\n   frameNum  := block&0x0FFF\n   frameType := block&0x7000 >> 12", 0);
apply_type (0x69CF14, "extern uint32_t level_cel_block;", TINFO_DEFINITE);
cleanup("cursor_draw_x_prev");set_name(0x69CF18, "cursor_draw_x_prev");
set_cmt(0x69CF18, "cursor_draw_x_prev specifies the X-coordinate of the cursor being rendered on\nthe previous frame.", 0);
apply_type (0x69CF18, "extern int cursor_draw_x_prev;", TINFO_DEFINITE);
cleanup("cursor_draw_y_prev");set_name(0x69CF1C, "cursor_draw_y_prev");
set_cmt(0x69CF1C, "cursor_draw_y_prev specifies the Y-coordinate of the cursor being rendered on\nthe previous frame.", 0);
apply_type (0x69CF1C, "extern int cursor_draw_y_prev;", TINFO_DEFINITE);
cleanup("arch_draw_type");set_name(0x69CF20, "arch_draw_type");
set_cmt(0x69CF20, "arch_draw_type specifies the type of arches to render.", 0);
apply_type (0x69CF20, "extern int arch_draw_type;", TINFO_DEFINITE);
cleanup("DDS_desc");set_name(0x69CF28, "DDS_desc");
set_cmt(0x69CF28, "DDS_desc describes the surface being rendered.", 0);
apply_type (0x69CF28, "extern DDSURFACEDESC DDS_desc;", TINFO_DEFINITE);
cleanup("cel_transparency_active");set_name(0x69CF94, "cel_transparency_active");
set_cmt(0x69CF94, "cel_transparency_active specifies whether transparency is active for the\ncurrent CEL file being decoded.", 0);
apply_type (0x69CF94, "extern int cel_transparency_active;", TINFO_DEFINITE);
cleanup("level_piece_id");set_name(0x69CF98, "level_piece_id");
set_cmt(0x69CF98, "level_piece_id specifies the current dungeon piece ID of the level, as used\nduring rendering of the level tiles.", 0);
apply_type (0x69CF98, "extern int level_piece_id;", TINFO_DEFINITE);
cleanup("cursor_draw_width");set_name(0x69CF9C, "cursor_draw_width");
set_cmt(0x69CF9C, "cursor_draw_width specifies the width of the cursor being rendered.", 0);
apply_type (0x69CF9C, "extern int cursor_draw_width;", TINFO_DEFINITE);
cleanup("draw_player");set_name(0x69CFA0, "draw_player");
set_cmt(0x69CFA0, "draw_player specifies a function used to render player graphics.", 0);
apply_type (0x69CFA0, "extern int (__fastcall *draw_player)", TINFO_DEFINITE);
cleanup("cursor_draw_back_buffer");set_name(0x69CFA4, "cursor_draw_back_buffer");
set_cmt(0x69CFA4, "cursor_draw_back_buffer is an in-memory surface for the cursor graphics.", 0);
apply_type (0x69CFA4, "extern uint8_t cursor_draw_back_buffer[8192];", TINFO_DEFINITE);
cleanup("draw_monster_num");set_name(0x69EFA4, "draw_monster_num");
set_cmt(0x69EFA4, "draw_monster_num specifies the monster_num to render.", 0);
apply_type (0x69EFA4, "extern int draw_monster_num;", TINFO_DEFINITE);
cleanup("cursor_draw_height_prev");set_name(0x69EFA8, "cursor_draw_height_prev");
set_cmt(0x69EFA8, "cursor_draw_height_prev specifies the height of the cursor being rendered on\nthe previous frame.", 0);
apply_type (0x69EFA8, "extern int cursor_draw_height_prev;", TINFO_DEFINITE);
cleanup("items");set_name(0x635A28, "items");
set_cmt(0x635A28, "items contains the items on ground of the current game.", 0);
apply_type (0x635A28, "extern Item items[128];", TINFO_DEFINITE);
cleanup("mainmenu_inf");set_name(0x47F074, "mainmenu_inf");
set_cmt(0x47F074, "+Infinity", 0);
apply_type (0x47F074, "extern float mainmenu_inf;", TINFO_DEFINITE);
cleanup("movie_inf");set_name(0x47F144, "movie_inf");
set_cmt(0x47F144, "+Infinity", 0);
apply_type (0x47F144, "extern float movie_inf;", TINFO_DEFINITE);
cleanup("player_inf");set_name(0x47F204, "player_inf");
set_cmt(0x47F204, "+Infinity", 0);
apply_type (0x47F204, "extern float player_inf;", TINFO_DEFINITE);
cleanup("player_armors");set_name(0x47F208, "player_armors");
set_cmt(0x47F208, "player_armors maps from armor animation to letter used in graphic files.", 0);
apply_type (0x47F208, "extern char player_armors[3];", TINFO_DEFINITE);
cleanup("player_weapons");set_name(0x47F20C, "player_weapons");
set_cmt(0x47F20C, "player_weapons maps from weapon animation to letter used in graphic files.", 0);
apply_type (0x47F20C, "extern char player_weapons[9];", TINFO_DEFINITE);
cleanup("player_classes");set_name(0x47F218, "player_classes");
set_cmt(0x47F218, "player_classes maps from player class to letter used in graphic files.", 0);
apply_type (0x47F218, "extern char player_classes[3];", TINFO_DEFINITE);
cleanup("double_1_0");set_name(0x47F220, "double_1_0");
set_cmt(0x47F220, "1.0", 0);
apply_type (0x47F220, "extern double double_1_0;", TINFO_DEFINITE);
cleanup("double_0_1");set_name(0x47F228, "double_0_1");
set_cmt(0x47F228, "0.1", 0);
apply_type (0x47F228, "extern double double_0_1;", TINFO_DEFINITE);
cleanup("hero_inf");set_name(0x47F168, "hero_inf");
set_cmt(0x47F168, "+Infinity", 0);
apply_type (0x47F168, "extern float hero_inf;", TINFO_DEFINITE);
cleanup("dx_inf");set_name(0x47A464, "dx_inf");
set_cmt(0x47A464, "+Infinity", 0);
apply_type (0x47A464, "extern float dx_inf;", TINFO_DEFINITE);
cleanup("x_delta_from_step_direction");set_name(0x47F1B0, "x_delta_from_step_direction");
set_cmt(0x47F1B0, "x_delta_from_step_direction maps from step direction to X-coordinate movement\ndelta.", 0);
apply_type (0x47F1B0, "extern int8_t x_delta_from_step_direction[8];", TINFO_DEFINITE);
cleanup("y_delta_from_step_direction");set_name(0x47F1B8, "y_delta_from_step_direction");
set_cmt(0x47F1B8, "y_delta_from_step_direction maps from step direction to Y-coordinate movement\ndelta.", 0);
apply_type (0x47F1B8, "extern int8_t y_delta_from_step_direction[8];", TINFO_DEFINITE);
cleanup("engine_inf");set_name(0x47A474, "engine_inf");
set_cmt(0x47A474, "+Infinity", 0);
apply_type (0x47A474, "extern float engine_inf;", TINFO_DEFINITE);
cleanup("RndInc");set_name(0x47A478, "RndInc");
set_cmt(0x47A478, "RndInc specifies the increment used in the Borland C/C++ pseudo- random\nnumber generator algorithm.\n   seed = RndMult*seed + RndInc\n   seed = 0x15A4E35*seed + 1", 0);
apply_type (0x47A478, "extern const int32_t RndInc;", TINFO_DEFINITE);
cleanup("RndMult");set_name(0x47A47C, "RndMult");
set_cmt(0x47A47C, "RndMult specifies the multiplier used in the Borland C/C++ pseudo- random\nnumber generator algorithm.\n   seed = RndMult*seed + RndInc\n   seed = 0x15A4E35*seed + 1", 0);
apply_type (0x47A47C, "extern const int32_t RndMult;", TINFO_DEFINITE);
cleanup("str_47A544");set_name(0x47A544, "str_47A544");
set_cmt(0x47A544, "\"$Keyboard Shortcuts:|F1:    Open Help Screen|Esc: \"...", 0);
apply_type (0x47A544, "extern char str_47A544[2268];", TINFO_DEFINITE);
cleanup("InvItemWidth");set_name(0x479658, "InvItemWidth");
set_cmt(0x479658, "InvItemWidth maps from objcurs.cel frame number to frame width.", 0);
apply_type (0x479658, "extern uint32_t InvItemWidth[180];", TINFO_DEFINITE);
cleanup("InvItemHeight");set_name(0x479928, "InvItemHeight");
set_cmt(0x479928, "InvItemHeight maps from objcurs.cel frame number to frame height.", 0);
apply_type (0x479928, "extern uint32_t InvItemHeight[180];", TINFO_DEFINITE);
cleanup("log_inf");set_name(0x47F070, "log_inf");
set_cmt(0x47F070, "+Infinity", 0);
apply_type (0x47F070, "extern float log_inf;", TINFO_DEFINITE);
cleanup("interfac_inf");set_name(0x47AE40, "interfac_inf");
set_cmt(0x47AE40, "+Infinity", 0);
apply_type (0x47AE40, "extern float interfac_inf;", TINFO_DEFINITE);
cleanup("progress_bar_colours");set_name(0x47AE44, "progress_bar_colours");
set_cmt(0x47AE44, "progress_bar_colours specifies the colour used for the progress bar as an\nindex into the palette.", 0);
apply_type (0x47AE44, "extern int8_t progress_bar_colours[3];", TINFO_DEFINITE);
cleanup("progress_bar_screen_pos");set_name(0x47AE48, "progress_bar_screen_pos");
set_cmt(0x47AE48, "progress_bar_screen_pos specifies the screen position of the top left corner\nof the progress bar.", 0);
apply_type (0x47AE48, "extern Point progress_bar_screen_pos[3];", TINFO_DEFINITE);
cleanup("fontframe");set_name(0x479424, "fontframe");
set_cmt(0x479424, "fontframe maps from font index to smaltext.cel frame number.", 0);
apply_type (0x479424, "extern uint8_t fontframe[127];", TINFO_DEFINITE);
cleanup("fontkern");set_name(0x4794A4, "fontkern");
set_cmt(0x4794A4, "fontkern maps from smaltext.cel frame number to character width. Note, the\ncharacter width may be distinct from the frame width, which is 13 for every\nsmaltext.cel frame.", 0);
apply_type (0x4794A4, "extern uint8_t fontkern[68];", TINFO_DEFINITE);
cleanup("lineoffset");set_name(0x4794E8, "lineoffset");
set_cmt(0x4794E8, "lineoffset maps from line count and line number pairs to screen offsets\nwithin the description box. The mapping is as follows:\n   * one line\n      * 1st line: 177x430\n   * two lines\n      * 1st line: 177x418\n      * 2nd line: 177x442\n   * three lines\n      * 1st line: 177x412\n      * 2nd line: 177x430\n      * 3rd line: 177x448\n   * four lines\n      * 1st line: 177x408\n      * 2nd line: 177x423\n      * 3rd line: 177x437\n      * 4th line: 177x452\n   * five lines\n      * 1st line: 177x406\n      * 2nd line: 177x418\n      * 3rd line: 177x430\n      * 4th line: 177x442\n      * 5th line: 177x453", 0);
apply_type (0x4794E8, "extern int32_t lineoffset[5][5];", TINFO_DEFINITE);
cleanup("gbFontTransTbl");set_name(0x47954C, "gbFontTransTbl");
set_cmt(0x47954C, "gbFontTransTbl maps ASCII character code to font index, as used by the\nsmall, medium and large sized fonts; which corresponds to smaltext.cel,\nmedtexts.cel and bigtgold.cel respectively.", 0);
apply_type (0x47954C, "extern uint8_t gbFontTransTbl[256];", TINFO_DEFINITE);
cleanup("double_80_0");set_name(0x479650, "double_80_0");
set_cmt(0x479650, "80.0", 0);
apply_type (0x479650, "extern double double_80_0;", TINFO_DEFINITE);
cleanup("wave_inf");set_name(0x4802D4, "wave_inf");
set_cmt(0x4802D4, "+Infinity", 0);
apply_type (0x4802D4, "extern float wave_inf;", TINFO_DEFINITE);
cleanup("text_color_from_player_num");set_name(0x47F230, "text_color_from_player_num");
set_cmt(0x47F230, "text_color_from_player_num maps from player_num to text colour, as used in\nchat messages.", 0);
apply_type (0x47F230, "extern text_color text_color_from_player_num[5];", TINFO_DEFINITE);
cleanup("multi_inf");set_name(0x47F154, "multi_inf");
set_cmt(0x47F154, "+Infinity", 0);
apply_type (0x47F154, "extern float multi_inf;", TINFO_DEFINITE);
cleanup("event_types");set_name(0x47F158, "event_types");
set_cmt(0x47F158, "event_types contains the set of supported event types supported by the\nmultiplayer event handler.", 0);
apply_type (0x47F158, "extern event_type event_types[3];", TINFO_DEFINITE);
cleanup("str_47A480");set_name(0x47A480, "str_47A480");
set_cmt(0x47A480, "\"*unknown*\"", 0);
apply_type (0x47A480, "extern char str_47A480[10];", TINFO_DEFINITE);
cleanup("medtexts_frame_from_font_index");set_name(0x47F078, "medtexts_frame_from_font_index");
set_cmt(0x47F078, "medtexts_frame_from_font_index maps from font index to medtexts.cel frame\nnumber.", 0);
apply_type (0x47F078, "extern int8_t medtexts_frame_from_font_index[127];", TINFO_DEFINITE);
cleanup("medtexts_character_width_from_frame");set_name(0x47F0F8, "medtexts_character_width_from_frame");
set_cmt(0x47F0F8, "medtexts_character_width_from_frame maps from medtexts.cel frame number to\ncharacter width. Note, the character width may be distinct from the frame\nwidth, which is 22 for every medtexts.cel frame.", 0);
apply_type (0x47F0F8, "extern int8_t medtexts_character_width_from_frame[56];", TINFO_DEFINITE);
cleanup("L4ConvTbl");set_name(0x47A2D0, "L4ConvTbl");
set_cmt(0x47A2D0, "L4ConvTbl is a lookup table for the 16 possible patterns of a 2x2 area,\nwhere each cell either contains a SW wall or it doesn't.", 0);
apply_type (0x47A2D0, "extern l4_tile_id L4ConvTbl[16];", TINFO_DEFINITE);
cleanup("L4USTAIRS");set_name(0x47A2E0, "L4USTAIRS");
set_cmt(0x47A2E0, "L4USTAIRS is a 4x5 miniset of tile IDs representing a staircase going up.\nref: graphics/l4/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A2E0, "extern uint8_t L4USTAIRS[42];", TINFO_DEFINITE);
cleanup("L4TWARP");set_name(0x47A30C, "L4TWARP");
set_cmt(0x47A30C, "L4TWARP is a 4x5 miniset of tile IDs representing a staircase going up to\ntown.\nref: graphics/l4/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A30C, "extern uint8_t L4TWARP[42];", TINFO_DEFINITE);
cleanup("L4DSTAIRS");set_name(0x47A338, "L4DSTAIRS");
set_cmt(0x47A338, "L4DSTAIRS is a 5x5 miniset of tile IDs representing a staircase going down.\nref: graphics/l4/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A338, "extern uint8_t L4DSTAIRS[52];", TINFO_DEFINITE);
cleanup("L4PENTA");set_name(0x47A36C, "L4PENTA");
set_cmt(0x47A36C, "L4PENTA is a 5x5 miniset of tile IDs representing a pentagram.\nref: graphics/l4/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A36C, "extern uint8_t L4PENTA[52];", TINFO_DEFINITE);
cleanup("L4PENTA2");set_name(0x47A3A0, "L4PENTA2");
set_cmt(0x47A3A0, "L4PENTA2 is a 5x5 miniset of tile IDs representing a pentagram.\nref: graphics/l4/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A3A0, "extern uint8_t L4PENTA2[52];", TINFO_DEFINITE);
cleanup("L4BTYPES");set_name(0x47A3D4, "L4BTYPES");
set_cmt(0x47A3D4, "L4BTYPES maps tile IDs to their corresponding undecorated tile ID.\nref: graphics/l4/tiles/README.md", 0);
apply_type (0x47A3D4, "extern l4_tile_id L4BTYPES[140];", TINFO_DEFINITE);
cleanup("cow_sfx_id_from_class");set_name(0x4802AC, "cow_sfx_id_from_class");
set_cmt(0x4802AC, "cow_sfx_id_from_class maps from active cow sound effect index and player\nclass to sound effect ID for interacting with cows in Tristram.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/data/towners.cpp#cow_active_sfx_id\n   * https://github.com/sanctuary/notes/blob/master/enums.h#player_class", 0);
apply_type (0x4802AC, "extern sfx_id cow_sfx_id_from_class[3][3];", TINFO_DEFINITE);
cleanup("diablo_inf");set_name(0x479BF8, "diablo_inf");
set_cmt(0x479BF8, "+Infinity", 0);
apply_type (0x479BF8, "extern float diablo_inf;", TINFO_DEFINITE);
cleanup("str_479BFC");set_name(0x479BFC, "str_479BFC");
set_cmt(0x479BFC, "\"dd_emulate\"", 0);
apply_type (0x479BFC, "extern char str_479BFC[11];", TINFO_DEFINITE);
cleanup("str_479C08");set_name(0x479C08, "str_479C08");
set_cmt(0x479C08, "\"dd_backbuf\"", 0);
apply_type (0x479C08, "extern char str_479C08[11];", TINFO_DEFINITE);
cleanup("str_479C14");set_name(0x479C14, "str_479C14");
set_cmt(0x479C14, "\"ds_noduplicates\"", 0);
apply_type (0x479C14, "extern char str_479C14[16];", TINFO_DEFINITE);
cleanup("str_479404");set_name(0x479404, "str_479404");
set_cmt(0x479404, "\"screen??.PCX\"", 0);
apply_type (0x479404, "extern char str_479404[13];", TINFO_DEFINITE);
cleanup("str_479414");set_name(0x479414, "str_479414");
set_cmt(0x479414, "\"screen%02d.PCX\"", 0);
apply_type (0x479414, "extern char str_479414[15];", TINFO_DEFINITE);
cleanup("effects_inf");set_name(0x47A468, "effects_inf");
set_cmt(0x47A468, "+Infinity", 0);
apply_type (0x47A468, "extern float effects_inf;", TINFO_DEFINITE);
cleanup("MonstSndChar");set_name(0x47A46C, "MonstSndChar");
set_cmt(0x47A46C, "MonstSndChar specifies the characters used in the file name of monster\naction sound files (a=attack, h=hit, d=die, s=special attack).", 0);
apply_type (0x47A46C, "extern char MonstSndChar[4];", TINFO_DEFINITE);
cleanup("msg_inf");set_name(0x47F14C, "msg_inf");
set_cmt(0x47F14C, "+Infinity", 0);
apply_type (0x47F14C, "extern float msg_inf;", TINFO_DEFINITE);
cleanup("pfile_inf");set_name(0x47F1C0, "pfile_inf");
set_cmt(0x47F1C0, "+Infinity", 0);
apply_type (0x47F1C0, "extern float pfile_inf;", TINFO_DEFINITE);
cleanup("str_47F1C4");set_name(0x47F1C4, "str_47F1C4");
set_cmt(0x47F1C4, "\"game\"", 0);
apply_type (0x47F1C4, "extern char str_47F1C4[5];", TINFO_DEFINITE);
cleanup("str_47F1CC");set_name(0x47F1CC, "str_47F1CC");
set_cmt(0x47F1CC, "\"hero\"", 0);
apply_type (0x47F1CC, "extern char str_47F1CC[5];", TINFO_DEFINITE);
cleanup("str_47F1D4");set_name(0x47F1D4, "str_47F1D4");
set_cmt(0x47F1D4, "\"perml%02d\"", 0);
apply_type (0x47F1D4, "extern char str_47F1D4[10];", TINFO_DEFINITE);
cleanup("str_47F1E0");set_name(0x47F1E0, "str_47F1E0");
set_cmt(0x47F1E0, "\"perms%02d\"", 0);
apply_type (0x47F1E0, "extern char str_47F1E0[10];", TINFO_DEFINITE);
cleanup("str_47F1EC");set_name(0x47F1EC, "str_47F1EC");
set_cmt(0x47F1EC, "\"templ%02d\"", 0);
apply_type (0x47F1EC, "extern char str_47F1EC[10];", TINFO_DEFINITE);
cleanup("str_47F1F8");set_name(0x47F1F8, "str_47F1F8");
set_cmt(0x47F1F8, "\"temps%02d\"", 0);
apply_type (0x47F1F8, "extern char str_47F1F8[10];", TINFO_DEFINITE);
cleanup("palette_inf");set_name(0x47F16C, "palette_inf");
set_cmt(0x47F16C, "+Infinity", 0);
apply_type (0x47F16C, "extern float palette_inf;", TINFO_DEFINITE);
cleanup("str_47F170");set_name(0x47F170, "str_47F170");
set_cmt(0x47F170, "\"Gamma Correction\"", 0);
apply_type (0x47F170, "extern char str_47F170[17];", TINFO_DEFINITE);
cleanup("str_47F184");set_name(0x47F184, "str_47F184");
set_cmt(0x47F184, "\"Color Cycling\"", 0);
apply_type (0x47F184, "extern char str_47F184[14];", TINFO_DEFINITE);
cleanup("double_256_0");set_name(0x47F198, "double_256_0");
set_cmt(0x47F198, "256.0", 0);
apply_type (0x47F198, "extern double double_256_0;", TINFO_DEFINITE);
cleanup("double_0_00390625");set_name(0x47F1A0, "double_0_00390625");
set_cmt(0x47F1A0, "0.00390625", 0);
apply_type (0x47F1A0, "extern double double_0_00390625;", TINFO_DEFINITE);
cleanup("double_0_01");set_name(0x47F1A8, "double_0_01");
set_cmt(0x47F1A8, "0.01", 0);
apply_type (0x47F1A8, "extern double double_0_01;", TINFO_DEFINITE);
cleanup("double_minus_0_5");set_name(0x47F048, "double_minus_0_5");
set_cmt(0x47F048, "-0.5", 0);
apply_type (0x47F048, "extern double double_minus_0_5;", TINFO_DEFINITE);
cleanup("double_0_0");set_name(0x47F050, "double_0_0");
set_cmt(0x47F050, "0.0", 0);
apply_type (0x47F050, "extern double double_0_0;", TINFO_DEFINITE);
cleanup("double_0_5");set_name(0x47F058, "double_0_5");
set_cmt(0x47F058, "0.5", 0);
apply_type (0x47F058, "extern double double_0_5;", TINFO_DEFINITE);
cleanup("double_8_0");set_name(0x47F060, "double_8_0");
set_cmt(0x47F060, "8.0", 0);
apply_type (0x47F060, "extern double double_8_0;", TINFO_DEFINITE);
cleanup("double_15_0");set_name(0x47F068, "double_15_0");
set_cmt(0x47F068, "15.0", 0);
apply_type (0x47F068, "extern double double_15_0;", TINFO_DEFINITE);
cleanup("monster_inf");set_name(0x47F130, "monster_inf");
set_cmt(0x47F130, "+Infinity", 0);
apply_type (0x47F130, "extern float monster_inf;", TINFO_DEFINITE);
cleanup("inv_screen_pos");set_name(0x47AE60, "inv_screen_pos");
set_cmt(0x47AE60, "inv_screen_pos maps from inventory slot to screen position. The inventory\nslots are arranged as follows:\n                            00 01\n                            02 03   06\n                07 08       19 20       13 14\n                09 10       21 22       15 16\n                11 12       23 24       17 18\n                   04                   05\n                25 26 27 28 29 30 31 32 33 34\n                35 36 37 38 39 40 41 42 43 44\n                45 46 47 48 49 50 51 52 53 54\n                55 56 57 58 59 60 61 62 63 64\n   65 66 67 68 69 70 71 72\nReferences:\n   * https://raw.githubusercontent.com/sanctuary/graphics/master/inventory.png", 0);
apply_type (0x47AE60, "extern Point inv_screen_pos[73];", TINFO_DEFINITE);
cleanup("dthread_inf");set_name(0x47A460, "dthread_inf");
set_cmt(0x47A460, "+Infinity", 0);
apply_type (0x47A460, "extern float dthread_inf;", TINFO_DEFINITE);
cleanup("SPATS");set_name(0x479C24, "SPATS");
set_cmt(0x479C24, "SPATS contains shadows for 2x2 blocks of base tile IDs in the Cathedral.\nref: graphics/l1/shadow/README.md", 0);
apply_type (0x479C24, "extern Shadow SPATS[37];", TINFO_DEFINITE);
cleanup("BSTYPES");set_name(0x479D28, "BSTYPES");
set_cmt(0x479D28, "BSTYPES maps tile IDs to their corresponding base tile ID.\nref: graphics/l1/tiles/base.md", 0);
apply_type (0x479D28, "extern l1_tile_id BSTYPES[207];", TINFO_DEFINITE);
cleanup("L5BTYPES");set_name(0x479DF8, "L5BTYPES");
set_cmt(0x479DF8, "L5BTYPES maps tile IDs to their corresponding undecorated tile ID.\nref: graphics/l1/tiles/README.md", 0);
apply_type (0x479DF8, "extern l1_tile_id L5BTYPES[207];", TINFO_DEFINITE);
cleanup("STAIRSUP");set_name(0x479EC8, "STAIRSUP");
set_cmt(0x479EC8, "STAIRSUP is a 4x4 miniset of tile IDs representing a staircase going up.\nref: graphics/l1/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x479EC8, "extern uint8_t STAIRSUP[34];", TINFO_DEFINITE);
cleanup("L5STAIRSUP");set_name(0x479EEC, "L5STAIRSUP");
set_cmt(0x479EEC, "L5STAIRSUP is a 4x4 miniset of tile IDs representing a staircase going up.\nref: graphics/l1/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x479EEC, "extern uint8_t L5STAIRSUP[34];", TINFO_DEFINITE);
cleanup("STAIRSDOWN");set_name(0x479F10, "STAIRSDOWN");
set_cmt(0x479F10, "STAIRSDOWN is a 4x3 miniset of tile IDs representing a staircase going\ndown.\nref: graphics/l1/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x479F10, "extern uint8_t STAIRSDOWN[26];", TINFO_DEFINITE);
cleanup("LAMPS");set_name(0x479F2C, "LAMPS");
set_cmt(0x479F2C, "LAMPS is a 2x2 miniset of tile IDs representing a candlestick.\nref: graphics/l1/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x479F2C, "extern uint8_t LAMPS[10];", TINFO_DEFINITE);
cleanup("PWATERIN");set_name(0x479F38, "PWATERIN");
set_cmt(0x479F38, "PWATERIN is a 6x6 miniset of tile IDs representing a staircase\ngoing down to the Poisoned Water Supply.\nref: graphics/l1/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x479F38, "extern uint8_t PWATERIN[74];", TINFO_DEFINITE);
cleanup("bigtgold_frame_from_font_index");set_name(0x47A48C, "bigtgold_frame_from_font_index");
set_cmt(0x47A48C, "bigtgold_frame_from_font_index maps from font index to bigtgold.cel\nframe number.", 0);
apply_type (0x47A48C, "extern int8_t bigtgold_frame_from_font_index[127];", TINFO_DEFINITE);
cleanup("bigtgold_character_width_from_frame");set_name(0x47A50C, "bigtgold_character_width_from_frame");
set_cmt(0x47A50C, "bigtgold_character_width_from_frame maps from bigtgold.cel frame number to\ncharacter width. Note, the character width may be distinct from the frame\nwidth, which is 46 for every bigtgold.cel frame.", 0);
apply_type (0x47A50C, "extern int8_t bigtgold_character_width_from_frame[56];", TINFO_DEFINITE);
cleanup("speech_data");set_name(0x47F278, "speech_data");
set_cmt(0x47F278, "speech_data contains the data related to each speech ID.\nReferences:\n   * https://github.com/sanctuary/notes/blob/master/enums.h#speech_id", 0);
apply_type (0x47F278, "extern SpeechData speech_data[259];", TINFO_DEFINITE);
cleanup("mpqapi_inf");set_name(0x47F148, "mpqapi_inf");
set_cmt(0x47F148, "+Infinity", 0);
apply_type (0x47F148, "extern float mpqapi_inf;", TINFO_DEFINITE);
cleanup("init_inf");set_name(0x47AE20, "init_inf");
set_cmt(0x47AE20, "+Infinity", 0);
apply_type (0x47AE20, "extern float init_inf;", TINFO_DEFINITE);
cleanup("str_47AE24");set_name(0x47AE24, "str_47AE24");
set_cmt(0x47AE24, "\"DIABLO\"", 0);
apply_type (0x47AE24, "extern char str_47AE24[7];", TINFO_DEFINITE);
cleanup("str_47AE2C");set_name(0x47AE2C, "str_47AE2C");
set_cmt(0x47AE2C, "\"ScreenSaveActive\"", 0);
apply_type (0x47AE2C, "extern char str_47AE2C[17];", TINFO_DEFINITE);
cleanup("msgcmd_inf");set_name(0x47F150, "msgcmd_inf");
set_cmt(0x47F150, "+Infinity", 0);
apply_type (0x47F150, "extern float msgcmd_inf;", TINFO_DEFINITE);
cleanup("nthread_inf");set_name(0x47F164, "nthread_inf");
set_cmt(0x47F164, "+Infinity", 0);
apply_type (0x47F164, "extern float nthread_inf;", TINFO_DEFINITE);
cleanup("sound_inf");set_name(0x47F24C, "sound_inf");
set_cmt(0x47F24C, "+Infinity", 0);
apply_type (0x47F24C, "extern float sound_inf;", TINFO_DEFINITE);
cleanup("str_47F250");set_name(0x47F250, "str_47F250");
set_cmt(0x47F250, "\"Sound Volume\"", 0);
apply_type (0x47F250, "extern char str_47F250[13];", TINFO_DEFINITE);
cleanup("str_47F260");set_name(0x47F260, "str_47F260");
set_cmt(0x47F260, "\"Music Volume\"", 0);
apply_type (0x47F260, "extern char str_47F260[13];", TINFO_DEFINITE);
cleanup("str_47F270");set_name(0x47F270, "str_47F270");
set_cmt(0x47F270, "\"Diablo\"", 0);
apply_type (0x47F270, "extern char str_47F270[7];", TINFO_DEFINITE);
cleanup("track_inf");set_name(0x4802D0, "track_inf");
set_cmt(0x4802D0, "+Infinity", 0);
apply_type (0x4802D0, "extern float track_inf;", TINFO_DEFINITE);
cleanup("scrollrt_inf");set_name(0x47F238, "scrollrt_inf");
set_cmt(0x47F238, "+Infinity", 0);
apply_type (0x47F238, "extern float scrollrt_inf;", TINFO_DEFINITE);
cleanup("str_47F23C");set_name(0x47F23C, "str_47F23C");
set_cmt(0x47F23C, "\"unknown action\"", 0);
apply_type (0x47F23C, "extern char str_47F23C[15];", TINFO_DEFINITE);
cleanup("L3ConvTbl");set_name(0x479F84, "L3ConvTbl");
set_cmt(0x479F84, "L3ConvTbl is a lookup table for the 16 possible patterns of a 2x2 area,\nwhere each cell either contains a SW wall or it doesn't.", 0);
apply_type (0x479F84, "extern l3_tile_id L3ConvTbl[16];", TINFO_DEFINITE);
cleanup("L3UP");set_name(0x479F94, "L3UP");
set_cmt(0x479F94, "L3UP is a 3x3 miniset of tile IDs representing a staircase going up.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x479F94, "extern uint8_t L3UP[20];", TINFO_DEFINITE);
cleanup("L3DOWN");set_name(0x479FA8, "L3DOWN");
set_cmt(0x479FA8, "L3DOWN is a 3x3 miniset of tile IDs representing a staircase going down.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x479FA8, "extern uint8_t L3DOWN[20];", TINFO_DEFINITE);
cleanup("L3HOLDWARP");set_name(0x479FBC, "L3HOLDWARP");
set_cmt(0x479FBC, "L3HOLDWARP is a 3x3 miniset of tile IDs representing a staircase going up to\ntown.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x479FBC, "extern uint8_t L3HOLDWARP[20];", TINFO_DEFINITE);
cleanup("L3TITE1");set_name(0x479FD0, "L3TITE1");
set_cmt(0x479FD0, "L3TITE1 is a 4x4 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x479FD0, "extern uint8_t L3TITE1[34];", TINFO_DEFINITE);
cleanup("L3TITE2");set_name(0x479FF4, "L3TITE2");
set_cmt(0x479FF4, "L3TITE2 is a 4x4 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x479FF4, "extern uint8_t L3TITE2[34];", TINFO_DEFINITE);
cleanup("L3TITE3");set_name(0x47A018, "L3TITE3");
set_cmt(0x47A018, "L3TITE3 is a 4x4 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A018, "extern uint8_t L3TITE3[34];", TINFO_DEFINITE);
cleanup("L3TITE6");set_name(0x47A03C, "L3TITE6");
set_cmt(0x47A03C, "L3TITE6 is a 5x4 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A03C, "extern uint8_t L3TITE6[42];", TINFO_DEFINITE);
cleanup("L3TITE7");set_name(0x47A068, "L3TITE7");
set_cmt(0x47A068, "L3TITE7 is a 4x5 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A068, "extern uint8_t L3TITE7[42];", TINFO_DEFINITE);
cleanup("L3TITE8");set_name(0x47A094, "L3TITE8");
set_cmt(0x47A094, "L3TITE8 is a 3x3 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A094, "extern uint8_t L3TITE8[20];", TINFO_DEFINITE);
cleanup("L3TITE9");set_name(0x47A0A8, "L3TITE9");
set_cmt(0x47A0A8, "L3TITE9 is a 3x3 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A0A8, "extern uint8_t L3TITE9[20];", TINFO_DEFINITE);
cleanup("L3TITE10");set_name(0x47A0BC, "L3TITE10");
set_cmt(0x47A0BC, "L3TITE10 is a 3x3 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A0BC, "extern uint8_t L3TITE10[20];", TINFO_DEFINITE);
cleanup("L3TITE11");set_name(0x47A0D0, "L3TITE11");
set_cmt(0x47A0D0, "L3TITE11 is a 3x3 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A0D0, "extern uint8_t L3TITE11[20];", TINFO_DEFINITE);
cleanup("L3TITE12");set_name(0x47A0E4, "L3TITE12");
set_cmt(0x47A0E4, "L3TITE12 is a 2x1 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A0E4, "extern uint8_t L3TITE12[6];", TINFO_DEFINITE);
cleanup("L3TITE13");set_name(0x47A0EC, "L3TITE13");
set_cmt(0x47A0EC, "L3TITE13 is a 1x2 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A0EC, "extern uint8_t L3TITE13[6];", TINFO_DEFINITE);
cleanup("L3CREV1");set_name(0x47A0F4, "L3CREV1");
set_cmt(0x47A0F4, "L3CREV1 is a 2x1 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A0F4, "extern uint8_t L3CREV1[6];", TINFO_DEFINITE);
cleanup("L3CREV2");set_name(0x47A0FC, "L3CREV2");
set_cmt(0x47A0FC, "L3CREV2 is a 2x1 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A0FC, "extern uint8_t L3CREV2[6];", TINFO_DEFINITE);
cleanup("L3CREV3");set_name(0x47A104, "L3CREV3");
set_cmt(0x47A104, "L3CREV3 is a 1x2 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A104, "extern uint8_t L3CREV3[6];", TINFO_DEFINITE);
cleanup("L3CREV4");set_name(0x47A10C, "L3CREV4");
set_cmt(0x47A10C, "L3CREV4 is a 2x1 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A10C, "extern uint8_t L3CREV4[6];", TINFO_DEFINITE);
cleanup("L3CREV5");set_name(0x47A114, "L3CREV5");
set_cmt(0x47A114, "L3CREV5 is a 1x2 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A114, "extern uint8_t L3CREV5[6];", TINFO_DEFINITE);
cleanup("L3CREV6");set_name(0x47A11C, "L3CREV6");
set_cmt(0x47A11C, "L3CREV6 is a 1x2 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A11C, "extern uint8_t L3CREV6[6];", TINFO_DEFINITE);
cleanup("L3CREV7");set_name(0x47A124, "L3CREV7");
set_cmt(0x47A124, "L3CREV7 is a 2x1 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A124, "extern uint8_t L3CREV7[6];", TINFO_DEFINITE);
cleanup("L3CREV8");set_name(0x47A12C, "L3CREV8");
set_cmt(0x47A12C, "L3CREV8 is a 1x2 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A12C, "extern uint8_t L3CREV8[6];", TINFO_DEFINITE);
cleanup("L3CREV9");set_name(0x47A134, "L3CREV9");
set_cmt(0x47A134, "L3CREV9 is a 2x1 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A134, "extern uint8_t L3CREV9[6];", TINFO_DEFINITE);
cleanup("L3CREV10");set_name(0x47A13C, "L3CREV10");
set_cmt(0x47A13C, "L3CREV10 is a 2x1 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A13C, "extern uint8_t L3CREV10[6];", TINFO_DEFINITE);
cleanup("L3CREV11");set_name(0x47A144, "L3CREV11");
set_cmt(0x47A144, "L3CREV11 is a 1x2 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A144, "extern uint8_t L3CREV11[6];", TINFO_DEFINITE);
cleanup("L3ISLE1");set_name(0x47A14C, "L3ISLE1");
set_cmt(0x47A14C, "L3ISLE1 is a 2x3 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A14C, "extern uint8_t L3ISLE1[14];", TINFO_DEFINITE);
cleanup("L3ISLE2");set_name(0x47A15C, "L3ISLE2");
set_cmt(0x47A15C, "L3ISLE2 is a 3x2 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A15C, "extern uint8_t L3ISLE2[14];", TINFO_DEFINITE);
cleanup("L3ISLE3");set_name(0x47A16C, "L3ISLE3");
set_cmt(0x47A16C, "L3ISLE3 is a 2x3 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A16C, "extern uint8_t L3ISLE3[14];", TINFO_DEFINITE);
cleanup("L3ISLE4");set_name(0x47A17C, "L3ISLE4");
set_cmt(0x47A17C, "L3ISLE4 is a 3x2 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A17C, "extern uint8_t L3ISLE4[14];", TINFO_DEFINITE);
cleanup("L3ISLE5");set_name(0x47A18C, "L3ISLE5");
set_cmt(0x47A18C, "L3ISLE5 is a 2x2 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A18C, "extern uint8_t L3ISLE5[10];", TINFO_DEFINITE);
cleanup("L3XTRA1");set_name(0x47A198, "L3XTRA1");
set_cmt(0x47A198, "L3XTRA1 is a 1x1 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A198, "extern uint8_t L3XTRA1[4];", TINFO_DEFINITE);
cleanup("L3XTRA2");set_name(0x47A19C, "L3XTRA2");
set_cmt(0x47A19C, "L3XTRA2 is a 1x1 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A19C, "extern uint8_t L3XTRA2[4];", TINFO_DEFINITE);
cleanup("L3XTRA3");set_name(0x47A1A0, "L3XTRA3");
set_cmt(0x47A1A0, "L3XTRA3 is a 1x1 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A1A0, "extern uint8_t L3XTRA3[4];", TINFO_DEFINITE);
cleanup("L3XTRA4");set_name(0x47A1A4, "L3XTRA4");
set_cmt(0x47A1A4, "L3XTRA4 is a 1x1 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A1A4, "extern uint8_t L3XTRA4[4];", TINFO_DEFINITE);
cleanup("L3XTRA5");set_name(0x47A1A8, "L3XTRA5");
set_cmt(0x47A1A8, "L3XTRA5 is a 1x1 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A1A8, "extern uint8_t L3XTRA5[4];", TINFO_DEFINITE);
cleanup("L3ANVIL");set_name(0x47A1AC, "L3ANVIL");
set_cmt(0x47A1AC, "L3ANVIL is a 11x11 miniset of tile IDs representing a TODO.\nref: graphics/l3/minisets/README.md\nMinisets specifies how to arrange tile IDs in order to form set areas of\ndungeons (e.g. staircases). Below follows a pseudo-code description of the\nminiset format.\n   // A miniset defines the set area of a dungeon in terms of before and\n   // after areas of tile IDs.\n   type miniset struct {\n      // Width of miniset area.\n      width uint8\n      // Height of miniset area.\n      height uint8\n      // Tile IDs before transformation.\n      before [width][height]uint8\n      // Tile IDs after transformation.\n      after [width][height]uint8\n   }", 0);
apply_type (0x47A1AC, "extern uint8_t L3ANVIL[244];", TINFO_DEFINITE);
cleanup("L3SpawnTbl1");set_name(0x47A2A0, "L3SpawnTbl1");
set_cmt(0x47A2A0, "L3SpawnTbl1 maps from tile ID to a bitfield indicating the X-Y offset by\nwhich DRLG_L3Spawn is recursively invoked.", 0);
apply_type (0x47A2A0, "extern uint8_t L3SpawnTbl1[15];", TINFO_DEFINITE);
cleanup("L3SpawnTbl2");set_name(0x47A2B0, "L3SpawnTbl2");
set_cmt(0x47A2B0, "L3SpawnTbl2 maps from tile ID to a bitfield indicating the X-Y offset by\nwhich DRLG_L3SpawnEdge is recursively invoked.", 0);
apply_type (0x47A2B0, "extern uint8_t L3SpawnTbl2[15];", TINFO_DEFINITE);
cleanup("L3PoolSub");set_name(0x47A2C0, "L3PoolSub");
set_cmt(0x47A2C0, "L3PoolSub maps from tile ID the substitution tile ID used to place a lava\npool on the map.", 0);
apply_type (0x47A2C0, "extern uint8_t L3PoolSub[15];", TINFO_DEFINITE);
cleanup("item_prefix_data");set_name(0x47B0A8, "item_prefix_data");
set_cmt(0x47B0A8, "item_prefix_data contains the data related to each item prefix.", 0);
apply_type (0x47B0A8, "extern ItemAffixData item_prefix_data[84];", TINFO_DEFINITE);
cleanup("item_suffix_data");set_name(0x47C068, "item_suffix_data");
set_cmt(0x47C068, "item_suffix_data contains the data related to each item suffix.", 0);
apply_type (0x47C068, "extern ItemAffixData item_suffix_data[96];", TINFO_DEFINITE);
cleanup("unique_item_data");set_name(0x47D268, "unique_item_data");
set_cmt(0x47D268, "unique_item_data contains the data related to each unique item ID.", 0);
apply_type (0x47D268, "extern UniqueItemData unique_item_data[91];", TINFO_DEFINITE);
}
